	.text
	.file	"context_ini.c"
	.globl	create_context_memory   # -- Begin function create_context_memory
	.p2align	4, 0x90
	.type	create_context_memory,@function
create_context_memory:                  # @create_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_create_context_memory.2
	callq	create_context_memory.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_create_context_memory.4
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.4
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_create_context_memory.5
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_create_context_memory.27
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_create_context_memory.44
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.44
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_create_context_memory.46
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.46
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_create_context_memory.48
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_create_context_memory.50
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.50
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_create_context_memory.55
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.55
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_create_context_memory.62
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.62
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_create_context_memory.73
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_create_context_memory.75
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.75
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_create_context_memory.77
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.77
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_create_context_memory.82
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.82
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_create_context_memory.83
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_create_context_memory.84
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	create_context_memory, .Lfunc_end0-create_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory     # -- Begin function free_context_memory
	.p2align	4, 0x90
	.type	free_context_memory,@function
free_context_memory:                    # @free_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_free_context_memory.13
	callq	free_context_memory.13
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_free_context_memory.14
	.cfi_def_cfa %rbp, 16
	callq	free_context_memory.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	free_context_memory, .Lfunc_end1-free_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber       # -- Begin function SetCtxModelNumber
	.p2align	4, 0x90
	.type	SetCtxModelNumber,@function
SetCtxModelNumber:                      # @SetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_7
# %bb.1:                                # %func_SetCtxModelNumber.1
	callq	SetCtxModelNumber.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_SetCtxModelNumber.25
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.25
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_SetCtxModelNumber.26
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_SetCtxModelNumber.33
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_SetCtxModelNumber.38
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_SetCtxModelNumber.43
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
	jmp	.LBB2_6
.Lfunc_end2:
	.size	SetCtxModelNumber, .Lfunc_end2-SetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts           # -- Begin function init_contexts
	.p2align	4, 0x90
	.type	init_contexts,@function
init_contexts:                          # @init_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_init_contexts.6
	callq	init_contexts.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_init_contexts.12
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_init_contexts.15
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_init_contexts.16
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.16
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_init_contexts.29
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.29
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_init_contexts.32
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_init_contexts.36
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.36
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_init_contexts.40
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.40
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_init_contexts.41
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.41
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_init_contexts.51
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.51
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_init_contexts.52
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_init_contexts.53
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.53
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_init_contexts.56
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.56
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_init_contexts.57
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.57
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_init_contexts.63
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_init_contexts.68
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.68
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	init_contexts, .Lfunc_end3-init_contexts
	.cfi_endproc
                                        # -- End function
	.globl	XRate                   # -- Begin function XRate
	.p2align	4, 0x90
	.type	XRate,@function
XRate:                                  # @XRate
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_17
# %bb.1:                                # %func_XRate.11
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.11
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_XRate.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.21
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_XRate.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.22
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_XRate.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_XRate.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_XRate.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.31
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_XRate.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_XRate.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %func_XRate.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_10:                               # %func_XRate.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_11:                               # %func_XRate.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_12:                               # %func_XRate.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_13:                               # %func_XRate.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_14:                               # %func_XRate.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.65
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_15:                               # %func_XRate.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.72
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_16:                               # %func_XRate.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.79
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB4_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB4_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB4_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB4_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB4_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB4_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB4_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB4_15
	jmp	.LBB4_16
.Lfunc_end4:
	.size	XRate, .Lfunc_end4-XRate
	.cfi_endproc
                                        # -- End function
	.globl	GetCtxModelNumber       # -- Begin function GetCtxModelNumber
	.p2align	4, 0x90
	.type	GetCtxModelNumber,@function
GetCtxModelNumber:                      # @GetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_GetCtxModelNumber.9
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_GetCtxModelNumber.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_GetCtxModelNumber.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_GetCtxModelNumber.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_GetCtxModelNumber.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_GetCtxModelNumber.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_GetCtxModelNumber.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_GetCtxModelNumber.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.67
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_GetCtxModelNumber.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_GetCtxModelNumber.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_GetCtxModelNumber.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_GetCtxModelNumber.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.74
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_GetCtxModelNumber.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.76
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_GetCtxModelNumber.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.78
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_GetCtxModelNumber.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.80
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_GetCtxModelNumber.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.81
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	GetCtxModelNumber, .Lfunc_end5-GetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts          # -- Begin function store_contexts
	.p2align	4, 0x90
	.type	store_contexts,@function
store_contexts:                         # @store_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_7
# %bb.1:                                # %func_store_contexts.8
	callq	store_contexts.8
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_store_contexts.17
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.17
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_store_contexts.19
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.19
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_store_contexts.20
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_store_contexts.24
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.24
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_store_contexts.37
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.37
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
	jmp	.LBB6_6
.Lfunc_end6:
	.size	store_contexts, .Lfunc_end6-store_contexts
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts # -- Begin function update_field_frame_contexts
	.p2align	4, 0x90
	.type	update_field_frame_contexts,@function
update_field_frame_contexts:            # @update_field_frame_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_7
# %bb.1:                                # %func_update_field_frame_contexts.3
	movl	%ebx, %edi
	callq	update_field_frame_contexts.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_update_field_frame_contexts.7
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.7
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_update_field_frame_contexts.10
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_update_field_frame_contexts.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_update_field_frame_contexts.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.30
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_update_field_frame_contexts.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.35
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
	jmp	.LBB7_6
.Lfunc_end7:
	.size	update_field_frame_contexts, .Lfunc_end7-update_field_frame_contexts
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.1     # -- Begin function SetCtxModelNumber.1
	.p2align	4, 0x90
	.type	SetCtxModelNumber.1,@function
SetCtxModelNumber.1:                    # @SetCtxModelNumber.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2035322612, -16(%rbp)  # imm = 0x79508EF4
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB8_11
.LBB8_2:                                # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB8_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB8_11
.LBB8_4:                                # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB8_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB8_11
.LBB8_6:                                # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB8_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB8_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB8_10
.LBB8_9:                                # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB8_10:                               # %if.end38
	jmp	.LBB8_11
.LBB8_11:                               # %if.end39
	cmpl	$2035322612, -16(%rbp)  # imm = 0x79508EF4
	jne	.LBB8_13
.LBB8_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_13:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_12
.Lfunc_end8:
	.size	SetCtxModelNumber.1, .Lfunc_end8-SetCtxModelNumber.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.2
.LCPI9_0:
	.quad	4611686018427387904     # double 2
.LCPI9_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.2
	.p2align	4, 0x90
	.type	create_context_memory.2,@function
create_context_memory.2:                # @create_context_memory.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$257117807, -20(%rbp)   # imm = 0xF534E6F
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB9_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB9_3
.LBB9_2:                                # %cond.false
	movl	-16(%rbp), %eax
.LBB9_3:                                # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB9_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_5:                                # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB9_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_7:                                # %if.end5
	movl	$0, -4(%rbp)
.LBB9_8:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB9_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_11:                               # %if.end10
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_13:                               # %if.end16
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$0, -8(%rbp)
.LBB9_14:                               # %for.cond17
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB9_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB9_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB9_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_17:                               # %if.end28
                                        #   in Loop: Header=BB9_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB9_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_19:                               # %if.end39
                                        #   in Loop: Header=BB9_14 Depth=2
	jmp	.LBB9_20
.LBB9_20:                               # %for.inc
                                        #   in Loop: Header=BB9_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_14
.LBB9_21:                               # %for.end
                                        #   in Loop: Header=BB9_8 Depth=1
	jmp	.LBB9_22
.LBB9_22:                               # %for.inc40
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_8
.LBB9_23:                               # %for.end42
	movl	$0, -4(%rbp)
.LBB9_24:                               # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_26 Depth 2
                                        #       Child Loop BB9_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB9_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB9_24 Depth=1
	movl	$0, -8(%rbp)
.LBB9_26:                               # %for.cond47
                                        #   Parent Loop BB9_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB9_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB9_26 Depth=2
	movl	$0, -12(%rbp)
.LBB9_28:                               # %for.cond51
                                        #   Parent Loop BB9_24 Depth=1
                                        #     Parent Loop BB9_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB9_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB9_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB9_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_28
.LBB9_31:                               # %for.end63
                                        #   in Loop: Header=BB9_26 Depth=2
	jmp	.LBB9_32
.LBB9_32:                               # %for.inc64
                                        #   in Loop: Header=BB9_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_26
.LBB9_33:                               # %for.end66
                                        #   in Loop: Header=BB9_24 Depth=1
	jmp	.LBB9_34
.LBB9_34:                               # %for.inc67
                                        #   in Loop: Header=BB9_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_24
.LBB9_35:                               # %for.end69
	movl	$0, -4(%rbp)
.LBB9_36:                               # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB9_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB9_36 Depth=1
	vmovsd	.LCPI9_1(%rip), %xmm0   # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB9_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_36
.LBB9_39:                               # %for.end98
	cmpl	$257117807, -20(%rbp)   # imm = 0xF534E6F
	jne	.LBB9_41
.LBB9_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_41:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_40
.Lfunc_end9:
	.size	create_context_memory.2, .Lfunc_end9-create_context_memory.2
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.3 # -- Begin function update_field_frame_contexts.3
	.p2align	4, 0x90
	.type	update_field_frame_contexts.3,@function
update_field_frame_contexts.3:          # @update_field_frame_contexts.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1189232600, -16(%rbp)  # imm = 0x46E23FD8
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB10_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB10_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB10_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB10_2 Depth=1
	movl	$0, -4(%rbp)
.LBB10_4:                               # %for.cond1
                                        #   Parent Loop BB10_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB10_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB10_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB10_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_4
.LBB10_7:                               # %for.end
                                        #   in Loop: Header=BB10_2 Depth=1
	jmp	.LBB10_8
.LBB10_8:                               # %for.inc23
                                        #   in Loop: Header=BB10_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_2
.LBB10_9:                               # %for.end25
	jmp	.LBB10_19
.LBB10_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB10_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB10_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB10_11 Depth=1
	movl	$0, -4(%rbp)
.LBB10_13:                              # %for.cond29
                                        #   Parent Loop BB10_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB10_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB10_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_13
.LBB10_16:                              # %for.end56
                                        #   in Loop: Header=BB10_11 Depth=1
	jmp	.LBB10_17
.LBB10_17:                              # %for.inc57
                                        #   in Loop: Header=BB10_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_11
.LBB10_18:                              # %for.end59
	jmp	.LBB10_19
.LBB10_19:                              # %if.end
	cmpl	$1189232600, -16(%rbp)  # imm = 0x46E23FD8
	jne	.LBB10_21
.LBB10_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_20
.Lfunc_end10:
	.size	update_field_frame_contexts.3, .Lfunc_end10-update_field_frame_contexts.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.4
.LCPI11_0:
	.quad	4611686018427387904     # double 2
.LCPI11_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.4
	.p2align	4, 0x90
	.type	create_context_memory.4,@function
create_context_memory.4:                # @create_context_memory.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$683407730, -20(%rbp)   # imm = 0x28BBF972
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB11_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB11_3
.LBB11_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB11_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB11_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB11_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB11_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB11_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB11_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB11_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB11_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB11_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB11_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB11_11:                              # %if.end10
                                        #   in Loop: Header=BB11_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB11_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB11_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB11_13:                              # %if.end16
                                        #   in Loop: Header=BB11_8 Depth=1
	movl	$0, -8(%rbp)
.LBB11_14:                              # %for.cond17
                                        #   Parent Loop BB11_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB11_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB11_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB11_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB11_17:                              # %if.end28
                                        #   in Loop: Header=BB11_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB11_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB11_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB11_19:                              # %if.end39
                                        #   in Loop: Header=BB11_14 Depth=2
	jmp	.LBB11_20
.LBB11_20:                              # %for.inc
                                        #   in Loop: Header=BB11_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_14
.LBB11_21:                              # %for.end
                                        #   in Loop: Header=BB11_8 Depth=1
	jmp	.LBB11_22
.LBB11_22:                              # %for.inc40
                                        #   in Loop: Header=BB11_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_8
.LBB11_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB11_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_26 Depth 2
                                        #       Child Loop BB11_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB11_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB11_24 Depth=1
	movl	$0, -8(%rbp)
.LBB11_26:                              # %for.cond47
                                        #   Parent Loop BB11_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB11_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB11_26 Depth=2
	movl	$0, -12(%rbp)
.LBB11_28:                              # %for.cond51
                                        #   Parent Loop BB11_24 Depth=1
                                        #     Parent Loop BB11_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB11_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB11_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB11_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_28
.LBB11_31:                              # %for.end63
                                        #   in Loop: Header=BB11_26 Depth=2
	jmp	.LBB11_32
.LBB11_32:                              # %for.inc64
                                        #   in Loop: Header=BB11_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_26
.LBB11_33:                              # %for.end66
                                        #   in Loop: Header=BB11_24 Depth=1
	jmp	.LBB11_34
.LBB11_34:                              # %for.inc67
                                        #   in Loop: Header=BB11_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_24
.LBB11_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB11_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB11_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB11_36 Depth=1
	vmovsd	.LCPI11_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB11_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_36
.LBB11_39:                              # %for.end98
	cmpl	$683407730, -20(%rbp)   # imm = 0x28BBF972
	jne	.LBB11_41
.LBB11_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_40
.Lfunc_end11:
	.size	create_context_memory.4, .Lfunc_end11-create_context_memory.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.5
.LCPI12_0:
	.quad	4611686018427387904     # double 2
.LCPI12_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.5
	.p2align	4, 0x90
	.type	create_context_memory.5,@function
create_context_memory.5:                # @create_context_memory.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$786258885, -20(%rbp)   # imm = 0x2EDD5BC5
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB12_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB12_3
.LBB12_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB12_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB12_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB12_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB12_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB12_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB12_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB12_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB12_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB12_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB12_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB12_11:                              # %if.end10
                                        #   in Loop: Header=BB12_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB12_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB12_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB12_13:                              # %if.end16
                                        #   in Loop: Header=BB12_8 Depth=1
	movl	$0, -8(%rbp)
.LBB12_14:                              # %for.cond17
                                        #   Parent Loop BB12_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB12_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB12_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB12_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB12_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB12_17:                              # %if.end28
                                        #   in Loop: Header=BB12_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB12_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB12_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB12_19:                              # %if.end39
                                        #   in Loop: Header=BB12_14 Depth=2
	jmp	.LBB12_20
.LBB12_20:                              # %for.inc
                                        #   in Loop: Header=BB12_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_14
.LBB12_21:                              # %for.end
                                        #   in Loop: Header=BB12_8 Depth=1
	jmp	.LBB12_22
.LBB12_22:                              # %for.inc40
                                        #   in Loop: Header=BB12_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_8
.LBB12_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB12_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_26 Depth 2
                                        #       Child Loop BB12_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB12_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB12_24 Depth=1
	movl	$0, -8(%rbp)
.LBB12_26:                              # %for.cond47
                                        #   Parent Loop BB12_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB12_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB12_26 Depth=2
	movl	$0, -12(%rbp)
.LBB12_28:                              # %for.cond51
                                        #   Parent Loop BB12_24 Depth=1
                                        #     Parent Loop BB12_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB12_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB12_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB12_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_28
.LBB12_31:                              # %for.end63
                                        #   in Loop: Header=BB12_26 Depth=2
	jmp	.LBB12_32
.LBB12_32:                              # %for.inc64
                                        #   in Loop: Header=BB12_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_26
.LBB12_33:                              # %for.end66
                                        #   in Loop: Header=BB12_24 Depth=1
	jmp	.LBB12_34
.LBB12_34:                              # %for.inc67
                                        #   in Loop: Header=BB12_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_24
.LBB12_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB12_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB12_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB12_36 Depth=1
	vmovsd	.LCPI12_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB12_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_36
.LBB12_39:                              # %for.end98
	cmpl	$786258885, -20(%rbp)   # imm = 0x2EDD5BC5
	jne	.LBB12_41
.LBB12_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_40
.Lfunc_end12:
	.size	create_context_memory.5, .Lfunc_end12-create_context_memory.5
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.6         # -- Begin function init_contexts.6
	.p2align	4, 0x90
	.type	init_contexts.6,@function
init_contexts.6:                        # @init_contexts.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2088986837, -28(%rbp)  # imm = 0x7C8368D5
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB13_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -4(%rbp)
.LBB13_3:                               # %for.cond2
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB13_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB13_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB13_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_7
.LBB13_6:                               # %if.else
                                        #   in Loop: Header=BB13_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_7:                               # %if.end
                                        #   in Loop: Header=BB13_3 Depth=2
	jmp	.LBB13_8
.LBB13_8:                               # %for.inc
                                        #   in Loop: Header=BB13_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_3
.LBB13_9:                               # %for.end
                                        #   in Loop: Header=BB13_1 Depth=1
	jmp	.LBB13_10
.LBB13_10:                              # %for.inc28
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_1
.LBB13_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB13_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB13_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB13_12 Depth=1
	movl	$0, -4(%rbp)
.LBB13_14:                              # %for.cond34
                                        #   Parent Loop BB13_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB13_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB13_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB13_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_18
.LBB13_17:                              # %if.else52
                                        #   in Loop: Header=BB13_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_18:                              # %if.end66
                                        #   in Loop: Header=BB13_14 Depth=2
	jmp	.LBB13_19
.LBB13_19:                              # %for.inc67
                                        #   in Loop: Header=BB13_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_14
.LBB13_20:                              # %for.end69
                                        #   in Loop: Header=BB13_12 Depth=1
	jmp	.LBB13_21
.LBB13_21:                              # %for.inc70
                                        #   in Loop: Header=BB13_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_12
.LBB13_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB13_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB13_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB13_23 Depth=1
	movl	$0, -4(%rbp)
.LBB13_25:                              # %for.cond76
                                        #   Parent Loop BB13_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB13_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB13_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB13_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_29
.LBB13_28:                              # %if.else94
                                        #   in Loop: Header=BB13_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_29:                              # %if.end108
                                        #   in Loop: Header=BB13_25 Depth=2
	jmp	.LBB13_30
.LBB13_30:                              # %for.inc109
                                        #   in Loop: Header=BB13_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_25
.LBB13_31:                              # %for.end111
                                        #   in Loop: Header=BB13_23 Depth=1
	jmp	.LBB13_32
.LBB13_32:                              # %for.inc112
                                        #   in Loop: Header=BB13_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_23
.LBB13_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB13_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB13_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	$0, -4(%rbp)
.LBB13_36:                              # %for.cond118
                                        #   Parent Loop BB13_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB13_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB13_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB13_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_40
.LBB13_39:                              # %if.else136
                                        #   in Loop: Header=BB13_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_40:                              # %if.end150
                                        #   in Loop: Header=BB13_36 Depth=2
	jmp	.LBB13_41
.LBB13_41:                              # %for.inc151
                                        #   in Loop: Header=BB13_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_36
.LBB13_42:                              # %for.end153
                                        #   in Loop: Header=BB13_34 Depth=1
	jmp	.LBB13_43
.LBB13_43:                              # %for.inc154
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_34
.LBB13_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB13_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB13_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB13_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB13_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_49
.LBB13_48:                              # %if.else172
                                        #   in Loop: Header=BB13_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_49:                              # %if.end183
                                        #   in Loop: Header=BB13_45 Depth=1
	jmp	.LBB13_50
.LBB13_50:                              # %for.inc184
                                        #   in Loop: Header=BB13_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_45
.LBB13_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB13_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB13_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB13_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB13_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_56
.LBB13_55:                              # %if.else202
                                        #   in Loop: Header=BB13_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_56:                              # %if.end213
                                        #   in Loop: Header=BB13_52 Depth=1
	jmp	.LBB13_57
.LBB13_57:                              # %for.inc214
                                        #   in Loop: Header=BB13_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_52
.LBB13_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB13_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB13_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB13_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB13_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_63
.LBB13_62:                              # %if.else232
                                        #   in Loop: Header=BB13_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_63:                              # %if.end243
                                        #   in Loop: Header=BB13_59 Depth=1
	jmp	.LBB13_64
.LBB13_64:                              # %for.inc244
                                        #   in Loop: Header=BB13_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_59
.LBB13_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB13_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB13_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB13_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB13_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_70
.LBB13_69:                              # %if.else262
                                        #   in Loop: Header=BB13_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_70:                              # %if.end273
                                        #   in Loop: Header=BB13_66 Depth=1
	jmp	.LBB13_71
.LBB13_71:                              # %for.inc274
                                        #   in Loop: Header=BB13_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_66
.LBB13_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB13_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB13_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB13_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB13_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_77
.LBB13_76:                              # %if.else292
                                        #   in Loop: Header=BB13_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_77:                              # %if.end303
                                        #   in Loop: Header=BB13_73 Depth=1
	jmp	.LBB13_78
.LBB13_78:                              # %for.inc304
                                        #   in Loop: Header=BB13_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_73
.LBB13_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB13_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB13_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB13_80 Depth=1
	movl	$0, -4(%rbp)
.LBB13_82:                              # %for.cond310
                                        #   Parent Loop BB13_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB13_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB13_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB13_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_86
.LBB13_85:                              # %if.else328
                                        #   in Loop: Header=BB13_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_86:                              # %if.end342
                                        #   in Loop: Header=BB13_82 Depth=2
	jmp	.LBB13_87
.LBB13_87:                              # %for.inc343
                                        #   in Loop: Header=BB13_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_82
.LBB13_88:                              # %for.end345
                                        #   in Loop: Header=BB13_80 Depth=1
	jmp	.LBB13_89
.LBB13_89:                              # %for.inc346
                                        #   in Loop: Header=BB13_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_80
.LBB13_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB13_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB13_91 Depth=1
	movl	$0, -4(%rbp)
.LBB13_93:                              # %for.cond352
                                        #   Parent Loop BB13_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB13_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB13_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB13_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_97
.LBB13_96:                              # %if.else370
                                        #   in Loop: Header=BB13_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_97:                              # %if.end384
                                        #   in Loop: Header=BB13_93 Depth=2
	jmp	.LBB13_98
.LBB13_98:                              # %for.inc385
                                        #   in Loop: Header=BB13_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_93
.LBB13_99:                              # %for.end387
                                        #   in Loop: Header=BB13_91 Depth=1
	jmp	.LBB13_100
.LBB13_100:                             # %for.inc388
                                        #   in Loop: Header=BB13_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_91
.LBB13_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB13_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB13_102 Depth=1
	movl	$0, -4(%rbp)
.LBB13_104:                             # %for.cond394
                                        #   Parent Loop BB13_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB13_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB13_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB13_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_108
.LBB13_107:                             # %if.else412
                                        #   in Loop: Header=BB13_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_108:                             # %if.end426
                                        #   in Loop: Header=BB13_104 Depth=2
	jmp	.LBB13_109
.LBB13_109:                             # %for.inc427
                                        #   in Loop: Header=BB13_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_104
.LBB13_110:                             # %for.end429
                                        #   in Loop: Header=BB13_102 Depth=1
	jmp	.LBB13_111
.LBB13_111:                             # %for.inc430
                                        #   in Loop: Header=BB13_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_102
.LBB13_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB13_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB13_113 Depth=1
	movl	$0, -4(%rbp)
.LBB13_115:                             # %for.cond436
                                        #   Parent Loop BB13_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB13_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB13_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB13_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_119
.LBB13_118:                             # %if.else454
                                        #   in Loop: Header=BB13_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_119:                             # %if.end468
                                        #   in Loop: Header=BB13_115 Depth=2
	jmp	.LBB13_120
.LBB13_120:                             # %for.inc469
                                        #   in Loop: Header=BB13_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_115
.LBB13_121:                             # %for.end471
                                        #   in Loop: Header=BB13_113 Depth=1
	jmp	.LBB13_122
.LBB13_122:                             # %for.inc472
                                        #   in Loop: Header=BB13_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_113
.LBB13_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB13_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB13_124 Depth=1
	movl	$0, -4(%rbp)
.LBB13_126:                             # %for.cond478
                                        #   Parent Loop BB13_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB13_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB13_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB13_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_130
.LBB13_129:                             # %if.else496
                                        #   in Loop: Header=BB13_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_130:                             # %if.end510
                                        #   in Loop: Header=BB13_126 Depth=2
	jmp	.LBB13_131
.LBB13_131:                             # %for.inc511
                                        #   in Loop: Header=BB13_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_126
.LBB13_132:                             # %for.end513
                                        #   in Loop: Header=BB13_124 Depth=1
	jmp	.LBB13_133
.LBB13_133:                             # %for.inc514
                                        #   in Loop: Header=BB13_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_124
.LBB13_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB13_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	$0, -4(%rbp)
.LBB13_137:                             # %for.cond520
                                        #   Parent Loop BB13_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB13_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB13_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB13_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_141
.LBB13_140:                             # %if.else538
                                        #   in Loop: Header=BB13_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_141:                             # %if.end552
                                        #   in Loop: Header=BB13_137 Depth=2
	jmp	.LBB13_142
.LBB13_142:                             # %for.inc553
                                        #   in Loop: Header=BB13_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_137
.LBB13_143:                             # %for.end555
                                        #   in Loop: Header=BB13_135 Depth=1
	jmp	.LBB13_144
.LBB13_144:                             # %for.inc556
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_135
.LBB13_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB13_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB13_146 Depth=1
	movl	$0, -4(%rbp)
.LBB13_148:                             # %for.cond562
                                        #   Parent Loop BB13_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB13_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB13_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB13_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_152
.LBB13_151:                             # %if.else580
                                        #   in Loop: Header=BB13_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_152:                             # %if.end594
                                        #   in Loop: Header=BB13_148 Depth=2
	jmp	.LBB13_153
.LBB13_153:                             # %for.inc595
                                        #   in Loop: Header=BB13_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_148
.LBB13_154:                             # %for.end597
                                        #   in Loop: Header=BB13_146 Depth=1
	jmp	.LBB13_155
.LBB13_155:                             # %for.inc598
                                        #   in Loop: Header=BB13_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_146
.LBB13_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB13_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	$0, -4(%rbp)
.LBB13_159:                             # %for.cond604
                                        #   Parent Loop BB13_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB13_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB13_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB13_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_163
.LBB13_162:                             # %if.else622
                                        #   in Loop: Header=BB13_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_163:                             # %if.end636
                                        #   in Loop: Header=BB13_159 Depth=2
	jmp	.LBB13_164
.LBB13_164:                             # %for.inc637
                                        #   in Loop: Header=BB13_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_159
.LBB13_165:                             # %for.end639
                                        #   in Loop: Header=BB13_157 Depth=1
	jmp	.LBB13_166
.LBB13_166:                             # %for.inc640
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_157
.LBB13_167:                             # %for.end642
	cmpl	$2088986837, -28(%rbp)  # imm = 0x7C8368D5
	jne	.LBB13_169
.LBB13_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_168
.Lfunc_end13:
	.size	init_contexts.6, .Lfunc_end13-init_contexts.6
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.7 # -- Begin function update_field_frame_contexts.7
	.p2align	4, 0x90
	.type	update_field_frame_contexts.7,@function
update_field_frame_contexts.7:          # @update_field_frame_contexts.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$304923073, -12(%rbp)   # imm = 0x122CC1C1
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB14_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB14_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB14_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB14_2 Depth=1
	movl	$0, -8(%rbp)
.LBB14_4:                               # %for.cond1
                                        #   Parent Loop BB14_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB14_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB14_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB14_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_4
.LBB14_7:                               # %for.end
                                        #   in Loop: Header=BB14_2 Depth=1
	jmp	.LBB14_8
.LBB14_8:                               # %for.inc23
                                        #   in Loop: Header=BB14_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_2
.LBB14_9:                               # %for.end25
	jmp	.LBB14_19
.LBB14_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB14_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB14_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB14_11 Depth=1
	movl	$0, -8(%rbp)
.LBB14_13:                              # %for.cond29
                                        #   Parent Loop BB14_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB14_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB14_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_13
.LBB14_16:                              # %for.end56
                                        #   in Loop: Header=BB14_11 Depth=1
	jmp	.LBB14_17
.LBB14_17:                              # %for.inc57
                                        #   in Loop: Header=BB14_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_11
.LBB14_18:                              # %for.end59
	jmp	.LBB14_19
.LBB14_19:                              # %if.end
	cmpl	$304923073, -12(%rbp)   # imm = 0x122CC1C1
	jne	.LBB14_21
.LBB14_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_20
.Lfunc_end14:
	.size	update_field_frame_contexts.7, .Lfunc_end14-update_field_frame_contexts.7
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.8        # -- Begin function store_contexts.8
	.p2align	4, 0x90
	.type	store_contexts.8,@function
store_contexts.8:                       # @store_contexts.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1486423871, -16(%rbp)  # imm = 0x5899073F
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB15_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB15_3
.LBB15_2:                               # %if.else
	jmp	.LBB15_3
.LBB15_3:                               # %if.end
	cmpl	$1486423871, -16(%rbp)  # imm = 0x5899073F
	jne	.LBB15_5
.LBB15_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_4
.Lfunc_end15:
	.size	store_contexts.8, .Lfunc_end15-store_contexts.8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.9
.LCPI16_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.9
	.p2align	4, 0x90
	.type	GetCtxModelNumber.9,@function
GetCtxModelNumber.9:                    # @GetCtxModelNumber.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI16_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1056927863, -44(%rbp)  # imm = 0x3EFF7077
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
                                        #       Child Loop BB16_5 Depth 3
                                        #     Child Loop BB16_14 Depth 2
                                        #       Child Loop BB16_16 Depth 3
                                        #     Child Loop BB16_25 Depth 2
                                        #       Child Loop BB16_27 Depth 3
                                        #     Child Loop BB16_36 Depth 2
                                        #       Child Loop BB16_38 Depth 3
                                        #     Child Loop BB16_47 Depth 2
                                        #     Child Loop BB16_54 Depth 2
                                        #     Child Loop BB16_61 Depth 2
                                        #     Child Loop BB16_68 Depth 2
                                        #     Child Loop BB16_75 Depth 2
                                        #     Child Loop BB16_82 Depth 2
                                        #       Child Loop BB16_84 Depth 3
                                        #     Child Loop BB16_93 Depth 2
                                        #       Child Loop BB16_95 Depth 3
                                        #     Child Loop BB16_104 Depth 2
                                        #       Child Loop BB16_106 Depth 3
                                        #     Child Loop BB16_115 Depth 2
                                        #       Child Loop BB16_117 Depth 3
                                        #     Child Loop BB16_126 Depth 2
                                        #       Child Loop BB16_128 Depth 3
                                        #     Child Loop BB16_137 Depth 2
                                        #       Child Loop BB16_139 Depth 3
                                        #     Child Loop BB16_148 Depth 2
                                        #       Child Loop BB16_150 Depth 3
                                        #     Child Loop BB16_159 Depth 2
                                        #       Child Loop BB16_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB16_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB16_3:                               # %for.cond2
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB16_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	$0, -4(%rbp)
.LBB16_5:                               # %for.cond5
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB16_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB16_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB16_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_9
.LBB16_8:                               # %if.else
                                        #   in Loop: Header=BB16_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_9:                               # %if.end
                                        #   in Loop: Header=BB16_5 Depth=3
	jmp	.LBB16_10
.LBB16_10:                              # %for.inc
                                        #   in Loop: Header=BB16_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_5
.LBB16_11:                              # %for.end
                                        #   in Loop: Header=BB16_3 Depth=2
	jmp	.LBB16_12
.LBB16_12:                              # %for.inc33
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_3
.LBB16_13:                              # %for.end35
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_14:                              # %for.cond36
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB16_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB16_14 Depth=2
	movl	$0, -4(%rbp)
.LBB16_16:                              # %for.cond39
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB16_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB16_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB16_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_20
.LBB16_19:                              # %if.else58
                                        #   in Loop: Header=BB16_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_20:                              # %if.end73
                                        #   in Loop: Header=BB16_16 Depth=3
	jmp	.LBB16_21
.LBB16_21:                              # %for.inc74
                                        #   in Loop: Header=BB16_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_16
.LBB16_22:                              # %for.end76
                                        #   in Loop: Header=BB16_14 Depth=2
	jmp	.LBB16_23
.LBB16_23:                              # %for.inc77
                                        #   in Loop: Header=BB16_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_14
.LBB16_24:                              # %for.end79
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_25:                              # %for.cond80
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB16_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB16_25 Depth=2
	movl	$0, -4(%rbp)
.LBB16_27:                              # %for.cond83
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB16_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB16_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB16_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_31
.LBB16_30:                              # %if.else102
                                        #   in Loop: Header=BB16_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_31:                              # %if.end117
                                        #   in Loop: Header=BB16_27 Depth=3
	jmp	.LBB16_32
.LBB16_32:                              # %for.inc118
                                        #   in Loop: Header=BB16_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_27
.LBB16_33:                              # %for.end120
                                        #   in Loop: Header=BB16_25 Depth=2
	jmp	.LBB16_34
.LBB16_34:                              # %for.inc121
                                        #   in Loop: Header=BB16_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_25
.LBB16_35:                              # %for.end123
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_36:                              # %for.cond124
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB16_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB16_36 Depth=2
	movl	$0, -4(%rbp)
.LBB16_38:                              # %for.cond127
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB16_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB16_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB16_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_42
.LBB16_41:                              # %if.else146
                                        #   in Loop: Header=BB16_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_42:                              # %if.end161
                                        #   in Loop: Header=BB16_38 Depth=3
	jmp	.LBB16_43
.LBB16_43:                              # %for.inc162
                                        #   in Loop: Header=BB16_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_38
.LBB16_44:                              # %for.end164
                                        #   in Loop: Header=BB16_36 Depth=2
	jmp	.LBB16_45
.LBB16_45:                              # %for.inc165
                                        #   in Loop: Header=BB16_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_36
.LBB16_46:                              # %for.end167
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_47:                              # %for.cond168
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB16_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB16_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_51
.LBB16_50:                              # %if.else184
                                        #   in Loop: Header=BB16_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_51:                              # %if.end196
                                        #   in Loop: Header=BB16_47 Depth=2
	jmp	.LBB16_52
.LBB16_52:                              # %for.inc197
                                        #   in Loop: Header=BB16_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_47
.LBB16_53:                              # %for.end199
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_54:                              # %for.cond200
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB16_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB16_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_58
.LBB16_57:                              # %if.else216
                                        #   in Loop: Header=BB16_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_58:                              # %if.end228
                                        #   in Loop: Header=BB16_54 Depth=2
	jmp	.LBB16_59
.LBB16_59:                              # %for.inc229
                                        #   in Loop: Header=BB16_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_54
.LBB16_60:                              # %for.end231
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_61:                              # %for.cond232
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB16_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB16_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB16_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_65
.LBB16_64:                              # %if.else248
                                        #   in Loop: Header=BB16_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_65:                              # %if.end260
                                        #   in Loop: Header=BB16_61 Depth=2
	jmp	.LBB16_66
.LBB16_66:                              # %for.inc261
                                        #   in Loop: Header=BB16_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_61
.LBB16_67:                              # %for.end263
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_68:                              # %for.cond264
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB16_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB16_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB16_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_72
.LBB16_71:                              # %if.else280
                                        #   in Loop: Header=BB16_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_72:                              # %if.end292
                                        #   in Loop: Header=BB16_68 Depth=2
	jmp	.LBB16_73
.LBB16_73:                              # %for.inc293
                                        #   in Loop: Header=BB16_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_68
.LBB16_74:                              # %for.end295
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_75:                              # %for.cond296
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB16_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB16_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_79
.LBB16_78:                              # %if.else312
                                        #   in Loop: Header=BB16_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_79:                              # %if.end324
                                        #   in Loop: Header=BB16_75 Depth=2
	jmp	.LBB16_80
.LBB16_80:                              # %for.inc325
                                        #   in Loop: Header=BB16_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_75
.LBB16_81:                              # %for.end327
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_82:                              # %for.cond328
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB16_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB16_82 Depth=2
	movl	$0, -4(%rbp)
.LBB16_84:                              # %for.cond331
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB16_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB16_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB16_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_88
.LBB16_87:                              # %if.else350
                                        #   in Loop: Header=BB16_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_88:                              # %if.end365
                                        #   in Loop: Header=BB16_84 Depth=3
	jmp	.LBB16_89
.LBB16_89:                              # %for.inc366
                                        #   in Loop: Header=BB16_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_84
.LBB16_90:                              # %for.end368
                                        #   in Loop: Header=BB16_82 Depth=2
	jmp	.LBB16_91
.LBB16_91:                              # %for.inc369
                                        #   in Loop: Header=BB16_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_82
.LBB16_92:                              # %for.end371
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_93:                              # %for.cond372
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB16_93 Depth=2
	movl	$0, -4(%rbp)
.LBB16_95:                              # %for.cond375
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB16_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB16_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB16_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_99
.LBB16_98:                              # %if.else394
                                        #   in Loop: Header=BB16_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_99:                              # %if.end409
                                        #   in Loop: Header=BB16_95 Depth=3
	jmp	.LBB16_100
.LBB16_100:                             # %for.inc410
                                        #   in Loop: Header=BB16_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_95
.LBB16_101:                             # %for.end412
                                        #   in Loop: Header=BB16_93 Depth=2
	jmp	.LBB16_102
.LBB16_102:                             # %for.inc413
                                        #   in Loop: Header=BB16_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_93
.LBB16_103:                             # %for.end415
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_104:                             # %for.cond416
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB16_104 Depth=2
	movl	$0, -4(%rbp)
.LBB16_106:                             # %for.cond419
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB16_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB16_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB16_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_110
.LBB16_109:                             # %if.else438
                                        #   in Loop: Header=BB16_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_110:                             # %if.end453
                                        #   in Loop: Header=BB16_106 Depth=3
	jmp	.LBB16_111
.LBB16_111:                             # %for.inc454
                                        #   in Loop: Header=BB16_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_106
.LBB16_112:                             # %for.end456
                                        #   in Loop: Header=BB16_104 Depth=2
	jmp	.LBB16_113
.LBB16_113:                             # %for.inc457
                                        #   in Loop: Header=BB16_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_104
.LBB16_114:                             # %for.end459
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_115:                             # %for.cond460
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB16_115 Depth=2
	movl	$0, -4(%rbp)
.LBB16_117:                             # %for.cond463
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB16_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB16_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB16_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_121
.LBB16_120:                             # %if.else482
                                        #   in Loop: Header=BB16_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_121:                             # %if.end497
                                        #   in Loop: Header=BB16_117 Depth=3
	jmp	.LBB16_122
.LBB16_122:                             # %for.inc498
                                        #   in Loop: Header=BB16_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_117
.LBB16_123:                             # %for.end500
                                        #   in Loop: Header=BB16_115 Depth=2
	jmp	.LBB16_124
.LBB16_124:                             # %for.inc501
                                        #   in Loop: Header=BB16_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_115
.LBB16_125:                             # %for.end503
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_126:                             # %for.cond504
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB16_126 Depth=2
	movl	$0, -4(%rbp)
.LBB16_128:                             # %for.cond507
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB16_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB16_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB16_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_132
.LBB16_131:                             # %if.else526
                                        #   in Loop: Header=BB16_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_132:                             # %if.end541
                                        #   in Loop: Header=BB16_128 Depth=3
	jmp	.LBB16_133
.LBB16_133:                             # %for.inc542
                                        #   in Loop: Header=BB16_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_128
.LBB16_134:                             # %for.end544
                                        #   in Loop: Header=BB16_126 Depth=2
	jmp	.LBB16_135
.LBB16_135:                             # %for.inc545
                                        #   in Loop: Header=BB16_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_126
.LBB16_136:                             # %for.end547
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_137:                             # %for.cond548
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB16_137 Depth=2
	movl	$0, -4(%rbp)
.LBB16_139:                             # %for.cond551
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB16_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB16_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB16_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_143
.LBB16_142:                             # %if.else570
                                        #   in Loop: Header=BB16_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_143:                             # %if.end585
                                        #   in Loop: Header=BB16_139 Depth=3
	jmp	.LBB16_144
.LBB16_144:                             # %for.inc586
                                        #   in Loop: Header=BB16_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_139
.LBB16_145:                             # %for.end588
                                        #   in Loop: Header=BB16_137 Depth=2
	jmp	.LBB16_146
.LBB16_146:                             # %for.inc589
                                        #   in Loop: Header=BB16_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_137
.LBB16_147:                             # %for.end591
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_148:                             # %for.cond592
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB16_148 Depth=2
	movl	$0, -4(%rbp)
.LBB16_150:                             # %for.cond595
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB16_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB16_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB16_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_154
.LBB16_153:                             # %if.else614
                                        #   in Loop: Header=BB16_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_154:                             # %if.end629
                                        #   in Loop: Header=BB16_150 Depth=3
	jmp	.LBB16_155
.LBB16_155:                             # %for.inc630
                                        #   in Loop: Header=BB16_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_150
.LBB16_156:                             # %for.end632
                                        #   in Loop: Header=BB16_148 Depth=2
	jmp	.LBB16_157
.LBB16_157:                             # %for.inc633
                                        #   in Loop: Header=BB16_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_148
.LBB16_158:                             # %for.end635
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_159:                             # %for.cond636
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB16_159 Depth=2
	movl	$0, -4(%rbp)
.LBB16_161:                             # %for.cond639
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB16_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB16_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB16_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_165
.LBB16_164:                             # %if.else658
                                        #   in Loop: Header=BB16_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_165:                             # %if.end673
                                        #   in Loop: Header=BB16_161 Depth=3
	jmp	.LBB16_166
.LBB16_166:                             # %for.inc674
                                        #   in Loop: Header=BB16_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_161
.LBB16_167:                             # %for.end676
                                        #   in Loop: Header=BB16_159 Depth=2
	jmp	.LBB16_168
.LBB16_168:                             # %for.inc677
                                        #   in Loop: Header=BB16_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_159
.LBB16_169:                             # %for.end679
                                        #   in Loop: Header=BB16_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB16_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB16_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB16_171:                             # %if.end682
                                        #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_172
.LBB16_172:                             # %for.inc683
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_1
.LBB16_173:                             # %for.end685
	cmpl	$1056927863, -44(%rbp)  # imm = 0x3EFF7077
	jne	.LBB16_175
.LBB16_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_174
.Lfunc_end16:
	.size	GetCtxModelNumber.9, .Lfunc_end16-GetCtxModelNumber.9
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.10 # -- Begin function update_field_frame_contexts.10
	.p2align	4, 0x90
	.type	update_field_frame_contexts.10,@function
update_field_frame_contexts.10:         # @update_field_frame_contexts.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$595636943, -16(%rbp)   # imm = 0x2380B2CF
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB17_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB17_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB17_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB17_2 Depth=1
	movl	$0, -8(%rbp)
.LBB17_4:                               # %for.cond1
                                        #   Parent Loop BB17_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB17_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB17_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB17_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_4
.LBB17_7:                               # %for.end
                                        #   in Loop: Header=BB17_2 Depth=1
	jmp	.LBB17_8
.LBB17_8:                               # %for.inc23
                                        #   in Loop: Header=BB17_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_2
.LBB17_9:                               # %for.end25
	jmp	.LBB17_19
.LBB17_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB17_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB17_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB17_11 Depth=1
	movl	$0, -8(%rbp)
.LBB17_13:                              # %for.cond29
                                        #   Parent Loop BB17_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB17_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB17_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_13
.LBB17_16:                              # %for.end56
                                        #   in Loop: Header=BB17_11 Depth=1
	jmp	.LBB17_17
.LBB17_17:                              # %for.inc57
                                        #   in Loop: Header=BB17_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_11
.LBB17_18:                              # %for.end59
	jmp	.LBB17_19
.LBB17_19:                              # %if.end
	cmpl	$595636943, -16(%rbp)   # imm = 0x2380B2CF
	jne	.LBB17_21
.LBB17_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_20
.Lfunc_end17:
	.size	update_field_frame_contexts.10, .Lfunc_end17-update_field_frame_contexts.10
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.11
.LCPI18_0:
	.quad	4607182418800017408     # double 1
.LCPI18_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI18_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI18_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.11
	.p2align	4, 0x90
	.type	XRate.11,@function
XRate.11:                               # @XRate.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$2072077811, -32(%rbp)  # imm = 0x7B8165F3
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB18_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB18_3
.LBB18_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB18_3:                               # %cond.end
	vmovsd	.LCPI18_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI18_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI18_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI18_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB18_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI18_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB18_6
.LBB18_5:                               # %cond.false6
	vmovsd	.LCPI18_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI18_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI18_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB18_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB18_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB18_9
.LBB18_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB18_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB18_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB18_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB18_13
.LBB18_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB18_13:                              # %cond.end26
	jmp	.LBB18_15
.LBB18_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB18_15
.LBB18_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB18_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB18_18
.LBB18_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB18_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2072077811, -32(%rbp)  # imm = 0x7B8165F3
	jne	.LBB18_20
.LBB18_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB18_19
.Lfunc_end18:
	.size	XRate.11, .Lfunc_end18-XRate.11
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.12        # -- Begin function init_contexts.12
	.p2align	4, 0x90
	.type	init_contexts.12,@function
init_contexts.12:                       # @init_contexts.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$498531517, -28(%rbp)   # imm = 0x1DB6FCBD
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB19_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -4(%rbp)
.LBB19_3:                               # %for.cond2
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB19_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_7
.LBB19_6:                               # %if.else
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_7:                               # %if.end
                                        #   in Loop: Header=BB19_3 Depth=2
	jmp	.LBB19_8
.LBB19_8:                               # %for.inc
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_3
.LBB19_9:                               # %for.end
                                        #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_10
.LBB19_10:                              # %for.inc28
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_1
.LBB19_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB19_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB19_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB19_12 Depth=1
	movl	$0, -4(%rbp)
.LBB19_14:                              # %for.cond34
                                        #   Parent Loop BB19_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB19_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB19_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB19_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_18
.LBB19_17:                              # %if.else52
                                        #   in Loop: Header=BB19_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_18:                              # %if.end66
                                        #   in Loop: Header=BB19_14 Depth=2
	jmp	.LBB19_19
.LBB19_19:                              # %for.inc67
                                        #   in Loop: Header=BB19_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_14
.LBB19_20:                              # %for.end69
                                        #   in Loop: Header=BB19_12 Depth=1
	jmp	.LBB19_21
.LBB19_21:                              # %for.inc70
                                        #   in Loop: Header=BB19_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_12
.LBB19_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB19_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB19_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB19_23 Depth=1
	movl	$0, -4(%rbp)
.LBB19_25:                              # %for.cond76
                                        #   Parent Loop BB19_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB19_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB19_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB19_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_29
.LBB19_28:                              # %if.else94
                                        #   in Loop: Header=BB19_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_29:                              # %if.end108
                                        #   in Loop: Header=BB19_25 Depth=2
	jmp	.LBB19_30
.LBB19_30:                              # %for.inc109
                                        #   in Loop: Header=BB19_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_25
.LBB19_31:                              # %for.end111
                                        #   in Loop: Header=BB19_23 Depth=1
	jmp	.LBB19_32
.LBB19_32:                              # %for.inc112
                                        #   in Loop: Header=BB19_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_23
.LBB19_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB19_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB19_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB19_34 Depth=1
	movl	$0, -4(%rbp)
.LBB19_36:                              # %for.cond118
                                        #   Parent Loop BB19_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB19_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB19_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB19_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_40
.LBB19_39:                              # %if.else136
                                        #   in Loop: Header=BB19_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_40:                              # %if.end150
                                        #   in Loop: Header=BB19_36 Depth=2
	jmp	.LBB19_41
.LBB19_41:                              # %for.inc151
                                        #   in Loop: Header=BB19_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_36
.LBB19_42:                              # %for.end153
                                        #   in Loop: Header=BB19_34 Depth=1
	jmp	.LBB19_43
.LBB19_43:                              # %for.inc154
                                        #   in Loop: Header=BB19_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_34
.LBB19_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB19_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB19_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB19_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_49
.LBB19_48:                              # %if.else172
                                        #   in Loop: Header=BB19_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_49:                              # %if.end183
                                        #   in Loop: Header=BB19_45 Depth=1
	jmp	.LBB19_50
.LBB19_50:                              # %for.inc184
                                        #   in Loop: Header=BB19_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_45
.LBB19_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB19_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB19_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB19_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_56
.LBB19_55:                              # %if.else202
                                        #   in Loop: Header=BB19_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_56:                              # %if.end213
                                        #   in Loop: Header=BB19_52 Depth=1
	jmp	.LBB19_57
.LBB19_57:                              # %for.inc214
                                        #   in Loop: Header=BB19_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_52
.LBB19_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB19_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB19_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB19_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB19_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_63
.LBB19_62:                              # %if.else232
                                        #   in Loop: Header=BB19_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_63:                              # %if.end243
                                        #   in Loop: Header=BB19_59 Depth=1
	jmp	.LBB19_64
.LBB19_64:                              # %for.inc244
                                        #   in Loop: Header=BB19_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_59
.LBB19_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB19_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB19_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB19_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB19_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_70
.LBB19_69:                              # %if.else262
                                        #   in Loop: Header=BB19_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_70:                              # %if.end273
                                        #   in Loop: Header=BB19_66 Depth=1
	jmp	.LBB19_71
.LBB19_71:                              # %for.inc274
                                        #   in Loop: Header=BB19_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_66
.LBB19_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB19_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB19_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB19_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_77
.LBB19_76:                              # %if.else292
                                        #   in Loop: Header=BB19_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_77:                              # %if.end303
                                        #   in Loop: Header=BB19_73 Depth=1
	jmp	.LBB19_78
.LBB19_78:                              # %for.inc304
                                        #   in Loop: Header=BB19_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_73
.LBB19_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB19_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB19_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB19_80 Depth=1
	movl	$0, -4(%rbp)
.LBB19_82:                              # %for.cond310
                                        #   Parent Loop BB19_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB19_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB19_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_86
.LBB19_85:                              # %if.else328
                                        #   in Loop: Header=BB19_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_86:                              # %if.end342
                                        #   in Loop: Header=BB19_82 Depth=2
	jmp	.LBB19_87
.LBB19_87:                              # %for.inc343
                                        #   in Loop: Header=BB19_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_82
.LBB19_88:                              # %for.end345
                                        #   in Loop: Header=BB19_80 Depth=1
	jmp	.LBB19_89
.LBB19_89:                              # %for.inc346
                                        #   in Loop: Header=BB19_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_80
.LBB19_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB19_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB19_91 Depth=1
	movl	$0, -4(%rbp)
.LBB19_93:                              # %for.cond352
                                        #   Parent Loop BB19_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB19_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB19_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_97
.LBB19_96:                              # %if.else370
                                        #   in Loop: Header=BB19_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_97:                              # %if.end384
                                        #   in Loop: Header=BB19_93 Depth=2
	jmp	.LBB19_98
.LBB19_98:                              # %for.inc385
                                        #   in Loop: Header=BB19_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_93
.LBB19_99:                              # %for.end387
                                        #   in Loop: Header=BB19_91 Depth=1
	jmp	.LBB19_100
.LBB19_100:                             # %for.inc388
                                        #   in Loop: Header=BB19_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_91
.LBB19_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB19_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB19_102 Depth=1
	movl	$0, -4(%rbp)
.LBB19_104:                             # %for.cond394
                                        #   Parent Loop BB19_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB19_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB19_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB19_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_108
.LBB19_107:                             # %if.else412
                                        #   in Loop: Header=BB19_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_108:                             # %if.end426
                                        #   in Loop: Header=BB19_104 Depth=2
	jmp	.LBB19_109
.LBB19_109:                             # %for.inc427
                                        #   in Loop: Header=BB19_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_104
.LBB19_110:                             # %for.end429
                                        #   in Loop: Header=BB19_102 Depth=1
	jmp	.LBB19_111
.LBB19_111:                             # %for.inc430
                                        #   in Loop: Header=BB19_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_102
.LBB19_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB19_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB19_113 Depth=1
	movl	$0, -4(%rbp)
.LBB19_115:                             # %for.cond436
                                        #   Parent Loop BB19_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB19_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB19_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB19_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_119
.LBB19_118:                             # %if.else454
                                        #   in Loop: Header=BB19_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_119:                             # %if.end468
                                        #   in Loop: Header=BB19_115 Depth=2
	jmp	.LBB19_120
.LBB19_120:                             # %for.inc469
                                        #   in Loop: Header=BB19_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_115
.LBB19_121:                             # %for.end471
                                        #   in Loop: Header=BB19_113 Depth=1
	jmp	.LBB19_122
.LBB19_122:                             # %for.inc472
                                        #   in Loop: Header=BB19_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_113
.LBB19_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB19_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB19_124 Depth=1
	movl	$0, -4(%rbp)
.LBB19_126:                             # %for.cond478
                                        #   Parent Loop BB19_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB19_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB19_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB19_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_130
.LBB19_129:                             # %if.else496
                                        #   in Loop: Header=BB19_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_130:                             # %if.end510
                                        #   in Loop: Header=BB19_126 Depth=2
	jmp	.LBB19_131
.LBB19_131:                             # %for.inc511
                                        #   in Loop: Header=BB19_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_126
.LBB19_132:                             # %for.end513
                                        #   in Loop: Header=BB19_124 Depth=1
	jmp	.LBB19_133
.LBB19_133:                             # %for.inc514
                                        #   in Loop: Header=BB19_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_124
.LBB19_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB19_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	$0, -4(%rbp)
.LBB19_137:                             # %for.cond520
                                        #   Parent Loop BB19_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB19_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB19_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB19_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_141
.LBB19_140:                             # %if.else538
                                        #   in Loop: Header=BB19_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_141:                             # %if.end552
                                        #   in Loop: Header=BB19_137 Depth=2
	jmp	.LBB19_142
.LBB19_142:                             # %for.inc553
                                        #   in Loop: Header=BB19_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_137
.LBB19_143:                             # %for.end555
                                        #   in Loop: Header=BB19_135 Depth=1
	jmp	.LBB19_144
.LBB19_144:                             # %for.inc556
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_135
.LBB19_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB19_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB19_146 Depth=1
	movl	$0, -4(%rbp)
.LBB19_148:                             # %for.cond562
                                        #   Parent Loop BB19_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB19_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB19_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB19_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_152
.LBB19_151:                             # %if.else580
                                        #   in Loop: Header=BB19_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_152:                             # %if.end594
                                        #   in Loop: Header=BB19_148 Depth=2
	jmp	.LBB19_153
.LBB19_153:                             # %for.inc595
                                        #   in Loop: Header=BB19_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_148
.LBB19_154:                             # %for.end597
                                        #   in Loop: Header=BB19_146 Depth=1
	jmp	.LBB19_155
.LBB19_155:                             # %for.inc598
                                        #   in Loop: Header=BB19_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_146
.LBB19_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB19_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB19_157 Depth=1
	movl	$0, -4(%rbp)
.LBB19_159:                             # %for.cond604
                                        #   Parent Loop BB19_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB19_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB19_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB19_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_163
.LBB19_162:                             # %if.else622
                                        #   in Loop: Header=BB19_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_163:                             # %if.end636
                                        #   in Loop: Header=BB19_159 Depth=2
	jmp	.LBB19_164
.LBB19_164:                             # %for.inc637
                                        #   in Loop: Header=BB19_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_159
.LBB19_165:                             # %for.end639
                                        #   in Loop: Header=BB19_157 Depth=1
	jmp	.LBB19_166
.LBB19_166:                             # %for.inc640
                                        #   in Loop: Header=BB19_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_157
.LBB19_167:                             # %for.end642
	cmpl	$498531517, -28(%rbp)   # imm = 0x1DB6FCBD
	jne	.LBB19_169
.LBB19_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_168
.Lfunc_end19:
	.size	init_contexts.12, .Lfunc_end19-init_contexts.12
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.13  # -- Begin function free_context_memory.13
	.p2align	4, 0x90
	.type	free_context_memory.13,@function
free_context_memory.13:                 # @free_context_memory.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1830981747, -12(%rbp)  # imm = 0x6D229073
	movl	$0, -4(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB20_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	$0, -8(%rbp)
.LBB20_3:                               # %for.cond1
                                        #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB20_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_3
.LBB20_6:                               # %for.end
                                        #   in Loop: Header=BB20_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_1
.LBB20_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$1830981747, -12(%rbp)  # imm = 0x6D229073
	jne	.LBB20_10
.LBB20_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_9
.Lfunc_end20:
	.size	free_context_memory.13, .Lfunc_end20-free_context_memory.13
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.14  # -- Begin function free_context_memory.14
	.p2align	4, 0x90
	.type	free_context_memory.14,@function
free_context_memory.14:                 # @free_context_memory.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1594948756, -12(%rbp)  # imm = 0x5F10FC94
	movl	$0, -4(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB21_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_3:                               # %for.cond1
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB21_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_3
.LBB21_6:                               # %for.end
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_1
.LBB21_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$1594948756, -12(%rbp)  # imm = 0x5F10FC94
	jne	.LBB21_10
.LBB21_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_9
.Lfunc_end21:
	.size	free_context_memory.14, .Lfunc_end21-free_context_memory.14
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.15        # -- Begin function init_contexts.15
	.p2align	4, 0x90
	.type	init_contexts.15,@function
init_contexts.15:                       # @init_contexts.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$71446644, -28(%rbp)    # imm = 0x4423074
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB22_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_3:                               # %for.cond2
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB22_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_7
.LBB22_6:                               # %if.else
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_7:                               # %if.end
                                        #   in Loop: Header=BB22_3 Depth=2
	jmp	.LBB22_8
.LBB22_8:                               # %for.inc
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_3
.LBB22_9:                               # %for.end
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_10
.LBB22_10:                              # %for.inc28
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_1
.LBB22_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB22_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB22_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB22_12 Depth=1
	movl	$0, -4(%rbp)
.LBB22_14:                              # %for.cond34
                                        #   Parent Loop BB22_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB22_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB22_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB22_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_18
.LBB22_17:                              # %if.else52
                                        #   in Loop: Header=BB22_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_18:                              # %if.end66
                                        #   in Loop: Header=BB22_14 Depth=2
	jmp	.LBB22_19
.LBB22_19:                              # %for.inc67
                                        #   in Loop: Header=BB22_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_14
.LBB22_20:                              # %for.end69
                                        #   in Loop: Header=BB22_12 Depth=1
	jmp	.LBB22_21
.LBB22_21:                              # %for.inc70
                                        #   in Loop: Header=BB22_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_12
.LBB22_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB22_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB22_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB22_23 Depth=1
	movl	$0, -4(%rbp)
.LBB22_25:                              # %for.cond76
                                        #   Parent Loop BB22_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB22_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB22_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB22_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_29
.LBB22_28:                              # %if.else94
                                        #   in Loop: Header=BB22_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_29:                              # %if.end108
                                        #   in Loop: Header=BB22_25 Depth=2
	jmp	.LBB22_30
.LBB22_30:                              # %for.inc109
                                        #   in Loop: Header=BB22_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_25
.LBB22_31:                              # %for.end111
                                        #   in Loop: Header=BB22_23 Depth=1
	jmp	.LBB22_32
.LBB22_32:                              # %for.inc112
                                        #   in Loop: Header=BB22_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_23
.LBB22_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB22_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB22_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB22_34 Depth=1
	movl	$0, -4(%rbp)
.LBB22_36:                              # %for.cond118
                                        #   Parent Loop BB22_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB22_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB22_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB22_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_40
.LBB22_39:                              # %if.else136
                                        #   in Loop: Header=BB22_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_40:                              # %if.end150
                                        #   in Loop: Header=BB22_36 Depth=2
	jmp	.LBB22_41
.LBB22_41:                              # %for.inc151
                                        #   in Loop: Header=BB22_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_36
.LBB22_42:                              # %for.end153
                                        #   in Loop: Header=BB22_34 Depth=1
	jmp	.LBB22_43
.LBB22_43:                              # %for.inc154
                                        #   in Loop: Header=BB22_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_34
.LBB22_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB22_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB22_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB22_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB22_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_49
.LBB22_48:                              # %if.else172
                                        #   in Loop: Header=BB22_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_49:                              # %if.end183
                                        #   in Loop: Header=BB22_45 Depth=1
	jmp	.LBB22_50
.LBB22_50:                              # %for.inc184
                                        #   in Loop: Header=BB22_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_45
.LBB22_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB22_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB22_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB22_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB22_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_56
.LBB22_55:                              # %if.else202
                                        #   in Loop: Header=BB22_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_56:                              # %if.end213
                                        #   in Loop: Header=BB22_52 Depth=1
	jmp	.LBB22_57
.LBB22_57:                              # %for.inc214
                                        #   in Loop: Header=BB22_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_52
.LBB22_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB22_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB22_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB22_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB22_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_63
.LBB22_62:                              # %if.else232
                                        #   in Loop: Header=BB22_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_63:                              # %if.end243
                                        #   in Loop: Header=BB22_59 Depth=1
	jmp	.LBB22_64
.LBB22_64:                              # %for.inc244
                                        #   in Loop: Header=BB22_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_59
.LBB22_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB22_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB22_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB22_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB22_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_70
.LBB22_69:                              # %if.else262
                                        #   in Loop: Header=BB22_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_70:                              # %if.end273
                                        #   in Loop: Header=BB22_66 Depth=1
	jmp	.LBB22_71
.LBB22_71:                              # %for.inc274
                                        #   in Loop: Header=BB22_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_66
.LBB22_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB22_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB22_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB22_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB22_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_77
.LBB22_76:                              # %if.else292
                                        #   in Loop: Header=BB22_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_77:                              # %if.end303
                                        #   in Loop: Header=BB22_73 Depth=1
	jmp	.LBB22_78
.LBB22_78:                              # %for.inc304
                                        #   in Loop: Header=BB22_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_73
.LBB22_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB22_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB22_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB22_80 Depth=1
	movl	$0, -4(%rbp)
.LBB22_82:                              # %for.cond310
                                        #   Parent Loop BB22_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB22_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB22_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_86
.LBB22_85:                              # %if.else328
                                        #   in Loop: Header=BB22_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_86:                              # %if.end342
                                        #   in Loop: Header=BB22_82 Depth=2
	jmp	.LBB22_87
.LBB22_87:                              # %for.inc343
                                        #   in Loop: Header=BB22_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_82
.LBB22_88:                              # %for.end345
                                        #   in Loop: Header=BB22_80 Depth=1
	jmp	.LBB22_89
.LBB22_89:                              # %for.inc346
                                        #   in Loop: Header=BB22_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_80
.LBB22_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB22_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB22_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB22_91 Depth=1
	movl	$0, -4(%rbp)
.LBB22_93:                              # %for.cond352
                                        #   Parent Loop BB22_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB22_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB22_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_97
.LBB22_96:                              # %if.else370
                                        #   in Loop: Header=BB22_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_97:                              # %if.end384
                                        #   in Loop: Header=BB22_93 Depth=2
	jmp	.LBB22_98
.LBB22_98:                              # %for.inc385
                                        #   in Loop: Header=BB22_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_93
.LBB22_99:                              # %for.end387
                                        #   in Loop: Header=BB22_91 Depth=1
	jmp	.LBB22_100
.LBB22_100:                             # %for.inc388
                                        #   in Loop: Header=BB22_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_91
.LBB22_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB22_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB22_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB22_102 Depth=1
	movl	$0, -4(%rbp)
.LBB22_104:                             # %for.cond394
                                        #   Parent Loop BB22_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB22_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB22_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB22_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_108
.LBB22_107:                             # %if.else412
                                        #   in Loop: Header=BB22_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_108:                             # %if.end426
                                        #   in Loop: Header=BB22_104 Depth=2
	jmp	.LBB22_109
.LBB22_109:                             # %for.inc427
                                        #   in Loop: Header=BB22_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_104
.LBB22_110:                             # %for.end429
                                        #   in Loop: Header=BB22_102 Depth=1
	jmp	.LBB22_111
.LBB22_111:                             # %for.inc430
                                        #   in Loop: Header=BB22_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_102
.LBB22_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB22_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB22_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB22_113 Depth=1
	movl	$0, -4(%rbp)
.LBB22_115:                             # %for.cond436
                                        #   Parent Loop BB22_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB22_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB22_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB22_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_119
.LBB22_118:                             # %if.else454
                                        #   in Loop: Header=BB22_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_119:                             # %if.end468
                                        #   in Loop: Header=BB22_115 Depth=2
	jmp	.LBB22_120
.LBB22_120:                             # %for.inc469
                                        #   in Loop: Header=BB22_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_115
.LBB22_121:                             # %for.end471
                                        #   in Loop: Header=BB22_113 Depth=1
	jmp	.LBB22_122
.LBB22_122:                             # %for.inc472
                                        #   in Loop: Header=BB22_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_113
.LBB22_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB22_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB22_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB22_124 Depth=1
	movl	$0, -4(%rbp)
.LBB22_126:                             # %for.cond478
                                        #   Parent Loop BB22_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB22_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB22_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB22_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_130
.LBB22_129:                             # %if.else496
                                        #   in Loop: Header=BB22_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_130:                             # %if.end510
                                        #   in Loop: Header=BB22_126 Depth=2
	jmp	.LBB22_131
.LBB22_131:                             # %for.inc511
                                        #   in Loop: Header=BB22_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_126
.LBB22_132:                             # %for.end513
                                        #   in Loop: Header=BB22_124 Depth=1
	jmp	.LBB22_133
.LBB22_133:                             # %for.inc514
                                        #   in Loop: Header=BB22_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_124
.LBB22_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB22_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB22_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	$0, -4(%rbp)
.LBB22_137:                             # %for.cond520
                                        #   Parent Loop BB22_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB22_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB22_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB22_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_141
.LBB22_140:                             # %if.else538
                                        #   in Loop: Header=BB22_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_141:                             # %if.end552
                                        #   in Loop: Header=BB22_137 Depth=2
	jmp	.LBB22_142
.LBB22_142:                             # %for.inc553
                                        #   in Loop: Header=BB22_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_137
.LBB22_143:                             # %for.end555
                                        #   in Loop: Header=BB22_135 Depth=1
	jmp	.LBB22_144
.LBB22_144:                             # %for.inc556
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_135
.LBB22_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB22_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB22_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB22_146 Depth=1
	movl	$0, -4(%rbp)
.LBB22_148:                             # %for.cond562
                                        #   Parent Loop BB22_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB22_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB22_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB22_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_152
.LBB22_151:                             # %if.else580
                                        #   in Loop: Header=BB22_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_152:                             # %if.end594
                                        #   in Loop: Header=BB22_148 Depth=2
	jmp	.LBB22_153
.LBB22_153:                             # %for.inc595
                                        #   in Loop: Header=BB22_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_148
.LBB22_154:                             # %for.end597
                                        #   in Loop: Header=BB22_146 Depth=1
	jmp	.LBB22_155
.LBB22_155:                             # %for.inc598
                                        #   in Loop: Header=BB22_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_146
.LBB22_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB22_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB22_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB22_157 Depth=1
	movl	$0, -4(%rbp)
.LBB22_159:                             # %for.cond604
                                        #   Parent Loop BB22_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB22_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB22_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB22_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB22_163
.LBB22_162:                             # %if.else622
                                        #   in Loop: Header=BB22_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB22_163:                             # %if.end636
                                        #   in Loop: Header=BB22_159 Depth=2
	jmp	.LBB22_164
.LBB22_164:                             # %for.inc637
                                        #   in Loop: Header=BB22_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_159
.LBB22_165:                             # %for.end639
                                        #   in Loop: Header=BB22_157 Depth=1
	jmp	.LBB22_166
.LBB22_166:                             # %for.inc640
                                        #   in Loop: Header=BB22_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_157
.LBB22_167:                             # %for.end642
	cmpl	$71446644, -28(%rbp)    # imm = 0x4423074
	jne	.LBB22_169
.LBB22_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_168
.Lfunc_end22:
	.size	init_contexts.15, .Lfunc_end22-init_contexts.15
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.16        # -- Begin function init_contexts.16
	.p2align	4, 0x90
	.type	init_contexts.16,@function
init_contexts.16:                       # @init_contexts.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1859086654, -28(%rbp)  # imm = 0x6ECF693E
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB23_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB23_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	$0, -4(%rbp)
.LBB23_3:                               # %for.cond2
                                        #   Parent Loop BB23_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB23_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_7
.LBB23_6:                               # %if.else
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_7:                               # %if.end
                                        #   in Loop: Header=BB23_3 Depth=2
	jmp	.LBB23_8
.LBB23_8:                               # %for.inc
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_3
.LBB23_9:                               # %for.end
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_10
.LBB23_10:                              # %for.inc28
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_1
.LBB23_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB23_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB23_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB23_12 Depth=1
	movl	$0, -4(%rbp)
.LBB23_14:                              # %for.cond34
                                        #   Parent Loop BB23_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB23_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB23_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB23_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_18
.LBB23_17:                              # %if.else52
                                        #   in Loop: Header=BB23_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_18:                              # %if.end66
                                        #   in Loop: Header=BB23_14 Depth=2
	jmp	.LBB23_19
.LBB23_19:                              # %for.inc67
                                        #   in Loop: Header=BB23_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_14
.LBB23_20:                              # %for.end69
                                        #   in Loop: Header=BB23_12 Depth=1
	jmp	.LBB23_21
.LBB23_21:                              # %for.inc70
                                        #   in Loop: Header=BB23_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_12
.LBB23_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB23_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB23_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	$0, -4(%rbp)
.LBB23_25:                              # %for.cond76
                                        #   Parent Loop BB23_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB23_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB23_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB23_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_29
.LBB23_28:                              # %if.else94
                                        #   in Loop: Header=BB23_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_29:                              # %if.end108
                                        #   in Loop: Header=BB23_25 Depth=2
	jmp	.LBB23_30
.LBB23_30:                              # %for.inc109
                                        #   in Loop: Header=BB23_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_25
.LBB23_31:                              # %for.end111
                                        #   in Loop: Header=BB23_23 Depth=1
	jmp	.LBB23_32
.LBB23_32:                              # %for.inc112
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_23
.LBB23_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB23_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB23_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB23_34 Depth=1
	movl	$0, -4(%rbp)
.LBB23_36:                              # %for.cond118
                                        #   Parent Loop BB23_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB23_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB23_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB23_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_40
.LBB23_39:                              # %if.else136
                                        #   in Loop: Header=BB23_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_40:                              # %if.end150
                                        #   in Loop: Header=BB23_36 Depth=2
	jmp	.LBB23_41
.LBB23_41:                              # %for.inc151
                                        #   in Loop: Header=BB23_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_36
.LBB23_42:                              # %for.end153
                                        #   in Loop: Header=BB23_34 Depth=1
	jmp	.LBB23_43
.LBB23_43:                              # %for.inc154
                                        #   in Loop: Header=BB23_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_34
.LBB23_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB23_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB23_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB23_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_49
.LBB23_48:                              # %if.else172
                                        #   in Loop: Header=BB23_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_49:                              # %if.end183
                                        #   in Loop: Header=BB23_45 Depth=1
	jmp	.LBB23_50
.LBB23_50:                              # %for.inc184
                                        #   in Loop: Header=BB23_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_45
.LBB23_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB23_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB23_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB23_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_56
.LBB23_55:                              # %if.else202
                                        #   in Loop: Header=BB23_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_56:                              # %if.end213
                                        #   in Loop: Header=BB23_52 Depth=1
	jmp	.LBB23_57
.LBB23_57:                              # %for.inc214
                                        #   in Loop: Header=BB23_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_52
.LBB23_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB23_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB23_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_63
.LBB23_62:                              # %if.else232
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_63:                              # %if.end243
                                        #   in Loop: Header=BB23_59 Depth=1
	jmp	.LBB23_64
.LBB23_64:                              # %for.inc244
                                        #   in Loop: Header=BB23_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_59
.LBB23_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB23_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB23_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB23_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB23_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_70
.LBB23_69:                              # %if.else262
                                        #   in Loop: Header=BB23_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_70:                              # %if.end273
                                        #   in Loop: Header=BB23_66 Depth=1
	jmp	.LBB23_71
.LBB23_71:                              # %for.inc274
                                        #   in Loop: Header=BB23_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_66
.LBB23_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB23_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB23_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB23_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_77
.LBB23_76:                              # %if.else292
                                        #   in Loop: Header=BB23_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_77:                              # %if.end303
                                        #   in Loop: Header=BB23_73 Depth=1
	jmp	.LBB23_78
.LBB23_78:                              # %for.inc304
                                        #   in Loop: Header=BB23_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_73
.LBB23_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB23_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB23_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB23_80 Depth=1
	movl	$0, -4(%rbp)
.LBB23_82:                              # %for.cond310
                                        #   Parent Loop BB23_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB23_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB23_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_86
.LBB23_85:                              # %if.else328
                                        #   in Loop: Header=BB23_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_86:                              # %if.end342
                                        #   in Loop: Header=BB23_82 Depth=2
	jmp	.LBB23_87
.LBB23_87:                              # %for.inc343
                                        #   in Loop: Header=BB23_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_82
.LBB23_88:                              # %for.end345
                                        #   in Loop: Header=BB23_80 Depth=1
	jmp	.LBB23_89
.LBB23_89:                              # %for.inc346
                                        #   in Loop: Header=BB23_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_80
.LBB23_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB23_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB23_91 Depth=1
	movl	$0, -4(%rbp)
.LBB23_93:                              # %for.cond352
                                        #   Parent Loop BB23_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB23_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB23_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_97
.LBB23_96:                              # %if.else370
                                        #   in Loop: Header=BB23_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_97:                              # %if.end384
                                        #   in Loop: Header=BB23_93 Depth=2
	jmp	.LBB23_98
.LBB23_98:                              # %for.inc385
                                        #   in Loop: Header=BB23_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_93
.LBB23_99:                              # %for.end387
                                        #   in Loop: Header=BB23_91 Depth=1
	jmp	.LBB23_100
.LBB23_100:                             # %for.inc388
                                        #   in Loop: Header=BB23_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_91
.LBB23_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB23_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB23_102 Depth=1
	movl	$0, -4(%rbp)
.LBB23_104:                             # %for.cond394
                                        #   Parent Loop BB23_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB23_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB23_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_108
.LBB23_107:                             # %if.else412
                                        #   in Loop: Header=BB23_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_108:                             # %if.end426
                                        #   in Loop: Header=BB23_104 Depth=2
	jmp	.LBB23_109
.LBB23_109:                             # %for.inc427
                                        #   in Loop: Header=BB23_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_104
.LBB23_110:                             # %for.end429
                                        #   in Loop: Header=BB23_102 Depth=1
	jmp	.LBB23_111
.LBB23_111:                             # %for.inc430
                                        #   in Loop: Header=BB23_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_102
.LBB23_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB23_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB23_113 Depth=1
	movl	$0, -4(%rbp)
.LBB23_115:                             # %for.cond436
                                        #   Parent Loop BB23_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB23_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB23_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_119
.LBB23_118:                             # %if.else454
                                        #   in Loop: Header=BB23_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_119:                             # %if.end468
                                        #   in Loop: Header=BB23_115 Depth=2
	jmp	.LBB23_120
.LBB23_120:                             # %for.inc469
                                        #   in Loop: Header=BB23_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_115
.LBB23_121:                             # %for.end471
                                        #   in Loop: Header=BB23_113 Depth=1
	jmp	.LBB23_122
.LBB23_122:                             # %for.inc472
                                        #   in Loop: Header=BB23_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_113
.LBB23_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB23_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB23_124 Depth=1
	movl	$0, -4(%rbp)
.LBB23_126:                             # %for.cond478
                                        #   Parent Loop BB23_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB23_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB23_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB23_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_130
.LBB23_129:                             # %if.else496
                                        #   in Loop: Header=BB23_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_130:                             # %if.end510
                                        #   in Loop: Header=BB23_126 Depth=2
	jmp	.LBB23_131
.LBB23_131:                             # %for.inc511
                                        #   in Loop: Header=BB23_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_126
.LBB23_132:                             # %for.end513
                                        #   in Loop: Header=BB23_124 Depth=1
	jmp	.LBB23_133
.LBB23_133:                             # %for.inc514
                                        #   in Loop: Header=BB23_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_124
.LBB23_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB23_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB23_135 Depth=1
	movl	$0, -4(%rbp)
.LBB23_137:                             # %for.cond520
                                        #   Parent Loop BB23_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB23_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB23_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB23_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_141
.LBB23_140:                             # %if.else538
                                        #   in Loop: Header=BB23_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_141:                             # %if.end552
                                        #   in Loop: Header=BB23_137 Depth=2
	jmp	.LBB23_142
.LBB23_142:                             # %for.inc553
                                        #   in Loop: Header=BB23_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_137
.LBB23_143:                             # %for.end555
                                        #   in Loop: Header=BB23_135 Depth=1
	jmp	.LBB23_144
.LBB23_144:                             # %for.inc556
                                        #   in Loop: Header=BB23_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_135
.LBB23_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB23_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB23_146 Depth=1
	movl	$0, -4(%rbp)
.LBB23_148:                             # %for.cond562
                                        #   Parent Loop BB23_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB23_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB23_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_152
.LBB23_151:                             # %if.else580
                                        #   in Loop: Header=BB23_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_152:                             # %if.end594
                                        #   in Loop: Header=BB23_148 Depth=2
	jmp	.LBB23_153
.LBB23_153:                             # %for.inc595
                                        #   in Loop: Header=BB23_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_148
.LBB23_154:                             # %for.end597
                                        #   in Loop: Header=BB23_146 Depth=1
	jmp	.LBB23_155
.LBB23_155:                             # %for.inc598
                                        #   in Loop: Header=BB23_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_146
.LBB23_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB23_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB23_157 Depth=1
	movl	$0, -4(%rbp)
.LBB23_159:                             # %for.cond604
                                        #   Parent Loop BB23_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB23_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB23_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_163
.LBB23_162:                             # %if.else622
                                        #   in Loop: Header=BB23_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_163:                             # %if.end636
                                        #   in Loop: Header=BB23_159 Depth=2
	jmp	.LBB23_164
.LBB23_164:                             # %for.inc637
                                        #   in Loop: Header=BB23_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_159
.LBB23_165:                             # %for.end639
                                        #   in Loop: Header=BB23_157 Depth=1
	jmp	.LBB23_166
.LBB23_166:                             # %for.inc640
                                        #   in Loop: Header=BB23_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_157
.LBB23_167:                             # %for.end642
	cmpl	$1859086654, -28(%rbp)  # imm = 0x6ECF693E
	jne	.LBB23_169
.LBB23_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_168
.Lfunc_end23:
	.size	init_contexts.16, .Lfunc_end23-init_contexts.16
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.17       # -- Begin function store_contexts.17
	.p2align	4, 0x90
	.type	store_contexts.17,@function
store_contexts.17:                      # @store_contexts.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$403354841, -16(%rbp)   # imm = 0x180AB4D9
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB24_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB24_3
.LBB24_2:                               # %if.else
	jmp	.LBB24_3
.LBB24_3:                               # %if.end
	cmpl	$403354841, -16(%rbp)   # imm = 0x180AB4D9
	jne	.LBB24_5
.LBB24_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_4
.Lfunc_end24:
	.size	store_contexts.17, .Lfunc_end24-store_contexts.17
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.18 # -- Begin function update_field_frame_contexts.18
	.p2align	4, 0x90
	.type	update_field_frame_contexts.18,@function
update_field_frame_contexts.18:         # @update_field_frame_contexts.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1472774557, -16(%rbp)  # imm = 0x57C8C19D
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB25_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB25_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB25_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	$0, -4(%rbp)
.LBB25_4:                               # %for.cond1
                                        #   Parent Loop BB25_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB25_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB25_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB25_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_4
.LBB25_7:                               # %for.end
                                        #   in Loop: Header=BB25_2 Depth=1
	jmp	.LBB25_8
.LBB25_8:                               # %for.inc23
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_2
.LBB25_9:                               # %for.end25
	jmp	.LBB25_19
.LBB25_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB25_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB25_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB25_11 Depth=1
	movl	$0, -4(%rbp)
.LBB25_13:                              # %for.cond29
                                        #   Parent Loop BB25_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB25_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB25_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_13
.LBB25_16:                              # %for.end56
                                        #   in Loop: Header=BB25_11 Depth=1
	jmp	.LBB25_17
.LBB25_17:                              # %for.inc57
                                        #   in Loop: Header=BB25_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_11
.LBB25_18:                              # %for.end59
	jmp	.LBB25_19
.LBB25_19:                              # %if.end
	cmpl	$1472774557, -16(%rbp)  # imm = 0x57C8C19D
	jne	.LBB25_21
.LBB25_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_20
.Lfunc_end25:
	.size	update_field_frame_contexts.18, .Lfunc_end25-update_field_frame_contexts.18
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.19       # -- Begin function store_contexts.19
	.p2align	4, 0x90
	.type	store_contexts.19,@function
store_contexts.19:                      # @store_contexts.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$818288217, -16(%rbp)   # imm = 0x30C61659
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB26_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB26_3
.LBB26_2:                               # %if.else
	jmp	.LBB26_3
.LBB26_3:                               # %if.end
	cmpl	$818288217, -16(%rbp)   # imm = 0x30C61659
	jne	.LBB26_5
.LBB26_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_4
.Lfunc_end26:
	.size	store_contexts.19, .Lfunc_end26-store_contexts.19
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.20       # -- Begin function store_contexts.20
	.p2align	4, 0x90
	.type	store_contexts.20,@function
store_contexts.20:                      # @store_contexts.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1573301002, -16(%rbp)  # imm = 0x5DC6AB0A
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB27_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB27_3
.LBB27_2:                               # %if.else
	jmp	.LBB27_3
.LBB27_3:                               # %if.end
	cmpl	$1573301002, -16(%rbp)  # imm = 0x5DC6AB0A
	jne	.LBB27_5
.LBB27_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_4
.Lfunc_end27:
	.size	store_contexts.20, .Lfunc_end27-store_contexts.20
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.21
.LCPI28_0:
	.quad	4607182418800017408     # double 1
.LCPI28_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI28_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI28_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.21
	.p2align	4, 0x90
	.type	XRate.21,@function
XRate.21:                               # @XRate.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$15116210, -36(%rbp)    # imm = 0xE6A7B2
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB28_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB28_3
.LBB28_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB28_3:                               # %cond.end
	vmovsd	.LCPI28_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI28_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI28_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI28_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB28_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI28_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB28_6
.LBB28_5:                               # %cond.false6
	vmovsd	.LCPI28_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI28_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI28_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB28_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB28_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB28_9
.LBB28_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB28_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB28_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB28_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB28_13
.LBB28_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB28_13:                              # %cond.end26
	jmp	.LBB28_15
.LBB28_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB28_15
.LBB28_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB28_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB28_18
.LBB28_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB28_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$15116210, -36(%rbp)    # imm = 0xE6A7B2
	jne	.LBB28_20
.LBB28_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB28_19
.Lfunc_end28:
	.size	XRate.21, .Lfunc_end28-XRate.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.22
.LCPI29_0:
	.quad	4607182418800017408     # double 1
.LCPI29_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI29_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI29_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.22
	.p2align	4, 0x90
	.type	XRate.22,@function
XRate.22:                               # @XRate.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1334697263, -36(%rbp)  # imm = 0x4F8DDD2F
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB29_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB29_3
.LBB29_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB29_3:                               # %cond.end
	vmovsd	.LCPI29_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI29_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI29_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI29_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB29_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI29_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB29_6
.LBB29_5:                               # %cond.false6
	vmovsd	.LCPI29_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI29_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI29_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB29_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB29_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB29_9
.LBB29_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB29_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB29_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB29_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB29_13
.LBB29_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB29_13:                              # %cond.end26
	jmp	.LBB29_15
.LBB29_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB29_15
.LBB29_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB29_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB29_18
.LBB29_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB29_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1334697263, -36(%rbp)  # imm = 0x4F8DDD2F
	jne	.LBB29_20
.LBB29_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB29_19
.Lfunc_end29:
	.size	XRate.22, .Lfunc_end29-XRate.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.23
.LCPI30_0:
	.quad	4607182418800017408     # double 1
.LCPI30_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI30_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI30_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.23
	.p2align	4, 0x90
	.type	XRate.23,@function
XRate.23:                               # @XRate.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1584459225, -36(%rbp)  # imm = 0x5E70EDD9
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB30_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB30_3
.LBB30_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB30_3:                               # %cond.end
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI30_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI30_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI30_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB30_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB30_6
.LBB30_5:                               # %cond.false6
	vmovsd	.LCPI30_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI30_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI30_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB30_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB30_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB30_9
.LBB30_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB30_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB30_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB30_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB30_13
.LBB30_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB30_13:                              # %cond.end26
	jmp	.LBB30_15
.LBB30_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB30_15
.LBB30_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB30_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB30_18
.LBB30_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB30_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1584459225, -36(%rbp)  # imm = 0x5E70EDD9
	jne	.LBB30_20
.LBB30_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB30_19
.Lfunc_end30:
	.size	XRate.23, .Lfunc_end30-XRate.23
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.24       # -- Begin function store_contexts.24
	.p2align	4, 0x90
	.type	store_contexts.24,@function
store_contexts.24:                      # @store_contexts.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1185442837, -16(%rbp)  # imm = 0x46A86C15
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB31_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB31_3
.LBB31_2:                               # %if.else
	jmp	.LBB31_3
.LBB31_3:                               # %if.end
	cmpl	$1185442837, -16(%rbp)  # imm = 0x46A86C15
	jne	.LBB31_5
.LBB31_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_4
.Lfunc_end31:
	.size	store_contexts.24, .Lfunc_end31-store_contexts.24
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.25    # -- Begin function SetCtxModelNumber.25
	.p2align	4, 0x90
	.type	SetCtxModelNumber.25,@function
SetCtxModelNumber.25:                   # @SetCtxModelNumber.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1327402574, -16(%rbp)  # imm = 0x4F1E8E4E
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB32_11
.LBB32_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB32_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB32_11
.LBB32_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB32_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB32_11
.LBB32_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB32_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB32_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB32_10
.LBB32_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB32_10:                              # %if.end38
	jmp	.LBB32_11
.LBB32_11:                              # %if.end39
	cmpl	$1327402574, -16(%rbp)  # imm = 0x4F1E8E4E
	jne	.LBB32_13
.LBB32_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_12
.Lfunc_end32:
	.size	SetCtxModelNumber.25, .Lfunc_end32-SetCtxModelNumber.25
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.26    # -- Begin function SetCtxModelNumber.26
	.p2align	4, 0x90
	.type	SetCtxModelNumber.26,@function
SetCtxModelNumber.26:                   # @SetCtxModelNumber.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2104722669, -16(%rbp)  # imm = 0x7D7384ED
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB33_11
.LBB33_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB33_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB33_11
.LBB33_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB33_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB33_11
.LBB33_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB33_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB33_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB33_10
.LBB33_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB33_10:                              # %if.end38
	jmp	.LBB33_11
.LBB33_11:                              # %if.end39
	cmpl	$2104722669, -16(%rbp)  # imm = 0x7D7384ED
	jne	.LBB33_13
.LBB33_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_12
.Lfunc_end33:
	.size	SetCtxModelNumber.26, .Lfunc_end33-SetCtxModelNumber.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.27
.LCPI34_0:
	.quad	4611686018427387904     # double 2
.LCPI34_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.27
	.p2align	4, 0x90
	.type	create_context_memory.27,@function
create_context_memory.27:               # @create_context_memory.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1985751341, -20(%rbp)  # imm = 0x765C292D
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB34_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB34_3
.LBB34_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB34_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB34_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB34_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB34_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB34_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB34_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB34_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB34_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB34_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB34_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB34_11:                              # %if.end10
                                        #   in Loop: Header=BB34_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB34_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB34_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB34_13:                              # %if.end16
                                        #   in Loop: Header=BB34_8 Depth=1
	movl	$0, -8(%rbp)
.LBB34_14:                              # %for.cond17
                                        #   Parent Loop BB34_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB34_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB34_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB34_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB34_17:                              # %if.end28
                                        #   in Loop: Header=BB34_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB34_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB34_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB34_19:                              # %if.end39
                                        #   in Loop: Header=BB34_14 Depth=2
	jmp	.LBB34_20
.LBB34_20:                              # %for.inc
                                        #   in Loop: Header=BB34_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_14
.LBB34_21:                              # %for.end
                                        #   in Loop: Header=BB34_8 Depth=1
	jmp	.LBB34_22
.LBB34_22:                              # %for.inc40
                                        #   in Loop: Header=BB34_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_8
.LBB34_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB34_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_26 Depth 2
                                        #       Child Loop BB34_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB34_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB34_24 Depth=1
	movl	$0, -8(%rbp)
.LBB34_26:                              # %for.cond47
                                        #   Parent Loop BB34_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB34_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB34_26 Depth=2
	movl	$0, -12(%rbp)
.LBB34_28:                              # %for.cond51
                                        #   Parent Loop BB34_24 Depth=1
                                        #     Parent Loop BB34_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB34_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB34_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB34_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_28
.LBB34_31:                              # %for.end63
                                        #   in Loop: Header=BB34_26 Depth=2
	jmp	.LBB34_32
.LBB34_32:                              # %for.inc64
                                        #   in Loop: Header=BB34_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_26
.LBB34_33:                              # %for.end66
                                        #   in Loop: Header=BB34_24 Depth=1
	jmp	.LBB34_34
.LBB34_34:                              # %for.inc67
                                        #   in Loop: Header=BB34_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_24
.LBB34_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB34_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB34_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB34_36 Depth=1
	vmovsd	.LCPI34_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB34_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_36
.LBB34_39:                              # %for.end98
	cmpl	$1985751341, -20(%rbp)  # imm = 0x765C292D
	jne	.LBB34_41
.LBB34_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_40
.Lfunc_end34:
	.size	create_context_memory.27, .Lfunc_end34-create_context_memory.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.28
.LCPI35_0:
	.quad	4607182418800017408     # double 1
.LCPI35_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI35_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI35_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.28
	.p2align	4, 0x90
	.type	XRate.28,@function
XRate.28:                               # @XRate.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$340717042, -32(%rbp)   # imm = 0x144EEDF2
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB35_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB35_3
.LBB35_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB35_3:                               # %cond.end
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI35_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI35_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI35_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB35_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB35_6
.LBB35_5:                               # %cond.false6
	vmovsd	.LCPI35_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI35_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI35_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB35_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB35_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB35_9
.LBB35_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB35_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB35_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB35_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB35_13
.LBB35_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB35_13:                              # %cond.end26
	jmp	.LBB35_15
.LBB35_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB35_15
.LBB35_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB35_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB35_18
.LBB35_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB35_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$340717042, -32(%rbp)   # imm = 0x144EEDF2
	jne	.LBB35_20
.LBB35_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB35_19
.Lfunc_end35:
	.size	XRate.28, .Lfunc_end35-XRate.28
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.29        # -- Begin function init_contexts.29
	.p2align	4, 0x90
	.type	init_contexts.29,@function
init_contexts.29:                       # @init_contexts.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$599415054, -28(%rbp)   # imm = 0x23BA590E
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB36_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_3:                               # %for.cond2
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB36_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_7
.LBB36_6:                               # %if.else
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_7:                               # %if.end
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_8
.LBB36_8:                               # %for.inc
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_3
.LBB36_9:                               # %for.end
                                        #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_10
.LBB36_10:                              # %for.inc28
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_1
.LBB36_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB36_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB36_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB36_12 Depth=1
	movl	$0, -4(%rbp)
.LBB36_14:                              # %for.cond34
                                        #   Parent Loop BB36_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB36_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB36_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB36_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_18
.LBB36_17:                              # %if.else52
                                        #   in Loop: Header=BB36_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_18:                              # %if.end66
                                        #   in Loop: Header=BB36_14 Depth=2
	jmp	.LBB36_19
.LBB36_19:                              # %for.inc67
                                        #   in Loop: Header=BB36_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_14
.LBB36_20:                              # %for.end69
                                        #   in Loop: Header=BB36_12 Depth=1
	jmp	.LBB36_21
.LBB36_21:                              # %for.inc70
                                        #   in Loop: Header=BB36_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_12
.LBB36_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB36_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB36_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB36_23 Depth=1
	movl	$0, -4(%rbp)
.LBB36_25:                              # %for.cond76
                                        #   Parent Loop BB36_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB36_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB36_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB36_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_29
.LBB36_28:                              # %if.else94
                                        #   in Loop: Header=BB36_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_29:                              # %if.end108
                                        #   in Loop: Header=BB36_25 Depth=2
	jmp	.LBB36_30
.LBB36_30:                              # %for.inc109
                                        #   in Loop: Header=BB36_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_25
.LBB36_31:                              # %for.end111
                                        #   in Loop: Header=BB36_23 Depth=1
	jmp	.LBB36_32
.LBB36_32:                              # %for.inc112
                                        #   in Loop: Header=BB36_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_23
.LBB36_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB36_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB36_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB36_34 Depth=1
	movl	$0, -4(%rbp)
.LBB36_36:                              # %for.cond118
                                        #   Parent Loop BB36_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB36_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB36_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB36_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_40
.LBB36_39:                              # %if.else136
                                        #   in Loop: Header=BB36_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_40:                              # %if.end150
                                        #   in Loop: Header=BB36_36 Depth=2
	jmp	.LBB36_41
.LBB36_41:                              # %for.inc151
                                        #   in Loop: Header=BB36_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_36
.LBB36_42:                              # %for.end153
                                        #   in Loop: Header=BB36_34 Depth=1
	jmp	.LBB36_43
.LBB36_43:                              # %for.inc154
                                        #   in Loop: Header=BB36_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_34
.LBB36_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB36_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB36_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB36_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_49
.LBB36_48:                              # %if.else172
                                        #   in Loop: Header=BB36_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_49:                              # %if.end183
                                        #   in Loop: Header=BB36_45 Depth=1
	jmp	.LBB36_50
.LBB36_50:                              # %for.inc184
                                        #   in Loop: Header=BB36_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_45
.LBB36_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB36_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB36_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB36_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_56
.LBB36_55:                              # %if.else202
                                        #   in Loop: Header=BB36_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_56:                              # %if.end213
                                        #   in Loop: Header=BB36_52 Depth=1
	jmp	.LBB36_57
.LBB36_57:                              # %for.inc214
                                        #   in Loop: Header=BB36_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_52
.LBB36_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB36_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB36_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB36_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB36_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_63
.LBB36_62:                              # %if.else232
                                        #   in Loop: Header=BB36_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_63:                              # %if.end243
                                        #   in Loop: Header=BB36_59 Depth=1
	jmp	.LBB36_64
.LBB36_64:                              # %for.inc244
                                        #   in Loop: Header=BB36_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_59
.LBB36_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB36_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB36_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB36_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB36_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_70
.LBB36_69:                              # %if.else262
                                        #   in Loop: Header=BB36_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_70:                              # %if.end273
                                        #   in Loop: Header=BB36_66 Depth=1
	jmp	.LBB36_71
.LBB36_71:                              # %for.inc274
                                        #   in Loop: Header=BB36_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_66
.LBB36_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB36_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB36_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB36_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_77
.LBB36_76:                              # %if.else292
                                        #   in Loop: Header=BB36_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_77:                              # %if.end303
                                        #   in Loop: Header=BB36_73 Depth=1
	jmp	.LBB36_78
.LBB36_78:                              # %for.inc304
                                        #   in Loop: Header=BB36_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_73
.LBB36_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB36_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB36_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB36_80 Depth=1
	movl	$0, -4(%rbp)
.LBB36_82:                              # %for.cond310
                                        #   Parent Loop BB36_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB36_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB36_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_86
.LBB36_85:                              # %if.else328
                                        #   in Loop: Header=BB36_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_86:                              # %if.end342
                                        #   in Loop: Header=BB36_82 Depth=2
	jmp	.LBB36_87
.LBB36_87:                              # %for.inc343
                                        #   in Loop: Header=BB36_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_82
.LBB36_88:                              # %for.end345
                                        #   in Loop: Header=BB36_80 Depth=1
	jmp	.LBB36_89
.LBB36_89:                              # %for.inc346
                                        #   in Loop: Header=BB36_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_80
.LBB36_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB36_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB36_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB36_91 Depth=1
	movl	$0, -4(%rbp)
.LBB36_93:                              # %for.cond352
                                        #   Parent Loop BB36_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB36_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB36_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_97
.LBB36_96:                              # %if.else370
                                        #   in Loop: Header=BB36_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_97:                              # %if.end384
                                        #   in Loop: Header=BB36_93 Depth=2
	jmp	.LBB36_98
.LBB36_98:                              # %for.inc385
                                        #   in Loop: Header=BB36_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_93
.LBB36_99:                              # %for.end387
                                        #   in Loop: Header=BB36_91 Depth=1
	jmp	.LBB36_100
.LBB36_100:                             # %for.inc388
                                        #   in Loop: Header=BB36_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_91
.LBB36_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB36_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB36_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB36_102 Depth=1
	movl	$0, -4(%rbp)
.LBB36_104:                             # %for.cond394
                                        #   Parent Loop BB36_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB36_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB36_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB36_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_108
.LBB36_107:                             # %if.else412
                                        #   in Loop: Header=BB36_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_108:                             # %if.end426
                                        #   in Loop: Header=BB36_104 Depth=2
	jmp	.LBB36_109
.LBB36_109:                             # %for.inc427
                                        #   in Loop: Header=BB36_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_104
.LBB36_110:                             # %for.end429
                                        #   in Loop: Header=BB36_102 Depth=1
	jmp	.LBB36_111
.LBB36_111:                             # %for.inc430
                                        #   in Loop: Header=BB36_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_102
.LBB36_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB36_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB36_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB36_113 Depth=1
	movl	$0, -4(%rbp)
.LBB36_115:                             # %for.cond436
                                        #   Parent Loop BB36_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB36_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB36_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB36_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_119
.LBB36_118:                             # %if.else454
                                        #   in Loop: Header=BB36_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_119:                             # %if.end468
                                        #   in Loop: Header=BB36_115 Depth=2
	jmp	.LBB36_120
.LBB36_120:                             # %for.inc469
                                        #   in Loop: Header=BB36_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_115
.LBB36_121:                             # %for.end471
                                        #   in Loop: Header=BB36_113 Depth=1
	jmp	.LBB36_122
.LBB36_122:                             # %for.inc472
                                        #   in Loop: Header=BB36_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_113
.LBB36_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB36_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB36_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB36_124 Depth=1
	movl	$0, -4(%rbp)
.LBB36_126:                             # %for.cond478
                                        #   Parent Loop BB36_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB36_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB36_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB36_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_130
.LBB36_129:                             # %if.else496
                                        #   in Loop: Header=BB36_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_130:                             # %if.end510
                                        #   in Loop: Header=BB36_126 Depth=2
	jmp	.LBB36_131
.LBB36_131:                             # %for.inc511
                                        #   in Loop: Header=BB36_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_126
.LBB36_132:                             # %for.end513
                                        #   in Loop: Header=BB36_124 Depth=1
	jmp	.LBB36_133
.LBB36_133:                             # %for.inc514
                                        #   in Loop: Header=BB36_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_124
.LBB36_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB36_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB36_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB36_135 Depth=1
	movl	$0, -4(%rbp)
.LBB36_137:                             # %for.cond520
                                        #   Parent Loop BB36_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB36_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB36_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB36_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_141
.LBB36_140:                             # %if.else538
                                        #   in Loop: Header=BB36_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_141:                             # %if.end552
                                        #   in Loop: Header=BB36_137 Depth=2
	jmp	.LBB36_142
.LBB36_142:                             # %for.inc553
                                        #   in Loop: Header=BB36_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_137
.LBB36_143:                             # %for.end555
                                        #   in Loop: Header=BB36_135 Depth=1
	jmp	.LBB36_144
.LBB36_144:                             # %for.inc556
                                        #   in Loop: Header=BB36_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_135
.LBB36_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB36_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB36_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB36_146 Depth=1
	movl	$0, -4(%rbp)
.LBB36_148:                             # %for.cond562
                                        #   Parent Loop BB36_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB36_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB36_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB36_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_152
.LBB36_151:                             # %if.else580
                                        #   in Loop: Header=BB36_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_152:                             # %if.end594
                                        #   in Loop: Header=BB36_148 Depth=2
	jmp	.LBB36_153
.LBB36_153:                             # %for.inc595
                                        #   in Loop: Header=BB36_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_148
.LBB36_154:                             # %for.end597
                                        #   in Loop: Header=BB36_146 Depth=1
	jmp	.LBB36_155
.LBB36_155:                             # %for.inc598
                                        #   in Loop: Header=BB36_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_146
.LBB36_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB36_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB36_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB36_157 Depth=1
	movl	$0, -4(%rbp)
.LBB36_159:                             # %for.cond604
                                        #   Parent Loop BB36_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB36_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB36_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB36_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB36_163
.LBB36_162:                             # %if.else622
                                        #   in Loop: Header=BB36_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB36_163:                             # %if.end636
                                        #   in Loop: Header=BB36_159 Depth=2
	jmp	.LBB36_164
.LBB36_164:                             # %for.inc637
                                        #   in Loop: Header=BB36_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_159
.LBB36_165:                             # %for.end639
                                        #   in Loop: Header=BB36_157 Depth=1
	jmp	.LBB36_166
.LBB36_166:                             # %for.inc640
                                        #   in Loop: Header=BB36_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_157
.LBB36_167:                             # %for.end642
	cmpl	$599415054, -28(%rbp)   # imm = 0x23BA590E
	jne	.LBB36_169
.LBB36_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_168
.Lfunc_end36:
	.size	init_contexts.29, .Lfunc_end36-init_contexts.29
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.30 # -- Begin function update_field_frame_contexts.30
	.p2align	4, 0x90
	.type	update_field_frame_contexts.30,@function
update_field_frame_contexts.30:         # @update_field_frame_contexts.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$721698383, -16(%rbp)   # imm = 0x2B043E4F
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB37_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB37_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB37_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	$0, -8(%rbp)
.LBB37_4:                               # %for.cond1
                                        #   Parent Loop BB37_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB37_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB37_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB37_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_4
.LBB37_7:                               # %for.end
                                        #   in Loop: Header=BB37_2 Depth=1
	jmp	.LBB37_8
.LBB37_8:                               # %for.inc23
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_2
.LBB37_9:                               # %for.end25
	jmp	.LBB37_19
.LBB37_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB37_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB37_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	$0, -8(%rbp)
.LBB37_13:                              # %for.cond29
                                        #   Parent Loop BB37_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB37_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB37_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_13
.LBB37_16:                              # %for.end56
                                        #   in Loop: Header=BB37_11 Depth=1
	jmp	.LBB37_17
.LBB37_17:                              # %for.inc57
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_11
.LBB37_18:                              # %for.end59
	jmp	.LBB37_19
.LBB37_19:                              # %if.end
	cmpl	$721698383, -16(%rbp)   # imm = 0x2B043E4F
	jne	.LBB37_21
.LBB37_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_20
.Lfunc_end37:
	.size	update_field_frame_contexts.30, .Lfunc_end37-update_field_frame_contexts.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.31
.LCPI38_0:
	.quad	4607182418800017408     # double 1
.LCPI38_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI38_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI38_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.31
	.p2align	4, 0x90
	.type	XRate.31,@function
XRate.31:                               # @XRate.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$3114287, -36(%rbp)     # imm = 0x2F852F
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB38_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB38_3
.LBB38_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB38_3:                               # %cond.end
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI38_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI38_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI38_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB38_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB38_6
.LBB38_5:                               # %cond.false6
	vmovsd	.LCPI38_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI38_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI38_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB38_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB38_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB38_9
.LBB38_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB38_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB38_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB38_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB38_13
.LBB38_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB38_13:                              # %cond.end26
	jmp	.LBB38_15
.LBB38_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB38_15
.LBB38_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB38_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB38_18
.LBB38_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB38_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$3114287, -36(%rbp)     # imm = 0x2F852F
	jne	.LBB38_20
.LBB38_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB38_19
.Lfunc_end38:
	.size	XRate.31, .Lfunc_end38-XRate.31
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.32        # -- Begin function init_contexts.32
	.p2align	4, 0x90
	.type	init_contexts.32,@function
init_contexts.32:                       # @init_contexts.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$889783101, -28(%rbp)   # imm = 0x3509033D
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB39_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -4(%rbp)
.LBB39_3:                               # %for.cond2
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB39_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_7
.LBB39_6:                               # %if.else
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_7:                               # %if.end
                                        #   in Loop: Header=BB39_3 Depth=2
	jmp	.LBB39_8
.LBB39_8:                               # %for.inc
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_3
.LBB39_9:                               # %for.end
                                        #   in Loop: Header=BB39_1 Depth=1
	jmp	.LBB39_10
.LBB39_10:                              # %for.inc28
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_1
.LBB39_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB39_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB39_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB39_12 Depth=1
	movl	$0, -4(%rbp)
.LBB39_14:                              # %for.cond34
                                        #   Parent Loop BB39_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB39_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB39_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB39_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_18
.LBB39_17:                              # %if.else52
                                        #   in Loop: Header=BB39_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_18:                              # %if.end66
                                        #   in Loop: Header=BB39_14 Depth=2
	jmp	.LBB39_19
.LBB39_19:                              # %for.inc67
                                        #   in Loop: Header=BB39_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_14
.LBB39_20:                              # %for.end69
                                        #   in Loop: Header=BB39_12 Depth=1
	jmp	.LBB39_21
.LBB39_21:                              # %for.inc70
                                        #   in Loop: Header=BB39_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_12
.LBB39_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB39_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB39_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB39_23 Depth=1
	movl	$0, -4(%rbp)
.LBB39_25:                              # %for.cond76
                                        #   Parent Loop BB39_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB39_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB39_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB39_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_29
.LBB39_28:                              # %if.else94
                                        #   in Loop: Header=BB39_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_29:                              # %if.end108
                                        #   in Loop: Header=BB39_25 Depth=2
	jmp	.LBB39_30
.LBB39_30:                              # %for.inc109
                                        #   in Loop: Header=BB39_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_25
.LBB39_31:                              # %for.end111
                                        #   in Loop: Header=BB39_23 Depth=1
	jmp	.LBB39_32
.LBB39_32:                              # %for.inc112
                                        #   in Loop: Header=BB39_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_23
.LBB39_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB39_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB39_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB39_34 Depth=1
	movl	$0, -4(%rbp)
.LBB39_36:                              # %for.cond118
                                        #   Parent Loop BB39_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB39_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_40
.LBB39_39:                              # %if.else136
                                        #   in Loop: Header=BB39_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_40:                              # %if.end150
                                        #   in Loop: Header=BB39_36 Depth=2
	jmp	.LBB39_41
.LBB39_41:                              # %for.inc151
                                        #   in Loop: Header=BB39_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_36
.LBB39_42:                              # %for.end153
                                        #   in Loop: Header=BB39_34 Depth=1
	jmp	.LBB39_43
.LBB39_43:                              # %for.inc154
                                        #   in Loop: Header=BB39_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_34
.LBB39_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB39_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB39_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB39_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_49
.LBB39_48:                              # %if.else172
                                        #   in Loop: Header=BB39_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_49:                              # %if.end183
                                        #   in Loop: Header=BB39_45 Depth=1
	jmp	.LBB39_50
.LBB39_50:                              # %for.inc184
                                        #   in Loop: Header=BB39_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_45
.LBB39_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB39_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB39_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB39_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_56
.LBB39_55:                              # %if.else202
                                        #   in Loop: Header=BB39_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_56:                              # %if.end213
                                        #   in Loop: Header=BB39_52 Depth=1
	jmp	.LBB39_57
.LBB39_57:                              # %for.inc214
                                        #   in Loop: Header=BB39_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_52
.LBB39_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB39_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB39_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB39_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB39_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_63
.LBB39_62:                              # %if.else232
                                        #   in Loop: Header=BB39_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_63:                              # %if.end243
                                        #   in Loop: Header=BB39_59 Depth=1
	jmp	.LBB39_64
.LBB39_64:                              # %for.inc244
                                        #   in Loop: Header=BB39_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_59
.LBB39_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB39_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB39_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB39_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB39_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_70
.LBB39_69:                              # %if.else262
                                        #   in Loop: Header=BB39_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_70:                              # %if.end273
                                        #   in Loop: Header=BB39_66 Depth=1
	jmp	.LBB39_71
.LBB39_71:                              # %for.inc274
                                        #   in Loop: Header=BB39_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_66
.LBB39_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB39_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB39_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB39_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_77
.LBB39_76:                              # %if.else292
                                        #   in Loop: Header=BB39_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_77:                              # %if.end303
                                        #   in Loop: Header=BB39_73 Depth=1
	jmp	.LBB39_78
.LBB39_78:                              # %for.inc304
                                        #   in Loop: Header=BB39_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_73
.LBB39_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB39_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB39_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB39_80 Depth=1
	movl	$0, -4(%rbp)
.LBB39_82:                              # %for.cond310
                                        #   Parent Loop BB39_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB39_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB39_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_86
.LBB39_85:                              # %if.else328
                                        #   in Loop: Header=BB39_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_86:                              # %if.end342
                                        #   in Loop: Header=BB39_82 Depth=2
	jmp	.LBB39_87
.LBB39_87:                              # %for.inc343
                                        #   in Loop: Header=BB39_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_82
.LBB39_88:                              # %for.end345
                                        #   in Loop: Header=BB39_80 Depth=1
	jmp	.LBB39_89
.LBB39_89:                              # %for.inc346
                                        #   in Loop: Header=BB39_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_80
.LBB39_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB39_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB39_91 Depth=1
	movl	$0, -4(%rbp)
.LBB39_93:                              # %for.cond352
                                        #   Parent Loop BB39_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB39_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB39_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_97
.LBB39_96:                              # %if.else370
                                        #   in Loop: Header=BB39_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_97:                              # %if.end384
                                        #   in Loop: Header=BB39_93 Depth=2
	jmp	.LBB39_98
.LBB39_98:                              # %for.inc385
                                        #   in Loop: Header=BB39_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_93
.LBB39_99:                              # %for.end387
                                        #   in Loop: Header=BB39_91 Depth=1
	jmp	.LBB39_100
.LBB39_100:                             # %for.inc388
                                        #   in Loop: Header=BB39_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_91
.LBB39_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB39_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB39_102 Depth=1
	movl	$0, -4(%rbp)
.LBB39_104:                             # %for.cond394
                                        #   Parent Loop BB39_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB39_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB39_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_108
.LBB39_107:                             # %if.else412
                                        #   in Loop: Header=BB39_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_108:                             # %if.end426
                                        #   in Loop: Header=BB39_104 Depth=2
	jmp	.LBB39_109
.LBB39_109:                             # %for.inc427
                                        #   in Loop: Header=BB39_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_104
.LBB39_110:                             # %for.end429
                                        #   in Loop: Header=BB39_102 Depth=1
	jmp	.LBB39_111
.LBB39_111:                             # %for.inc430
                                        #   in Loop: Header=BB39_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_102
.LBB39_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB39_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB39_113 Depth=1
	movl	$0, -4(%rbp)
.LBB39_115:                             # %for.cond436
                                        #   Parent Loop BB39_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB39_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB39_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_119
.LBB39_118:                             # %if.else454
                                        #   in Loop: Header=BB39_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_119:                             # %if.end468
                                        #   in Loop: Header=BB39_115 Depth=2
	jmp	.LBB39_120
.LBB39_120:                             # %for.inc469
                                        #   in Loop: Header=BB39_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_115
.LBB39_121:                             # %for.end471
                                        #   in Loop: Header=BB39_113 Depth=1
	jmp	.LBB39_122
.LBB39_122:                             # %for.inc472
                                        #   in Loop: Header=BB39_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_113
.LBB39_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB39_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB39_124 Depth=1
	movl	$0, -4(%rbp)
.LBB39_126:                             # %for.cond478
                                        #   Parent Loop BB39_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB39_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB39_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB39_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_130
.LBB39_129:                             # %if.else496
                                        #   in Loop: Header=BB39_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_130:                             # %if.end510
                                        #   in Loop: Header=BB39_126 Depth=2
	jmp	.LBB39_131
.LBB39_131:                             # %for.inc511
                                        #   in Loop: Header=BB39_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_126
.LBB39_132:                             # %for.end513
                                        #   in Loop: Header=BB39_124 Depth=1
	jmp	.LBB39_133
.LBB39_133:                             # %for.inc514
                                        #   in Loop: Header=BB39_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_124
.LBB39_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB39_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB39_135 Depth=1
	movl	$0, -4(%rbp)
.LBB39_137:                             # %for.cond520
                                        #   Parent Loop BB39_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB39_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB39_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB39_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_141
.LBB39_140:                             # %if.else538
                                        #   in Loop: Header=BB39_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_141:                             # %if.end552
                                        #   in Loop: Header=BB39_137 Depth=2
	jmp	.LBB39_142
.LBB39_142:                             # %for.inc553
                                        #   in Loop: Header=BB39_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_137
.LBB39_143:                             # %for.end555
                                        #   in Loop: Header=BB39_135 Depth=1
	jmp	.LBB39_144
.LBB39_144:                             # %for.inc556
                                        #   in Loop: Header=BB39_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_135
.LBB39_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB39_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB39_146 Depth=1
	movl	$0, -4(%rbp)
.LBB39_148:                             # %for.cond562
                                        #   Parent Loop BB39_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB39_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB39_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_152
.LBB39_151:                             # %if.else580
                                        #   in Loop: Header=BB39_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_152:                             # %if.end594
                                        #   in Loop: Header=BB39_148 Depth=2
	jmp	.LBB39_153
.LBB39_153:                             # %for.inc595
                                        #   in Loop: Header=BB39_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_148
.LBB39_154:                             # %for.end597
                                        #   in Loop: Header=BB39_146 Depth=1
	jmp	.LBB39_155
.LBB39_155:                             # %for.inc598
                                        #   in Loop: Header=BB39_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_146
.LBB39_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB39_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB39_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	$0, -4(%rbp)
.LBB39_159:                             # %for.cond604
                                        #   Parent Loop BB39_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB39_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB39_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB39_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB39_163
.LBB39_162:                             # %if.else622
                                        #   in Loop: Header=BB39_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB39_163:                             # %if.end636
                                        #   in Loop: Header=BB39_159 Depth=2
	jmp	.LBB39_164
.LBB39_164:                             # %for.inc637
                                        #   in Loop: Header=BB39_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_159
.LBB39_165:                             # %for.end639
                                        #   in Loop: Header=BB39_157 Depth=1
	jmp	.LBB39_166
.LBB39_166:                             # %for.inc640
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_157
.LBB39_167:                             # %for.end642
	cmpl	$889783101, -28(%rbp)   # imm = 0x3509033D
	jne	.LBB39_169
.LBB39_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_168
.Lfunc_end39:
	.size	init_contexts.32, .Lfunc_end39-init_contexts.32
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.33    # -- Begin function SetCtxModelNumber.33
	.p2align	4, 0x90
	.type	SetCtxModelNumber.33,@function
SetCtxModelNumber.33:                   # @SetCtxModelNumber.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1842151549, -16(%rbp)  # imm = 0x6DCD007D
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB40_11
.LBB40_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB40_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB40_11
.LBB40_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB40_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB40_11
.LBB40_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB40_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB40_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB40_10
.LBB40_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB40_10:                              # %if.end38
	jmp	.LBB40_11
.LBB40_11:                              # %if.end39
	cmpl	$1842151549, -16(%rbp)  # imm = 0x6DCD007D
	jne	.LBB40_13
.LBB40_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_12
.Lfunc_end40:
	.size	SetCtxModelNumber.33, .Lfunc_end40-SetCtxModelNumber.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.34
.LCPI41_0:
	.quad	4607182418800017408     # double 1
.LCPI41_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI41_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI41_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.34
	.p2align	4, 0x90
	.type	XRate.34,@function
XRate.34:                               # @XRate.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$784192305, -32(%rbp)   # imm = 0x2EBDD331
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB41_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB41_3
.LBB41_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB41_3:                               # %cond.end
	vmovsd	.LCPI41_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI41_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI41_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI41_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB41_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI41_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB41_6
.LBB41_5:                               # %cond.false6
	vmovsd	.LCPI41_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI41_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI41_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB41_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB41_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB41_9
.LBB41_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB41_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB41_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB41_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB41_13
.LBB41_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB41_13:                              # %cond.end26
	jmp	.LBB41_15
.LBB41_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB41_15
.LBB41_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB41_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB41_18
.LBB41_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB41_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$784192305, -32(%rbp)   # imm = 0x2EBDD331
	jne	.LBB41_20
.LBB41_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB41_19
.Lfunc_end41:
	.size	XRate.34, .Lfunc_end41-XRate.34
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.35 # -- Begin function update_field_frame_contexts.35
	.p2align	4, 0x90
	.type	update_field_frame_contexts.35,@function
update_field_frame_contexts.35:         # @update_field_frame_contexts.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2143967914, -12(%rbp)  # imm = 0x7FCA5AAA
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB42_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB42_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	$0, -4(%rbp)
.LBB42_4:                               # %for.cond1
                                        #   Parent Loop BB42_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB42_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB42_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB42_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_4
.LBB42_7:                               # %for.end
                                        #   in Loop: Header=BB42_2 Depth=1
	jmp	.LBB42_8
.LBB42_8:                               # %for.inc23
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_2
.LBB42_9:                               # %for.end25
	jmp	.LBB42_19
.LBB42_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB42_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB42_11 Depth=1
	movl	$0, -4(%rbp)
.LBB42_13:                              # %for.cond29
                                        #   Parent Loop BB42_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB42_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB42_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_13
.LBB42_16:                              # %for.end56
                                        #   in Loop: Header=BB42_11 Depth=1
	jmp	.LBB42_17
.LBB42_17:                              # %for.inc57
                                        #   in Loop: Header=BB42_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_11
.LBB42_18:                              # %for.end59
	jmp	.LBB42_19
.LBB42_19:                              # %if.end
	cmpl	$2143967914, -12(%rbp)  # imm = 0x7FCA5AAA
	jne	.LBB42_21
.LBB42_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_20
.Lfunc_end42:
	.size	update_field_frame_contexts.35, .Lfunc_end42-update_field_frame_contexts.35
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.36        # -- Begin function init_contexts.36
	.p2align	4, 0x90
	.type	init_contexts.36,@function
init_contexts.36:                       # @init_contexts.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$152216832, -28(%rbp)   # imm = 0x912A500
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB43_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_3:                               # %for.cond2
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB43_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_7
.LBB43_6:                               # %if.else
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_7:                               # %if.end
                                        #   in Loop: Header=BB43_3 Depth=2
	jmp	.LBB43_8
.LBB43_8:                               # %for.inc
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_3
.LBB43_9:                               # %for.end
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_10
.LBB43_10:                              # %for.inc28
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_1
.LBB43_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB43_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB43_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB43_12 Depth=1
	movl	$0, -4(%rbp)
.LBB43_14:                              # %for.cond34
                                        #   Parent Loop BB43_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB43_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB43_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB43_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_18
.LBB43_17:                              # %if.else52
                                        #   in Loop: Header=BB43_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_18:                              # %if.end66
                                        #   in Loop: Header=BB43_14 Depth=2
	jmp	.LBB43_19
.LBB43_19:                              # %for.inc67
                                        #   in Loop: Header=BB43_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_14
.LBB43_20:                              # %for.end69
                                        #   in Loop: Header=BB43_12 Depth=1
	jmp	.LBB43_21
.LBB43_21:                              # %for.inc70
                                        #   in Loop: Header=BB43_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_12
.LBB43_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB43_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB43_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB43_23 Depth=1
	movl	$0, -4(%rbp)
.LBB43_25:                              # %for.cond76
                                        #   Parent Loop BB43_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB43_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB43_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB43_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_29
.LBB43_28:                              # %if.else94
                                        #   in Loop: Header=BB43_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_29:                              # %if.end108
                                        #   in Loop: Header=BB43_25 Depth=2
	jmp	.LBB43_30
.LBB43_30:                              # %for.inc109
                                        #   in Loop: Header=BB43_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_25
.LBB43_31:                              # %for.end111
                                        #   in Loop: Header=BB43_23 Depth=1
	jmp	.LBB43_32
.LBB43_32:                              # %for.inc112
                                        #   in Loop: Header=BB43_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_23
.LBB43_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB43_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB43_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB43_34 Depth=1
	movl	$0, -4(%rbp)
.LBB43_36:                              # %for.cond118
                                        #   Parent Loop BB43_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB43_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB43_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB43_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_40
.LBB43_39:                              # %if.else136
                                        #   in Loop: Header=BB43_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_40:                              # %if.end150
                                        #   in Loop: Header=BB43_36 Depth=2
	jmp	.LBB43_41
.LBB43_41:                              # %for.inc151
                                        #   in Loop: Header=BB43_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_36
.LBB43_42:                              # %for.end153
                                        #   in Loop: Header=BB43_34 Depth=1
	jmp	.LBB43_43
.LBB43_43:                              # %for.inc154
                                        #   in Loop: Header=BB43_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_34
.LBB43_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB43_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB43_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB43_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_49
.LBB43_48:                              # %if.else172
                                        #   in Loop: Header=BB43_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_49:                              # %if.end183
                                        #   in Loop: Header=BB43_45 Depth=1
	jmp	.LBB43_50
.LBB43_50:                              # %for.inc184
                                        #   in Loop: Header=BB43_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_45
.LBB43_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB43_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB43_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB43_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_56
.LBB43_55:                              # %if.else202
                                        #   in Loop: Header=BB43_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_56:                              # %if.end213
                                        #   in Loop: Header=BB43_52 Depth=1
	jmp	.LBB43_57
.LBB43_57:                              # %for.inc214
                                        #   in Loop: Header=BB43_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_52
.LBB43_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB43_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB43_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB43_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB43_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_63
.LBB43_62:                              # %if.else232
                                        #   in Loop: Header=BB43_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_63:                              # %if.end243
                                        #   in Loop: Header=BB43_59 Depth=1
	jmp	.LBB43_64
.LBB43_64:                              # %for.inc244
                                        #   in Loop: Header=BB43_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_59
.LBB43_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB43_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB43_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB43_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB43_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_70
.LBB43_69:                              # %if.else262
                                        #   in Loop: Header=BB43_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_70:                              # %if.end273
                                        #   in Loop: Header=BB43_66 Depth=1
	jmp	.LBB43_71
.LBB43_71:                              # %for.inc274
                                        #   in Loop: Header=BB43_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_66
.LBB43_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB43_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB43_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB43_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_77
.LBB43_76:                              # %if.else292
                                        #   in Loop: Header=BB43_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_77:                              # %if.end303
                                        #   in Loop: Header=BB43_73 Depth=1
	jmp	.LBB43_78
.LBB43_78:                              # %for.inc304
                                        #   in Loop: Header=BB43_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_73
.LBB43_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB43_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB43_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB43_80 Depth=1
	movl	$0, -4(%rbp)
.LBB43_82:                              # %for.cond310
                                        #   Parent Loop BB43_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB43_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB43_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_86
.LBB43_85:                              # %if.else328
                                        #   in Loop: Header=BB43_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_86:                              # %if.end342
                                        #   in Loop: Header=BB43_82 Depth=2
	jmp	.LBB43_87
.LBB43_87:                              # %for.inc343
                                        #   in Loop: Header=BB43_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_82
.LBB43_88:                              # %for.end345
                                        #   in Loop: Header=BB43_80 Depth=1
	jmp	.LBB43_89
.LBB43_89:                              # %for.inc346
                                        #   in Loop: Header=BB43_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_80
.LBB43_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB43_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB43_91 Depth=1
	movl	$0, -4(%rbp)
.LBB43_93:                              # %for.cond352
                                        #   Parent Loop BB43_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB43_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB43_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_97
.LBB43_96:                              # %if.else370
                                        #   in Loop: Header=BB43_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_97:                              # %if.end384
                                        #   in Loop: Header=BB43_93 Depth=2
	jmp	.LBB43_98
.LBB43_98:                              # %for.inc385
                                        #   in Loop: Header=BB43_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_93
.LBB43_99:                              # %for.end387
                                        #   in Loop: Header=BB43_91 Depth=1
	jmp	.LBB43_100
.LBB43_100:                             # %for.inc388
                                        #   in Loop: Header=BB43_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_91
.LBB43_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB43_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB43_102 Depth=1
	movl	$0, -4(%rbp)
.LBB43_104:                             # %for.cond394
                                        #   Parent Loop BB43_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB43_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB43_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB43_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_108
.LBB43_107:                             # %if.else412
                                        #   in Loop: Header=BB43_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_108:                             # %if.end426
                                        #   in Loop: Header=BB43_104 Depth=2
	jmp	.LBB43_109
.LBB43_109:                             # %for.inc427
                                        #   in Loop: Header=BB43_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_104
.LBB43_110:                             # %for.end429
                                        #   in Loop: Header=BB43_102 Depth=1
	jmp	.LBB43_111
.LBB43_111:                             # %for.inc430
                                        #   in Loop: Header=BB43_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_102
.LBB43_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB43_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB43_113 Depth=1
	movl	$0, -4(%rbp)
.LBB43_115:                             # %for.cond436
                                        #   Parent Loop BB43_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB43_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB43_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB43_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_119
.LBB43_118:                             # %if.else454
                                        #   in Loop: Header=BB43_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_119:                             # %if.end468
                                        #   in Loop: Header=BB43_115 Depth=2
	jmp	.LBB43_120
.LBB43_120:                             # %for.inc469
                                        #   in Loop: Header=BB43_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_115
.LBB43_121:                             # %for.end471
                                        #   in Loop: Header=BB43_113 Depth=1
	jmp	.LBB43_122
.LBB43_122:                             # %for.inc472
                                        #   in Loop: Header=BB43_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_113
.LBB43_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB43_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB43_124 Depth=1
	movl	$0, -4(%rbp)
.LBB43_126:                             # %for.cond478
                                        #   Parent Loop BB43_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB43_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB43_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB43_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_130
.LBB43_129:                             # %if.else496
                                        #   in Loop: Header=BB43_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_130:                             # %if.end510
                                        #   in Loop: Header=BB43_126 Depth=2
	jmp	.LBB43_131
.LBB43_131:                             # %for.inc511
                                        #   in Loop: Header=BB43_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_126
.LBB43_132:                             # %for.end513
                                        #   in Loop: Header=BB43_124 Depth=1
	jmp	.LBB43_133
.LBB43_133:                             # %for.inc514
                                        #   in Loop: Header=BB43_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_124
.LBB43_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB43_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	$0, -4(%rbp)
.LBB43_137:                             # %for.cond520
                                        #   Parent Loop BB43_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB43_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB43_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB43_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_141
.LBB43_140:                             # %if.else538
                                        #   in Loop: Header=BB43_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_141:                             # %if.end552
                                        #   in Loop: Header=BB43_137 Depth=2
	jmp	.LBB43_142
.LBB43_142:                             # %for.inc553
                                        #   in Loop: Header=BB43_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_137
.LBB43_143:                             # %for.end555
                                        #   in Loop: Header=BB43_135 Depth=1
	jmp	.LBB43_144
.LBB43_144:                             # %for.inc556
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_135
.LBB43_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB43_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB43_146 Depth=1
	movl	$0, -4(%rbp)
.LBB43_148:                             # %for.cond562
                                        #   Parent Loop BB43_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB43_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB43_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB43_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_152
.LBB43_151:                             # %if.else580
                                        #   in Loop: Header=BB43_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_152:                             # %if.end594
                                        #   in Loop: Header=BB43_148 Depth=2
	jmp	.LBB43_153
.LBB43_153:                             # %for.inc595
                                        #   in Loop: Header=BB43_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_148
.LBB43_154:                             # %for.end597
                                        #   in Loop: Header=BB43_146 Depth=1
	jmp	.LBB43_155
.LBB43_155:                             # %for.inc598
                                        #   in Loop: Header=BB43_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_146
.LBB43_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB43_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB43_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB43_157 Depth=1
	movl	$0, -4(%rbp)
.LBB43_159:                             # %for.cond604
                                        #   Parent Loop BB43_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB43_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB43_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB43_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB43_163
.LBB43_162:                             # %if.else622
                                        #   in Loop: Header=BB43_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB43_163:                             # %if.end636
                                        #   in Loop: Header=BB43_159 Depth=2
	jmp	.LBB43_164
.LBB43_164:                             # %for.inc637
                                        #   in Loop: Header=BB43_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_159
.LBB43_165:                             # %for.end639
                                        #   in Loop: Header=BB43_157 Depth=1
	jmp	.LBB43_166
.LBB43_166:                             # %for.inc640
                                        #   in Loop: Header=BB43_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_157
.LBB43_167:                             # %for.end642
	cmpl	$152216832, -28(%rbp)   # imm = 0x912A500
	jne	.LBB43_169
.LBB43_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_168
.Lfunc_end43:
	.size	init_contexts.36, .Lfunc_end43-init_contexts.36
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.37       # -- Begin function store_contexts.37
	.p2align	4, 0x90
	.type	store_contexts.37,@function
store_contexts.37:                      # @store_contexts.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1936695705, -16(%rbp)  # imm = 0x736FA199
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB44_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB44_3
.LBB44_2:                               # %if.else
	jmp	.LBB44_3
.LBB44_3:                               # %if.end
	cmpl	$1936695705, -16(%rbp)  # imm = 0x736FA199
	jne	.LBB44_5
.LBB44_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_4
.Lfunc_end44:
	.size	store_contexts.37, .Lfunc_end44-store_contexts.37
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.38    # -- Begin function SetCtxModelNumber.38
	.p2align	4, 0x90
	.type	SetCtxModelNumber.38,@function
SetCtxModelNumber.38:                   # @SetCtxModelNumber.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1121431119, -16(%rbp)  # imm = 0x42D7AE4F
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB45_11
.LBB45_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB45_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB45_11
.LBB45_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB45_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB45_11
.LBB45_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB45_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB45_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB45_10
.LBB45_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB45_10:                              # %if.end38
	jmp	.LBB45_11
.LBB45_11:                              # %if.end39
	cmpl	$1121431119, -16(%rbp)  # imm = 0x42D7AE4F
	jne	.LBB45_13
.LBB45_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_12
.Lfunc_end45:
	.size	SetCtxModelNumber.38, .Lfunc_end45-SetCtxModelNumber.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.39
.LCPI46_0:
	.quad	4607182418800017408     # double 1
.LCPI46_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI46_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI46_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.39
	.p2align	4, 0x90
	.type	XRate.39,@function
XRate.39:                               # @XRate.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1111058439, -32(%rbp)  # imm = 0x42396807
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB46_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB46_3
.LBB46_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB46_3:                               # %cond.end
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI46_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI46_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI46_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB46_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB46_6
.LBB46_5:                               # %cond.false6
	vmovsd	.LCPI46_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI46_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI46_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB46_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB46_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB46_9
.LBB46_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB46_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB46_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB46_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB46_13
.LBB46_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB46_13:                              # %cond.end26
	jmp	.LBB46_15
.LBB46_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB46_15
.LBB46_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB46_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB46_18
.LBB46_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB46_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1111058439, -32(%rbp)  # imm = 0x42396807
	jne	.LBB46_20
.LBB46_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB46_19
.Lfunc_end46:
	.size	XRate.39, .Lfunc_end46-XRate.39
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.40        # -- Begin function init_contexts.40
	.p2align	4, 0x90
	.type	init_contexts.40,@function
init_contexts.40:                       # @init_contexts.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1203099273, -28(%rbp)  # imm = 0x47B5D689
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB47_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_3:                               # %for.cond2
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB47_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_7
.LBB47_6:                               # %if.else
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_7:                               # %if.end
                                        #   in Loop: Header=BB47_3 Depth=2
	jmp	.LBB47_8
.LBB47_8:                               # %for.inc
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_3
.LBB47_9:                               # %for.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_10
.LBB47_10:                              # %for.inc28
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_1
.LBB47_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB47_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB47_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB47_12 Depth=1
	movl	$0, -4(%rbp)
.LBB47_14:                              # %for.cond34
                                        #   Parent Loop BB47_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB47_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB47_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB47_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_18
.LBB47_17:                              # %if.else52
                                        #   in Loop: Header=BB47_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_18:                              # %if.end66
                                        #   in Loop: Header=BB47_14 Depth=2
	jmp	.LBB47_19
.LBB47_19:                              # %for.inc67
                                        #   in Loop: Header=BB47_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_14
.LBB47_20:                              # %for.end69
                                        #   in Loop: Header=BB47_12 Depth=1
	jmp	.LBB47_21
.LBB47_21:                              # %for.inc70
                                        #   in Loop: Header=BB47_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_12
.LBB47_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB47_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB47_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB47_23 Depth=1
	movl	$0, -4(%rbp)
.LBB47_25:                              # %for.cond76
                                        #   Parent Loop BB47_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB47_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB47_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB47_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_29
.LBB47_28:                              # %if.else94
                                        #   in Loop: Header=BB47_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_29:                              # %if.end108
                                        #   in Loop: Header=BB47_25 Depth=2
	jmp	.LBB47_30
.LBB47_30:                              # %for.inc109
                                        #   in Loop: Header=BB47_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_25
.LBB47_31:                              # %for.end111
                                        #   in Loop: Header=BB47_23 Depth=1
	jmp	.LBB47_32
.LBB47_32:                              # %for.inc112
                                        #   in Loop: Header=BB47_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_23
.LBB47_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB47_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB47_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB47_34 Depth=1
	movl	$0, -4(%rbp)
.LBB47_36:                              # %for.cond118
                                        #   Parent Loop BB47_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB47_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB47_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB47_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_40
.LBB47_39:                              # %if.else136
                                        #   in Loop: Header=BB47_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_40:                              # %if.end150
                                        #   in Loop: Header=BB47_36 Depth=2
	jmp	.LBB47_41
.LBB47_41:                              # %for.inc151
                                        #   in Loop: Header=BB47_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_36
.LBB47_42:                              # %for.end153
                                        #   in Loop: Header=BB47_34 Depth=1
	jmp	.LBB47_43
.LBB47_43:                              # %for.inc154
                                        #   in Loop: Header=BB47_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_34
.LBB47_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB47_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB47_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB47_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_49
.LBB47_48:                              # %if.else172
                                        #   in Loop: Header=BB47_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_49:                              # %if.end183
                                        #   in Loop: Header=BB47_45 Depth=1
	jmp	.LBB47_50
.LBB47_50:                              # %for.inc184
                                        #   in Loop: Header=BB47_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_45
.LBB47_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB47_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB47_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB47_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_56
.LBB47_55:                              # %if.else202
                                        #   in Loop: Header=BB47_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_56:                              # %if.end213
                                        #   in Loop: Header=BB47_52 Depth=1
	jmp	.LBB47_57
.LBB47_57:                              # %for.inc214
                                        #   in Loop: Header=BB47_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_52
.LBB47_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB47_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB47_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB47_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB47_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_63
.LBB47_62:                              # %if.else232
                                        #   in Loop: Header=BB47_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_63:                              # %if.end243
                                        #   in Loop: Header=BB47_59 Depth=1
	jmp	.LBB47_64
.LBB47_64:                              # %for.inc244
                                        #   in Loop: Header=BB47_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_59
.LBB47_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB47_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB47_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB47_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB47_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_70
.LBB47_69:                              # %if.else262
                                        #   in Loop: Header=BB47_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_70:                              # %if.end273
                                        #   in Loop: Header=BB47_66 Depth=1
	jmp	.LBB47_71
.LBB47_71:                              # %for.inc274
                                        #   in Loop: Header=BB47_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_66
.LBB47_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB47_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB47_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB47_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_77
.LBB47_76:                              # %if.else292
                                        #   in Loop: Header=BB47_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_77:                              # %if.end303
                                        #   in Loop: Header=BB47_73 Depth=1
	jmp	.LBB47_78
.LBB47_78:                              # %for.inc304
                                        #   in Loop: Header=BB47_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_73
.LBB47_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB47_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB47_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB47_80 Depth=1
	movl	$0, -4(%rbp)
.LBB47_82:                              # %for.cond310
                                        #   Parent Loop BB47_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB47_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB47_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_86
.LBB47_85:                              # %if.else328
                                        #   in Loop: Header=BB47_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_86:                              # %if.end342
                                        #   in Loop: Header=BB47_82 Depth=2
	jmp	.LBB47_87
.LBB47_87:                              # %for.inc343
                                        #   in Loop: Header=BB47_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_82
.LBB47_88:                              # %for.end345
                                        #   in Loop: Header=BB47_80 Depth=1
	jmp	.LBB47_89
.LBB47_89:                              # %for.inc346
                                        #   in Loop: Header=BB47_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_80
.LBB47_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB47_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB47_91 Depth=1
	movl	$0, -4(%rbp)
.LBB47_93:                              # %for.cond352
                                        #   Parent Loop BB47_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB47_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB47_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_97
.LBB47_96:                              # %if.else370
                                        #   in Loop: Header=BB47_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_97:                              # %if.end384
                                        #   in Loop: Header=BB47_93 Depth=2
	jmp	.LBB47_98
.LBB47_98:                              # %for.inc385
                                        #   in Loop: Header=BB47_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_93
.LBB47_99:                              # %for.end387
                                        #   in Loop: Header=BB47_91 Depth=1
	jmp	.LBB47_100
.LBB47_100:                             # %for.inc388
                                        #   in Loop: Header=BB47_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_91
.LBB47_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB47_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB47_102 Depth=1
	movl	$0, -4(%rbp)
.LBB47_104:                             # %for.cond394
                                        #   Parent Loop BB47_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB47_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB47_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB47_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_108
.LBB47_107:                             # %if.else412
                                        #   in Loop: Header=BB47_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_108:                             # %if.end426
                                        #   in Loop: Header=BB47_104 Depth=2
	jmp	.LBB47_109
.LBB47_109:                             # %for.inc427
                                        #   in Loop: Header=BB47_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_104
.LBB47_110:                             # %for.end429
                                        #   in Loop: Header=BB47_102 Depth=1
	jmp	.LBB47_111
.LBB47_111:                             # %for.inc430
                                        #   in Loop: Header=BB47_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_102
.LBB47_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB47_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB47_113 Depth=1
	movl	$0, -4(%rbp)
.LBB47_115:                             # %for.cond436
                                        #   Parent Loop BB47_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB47_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB47_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB47_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_119
.LBB47_118:                             # %if.else454
                                        #   in Loop: Header=BB47_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_119:                             # %if.end468
                                        #   in Loop: Header=BB47_115 Depth=2
	jmp	.LBB47_120
.LBB47_120:                             # %for.inc469
                                        #   in Loop: Header=BB47_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_115
.LBB47_121:                             # %for.end471
                                        #   in Loop: Header=BB47_113 Depth=1
	jmp	.LBB47_122
.LBB47_122:                             # %for.inc472
                                        #   in Loop: Header=BB47_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_113
.LBB47_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB47_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB47_124 Depth=1
	movl	$0, -4(%rbp)
.LBB47_126:                             # %for.cond478
                                        #   Parent Loop BB47_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB47_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB47_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB47_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_130
.LBB47_129:                             # %if.else496
                                        #   in Loop: Header=BB47_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_130:                             # %if.end510
                                        #   in Loop: Header=BB47_126 Depth=2
	jmp	.LBB47_131
.LBB47_131:                             # %for.inc511
                                        #   in Loop: Header=BB47_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_126
.LBB47_132:                             # %for.end513
                                        #   in Loop: Header=BB47_124 Depth=1
	jmp	.LBB47_133
.LBB47_133:                             # %for.inc514
                                        #   in Loop: Header=BB47_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_124
.LBB47_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB47_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	$0, -4(%rbp)
.LBB47_137:                             # %for.cond520
                                        #   Parent Loop BB47_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB47_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB47_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB47_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_141
.LBB47_140:                             # %if.else538
                                        #   in Loop: Header=BB47_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_141:                             # %if.end552
                                        #   in Loop: Header=BB47_137 Depth=2
	jmp	.LBB47_142
.LBB47_142:                             # %for.inc553
                                        #   in Loop: Header=BB47_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_137
.LBB47_143:                             # %for.end555
                                        #   in Loop: Header=BB47_135 Depth=1
	jmp	.LBB47_144
.LBB47_144:                             # %for.inc556
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_135
.LBB47_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB47_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB47_146 Depth=1
	movl	$0, -4(%rbp)
.LBB47_148:                             # %for.cond562
                                        #   Parent Loop BB47_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB47_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB47_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB47_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_152
.LBB47_151:                             # %if.else580
                                        #   in Loop: Header=BB47_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_152:                             # %if.end594
                                        #   in Loop: Header=BB47_148 Depth=2
	jmp	.LBB47_153
.LBB47_153:                             # %for.inc595
                                        #   in Loop: Header=BB47_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_148
.LBB47_154:                             # %for.end597
                                        #   in Loop: Header=BB47_146 Depth=1
	jmp	.LBB47_155
.LBB47_155:                             # %for.inc598
                                        #   in Loop: Header=BB47_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_146
.LBB47_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB47_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB47_157 Depth=1
	movl	$0, -4(%rbp)
.LBB47_159:                             # %for.cond604
                                        #   Parent Loop BB47_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB47_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB47_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB47_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_163
.LBB47_162:                             # %if.else622
                                        #   in Loop: Header=BB47_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_163:                             # %if.end636
                                        #   in Loop: Header=BB47_159 Depth=2
	jmp	.LBB47_164
.LBB47_164:                             # %for.inc637
                                        #   in Loop: Header=BB47_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_159
.LBB47_165:                             # %for.end639
                                        #   in Loop: Header=BB47_157 Depth=1
	jmp	.LBB47_166
.LBB47_166:                             # %for.inc640
                                        #   in Loop: Header=BB47_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_157
.LBB47_167:                             # %for.end642
	cmpl	$1203099273, -28(%rbp)  # imm = 0x47B5D689
	jne	.LBB47_169
.LBB47_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_168
.Lfunc_end47:
	.size	init_contexts.40, .Lfunc_end47-init_contexts.40
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.41        # -- Begin function init_contexts.41
	.p2align	4, 0x90
	.type	init_contexts.41,@function
init_contexts.41:                       # @init_contexts.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$688656386, -28(%rbp)   # imm = 0x290C1002
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB48_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	$0, -4(%rbp)
.LBB48_3:                               # %for.cond2
                                        #   Parent Loop BB48_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB48_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_7
.LBB48_6:                               # %if.else
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_7:                               # %if.end
                                        #   in Loop: Header=BB48_3 Depth=2
	jmp	.LBB48_8
.LBB48_8:                               # %for.inc
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_3
.LBB48_9:                               # %for.end
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_10
.LBB48_10:                              # %for.inc28
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_1
.LBB48_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB48_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB48_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB48_12 Depth=1
	movl	$0, -4(%rbp)
.LBB48_14:                              # %for.cond34
                                        #   Parent Loop BB48_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB48_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB48_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB48_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_18
.LBB48_17:                              # %if.else52
                                        #   in Loop: Header=BB48_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_18:                              # %if.end66
                                        #   in Loop: Header=BB48_14 Depth=2
	jmp	.LBB48_19
.LBB48_19:                              # %for.inc67
                                        #   in Loop: Header=BB48_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_14
.LBB48_20:                              # %for.end69
                                        #   in Loop: Header=BB48_12 Depth=1
	jmp	.LBB48_21
.LBB48_21:                              # %for.inc70
                                        #   in Loop: Header=BB48_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_12
.LBB48_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB48_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB48_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	$0, -4(%rbp)
.LBB48_25:                              # %for.cond76
                                        #   Parent Loop BB48_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB48_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB48_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB48_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_29
.LBB48_28:                              # %if.else94
                                        #   in Loop: Header=BB48_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_29:                              # %if.end108
                                        #   in Loop: Header=BB48_25 Depth=2
	jmp	.LBB48_30
.LBB48_30:                              # %for.inc109
                                        #   in Loop: Header=BB48_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_25
.LBB48_31:                              # %for.end111
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_32
.LBB48_32:                              # %for.inc112
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_23
.LBB48_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB48_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB48_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB48_34 Depth=1
	movl	$0, -4(%rbp)
.LBB48_36:                              # %for.cond118
                                        #   Parent Loop BB48_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB48_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB48_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB48_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_40
.LBB48_39:                              # %if.else136
                                        #   in Loop: Header=BB48_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_40:                              # %if.end150
                                        #   in Loop: Header=BB48_36 Depth=2
	jmp	.LBB48_41
.LBB48_41:                              # %for.inc151
                                        #   in Loop: Header=BB48_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_36
.LBB48_42:                              # %for.end153
                                        #   in Loop: Header=BB48_34 Depth=1
	jmp	.LBB48_43
.LBB48_43:                              # %for.inc154
                                        #   in Loop: Header=BB48_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_34
.LBB48_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB48_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB48_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB48_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB48_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_49
.LBB48_48:                              # %if.else172
                                        #   in Loop: Header=BB48_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_49:                              # %if.end183
                                        #   in Loop: Header=BB48_45 Depth=1
	jmp	.LBB48_50
.LBB48_50:                              # %for.inc184
                                        #   in Loop: Header=BB48_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_45
.LBB48_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB48_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB48_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB48_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB48_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_56
.LBB48_55:                              # %if.else202
                                        #   in Loop: Header=BB48_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_56:                              # %if.end213
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_57
.LBB48_57:                              # %for.inc214
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_52
.LBB48_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB48_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB48_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB48_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB48_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_63
.LBB48_62:                              # %if.else232
                                        #   in Loop: Header=BB48_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_63:                              # %if.end243
                                        #   in Loop: Header=BB48_59 Depth=1
	jmp	.LBB48_64
.LBB48_64:                              # %for.inc244
                                        #   in Loop: Header=BB48_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_59
.LBB48_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB48_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB48_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB48_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB48_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_70
.LBB48_69:                              # %if.else262
                                        #   in Loop: Header=BB48_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_70:                              # %if.end273
                                        #   in Loop: Header=BB48_66 Depth=1
	jmp	.LBB48_71
.LBB48_71:                              # %for.inc274
                                        #   in Loop: Header=BB48_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_66
.LBB48_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB48_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB48_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB48_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB48_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_77
.LBB48_76:                              # %if.else292
                                        #   in Loop: Header=BB48_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_77:                              # %if.end303
                                        #   in Loop: Header=BB48_73 Depth=1
	jmp	.LBB48_78
.LBB48_78:                              # %for.inc304
                                        #   in Loop: Header=BB48_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_73
.LBB48_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB48_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB48_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB48_80 Depth=1
	movl	$0, -4(%rbp)
.LBB48_82:                              # %for.cond310
                                        #   Parent Loop BB48_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB48_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB48_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_86
.LBB48_85:                              # %if.else328
                                        #   in Loop: Header=BB48_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_86:                              # %if.end342
                                        #   in Loop: Header=BB48_82 Depth=2
	jmp	.LBB48_87
.LBB48_87:                              # %for.inc343
                                        #   in Loop: Header=BB48_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_82
.LBB48_88:                              # %for.end345
                                        #   in Loop: Header=BB48_80 Depth=1
	jmp	.LBB48_89
.LBB48_89:                              # %for.inc346
                                        #   in Loop: Header=BB48_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_80
.LBB48_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB48_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB48_91 Depth=1
	movl	$0, -4(%rbp)
.LBB48_93:                              # %for.cond352
                                        #   Parent Loop BB48_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB48_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB48_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_97
.LBB48_96:                              # %if.else370
                                        #   in Loop: Header=BB48_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_97:                              # %if.end384
                                        #   in Loop: Header=BB48_93 Depth=2
	jmp	.LBB48_98
.LBB48_98:                              # %for.inc385
                                        #   in Loop: Header=BB48_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_93
.LBB48_99:                              # %for.end387
                                        #   in Loop: Header=BB48_91 Depth=1
	jmp	.LBB48_100
.LBB48_100:                             # %for.inc388
                                        #   in Loop: Header=BB48_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_91
.LBB48_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB48_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB48_102 Depth=1
	movl	$0, -4(%rbp)
.LBB48_104:                             # %for.cond394
                                        #   Parent Loop BB48_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB48_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB48_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_108
.LBB48_107:                             # %if.else412
                                        #   in Loop: Header=BB48_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_108:                             # %if.end426
                                        #   in Loop: Header=BB48_104 Depth=2
	jmp	.LBB48_109
.LBB48_109:                             # %for.inc427
                                        #   in Loop: Header=BB48_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_104
.LBB48_110:                             # %for.end429
                                        #   in Loop: Header=BB48_102 Depth=1
	jmp	.LBB48_111
.LBB48_111:                             # %for.inc430
                                        #   in Loop: Header=BB48_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_102
.LBB48_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB48_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB48_113 Depth=1
	movl	$0, -4(%rbp)
.LBB48_115:                             # %for.cond436
                                        #   Parent Loop BB48_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB48_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB48_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_119
.LBB48_118:                             # %if.else454
                                        #   in Loop: Header=BB48_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_119:                             # %if.end468
                                        #   in Loop: Header=BB48_115 Depth=2
	jmp	.LBB48_120
.LBB48_120:                             # %for.inc469
                                        #   in Loop: Header=BB48_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_115
.LBB48_121:                             # %for.end471
                                        #   in Loop: Header=BB48_113 Depth=1
	jmp	.LBB48_122
.LBB48_122:                             # %for.inc472
                                        #   in Loop: Header=BB48_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_113
.LBB48_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB48_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB48_124 Depth=1
	movl	$0, -4(%rbp)
.LBB48_126:                             # %for.cond478
                                        #   Parent Loop BB48_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB48_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB48_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB48_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_130
.LBB48_129:                             # %if.else496
                                        #   in Loop: Header=BB48_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_130:                             # %if.end510
                                        #   in Loop: Header=BB48_126 Depth=2
	jmp	.LBB48_131
.LBB48_131:                             # %for.inc511
                                        #   in Loop: Header=BB48_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_126
.LBB48_132:                             # %for.end513
                                        #   in Loop: Header=BB48_124 Depth=1
	jmp	.LBB48_133
.LBB48_133:                             # %for.inc514
                                        #   in Loop: Header=BB48_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_124
.LBB48_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB48_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	$0, -4(%rbp)
.LBB48_137:                             # %for.cond520
                                        #   Parent Loop BB48_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB48_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB48_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB48_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_141
.LBB48_140:                             # %if.else538
                                        #   in Loop: Header=BB48_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_141:                             # %if.end552
                                        #   in Loop: Header=BB48_137 Depth=2
	jmp	.LBB48_142
.LBB48_142:                             # %for.inc553
                                        #   in Loop: Header=BB48_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_137
.LBB48_143:                             # %for.end555
                                        #   in Loop: Header=BB48_135 Depth=1
	jmp	.LBB48_144
.LBB48_144:                             # %for.inc556
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_135
.LBB48_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB48_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB48_146 Depth=1
	movl	$0, -4(%rbp)
.LBB48_148:                             # %for.cond562
                                        #   Parent Loop BB48_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB48_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB48_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_152
.LBB48_151:                             # %if.else580
                                        #   in Loop: Header=BB48_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_152:                             # %if.end594
                                        #   in Loop: Header=BB48_148 Depth=2
	jmp	.LBB48_153
.LBB48_153:                             # %for.inc595
                                        #   in Loop: Header=BB48_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_148
.LBB48_154:                             # %for.end597
                                        #   in Loop: Header=BB48_146 Depth=1
	jmp	.LBB48_155
.LBB48_155:                             # %for.inc598
                                        #   in Loop: Header=BB48_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_146
.LBB48_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB48_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	$0, -4(%rbp)
.LBB48_159:                             # %for.cond604
                                        #   Parent Loop BB48_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB48_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB48_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_163
.LBB48_162:                             # %if.else622
                                        #   in Loop: Header=BB48_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_163:                             # %if.end636
                                        #   in Loop: Header=BB48_159 Depth=2
	jmp	.LBB48_164
.LBB48_164:                             # %for.inc637
                                        #   in Loop: Header=BB48_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_159
.LBB48_165:                             # %for.end639
                                        #   in Loop: Header=BB48_157 Depth=1
	jmp	.LBB48_166
.LBB48_166:                             # %for.inc640
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_157
.LBB48_167:                             # %for.end642
	cmpl	$688656386, -28(%rbp)   # imm = 0x290C1002
	jne	.LBB48_169
.LBB48_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_168
.Lfunc_end48:
	.size	init_contexts.41, .Lfunc_end48-init_contexts.41
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.42
.LCPI49_0:
	.quad	4607182418800017408     # double 1
.LCPI49_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI49_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI49_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.42
	.p2align	4, 0x90
	.type	XRate.42,@function
XRate.42:                               # @XRate.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1161915907, -36(%rbp)  # imm = 0x45416E03
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB49_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB49_3
.LBB49_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB49_3:                               # %cond.end
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI49_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI49_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI49_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB49_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB49_6
.LBB49_5:                               # %cond.false6
	vmovsd	.LCPI49_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI49_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI49_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB49_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB49_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB49_9
.LBB49_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB49_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB49_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB49_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB49_13
.LBB49_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB49_13:                              # %cond.end26
	jmp	.LBB49_15
.LBB49_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB49_15
.LBB49_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB49_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB49_18
.LBB49_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB49_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1161915907, -36(%rbp)  # imm = 0x45416E03
	jne	.LBB49_20
.LBB49_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB49_19
.Lfunc_end49:
	.size	XRate.42, .Lfunc_end49-XRate.42
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.43    # -- Begin function SetCtxModelNumber.43
	.p2align	4, 0x90
	.type	SetCtxModelNumber.43,@function
SetCtxModelNumber.43:                   # @SetCtxModelNumber.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1493565076, -16(%rbp)  # imm = 0x5905FE94
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB50_11
.LBB50_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB50_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB50_11
.LBB50_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB50_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB50_11
.LBB50_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB50_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB50_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB50_10
.LBB50_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB50_10:                              # %if.end38
	jmp	.LBB50_11
.LBB50_11:                              # %if.end39
	cmpl	$1493565076, -16(%rbp)  # imm = 0x5905FE94
	jne	.LBB50_13
.LBB50_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_12
.Lfunc_end50:
	.size	SetCtxModelNumber.43, .Lfunc_end50-SetCtxModelNumber.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.44
.LCPI51_0:
	.quad	4611686018427387904     # double 2
.LCPI51_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.44
	.p2align	4, 0x90
	.type	create_context_memory.44,@function
create_context_memory.44:               # @create_context_memory.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1243305862, -20(%rbp)  # imm = 0x4A1B5786
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB51_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB51_3
.LBB51_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB51_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB51_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB51_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB51_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB51_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB51_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB51_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB51_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB51_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB51_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB51_11:                              # %if.end10
                                        #   in Loop: Header=BB51_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB51_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB51_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB51_13:                              # %if.end16
                                        #   in Loop: Header=BB51_8 Depth=1
	movl	$0, -8(%rbp)
.LBB51_14:                              # %for.cond17
                                        #   Parent Loop BB51_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB51_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB51_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB51_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB51_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB51_17:                              # %if.end28
                                        #   in Loop: Header=BB51_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB51_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB51_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB51_19:                              # %if.end39
                                        #   in Loop: Header=BB51_14 Depth=2
	jmp	.LBB51_20
.LBB51_20:                              # %for.inc
                                        #   in Loop: Header=BB51_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_14
.LBB51_21:                              # %for.end
                                        #   in Loop: Header=BB51_8 Depth=1
	jmp	.LBB51_22
.LBB51_22:                              # %for.inc40
                                        #   in Loop: Header=BB51_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_8
.LBB51_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB51_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_26 Depth 2
                                        #       Child Loop BB51_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB51_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB51_24 Depth=1
	movl	$0, -8(%rbp)
.LBB51_26:                              # %for.cond47
                                        #   Parent Loop BB51_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB51_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB51_26 Depth=2
	movl	$0, -12(%rbp)
.LBB51_28:                              # %for.cond51
                                        #   Parent Loop BB51_24 Depth=1
                                        #     Parent Loop BB51_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB51_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB51_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB51_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_28
.LBB51_31:                              # %for.end63
                                        #   in Loop: Header=BB51_26 Depth=2
	jmp	.LBB51_32
.LBB51_32:                              # %for.inc64
                                        #   in Loop: Header=BB51_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_26
.LBB51_33:                              # %for.end66
                                        #   in Loop: Header=BB51_24 Depth=1
	jmp	.LBB51_34
.LBB51_34:                              # %for.inc67
                                        #   in Loop: Header=BB51_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_24
.LBB51_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB51_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB51_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB51_36 Depth=1
	vmovsd	.LCPI51_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB51_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_36
.LBB51_39:                              # %for.end98
	cmpl	$1243305862, -20(%rbp)  # imm = 0x4A1B5786
	jne	.LBB51_41
.LBB51_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_40
.Lfunc_end51:
	.size	create_context_memory.44, .Lfunc_end51-create_context_memory.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.45
.LCPI52_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.45
	.p2align	4, 0x90
	.type	GetCtxModelNumber.45,@function
GetCtxModelNumber.45:                   # @GetCtxModelNumber.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1132302219, -44(%rbp)  # imm = 0x437D8F8B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_3 Depth 2
                                        #       Child Loop BB52_5 Depth 3
                                        #     Child Loop BB52_14 Depth 2
                                        #       Child Loop BB52_16 Depth 3
                                        #     Child Loop BB52_25 Depth 2
                                        #       Child Loop BB52_27 Depth 3
                                        #     Child Loop BB52_36 Depth 2
                                        #       Child Loop BB52_38 Depth 3
                                        #     Child Loop BB52_47 Depth 2
                                        #     Child Loop BB52_54 Depth 2
                                        #     Child Loop BB52_61 Depth 2
                                        #     Child Loop BB52_68 Depth 2
                                        #     Child Loop BB52_75 Depth 2
                                        #     Child Loop BB52_82 Depth 2
                                        #       Child Loop BB52_84 Depth 3
                                        #     Child Loop BB52_93 Depth 2
                                        #       Child Loop BB52_95 Depth 3
                                        #     Child Loop BB52_104 Depth 2
                                        #       Child Loop BB52_106 Depth 3
                                        #     Child Loop BB52_115 Depth 2
                                        #       Child Loop BB52_117 Depth 3
                                        #     Child Loop BB52_126 Depth 2
                                        #       Child Loop BB52_128 Depth 3
                                        #     Child Loop BB52_137 Depth 2
                                        #       Child Loop BB52_139 Depth 3
                                        #     Child Loop BB52_148 Depth 2
                                        #       Child Loop BB52_150 Depth 3
                                        #     Child Loop BB52_159 Depth 2
                                        #       Child Loop BB52_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB52_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB52_3:                               # %for.cond2
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB52_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	$0, -4(%rbp)
.LBB52_5:                               # %for.cond5
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB52_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB52_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB52_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_9
.LBB52_8:                               # %if.else
                                        #   in Loop: Header=BB52_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_9:                               # %if.end
                                        #   in Loop: Header=BB52_5 Depth=3
	jmp	.LBB52_10
.LBB52_10:                              # %for.inc
                                        #   in Loop: Header=BB52_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_5
.LBB52_11:                              # %for.end
                                        #   in Loop: Header=BB52_3 Depth=2
	jmp	.LBB52_12
.LBB52_12:                              # %for.inc33
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_3
.LBB52_13:                              # %for.end35
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_14:                              # %for.cond36
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB52_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB52_14 Depth=2
	movl	$0, -4(%rbp)
.LBB52_16:                              # %for.cond39
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB52_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB52_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB52_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_20
.LBB52_19:                              # %if.else58
                                        #   in Loop: Header=BB52_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_20:                              # %if.end73
                                        #   in Loop: Header=BB52_16 Depth=3
	jmp	.LBB52_21
.LBB52_21:                              # %for.inc74
                                        #   in Loop: Header=BB52_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_16
.LBB52_22:                              # %for.end76
                                        #   in Loop: Header=BB52_14 Depth=2
	jmp	.LBB52_23
.LBB52_23:                              # %for.inc77
                                        #   in Loop: Header=BB52_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_14
.LBB52_24:                              # %for.end79
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_25:                              # %for.cond80
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB52_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB52_25 Depth=2
	movl	$0, -4(%rbp)
.LBB52_27:                              # %for.cond83
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB52_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB52_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB52_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_31
.LBB52_30:                              # %if.else102
                                        #   in Loop: Header=BB52_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_31:                              # %if.end117
                                        #   in Loop: Header=BB52_27 Depth=3
	jmp	.LBB52_32
.LBB52_32:                              # %for.inc118
                                        #   in Loop: Header=BB52_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_27
.LBB52_33:                              # %for.end120
                                        #   in Loop: Header=BB52_25 Depth=2
	jmp	.LBB52_34
.LBB52_34:                              # %for.inc121
                                        #   in Loop: Header=BB52_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_25
.LBB52_35:                              # %for.end123
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_36:                              # %for.cond124
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB52_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB52_36 Depth=2
	movl	$0, -4(%rbp)
.LBB52_38:                              # %for.cond127
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB52_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB52_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB52_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_42
.LBB52_41:                              # %if.else146
                                        #   in Loop: Header=BB52_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_42:                              # %if.end161
                                        #   in Loop: Header=BB52_38 Depth=3
	jmp	.LBB52_43
.LBB52_43:                              # %for.inc162
                                        #   in Loop: Header=BB52_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_38
.LBB52_44:                              # %for.end164
                                        #   in Loop: Header=BB52_36 Depth=2
	jmp	.LBB52_45
.LBB52_45:                              # %for.inc165
                                        #   in Loop: Header=BB52_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_36
.LBB52_46:                              # %for.end167
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_47:                              # %for.cond168
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB52_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB52_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_51
.LBB52_50:                              # %if.else184
                                        #   in Loop: Header=BB52_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_51:                              # %if.end196
                                        #   in Loop: Header=BB52_47 Depth=2
	jmp	.LBB52_52
.LBB52_52:                              # %for.inc197
                                        #   in Loop: Header=BB52_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_47
.LBB52_53:                              # %for.end199
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_54:                              # %for.cond200
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB52_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB52_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_58
.LBB52_57:                              # %if.else216
                                        #   in Loop: Header=BB52_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_58:                              # %if.end228
                                        #   in Loop: Header=BB52_54 Depth=2
	jmp	.LBB52_59
.LBB52_59:                              # %for.inc229
                                        #   in Loop: Header=BB52_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_54
.LBB52_60:                              # %for.end231
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_61:                              # %for.cond232
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB52_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB52_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB52_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_65
.LBB52_64:                              # %if.else248
                                        #   in Loop: Header=BB52_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_65:                              # %if.end260
                                        #   in Loop: Header=BB52_61 Depth=2
	jmp	.LBB52_66
.LBB52_66:                              # %for.inc261
                                        #   in Loop: Header=BB52_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_61
.LBB52_67:                              # %for.end263
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_68:                              # %for.cond264
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB52_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB52_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB52_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_72
.LBB52_71:                              # %if.else280
                                        #   in Loop: Header=BB52_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_72:                              # %if.end292
                                        #   in Loop: Header=BB52_68 Depth=2
	jmp	.LBB52_73
.LBB52_73:                              # %for.inc293
                                        #   in Loop: Header=BB52_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_68
.LBB52_74:                              # %for.end295
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_75:                              # %for.cond296
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB52_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB52_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_79
.LBB52_78:                              # %if.else312
                                        #   in Loop: Header=BB52_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_79:                              # %if.end324
                                        #   in Loop: Header=BB52_75 Depth=2
	jmp	.LBB52_80
.LBB52_80:                              # %for.inc325
                                        #   in Loop: Header=BB52_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_75
.LBB52_81:                              # %for.end327
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_82:                              # %for.cond328
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB52_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB52_82 Depth=2
	movl	$0, -4(%rbp)
.LBB52_84:                              # %for.cond331
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB52_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB52_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB52_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_88
.LBB52_87:                              # %if.else350
                                        #   in Loop: Header=BB52_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_88:                              # %if.end365
                                        #   in Loop: Header=BB52_84 Depth=3
	jmp	.LBB52_89
.LBB52_89:                              # %for.inc366
                                        #   in Loop: Header=BB52_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_84
.LBB52_90:                              # %for.end368
                                        #   in Loop: Header=BB52_82 Depth=2
	jmp	.LBB52_91
.LBB52_91:                              # %for.inc369
                                        #   in Loop: Header=BB52_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_82
.LBB52_92:                              # %for.end371
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_93:                              # %for.cond372
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB52_93 Depth=2
	movl	$0, -4(%rbp)
.LBB52_95:                              # %for.cond375
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB52_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB52_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB52_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_99
.LBB52_98:                              # %if.else394
                                        #   in Loop: Header=BB52_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_99:                              # %if.end409
                                        #   in Loop: Header=BB52_95 Depth=3
	jmp	.LBB52_100
.LBB52_100:                             # %for.inc410
                                        #   in Loop: Header=BB52_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_95
.LBB52_101:                             # %for.end412
                                        #   in Loop: Header=BB52_93 Depth=2
	jmp	.LBB52_102
.LBB52_102:                             # %for.inc413
                                        #   in Loop: Header=BB52_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_93
.LBB52_103:                             # %for.end415
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_104:                             # %for.cond416
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB52_104 Depth=2
	movl	$0, -4(%rbp)
.LBB52_106:                             # %for.cond419
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB52_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB52_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_110
.LBB52_109:                             # %if.else438
                                        #   in Loop: Header=BB52_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_110:                             # %if.end453
                                        #   in Loop: Header=BB52_106 Depth=3
	jmp	.LBB52_111
.LBB52_111:                             # %for.inc454
                                        #   in Loop: Header=BB52_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_106
.LBB52_112:                             # %for.end456
                                        #   in Loop: Header=BB52_104 Depth=2
	jmp	.LBB52_113
.LBB52_113:                             # %for.inc457
                                        #   in Loop: Header=BB52_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_104
.LBB52_114:                             # %for.end459
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_115:                             # %for.cond460
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB52_115 Depth=2
	movl	$0, -4(%rbp)
.LBB52_117:                             # %for.cond463
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB52_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB52_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_121
.LBB52_120:                             # %if.else482
                                        #   in Loop: Header=BB52_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_121:                             # %if.end497
                                        #   in Loop: Header=BB52_117 Depth=3
	jmp	.LBB52_122
.LBB52_122:                             # %for.inc498
                                        #   in Loop: Header=BB52_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_117
.LBB52_123:                             # %for.end500
                                        #   in Loop: Header=BB52_115 Depth=2
	jmp	.LBB52_124
.LBB52_124:                             # %for.inc501
                                        #   in Loop: Header=BB52_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_115
.LBB52_125:                             # %for.end503
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_126:                             # %for.cond504
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB52_126 Depth=2
	movl	$0, -4(%rbp)
.LBB52_128:                             # %for.cond507
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB52_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB52_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB52_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_132
.LBB52_131:                             # %if.else526
                                        #   in Loop: Header=BB52_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_132:                             # %if.end541
                                        #   in Loop: Header=BB52_128 Depth=3
	jmp	.LBB52_133
.LBB52_133:                             # %for.inc542
                                        #   in Loop: Header=BB52_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_128
.LBB52_134:                             # %for.end544
                                        #   in Loop: Header=BB52_126 Depth=2
	jmp	.LBB52_135
.LBB52_135:                             # %for.inc545
                                        #   in Loop: Header=BB52_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_126
.LBB52_136:                             # %for.end547
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_137:                             # %for.cond548
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB52_137 Depth=2
	movl	$0, -4(%rbp)
.LBB52_139:                             # %for.cond551
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB52_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB52_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB52_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_143
.LBB52_142:                             # %if.else570
                                        #   in Loop: Header=BB52_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_143:                             # %if.end585
                                        #   in Loop: Header=BB52_139 Depth=3
	jmp	.LBB52_144
.LBB52_144:                             # %for.inc586
                                        #   in Loop: Header=BB52_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_139
.LBB52_145:                             # %for.end588
                                        #   in Loop: Header=BB52_137 Depth=2
	jmp	.LBB52_146
.LBB52_146:                             # %for.inc589
                                        #   in Loop: Header=BB52_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_137
.LBB52_147:                             # %for.end591
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_148:                             # %for.cond592
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB52_148 Depth=2
	movl	$0, -4(%rbp)
.LBB52_150:                             # %for.cond595
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB52_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB52_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_154
.LBB52_153:                             # %if.else614
                                        #   in Loop: Header=BB52_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_154:                             # %if.end629
                                        #   in Loop: Header=BB52_150 Depth=3
	jmp	.LBB52_155
.LBB52_155:                             # %for.inc630
                                        #   in Loop: Header=BB52_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_150
.LBB52_156:                             # %for.end632
                                        #   in Loop: Header=BB52_148 Depth=2
	jmp	.LBB52_157
.LBB52_157:                             # %for.inc633
                                        #   in Loop: Header=BB52_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_148
.LBB52_158:                             # %for.end635
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_159:                             # %for.cond636
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB52_159 Depth=2
	movl	$0, -4(%rbp)
.LBB52_161:                             # %for.cond639
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB52_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB52_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_165
.LBB52_164:                             # %if.else658
                                        #   in Loop: Header=BB52_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_165:                             # %if.end673
                                        #   in Loop: Header=BB52_161 Depth=3
	jmp	.LBB52_166
.LBB52_166:                             # %for.inc674
                                        #   in Loop: Header=BB52_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_161
.LBB52_167:                             # %for.end676
                                        #   in Loop: Header=BB52_159 Depth=2
	jmp	.LBB52_168
.LBB52_168:                             # %for.inc677
                                        #   in Loop: Header=BB52_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_159
.LBB52_169:                             # %for.end679
                                        #   in Loop: Header=BB52_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB52_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB52_171:                             # %if.end682
                                        #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_172
.LBB52_172:                             # %for.inc683
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_1
.LBB52_173:                             # %for.end685
	cmpl	$1132302219, -44(%rbp)  # imm = 0x437D8F8B
	jne	.LBB52_175
.LBB52_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_174
.Lfunc_end52:
	.size	GetCtxModelNumber.45, .Lfunc_end52-GetCtxModelNumber.45
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.46
.LCPI53_0:
	.quad	4611686018427387904     # double 2
.LCPI53_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.46
	.p2align	4, 0x90
	.type	create_context_memory.46,@function
create_context_memory.46:               # @create_context_memory.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$546763472, -20(%rbp)   # imm = 0x2096F2D0
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB53_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB53_3
.LBB53_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB53_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB53_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB53_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB53_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB53_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB53_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB53_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB53_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB53_11:                              # %if.end10
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB53_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB53_13:                              # %if.end16
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	$0, -8(%rbp)
.LBB53_14:                              # %for.cond17
                                        #   Parent Loop BB53_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB53_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB53_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB53_17:                              # %if.end28
                                        #   in Loop: Header=BB53_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB53_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB53_19:                              # %if.end39
                                        #   in Loop: Header=BB53_14 Depth=2
	jmp	.LBB53_20
.LBB53_20:                              # %for.inc
                                        #   in Loop: Header=BB53_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_14
.LBB53_21:                              # %for.end
                                        #   in Loop: Header=BB53_8 Depth=1
	jmp	.LBB53_22
.LBB53_22:                              # %for.inc40
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_8
.LBB53_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB53_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_26 Depth 2
                                        #       Child Loop BB53_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB53_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB53_24 Depth=1
	movl	$0, -8(%rbp)
.LBB53_26:                              # %for.cond47
                                        #   Parent Loop BB53_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB53_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB53_26 Depth=2
	movl	$0, -12(%rbp)
.LBB53_28:                              # %for.cond51
                                        #   Parent Loop BB53_24 Depth=1
                                        #     Parent Loop BB53_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB53_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB53_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB53_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_28
.LBB53_31:                              # %for.end63
                                        #   in Loop: Header=BB53_26 Depth=2
	jmp	.LBB53_32
.LBB53_32:                              # %for.inc64
                                        #   in Loop: Header=BB53_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_26
.LBB53_33:                              # %for.end66
                                        #   in Loop: Header=BB53_24 Depth=1
	jmp	.LBB53_34
.LBB53_34:                              # %for.inc67
                                        #   in Loop: Header=BB53_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_24
.LBB53_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB53_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB53_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB53_36 Depth=1
	vmovsd	.LCPI53_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI53_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI53_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB53_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_36
.LBB53_39:                              # %for.end98
	cmpl	$546763472, -20(%rbp)   # imm = 0x2096F2D0
	jne	.LBB53_41
.LBB53_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_40
.Lfunc_end53:
	.size	create_context_memory.46, .Lfunc_end53-create_context_memory.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.47
.LCPI54_0:
	.quad	4607182418800017408     # double 1
.LCPI54_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI54_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI54_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.47
	.p2align	4, 0x90
	.type	XRate.47,@function
XRate.47:                               # @XRate.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$750430053, -36(%rbp)   # imm = 0x2CBAA765
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB54_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB54_3
.LBB54_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB54_3:                               # %cond.end
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI54_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI54_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB54_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB54_6
.LBB54_5:                               # %cond.false6
	vmovsd	.LCPI54_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI54_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI54_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB54_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB54_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB54_9
.LBB54_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB54_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB54_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB54_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB54_13
.LBB54_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB54_13:                              # %cond.end26
	jmp	.LBB54_15
.LBB54_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB54_15
.LBB54_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB54_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB54_18
.LBB54_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB54_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$750430053, -36(%rbp)   # imm = 0x2CBAA765
	jne	.LBB54_20
.LBB54_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB54_19
.Lfunc_end54:
	.size	XRate.47, .Lfunc_end54-XRate.47
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.48
.LCPI55_0:
	.quad	4611686018427387904     # double 2
.LCPI55_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.48
	.p2align	4, 0x90
	.type	create_context_memory.48,@function
create_context_memory.48:               # @create_context_memory.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1925065630, -20(%rbp)  # imm = 0x72BE2B9E
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB55_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB55_3
.LBB55_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB55_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB55_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB55_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB55_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB55_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB55_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB55_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB55_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB55_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB55_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB55_11:                              # %if.end10
                                        #   in Loop: Header=BB55_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB55_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB55_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB55_13:                              # %if.end16
                                        #   in Loop: Header=BB55_8 Depth=1
	movl	$0, -8(%rbp)
.LBB55_14:                              # %for.cond17
                                        #   Parent Loop BB55_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB55_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB55_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB55_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB55_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB55_17:                              # %if.end28
                                        #   in Loop: Header=BB55_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB55_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB55_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB55_19:                              # %if.end39
                                        #   in Loop: Header=BB55_14 Depth=2
	jmp	.LBB55_20
.LBB55_20:                              # %for.inc
                                        #   in Loop: Header=BB55_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_14
.LBB55_21:                              # %for.end
                                        #   in Loop: Header=BB55_8 Depth=1
	jmp	.LBB55_22
.LBB55_22:                              # %for.inc40
                                        #   in Loop: Header=BB55_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_8
.LBB55_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB55_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_26 Depth 2
                                        #       Child Loop BB55_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB55_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB55_24 Depth=1
	movl	$0, -8(%rbp)
.LBB55_26:                              # %for.cond47
                                        #   Parent Loop BB55_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB55_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB55_26 Depth=2
	movl	$0, -12(%rbp)
.LBB55_28:                              # %for.cond51
                                        #   Parent Loop BB55_24 Depth=1
                                        #     Parent Loop BB55_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB55_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB55_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB55_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_28
.LBB55_31:                              # %for.end63
                                        #   in Loop: Header=BB55_26 Depth=2
	jmp	.LBB55_32
.LBB55_32:                              # %for.inc64
                                        #   in Loop: Header=BB55_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_26
.LBB55_33:                              # %for.end66
                                        #   in Loop: Header=BB55_24 Depth=1
	jmp	.LBB55_34
.LBB55_34:                              # %for.inc67
                                        #   in Loop: Header=BB55_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_24
.LBB55_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB55_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB55_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB55_36 Depth=1
	vmovsd	.LCPI55_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB55_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_36
.LBB55_39:                              # %for.end98
	cmpl	$1925065630, -20(%rbp)  # imm = 0x72BE2B9E
	jne	.LBB55_41
.LBB55_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_40
.Lfunc_end55:
	.size	create_context_memory.48, .Lfunc_end55-create_context_memory.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.49
.LCPI56_0:
	.quad	4607182418800017408     # double 1
.LCPI56_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI56_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI56_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.49
	.p2align	4, 0x90
	.type	XRate.49,@function
XRate.49:                               # @XRate.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1852846228, -36(%rbp)  # imm = 0x6E703094
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB56_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB56_3
.LBB56_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB56_3:                               # %cond.end
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI56_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI56_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB56_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB56_6
.LBB56_5:                               # %cond.false6
	vmovsd	.LCPI56_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI56_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI56_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB56_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB56_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB56_9
.LBB56_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB56_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB56_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB56_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB56_13
.LBB56_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB56_13:                              # %cond.end26
	jmp	.LBB56_15
.LBB56_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB56_15
.LBB56_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB56_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB56_18
.LBB56_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB56_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1852846228, -36(%rbp)  # imm = 0x6E703094
	jne	.LBB56_20
.LBB56_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB56_19
.Lfunc_end56:
	.size	XRate.49, .Lfunc_end56-XRate.49
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.50
.LCPI57_0:
	.quad	4611686018427387904     # double 2
.LCPI57_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.50
	.p2align	4, 0x90
	.type	create_context_memory.50,@function
create_context_memory.50:               # @create_context_memory.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$819321407, -20(%rbp)   # imm = 0x30D5DA3F
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB57_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB57_3
.LBB57_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB57_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB57_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB57_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB57_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB57_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB57_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB57_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB57_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB57_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB57_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB57_11:                              # %if.end10
                                        #   in Loop: Header=BB57_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB57_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB57_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB57_13:                              # %if.end16
                                        #   in Loop: Header=BB57_8 Depth=1
	movl	$0, -8(%rbp)
.LBB57_14:                              # %for.cond17
                                        #   Parent Loop BB57_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB57_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB57_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB57_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB57_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB57_17:                              # %if.end28
                                        #   in Loop: Header=BB57_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB57_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB57_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB57_19:                              # %if.end39
                                        #   in Loop: Header=BB57_14 Depth=2
	jmp	.LBB57_20
.LBB57_20:                              # %for.inc
                                        #   in Loop: Header=BB57_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_14
.LBB57_21:                              # %for.end
                                        #   in Loop: Header=BB57_8 Depth=1
	jmp	.LBB57_22
.LBB57_22:                              # %for.inc40
                                        #   in Loop: Header=BB57_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_8
.LBB57_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB57_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_26 Depth 2
                                        #       Child Loop BB57_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB57_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB57_24 Depth=1
	movl	$0, -8(%rbp)
.LBB57_26:                              # %for.cond47
                                        #   Parent Loop BB57_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB57_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB57_26 Depth=2
	movl	$0, -12(%rbp)
.LBB57_28:                              # %for.cond51
                                        #   Parent Loop BB57_24 Depth=1
                                        #     Parent Loop BB57_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB57_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB57_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB57_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_28
.LBB57_31:                              # %for.end63
                                        #   in Loop: Header=BB57_26 Depth=2
	jmp	.LBB57_32
.LBB57_32:                              # %for.inc64
                                        #   in Loop: Header=BB57_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_26
.LBB57_33:                              # %for.end66
                                        #   in Loop: Header=BB57_24 Depth=1
	jmp	.LBB57_34
.LBB57_34:                              # %for.inc67
                                        #   in Loop: Header=BB57_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_24
.LBB57_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB57_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB57_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB57_36 Depth=1
	vmovsd	.LCPI57_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB57_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_36
.LBB57_39:                              # %for.end98
	cmpl	$819321407, -20(%rbp)   # imm = 0x30D5DA3F
	jne	.LBB57_41
.LBB57_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_40
.Lfunc_end57:
	.size	create_context_memory.50, .Lfunc_end57-create_context_memory.50
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.51        # -- Begin function init_contexts.51
	.p2align	4, 0x90
	.type	init_contexts.51,@function
init_contexts.51:                       # @init_contexts.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$519450905, -28(%rbp)   # imm = 0x1EF63119
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB58_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -4(%rbp)
.LBB58_3:                               # %for.cond2
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB58_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_7
.LBB58_6:                               # %if.else
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_7:                               # %if.end
                                        #   in Loop: Header=BB58_3 Depth=2
	jmp	.LBB58_8
.LBB58_8:                               # %for.inc
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_3
.LBB58_9:                               # %for.end
                                        #   in Loop: Header=BB58_1 Depth=1
	jmp	.LBB58_10
.LBB58_10:                              # %for.inc28
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_1
.LBB58_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB58_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB58_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB58_12 Depth=1
	movl	$0, -4(%rbp)
.LBB58_14:                              # %for.cond34
                                        #   Parent Loop BB58_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB58_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_18
.LBB58_17:                              # %if.else52
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_18:                              # %if.end66
                                        #   in Loop: Header=BB58_14 Depth=2
	jmp	.LBB58_19
.LBB58_19:                              # %for.inc67
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_14
.LBB58_20:                              # %for.end69
                                        #   in Loop: Header=BB58_12 Depth=1
	jmp	.LBB58_21
.LBB58_21:                              # %for.inc70
                                        #   in Loop: Header=BB58_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_12
.LBB58_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB58_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB58_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB58_23 Depth=1
	movl	$0, -4(%rbp)
.LBB58_25:                              # %for.cond76
                                        #   Parent Loop BB58_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB58_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB58_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB58_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_29
.LBB58_28:                              # %if.else94
                                        #   in Loop: Header=BB58_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_29:                              # %if.end108
                                        #   in Loop: Header=BB58_25 Depth=2
	jmp	.LBB58_30
.LBB58_30:                              # %for.inc109
                                        #   in Loop: Header=BB58_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_25
.LBB58_31:                              # %for.end111
                                        #   in Loop: Header=BB58_23 Depth=1
	jmp	.LBB58_32
.LBB58_32:                              # %for.inc112
                                        #   in Loop: Header=BB58_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_23
.LBB58_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB58_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB58_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB58_34 Depth=1
	movl	$0, -4(%rbp)
.LBB58_36:                              # %for.cond118
                                        #   Parent Loop BB58_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB58_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB58_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB58_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_40
.LBB58_39:                              # %if.else136
                                        #   in Loop: Header=BB58_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_40:                              # %if.end150
                                        #   in Loop: Header=BB58_36 Depth=2
	jmp	.LBB58_41
.LBB58_41:                              # %for.inc151
                                        #   in Loop: Header=BB58_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_36
.LBB58_42:                              # %for.end153
                                        #   in Loop: Header=BB58_34 Depth=1
	jmp	.LBB58_43
.LBB58_43:                              # %for.inc154
                                        #   in Loop: Header=BB58_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_34
.LBB58_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB58_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB58_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB58_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_49
.LBB58_48:                              # %if.else172
                                        #   in Loop: Header=BB58_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_49:                              # %if.end183
                                        #   in Loop: Header=BB58_45 Depth=1
	jmp	.LBB58_50
.LBB58_50:                              # %for.inc184
                                        #   in Loop: Header=BB58_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_45
.LBB58_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB58_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB58_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB58_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_56
.LBB58_55:                              # %if.else202
                                        #   in Loop: Header=BB58_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_56:                              # %if.end213
                                        #   in Loop: Header=BB58_52 Depth=1
	jmp	.LBB58_57
.LBB58_57:                              # %for.inc214
                                        #   in Loop: Header=BB58_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_52
.LBB58_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB58_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB58_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB58_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB58_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_63
.LBB58_62:                              # %if.else232
                                        #   in Loop: Header=BB58_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_63:                              # %if.end243
                                        #   in Loop: Header=BB58_59 Depth=1
	jmp	.LBB58_64
.LBB58_64:                              # %for.inc244
                                        #   in Loop: Header=BB58_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_59
.LBB58_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB58_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB58_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB58_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB58_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_70
.LBB58_69:                              # %if.else262
                                        #   in Loop: Header=BB58_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_70:                              # %if.end273
                                        #   in Loop: Header=BB58_66 Depth=1
	jmp	.LBB58_71
.LBB58_71:                              # %for.inc274
                                        #   in Loop: Header=BB58_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_66
.LBB58_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB58_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB58_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB58_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_77
.LBB58_76:                              # %if.else292
                                        #   in Loop: Header=BB58_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_77:                              # %if.end303
                                        #   in Loop: Header=BB58_73 Depth=1
	jmp	.LBB58_78
.LBB58_78:                              # %for.inc304
                                        #   in Loop: Header=BB58_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_73
.LBB58_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB58_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB58_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB58_80 Depth=1
	movl	$0, -4(%rbp)
.LBB58_82:                              # %for.cond310
                                        #   Parent Loop BB58_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB58_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB58_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_86
.LBB58_85:                              # %if.else328
                                        #   in Loop: Header=BB58_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_86:                              # %if.end342
                                        #   in Loop: Header=BB58_82 Depth=2
	jmp	.LBB58_87
.LBB58_87:                              # %for.inc343
                                        #   in Loop: Header=BB58_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_82
.LBB58_88:                              # %for.end345
                                        #   in Loop: Header=BB58_80 Depth=1
	jmp	.LBB58_89
.LBB58_89:                              # %for.inc346
                                        #   in Loop: Header=BB58_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_80
.LBB58_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB58_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB58_91 Depth=1
	movl	$0, -4(%rbp)
.LBB58_93:                              # %for.cond352
                                        #   Parent Loop BB58_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB58_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB58_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_97
.LBB58_96:                              # %if.else370
                                        #   in Loop: Header=BB58_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_97:                              # %if.end384
                                        #   in Loop: Header=BB58_93 Depth=2
	jmp	.LBB58_98
.LBB58_98:                              # %for.inc385
                                        #   in Loop: Header=BB58_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_93
.LBB58_99:                              # %for.end387
                                        #   in Loop: Header=BB58_91 Depth=1
	jmp	.LBB58_100
.LBB58_100:                             # %for.inc388
                                        #   in Loop: Header=BB58_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_91
.LBB58_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB58_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB58_102 Depth=1
	movl	$0, -4(%rbp)
.LBB58_104:                             # %for.cond394
                                        #   Parent Loop BB58_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB58_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB58_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_108
.LBB58_107:                             # %if.else412
                                        #   in Loop: Header=BB58_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_108:                             # %if.end426
                                        #   in Loop: Header=BB58_104 Depth=2
	jmp	.LBB58_109
.LBB58_109:                             # %for.inc427
                                        #   in Loop: Header=BB58_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_104
.LBB58_110:                             # %for.end429
                                        #   in Loop: Header=BB58_102 Depth=1
	jmp	.LBB58_111
.LBB58_111:                             # %for.inc430
                                        #   in Loop: Header=BB58_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_102
.LBB58_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB58_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB58_113 Depth=1
	movl	$0, -4(%rbp)
.LBB58_115:                             # %for.cond436
                                        #   Parent Loop BB58_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB58_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB58_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_119
.LBB58_118:                             # %if.else454
                                        #   in Loop: Header=BB58_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_119:                             # %if.end468
                                        #   in Loop: Header=BB58_115 Depth=2
	jmp	.LBB58_120
.LBB58_120:                             # %for.inc469
                                        #   in Loop: Header=BB58_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_115
.LBB58_121:                             # %for.end471
                                        #   in Loop: Header=BB58_113 Depth=1
	jmp	.LBB58_122
.LBB58_122:                             # %for.inc472
                                        #   in Loop: Header=BB58_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_113
.LBB58_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB58_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB58_124 Depth=1
	movl	$0, -4(%rbp)
.LBB58_126:                             # %for.cond478
                                        #   Parent Loop BB58_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB58_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB58_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB58_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_130
.LBB58_129:                             # %if.else496
                                        #   in Loop: Header=BB58_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_130:                             # %if.end510
                                        #   in Loop: Header=BB58_126 Depth=2
	jmp	.LBB58_131
.LBB58_131:                             # %for.inc511
                                        #   in Loop: Header=BB58_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_126
.LBB58_132:                             # %for.end513
                                        #   in Loop: Header=BB58_124 Depth=1
	jmp	.LBB58_133
.LBB58_133:                             # %for.inc514
                                        #   in Loop: Header=BB58_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_124
.LBB58_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB58_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	$0, -4(%rbp)
.LBB58_137:                             # %for.cond520
                                        #   Parent Loop BB58_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB58_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB58_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB58_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_141
.LBB58_140:                             # %if.else538
                                        #   in Loop: Header=BB58_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_141:                             # %if.end552
                                        #   in Loop: Header=BB58_137 Depth=2
	jmp	.LBB58_142
.LBB58_142:                             # %for.inc553
                                        #   in Loop: Header=BB58_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_137
.LBB58_143:                             # %for.end555
                                        #   in Loop: Header=BB58_135 Depth=1
	jmp	.LBB58_144
.LBB58_144:                             # %for.inc556
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_135
.LBB58_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB58_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB58_146 Depth=1
	movl	$0, -4(%rbp)
.LBB58_148:                             # %for.cond562
                                        #   Parent Loop BB58_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB58_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB58_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_152
.LBB58_151:                             # %if.else580
                                        #   in Loop: Header=BB58_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_152:                             # %if.end594
                                        #   in Loop: Header=BB58_148 Depth=2
	jmp	.LBB58_153
.LBB58_153:                             # %for.inc595
                                        #   in Loop: Header=BB58_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_148
.LBB58_154:                             # %for.end597
                                        #   in Loop: Header=BB58_146 Depth=1
	jmp	.LBB58_155
.LBB58_155:                             # %for.inc598
                                        #   in Loop: Header=BB58_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_146
.LBB58_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB58_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB58_157 Depth=1
	movl	$0, -4(%rbp)
.LBB58_159:                             # %for.cond604
                                        #   Parent Loop BB58_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB58_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB58_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_163
.LBB58_162:                             # %if.else622
                                        #   in Loop: Header=BB58_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_163:                             # %if.end636
                                        #   in Loop: Header=BB58_159 Depth=2
	jmp	.LBB58_164
.LBB58_164:                             # %for.inc637
                                        #   in Loop: Header=BB58_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_159
.LBB58_165:                             # %for.end639
                                        #   in Loop: Header=BB58_157 Depth=1
	jmp	.LBB58_166
.LBB58_166:                             # %for.inc640
                                        #   in Loop: Header=BB58_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_157
.LBB58_167:                             # %for.end642
	cmpl	$519450905, -28(%rbp)   # imm = 0x1EF63119
	jne	.LBB58_169
.LBB58_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_168
.Lfunc_end58:
	.size	init_contexts.51, .Lfunc_end58-init_contexts.51
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.52        # -- Begin function init_contexts.52
	.p2align	4, 0x90
	.type	init_contexts.52,@function
init_contexts.52:                       # @init_contexts.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$52705540, -28(%rbp)    # imm = 0x3243904
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB59_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB59_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -4(%rbp)
.LBB59_3:                               # %for.cond2
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB59_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB59_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB59_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_7
.LBB59_6:                               # %if.else
                                        #   in Loop: Header=BB59_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_7:                               # %if.end
                                        #   in Loop: Header=BB59_3 Depth=2
	jmp	.LBB59_8
.LBB59_8:                               # %for.inc
                                        #   in Loop: Header=BB59_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_3
.LBB59_9:                               # %for.end
                                        #   in Loop: Header=BB59_1 Depth=1
	jmp	.LBB59_10
.LBB59_10:                              # %for.inc28
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_1
.LBB59_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB59_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB59_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB59_12 Depth=1
	movl	$0, -4(%rbp)
.LBB59_14:                              # %for.cond34
                                        #   Parent Loop BB59_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB59_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB59_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB59_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_18
.LBB59_17:                              # %if.else52
                                        #   in Loop: Header=BB59_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_18:                              # %if.end66
                                        #   in Loop: Header=BB59_14 Depth=2
	jmp	.LBB59_19
.LBB59_19:                              # %for.inc67
                                        #   in Loop: Header=BB59_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_14
.LBB59_20:                              # %for.end69
                                        #   in Loop: Header=BB59_12 Depth=1
	jmp	.LBB59_21
.LBB59_21:                              # %for.inc70
                                        #   in Loop: Header=BB59_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_12
.LBB59_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB59_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB59_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	$0, -4(%rbp)
.LBB59_25:                              # %for.cond76
                                        #   Parent Loop BB59_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB59_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB59_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB59_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_29
.LBB59_28:                              # %if.else94
                                        #   in Loop: Header=BB59_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_29:                              # %if.end108
                                        #   in Loop: Header=BB59_25 Depth=2
	jmp	.LBB59_30
.LBB59_30:                              # %for.inc109
                                        #   in Loop: Header=BB59_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_25
.LBB59_31:                              # %for.end111
                                        #   in Loop: Header=BB59_23 Depth=1
	jmp	.LBB59_32
.LBB59_32:                              # %for.inc112
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_23
.LBB59_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB59_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB59_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB59_34 Depth=1
	movl	$0, -4(%rbp)
.LBB59_36:                              # %for.cond118
                                        #   Parent Loop BB59_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB59_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB59_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB59_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_40
.LBB59_39:                              # %if.else136
                                        #   in Loop: Header=BB59_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_40:                              # %if.end150
                                        #   in Loop: Header=BB59_36 Depth=2
	jmp	.LBB59_41
.LBB59_41:                              # %for.inc151
                                        #   in Loop: Header=BB59_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_36
.LBB59_42:                              # %for.end153
                                        #   in Loop: Header=BB59_34 Depth=1
	jmp	.LBB59_43
.LBB59_43:                              # %for.inc154
                                        #   in Loop: Header=BB59_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_34
.LBB59_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB59_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB59_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB59_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB59_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_49
.LBB59_48:                              # %if.else172
                                        #   in Loop: Header=BB59_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_49:                              # %if.end183
                                        #   in Loop: Header=BB59_45 Depth=1
	jmp	.LBB59_50
.LBB59_50:                              # %for.inc184
                                        #   in Loop: Header=BB59_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_45
.LBB59_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB59_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB59_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB59_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB59_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_56
.LBB59_55:                              # %if.else202
                                        #   in Loop: Header=BB59_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_56:                              # %if.end213
                                        #   in Loop: Header=BB59_52 Depth=1
	jmp	.LBB59_57
.LBB59_57:                              # %for.inc214
                                        #   in Loop: Header=BB59_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_52
.LBB59_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB59_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB59_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB59_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB59_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_63
.LBB59_62:                              # %if.else232
                                        #   in Loop: Header=BB59_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_63:                              # %if.end243
                                        #   in Loop: Header=BB59_59 Depth=1
	jmp	.LBB59_64
.LBB59_64:                              # %for.inc244
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_59
.LBB59_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB59_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB59_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB59_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB59_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_70
.LBB59_69:                              # %if.else262
                                        #   in Loop: Header=BB59_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_70:                              # %if.end273
                                        #   in Loop: Header=BB59_66 Depth=1
	jmp	.LBB59_71
.LBB59_71:                              # %for.inc274
                                        #   in Loop: Header=BB59_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_66
.LBB59_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB59_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB59_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB59_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB59_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_77
.LBB59_76:                              # %if.else292
                                        #   in Loop: Header=BB59_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_77:                              # %if.end303
                                        #   in Loop: Header=BB59_73 Depth=1
	jmp	.LBB59_78
.LBB59_78:                              # %for.inc304
                                        #   in Loop: Header=BB59_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_73
.LBB59_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB59_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB59_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB59_80 Depth=1
	movl	$0, -4(%rbp)
.LBB59_82:                              # %for.cond310
                                        #   Parent Loop BB59_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB59_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB59_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB59_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_86
.LBB59_85:                              # %if.else328
                                        #   in Loop: Header=BB59_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_86:                              # %if.end342
                                        #   in Loop: Header=BB59_82 Depth=2
	jmp	.LBB59_87
.LBB59_87:                              # %for.inc343
                                        #   in Loop: Header=BB59_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_82
.LBB59_88:                              # %for.end345
                                        #   in Loop: Header=BB59_80 Depth=1
	jmp	.LBB59_89
.LBB59_89:                              # %for.inc346
                                        #   in Loop: Header=BB59_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_80
.LBB59_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB59_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB59_91 Depth=1
	movl	$0, -4(%rbp)
.LBB59_93:                              # %for.cond352
                                        #   Parent Loop BB59_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB59_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB59_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB59_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_97
.LBB59_96:                              # %if.else370
                                        #   in Loop: Header=BB59_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_97:                              # %if.end384
                                        #   in Loop: Header=BB59_93 Depth=2
	jmp	.LBB59_98
.LBB59_98:                              # %for.inc385
                                        #   in Loop: Header=BB59_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_93
.LBB59_99:                              # %for.end387
                                        #   in Loop: Header=BB59_91 Depth=1
	jmp	.LBB59_100
.LBB59_100:                             # %for.inc388
                                        #   in Loop: Header=BB59_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_91
.LBB59_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB59_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB59_102 Depth=1
	movl	$0, -4(%rbp)
.LBB59_104:                             # %for.cond394
                                        #   Parent Loop BB59_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB59_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB59_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB59_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_108
.LBB59_107:                             # %if.else412
                                        #   in Loop: Header=BB59_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_108:                             # %if.end426
                                        #   in Loop: Header=BB59_104 Depth=2
	jmp	.LBB59_109
.LBB59_109:                             # %for.inc427
                                        #   in Loop: Header=BB59_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_104
.LBB59_110:                             # %for.end429
                                        #   in Loop: Header=BB59_102 Depth=1
	jmp	.LBB59_111
.LBB59_111:                             # %for.inc430
                                        #   in Loop: Header=BB59_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_102
.LBB59_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB59_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB59_113 Depth=1
	movl	$0, -4(%rbp)
.LBB59_115:                             # %for.cond436
                                        #   Parent Loop BB59_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB59_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB59_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB59_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_119
.LBB59_118:                             # %if.else454
                                        #   in Loop: Header=BB59_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_119:                             # %if.end468
                                        #   in Loop: Header=BB59_115 Depth=2
	jmp	.LBB59_120
.LBB59_120:                             # %for.inc469
                                        #   in Loop: Header=BB59_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_115
.LBB59_121:                             # %for.end471
                                        #   in Loop: Header=BB59_113 Depth=1
	jmp	.LBB59_122
.LBB59_122:                             # %for.inc472
                                        #   in Loop: Header=BB59_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_113
.LBB59_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB59_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB59_124 Depth=1
	movl	$0, -4(%rbp)
.LBB59_126:                             # %for.cond478
                                        #   Parent Loop BB59_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB59_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB59_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB59_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_130
.LBB59_129:                             # %if.else496
                                        #   in Loop: Header=BB59_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_130:                             # %if.end510
                                        #   in Loop: Header=BB59_126 Depth=2
	jmp	.LBB59_131
.LBB59_131:                             # %for.inc511
                                        #   in Loop: Header=BB59_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_126
.LBB59_132:                             # %for.end513
                                        #   in Loop: Header=BB59_124 Depth=1
	jmp	.LBB59_133
.LBB59_133:                             # %for.inc514
                                        #   in Loop: Header=BB59_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_124
.LBB59_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB59_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	$0, -4(%rbp)
.LBB59_137:                             # %for.cond520
                                        #   Parent Loop BB59_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB59_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB59_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB59_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_141
.LBB59_140:                             # %if.else538
                                        #   in Loop: Header=BB59_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_141:                             # %if.end552
                                        #   in Loop: Header=BB59_137 Depth=2
	jmp	.LBB59_142
.LBB59_142:                             # %for.inc553
                                        #   in Loop: Header=BB59_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_137
.LBB59_143:                             # %for.end555
                                        #   in Loop: Header=BB59_135 Depth=1
	jmp	.LBB59_144
.LBB59_144:                             # %for.inc556
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_135
.LBB59_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB59_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB59_146 Depth=1
	movl	$0, -4(%rbp)
.LBB59_148:                             # %for.cond562
                                        #   Parent Loop BB59_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB59_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB59_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB59_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_152
.LBB59_151:                             # %if.else580
                                        #   in Loop: Header=BB59_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_152:                             # %if.end594
                                        #   in Loop: Header=BB59_148 Depth=2
	jmp	.LBB59_153
.LBB59_153:                             # %for.inc595
                                        #   in Loop: Header=BB59_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_148
.LBB59_154:                             # %for.end597
                                        #   in Loop: Header=BB59_146 Depth=1
	jmp	.LBB59_155
.LBB59_155:                             # %for.inc598
                                        #   in Loop: Header=BB59_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_146
.LBB59_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB59_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB59_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB59_157 Depth=1
	movl	$0, -4(%rbp)
.LBB59_159:                             # %for.cond604
                                        #   Parent Loop BB59_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB59_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB59_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB59_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB59_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB59_163
.LBB59_162:                             # %if.else622
                                        #   in Loop: Header=BB59_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB59_163:                             # %if.end636
                                        #   in Loop: Header=BB59_159 Depth=2
	jmp	.LBB59_164
.LBB59_164:                             # %for.inc637
                                        #   in Loop: Header=BB59_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_159
.LBB59_165:                             # %for.end639
                                        #   in Loop: Header=BB59_157 Depth=1
	jmp	.LBB59_166
.LBB59_166:                             # %for.inc640
                                        #   in Loop: Header=BB59_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_157
.LBB59_167:                             # %for.end642
	cmpl	$52705540, -28(%rbp)    # imm = 0x3243904
	jne	.LBB59_169
.LBB59_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_168
.Lfunc_end59:
	.size	init_contexts.52, .Lfunc_end59-init_contexts.52
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.53        # -- Begin function init_contexts.53
	.p2align	4, 0x90
	.type	init_contexts.53,@function
init_contexts.53:                       # @init_contexts.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$17744844, -28(%rbp)    # imm = 0x10EC3CC
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB60_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_3:                               # %for.cond2
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB60_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_7
.LBB60_6:                               # %if.else
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_7:                               # %if.end
                                        #   in Loop: Header=BB60_3 Depth=2
	jmp	.LBB60_8
.LBB60_8:                               # %for.inc
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_3
.LBB60_9:                               # %for.end
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_10
.LBB60_10:                              # %for.inc28
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_1
.LBB60_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB60_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB60_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB60_12 Depth=1
	movl	$0, -4(%rbp)
.LBB60_14:                              # %for.cond34
                                        #   Parent Loop BB60_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB60_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_18
.LBB60_17:                              # %if.else52
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_18:                              # %if.end66
                                        #   in Loop: Header=BB60_14 Depth=2
	jmp	.LBB60_19
.LBB60_19:                              # %for.inc67
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_14
.LBB60_20:                              # %for.end69
                                        #   in Loop: Header=BB60_12 Depth=1
	jmp	.LBB60_21
.LBB60_21:                              # %for.inc70
                                        #   in Loop: Header=BB60_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_12
.LBB60_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB60_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB60_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	$0, -4(%rbp)
.LBB60_25:                              # %for.cond76
                                        #   Parent Loop BB60_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB60_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB60_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB60_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_29
.LBB60_28:                              # %if.else94
                                        #   in Loop: Header=BB60_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_29:                              # %if.end108
                                        #   in Loop: Header=BB60_25 Depth=2
	jmp	.LBB60_30
.LBB60_30:                              # %for.inc109
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_25
.LBB60_31:                              # %for.end111
                                        #   in Loop: Header=BB60_23 Depth=1
	jmp	.LBB60_32
.LBB60_32:                              # %for.inc112
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_23
.LBB60_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB60_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB60_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	$0, -4(%rbp)
.LBB60_36:                              # %for.cond118
                                        #   Parent Loop BB60_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB60_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB60_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB60_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_40
.LBB60_39:                              # %if.else136
                                        #   in Loop: Header=BB60_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_40:                              # %if.end150
                                        #   in Loop: Header=BB60_36 Depth=2
	jmp	.LBB60_41
.LBB60_41:                              # %for.inc151
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_36
.LBB60_42:                              # %for.end153
                                        #   in Loop: Header=BB60_34 Depth=1
	jmp	.LBB60_43
.LBB60_43:                              # %for.inc154
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_34
.LBB60_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB60_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB60_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB60_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB60_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_49
.LBB60_48:                              # %if.else172
                                        #   in Loop: Header=BB60_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_49:                              # %if.end183
                                        #   in Loop: Header=BB60_45 Depth=1
	jmp	.LBB60_50
.LBB60_50:                              # %for.inc184
                                        #   in Loop: Header=BB60_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_45
.LBB60_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB60_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB60_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB60_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB60_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_56
.LBB60_55:                              # %if.else202
                                        #   in Loop: Header=BB60_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_56:                              # %if.end213
                                        #   in Loop: Header=BB60_52 Depth=1
	jmp	.LBB60_57
.LBB60_57:                              # %for.inc214
                                        #   in Loop: Header=BB60_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_52
.LBB60_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB60_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB60_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB60_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB60_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_63
.LBB60_62:                              # %if.else232
                                        #   in Loop: Header=BB60_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_63:                              # %if.end243
                                        #   in Loop: Header=BB60_59 Depth=1
	jmp	.LBB60_64
.LBB60_64:                              # %for.inc244
                                        #   in Loop: Header=BB60_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_59
.LBB60_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB60_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB60_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB60_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB60_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_70
.LBB60_69:                              # %if.else262
                                        #   in Loop: Header=BB60_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_70:                              # %if.end273
                                        #   in Loop: Header=BB60_66 Depth=1
	jmp	.LBB60_71
.LBB60_71:                              # %for.inc274
                                        #   in Loop: Header=BB60_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_66
.LBB60_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB60_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB60_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB60_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB60_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_77
.LBB60_76:                              # %if.else292
                                        #   in Loop: Header=BB60_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_77:                              # %if.end303
                                        #   in Loop: Header=BB60_73 Depth=1
	jmp	.LBB60_78
.LBB60_78:                              # %for.inc304
                                        #   in Loop: Header=BB60_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_73
.LBB60_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB60_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB60_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB60_80 Depth=1
	movl	$0, -4(%rbp)
.LBB60_82:                              # %for.cond310
                                        #   Parent Loop BB60_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB60_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB60_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_86
.LBB60_85:                              # %if.else328
                                        #   in Loop: Header=BB60_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_86:                              # %if.end342
                                        #   in Loop: Header=BB60_82 Depth=2
	jmp	.LBB60_87
.LBB60_87:                              # %for.inc343
                                        #   in Loop: Header=BB60_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_82
.LBB60_88:                              # %for.end345
                                        #   in Loop: Header=BB60_80 Depth=1
	jmp	.LBB60_89
.LBB60_89:                              # %for.inc346
                                        #   in Loop: Header=BB60_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_80
.LBB60_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB60_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB60_91 Depth=1
	movl	$0, -4(%rbp)
.LBB60_93:                              # %for.cond352
                                        #   Parent Loop BB60_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB60_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB60_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_97
.LBB60_96:                              # %if.else370
                                        #   in Loop: Header=BB60_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_97:                              # %if.end384
                                        #   in Loop: Header=BB60_93 Depth=2
	jmp	.LBB60_98
.LBB60_98:                              # %for.inc385
                                        #   in Loop: Header=BB60_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_93
.LBB60_99:                              # %for.end387
                                        #   in Loop: Header=BB60_91 Depth=1
	jmp	.LBB60_100
.LBB60_100:                             # %for.inc388
                                        #   in Loop: Header=BB60_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_91
.LBB60_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB60_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB60_102 Depth=1
	movl	$0, -4(%rbp)
.LBB60_104:                             # %for.cond394
                                        #   Parent Loop BB60_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB60_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB60_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB60_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_108
.LBB60_107:                             # %if.else412
                                        #   in Loop: Header=BB60_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_108:                             # %if.end426
                                        #   in Loop: Header=BB60_104 Depth=2
	jmp	.LBB60_109
.LBB60_109:                             # %for.inc427
                                        #   in Loop: Header=BB60_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_104
.LBB60_110:                             # %for.end429
                                        #   in Loop: Header=BB60_102 Depth=1
	jmp	.LBB60_111
.LBB60_111:                             # %for.inc430
                                        #   in Loop: Header=BB60_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_102
.LBB60_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB60_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB60_113 Depth=1
	movl	$0, -4(%rbp)
.LBB60_115:                             # %for.cond436
                                        #   Parent Loop BB60_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB60_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB60_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB60_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_119
.LBB60_118:                             # %if.else454
                                        #   in Loop: Header=BB60_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_119:                             # %if.end468
                                        #   in Loop: Header=BB60_115 Depth=2
	jmp	.LBB60_120
.LBB60_120:                             # %for.inc469
                                        #   in Loop: Header=BB60_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_115
.LBB60_121:                             # %for.end471
                                        #   in Loop: Header=BB60_113 Depth=1
	jmp	.LBB60_122
.LBB60_122:                             # %for.inc472
                                        #   in Loop: Header=BB60_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_113
.LBB60_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB60_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB60_124 Depth=1
	movl	$0, -4(%rbp)
.LBB60_126:                             # %for.cond478
                                        #   Parent Loop BB60_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB60_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB60_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB60_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_130
.LBB60_129:                             # %if.else496
                                        #   in Loop: Header=BB60_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_130:                             # %if.end510
                                        #   in Loop: Header=BB60_126 Depth=2
	jmp	.LBB60_131
.LBB60_131:                             # %for.inc511
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_126
.LBB60_132:                             # %for.end513
                                        #   in Loop: Header=BB60_124 Depth=1
	jmp	.LBB60_133
.LBB60_133:                             # %for.inc514
                                        #   in Loop: Header=BB60_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_124
.LBB60_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB60_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	$0, -4(%rbp)
.LBB60_137:                             # %for.cond520
                                        #   Parent Loop BB60_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB60_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB60_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB60_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_141
.LBB60_140:                             # %if.else538
                                        #   in Loop: Header=BB60_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_141:                             # %if.end552
                                        #   in Loop: Header=BB60_137 Depth=2
	jmp	.LBB60_142
.LBB60_142:                             # %for.inc553
                                        #   in Loop: Header=BB60_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_137
.LBB60_143:                             # %for.end555
                                        #   in Loop: Header=BB60_135 Depth=1
	jmp	.LBB60_144
.LBB60_144:                             # %for.inc556
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_135
.LBB60_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB60_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB60_146 Depth=1
	movl	$0, -4(%rbp)
.LBB60_148:                             # %for.cond562
                                        #   Parent Loop BB60_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB60_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB60_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB60_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_152
.LBB60_151:                             # %if.else580
                                        #   in Loop: Header=BB60_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_152:                             # %if.end594
                                        #   in Loop: Header=BB60_148 Depth=2
	jmp	.LBB60_153
.LBB60_153:                             # %for.inc595
                                        #   in Loop: Header=BB60_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_148
.LBB60_154:                             # %for.end597
                                        #   in Loop: Header=BB60_146 Depth=1
	jmp	.LBB60_155
.LBB60_155:                             # %for.inc598
                                        #   in Loop: Header=BB60_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_146
.LBB60_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB60_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB60_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB60_157 Depth=1
	movl	$0, -4(%rbp)
.LBB60_159:                             # %for.cond604
                                        #   Parent Loop BB60_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB60_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB60_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB60_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB60_163
.LBB60_162:                             # %if.else622
                                        #   in Loop: Header=BB60_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB60_163:                             # %if.end636
                                        #   in Loop: Header=BB60_159 Depth=2
	jmp	.LBB60_164
.LBB60_164:                             # %for.inc637
                                        #   in Loop: Header=BB60_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_159
.LBB60_165:                             # %for.end639
                                        #   in Loop: Header=BB60_157 Depth=1
	jmp	.LBB60_166
.LBB60_166:                             # %for.inc640
                                        #   in Loop: Header=BB60_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_157
.LBB60_167:                             # %for.end642
	cmpl	$17744844, -28(%rbp)    # imm = 0x10EC3CC
	jne	.LBB60_169
.LBB60_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_168
.Lfunc_end60:
	.size	init_contexts.53, .Lfunc_end60-init_contexts.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.54
.LCPI61_0:
	.quad	4607182418800017408     # double 1
.LCPI61_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI61_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI61_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.54
	.p2align	4, 0x90
	.type	XRate.54,@function
XRate.54:                               # @XRate.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1151629371, -36(%rbp)  # imm = 0x44A4783B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB61_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB61_3
.LBB61_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB61_3:                               # %cond.end
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI61_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI61_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB61_6
.LBB61_5:                               # %cond.false6
	vmovsd	.LCPI61_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI61_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI61_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB61_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB61_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB61_9
.LBB61_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB61_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB61_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB61_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB61_13
.LBB61_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB61_13:                              # %cond.end26
	jmp	.LBB61_15
.LBB61_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB61_15
.LBB61_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB61_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB61_18
.LBB61_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB61_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1151629371, -36(%rbp)  # imm = 0x44A4783B
	jne	.LBB61_20
.LBB61_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB61_19
.Lfunc_end61:
	.size	XRate.54, .Lfunc_end61-XRate.54
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.55
.LCPI62_0:
	.quad	4611686018427387904     # double 2
.LCPI62_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.55
	.p2align	4, 0x90
	.type	create_context_memory.55,@function
create_context_memory.55:               # @create_context_memory.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1470091881, -20(%rbp)  # imm = 0x579FD269
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB62_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB62_3
.LBB62_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB62_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB62_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB62_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB62_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB62_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB62_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB62_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB62_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB62_11:                              # %if.end10
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB62_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB62_13:                              # %if.end16
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	$0, -8(%rbp)
.LBB62_14:                              # %for.cond17
                                        #   Parent Loop BB62_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB62_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB62_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB62_17:                              # %if.end28
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB62_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB62_19:                              # %if.end39
                                        #   in Loop: Header=BB62_14 Depth=2
	jmp	.LBB62_20
.LBB62_20:                              # %for.inc
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_14
.LBB62_21:                              # %for.end
                                        #   in Loop: Header=BB62_8 Depth=1
	jmp	.LBB62_22
.LBB62_22:                              # %for.inc40
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_8
.LBB62_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB62_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_26 Depth 2
                                        #       Child Loop BB62_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB62_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB62_24 Depth=1
	movl	$0, -8(%rbp)
.LBB62_26:                              # %for.cond47
                                        #   Parent Loop BB62_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB62_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB62_26 Depth=2
	movl	$0, -12(%rbp)
.LBB62_28:                              # %for.cond51
                                        #   Parent Loop BB62_24 Depth=1
                                        #     Parent Loop BB62_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB62_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB62_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB62_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_28
.LBB62_31:                              # %for.end63
                                        #   in Loop: Header=BB62_26 Depth=2
	jmp	.LBB62_32
.LBB62_32:                              # %for.inc64
                                        #   in Loop: Header=BB62_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_26
.LBB62_33:                              # %for.end66
                                        #   in Loop: Header=BB62_24 Depth=1
	jmp	.LBB62_34
.LBB62_34:                              # %for.inc67
                                        #   in Loop: Header=BB62_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_24
.LBB62_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB62_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB62_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB62_36 Depth=1
	vmovsd	.LCPI62_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB62_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_36
.LBB62_39:                              # %for.end98
	cmpl	$1470091881, -20(%rbp)  # imm = 0x579FD269
	jne	.LBB62_41
.LBB62_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_40
.Lfunc_end62:
	.size	create_context_memory.55, .Lfunc_end62-create_context_memory.55
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.56        # -- Begin function init_contexts.56
	.p2align	4, 0x90
	.type	init_contexts.56,@function
init_contexts.56:                       # @init_contexts.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$617433681, -28(%rbp)   # imm = 0x24CD4A51
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB63_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_3:                               # %for.cond2
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB63_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_7
.LBB63_6:                               # %if.else
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_7:                               # %if.end
                                        #   in Loop: Header=BB63_3 Depth=2
	jmp	.LBB63_8
.LBB63_8:                               # %for.inc
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_3
.LBB63_9:                               # %for.end
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_10
.LBB63_10:                              # %for.inc28
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_1
.LBB63_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB63_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB63_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB63_12 Depth=1
	movl	$0, -4(%rbp)
.LBB63_14:                              # %for.cond34
                                        #   Parent Loop BB63_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB63_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_18
.LBB63_17:                              # %if.else52
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_18:                              # %if.end66
                                        #   in Loop: Header=BB63_14 Depth=2
	jmp	.LBB63_19
.LBB63_19:                              # %for.inc67
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_14
.LBB63_20:                              # %for.end69
                                        #   in Loop: Header=BB63_12 Depth=1
	jmp	.LBB63_21
.LBB63_21:                              # %for.inc70
                                        #   in Loop: Header=BB63_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_12
.LBB63_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB63_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB63_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB63_23 Depth=1
	movl	$0, -4(%rbp)
.LBB63_25:                              # %for.cond76
                                        #   Parent Loop BB63_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB63_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB63_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB63_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_29
.LBB63_28:                              # %if.else94
                                        #   in Loop: Header=BB63_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_29:                              # %if.end108
                                        #   in Loop: Header=BB63_25 Depth=2
	jmp	.LBB63_30
.LBB63_30:                              # %for.inc109
                                        #   in Loop: Header=BB63_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_25
.LBB63_31:                              # %for.end111
                                        #   in Loop: Header=BB63_23 Depth=1
	jmp	.LBB63_32
.LBB63_32:                              # %for.inc112
                                        #   in Loop: Header=BB63_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_23
.LBB63_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB63_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB63_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB63_34 Depth=1
	movl	$0, -4(%rbp)
.LBB63_36:                              # %for.cond118
                                        #   Parent Loop BB63_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB63_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB63_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB63_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_40
.LBB63_39:                              # %if.else136
                                        #   in Loop: Header=BB63_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_40:                              # %if.end150
                                        #   in Loop: Header=BB63_36 Depth=2
	jmp	.LBB63_41
.LBB63_41:                              # %for.inc151
                                        #   in Loop: Header=BB63_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_36
.LBB63_42:                              # %for.end153
                                        #   in Loop: Header=BB63_34 Depth=1
	jmp	.LBB63_43
.LBB63_43:                              # %for.inc154
                                        #   in Loop: Header=BB63_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_34
.LBB63_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB63_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB63_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB63_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB63_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_49
.LBB63_48:                              # %if.else172
                                        #   in Loop: Header=BB63_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_49:                              # %if.end183
                                        #   in Loop: Header=BB63_45 Depth=1
	jmp	.LBB63_50
.LBB63_50:                              # %for.inc184
                                        #   in Loop: Header=BB63_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_45
.LBB63_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB63_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB63_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB63_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB63_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_56
.LBB63_55:                              # %if.else202
                                        #   in Loop: Header=BB63_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_56:                              # %if.end213
                                        #   in Loop: Header=BB63_52 Depth=1
	jmp	.LBB63_57
.LBB63_57:                              # %for.inc214
                                        #   in Loop: Header=BB63_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_52
.LBB63_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB63_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB63_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB63_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB63_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_63
.LBB63_62:                              # %if.else232
                                        #   in Loop: Header=BB63_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_63:                              # %if.end243
                                        #   in Loop: Header=BB63_59 Depth=1
	jmp	.LBB63_64
.LBB63_64:                              # %for.inc244
                                        #   in Loop: Header=BB63_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_59
.LBB63_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB63_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB63_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB63_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB63_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_70
.LBB63_69:                              # %if.else262
                                        #   in Loop: Header=BB63_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_70:                              # %if.end273
                                        #   in Loop: Header=BB63_66 Depth=1
	jmp	.LBB63_71
.LBB63_71:                              # %for.inc274
                                        #   in Loop: Header=BB63_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_66
.LBB63_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB63_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB63_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB63_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB63_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_77
.LBB63_76:                              # %if.else292
                                        #   in Loop: Header=BB63_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_77:                              # %if.end303
                                        #   in Loop: Header=BB63_73 Depth=1
	jmp	.LBB63_78
.LBB63_78:                              # %for.inc304
                                        #   in Loop: Header=BB63_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_73
.LBB63_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB63_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB63_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB63_80 Depth=1
	movl	$0, -4(%rbp)
.LBB63_82:                              # %for.cond310
                                        #   Parent Loop BB63_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB63_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB63_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_86
.LBB63_85:                              # %if.else328
                                        #   in Loop: Header=BB63_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_86:                              # %if.end342
                                        #   in Loop: Header=BB63_82 Depth=2
	jmp	.LBB63_87
.LBB63_87:                              # %for.inc343
                                        #   in Loop: Header=BB63_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_82
.LBB63_88:                              # %for.end345
                                        #   in Loop: Header=BB63_80 Depth=1
	jmp	.LBB63_89
.LBB63_89:                              # %for.inc346
                                        #   in Loop: Header=BB63_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_80
.LBB63_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB63_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB63_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB63_91 Depth=1
	movl	$0, -4(%rbp)
.LBB63_93:                              # %for.cond352
                                        #   Parent Loop BB63_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB63_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB63_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_97
.LBB63_96:                              # %if.else370
                                        #   in Loop: Header=BB63_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_97:                              # %if.end384
                                        #   in Loop: Header=BB63_93 Depth=2
	jmp	.LBB63_98
.LBB63_98:                              # %for.inc385
                                        #   in Loop: Header=BB63_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_93
.LBB63_99:                              # %for.end387
                                        #   in Loop: Header=BB63_91 Depth=1
	jmp	.LBB63_100
.LBB63_100:                             # %for.inc388
                                        #   in Loop: Header=BB63_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_91
.LBB63_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB63_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB63_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB63_102 Depth=1
	movl	$0, -4(%rbp)
.LBB63_104:                             # %for.cond394
                                        #   Parent Loop BB63_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB63_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB63_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB63_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_108
.LBB63_107:                             # %if.else412
                                        #   in Loop: Header=BB63_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_108:                             # %if.end426
                                        #   in Loop: Header=BB63_104 Depth=2
	jmp	.LBB63_109
.LBB63_109:                             # %for.inc427
                                        #   in Loop: Header=BB63_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_104
.LBB63_110:                             # %for.end429
                                        #   in Loop: Header=BB63_102 Depth=1
	jmp	.LBB63_111
.LBB63_111:                             # %for.inc430
                                        #   in Loop: Header=BB63_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_102
.LBB63_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB63_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB63_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB63_113 Depth=1
	movl	$0, -4(%rbp)
.LBB63_115:                             # %for.cond436
                                        #   Parent Loop BB63_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB63_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB63_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB63_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_119
.LBB63_118:                             # %if.else454
                                        #   in Loop: Header=BB63_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_119:                             # %if.end468
                                        #   in Loop: Header=BB63_115 Depth=2
	jmp	.LBB63_120
.LBB63_120:                             # %for.inc469
                                        #   in Loop: Header=BB63_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_115
.LBB63_121:                             # %for.end471
                                        #   in Loop: Header=BB63_113 Depth=1
	jmp	.LBB63_122
.LBB63_122:                             # %for.inc472
                                        #   in Loop: Header=BB63_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_113
.LBB63_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB63_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB63_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB63_124 Depth=1
	movl	$0, -4(%rbp)
.LBB63_126:                             # %for.cond478
                                        #   Parent Loop BB63_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB63_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB63_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB63_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_130
.LBB63_129:                             # %if.else496
                                        #   in Loop: Header=BB63_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_130:                             # %if.end510
                                        #   in Loop: Header=BB63_126 Depth=2
	jmp	.LBB63_131
.LBB63_131:                             # %for.inc511
                                        #   in Loop: Header=BB63_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_126
.LBB63_132:                             # %for.end513
                                        #   in Loop: Header=BB63_124 Depth=1
	jmp	.LBB63_133
.LBB63_133:                             # %for.inc514
                                        #   in Loop: Header=BB63_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_124
.LBB63_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB63_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB63_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	$0, -4(%rbp)
.LBB63_137:                             # %for.cond520
                                        #   Parent Loop BB63_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB63_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB63_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB63_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_141
.LBB63_140:                             # %if.else538
                                        #   in Loop: Header=BB63_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_141:                             # %if.end552
                                        #   in Loop: Header=BB63_137 Depth=2
	jmp	.LBB63_142
.LBB63_142:                             # %for.inc553
                                        #   in Loop: Header=BB63_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_137
.LBB63_143:                             # %for.end555
                                        #   in Loop: Header=BB63_135 Depth=1
	jmp	.LBB63_144
.LBB63_144:                             # %for.inc556
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_135
.LBB63_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB63_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB63_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB63_146 Depth=1
	movl	$0, -4(%rbp)
.LBB63_148:                             # %for.cond562
                                        #   Parent Loop BB63_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB63_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB63_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB63_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_152
.LBB63_151:                             # %if.else580
                                        #   in Loop: Header=BB63_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_152:                             # %if.end594
                                        #   in Loop: Header=BB63_148 Depth=2
	jmp	.LBB63_153
.LBB63_153:                             # %for.inc595
                                        #   in Loop: Header=BB63_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_148
.LBB63_154:                             # %for.end597
                                        #   in Loop: Header=BB63_146 Depth=1
	jmp	.LBB63_155
.LBB63_155:                             # %for.inc598
                                        #   in Loop: Header=BB63_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_146
.LBB63_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB63_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB63_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB63_157 Depth=1
	movl	$0, -4(%rbp)
.LBB63_159:                             # %for.cond604
                                        #   Parent Loop BB63_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB63_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB63_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB63_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB63_163
.LBB63_162:                             # %if.else622
                                        #   in Loop: Header=BB63_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB63_163:                             # %if.end636
                                        #   in Loop: Header=BB63_159 Depth=2
	jmp	.LBB63_164
.LBB63_164:                             # %for.inc637
                                        #   in Loop: Header=BB63_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_159
.LBB63_165:                             # %for.end639
                                        #   in Loop: Header=BB63_157 Depth=1
	jmp	.LBB63_166
.LBB63_166:                             # %for.inc640
                                        #   in Loop: Header=BB63_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_157
.LBB63_167:                             # %for.end642
	cmpl	$617433681, -28(%rbp)   # imm = 0x24CD4A51
	jne	.LBB63_169
.LBB63_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_168
.Lfunc_end63:
	.size	init_contexts.56, .Lfunc_end63-init_contexts.56
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.57        # -- Begin function init_contexts.57
	.p2align	4, 0x90
	.type	init_contexts.57,@function
init_contexts.57:                       # @init_contexts.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$675782682, -28(%rbp)   # imm = 0x2847A01A
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB64_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -4(%rbp)
.LBB64_3:                               # %for.cond2
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB64_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB64_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB64_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_7
.LBB64_6:                               # %if.else
                                        #   in Loop: Header=BB64_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_7:                               # %if.end
                                        #   in Loop: Header=BB64_3 Depth=2
	jmp	.LBB64_8
.LBB64_8:                               # %for.inc
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_3
.LBB64_9:                               # %for.end
                                        #   in Loop: Header=BB64_1 Depth=1
	jmp	.LBB64_10
.LBB64_10:                              # %for.inc28
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_1
.LBB64_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB64_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB64_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB64_12 Depth=1
	movl	$0, -4(%rbp)
.LBB64_14:                              # %for.cond34
                                        #   Parent Loop BB64_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB64_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB64_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB64_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_18
.LBB64_17:                              # %if.else52
                                        #   in Loop: Header=BB64_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_18:                              # %if.end66
                                        #   in Loop: Header=BB64_14 Depth=2
	jmp	.LBB64_19
.LBB64_19:                              # %for.inc67
                                        #   in Loop: Header=BB64_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_14
.LBB64_20:                              # %for.end69
                                        #   in Loop: Header=BB64_12 Depth=1
	jmp	.LBB64_21
.LBB64_21:                              # %for.inc70
                                        #   in Loop: Header=BB64_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_12
.LBB64_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB64_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB64_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	$0, -4(%rbp)
.LBB64_25:                              # %for.cond76
                                        #   Parent Loop BB64_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB64_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB64_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB64_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_29
.LBB64_28:                              # %if.else94
                                        #   in Loop: Header=BB64_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_29:                              # %if.end108
                                        #   in Loop: Header=BB64_25 Depth=2
	jmp	.LBB64_30
.LBB64_30:                              # %for.inc109
                                        #   in Loop: Header=BB64_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_25
.LBB64_31:                              # %for.end111
                                        #   in Loop: Header=BB64_23 Depth=1
	jmp	.LBB64_32
.LBB64_32:                              # %for.inc112
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_23
.LBB64_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB64_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB64_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB64_34 Depth=1
	movl	$0, -4(%rbp)
.LBB64_36:                              # %for.cond118
                                        #   Parent Loop BB64_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB64_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB64_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB64_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_40
.LBB64_39:                              # %if.else136
                                        #   in Loop: Header=BB64_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_40:                              # %if.end150
                                        #   in Loop: Header=BB64_36 Depth=2
	jmp	.LBB64_41
.LBB64_41:                              # %for.inc151
                                        #   in Loop: Header=BB64_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_36
.LBB64_42:                              # %for.end153
                                        #   in Loop: Header=BB64_34 Depth=1
	jmp	.LBB64_43
.LBB64_43:                              # %for.inc154
                                        #   in Loop: Header=BB64_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_34
.LBB64_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB64_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB64_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB64_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB64_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_49
.LBB64_48:                              # %if.else172
                                        #   in Loop: Header=BB64_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_49:                              # %if.end183
                                        #   in Loop: Header=BB64_45 Depth=1
	jmp	.LBB64_50
.LBB64_50:                              # %for.inc184
                                        #   in Loop: Header=BB64_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_45
.LBB64_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB64_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB64_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB64_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB64_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_56
.LBB64_55:                              # %if.else202
                                        #   in Loop: Header=BB64_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_56:                              # %if.end213
                                        #   in Loop: Header=BB64_52 Depth=1
	jmp	.LBB64_57
.LBB64_57:                              # %for.inc214
                                        #   in Loop: Header=BB64_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_52
.LBB64_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB64_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB64_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB64_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB64_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_63
.LBB64_62:                              # %if.else232
                                        #   in Loop: Header=BB64_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_63:                              # %if.end243
                                        #   in Loop: Header=BB64_59 Depth=1
	jmp	.LBB64_64
.LBB64_64:                              # %for.inc244
                                        #   in Loop: Header=BB64_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_59
.LBB64_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB64_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB64_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB64_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB64_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_70
.LBB64_69:                              # %if.else262
                                        #   in Loop: Header=BB64_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_70:                              # %if.end273
                                        #   in Loop: Header=BB64_66 Depth=1
	jmp	.LBB64_71
.LBB64_71:                              # %for.inc274
                                        #   in Loop: Header=BB64_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_66
.LBB64_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB64_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB64_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB64_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB64_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_77
.LBB64_76:                              # %if.else292
                                        #   in Loop: Header=BB64_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_77:                              # %if.end303
                                        #   in Loop: Header=BB64_73 Depth=1
	jmp	.LBB64_78
.LBB64_78:                              # %for.inc304
                                        #   in Loop: Header=BB64_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_73
.LBB64_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB64_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB64_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB64_80 Depth=1
	movl	$0, -4(%rbp)
.LBB64_82:                              # %for.cond310
                                        #   Parent Loop BB64_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB64_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB64_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_86
.LBB64_85:                              # %if.else328
                                        #   in Loop: Header=BB64_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_86:                              # %if.end342
                                        #   in Loop: Header=BB64_82 Depth=2
	jmp	.LBB64_87
.LBB64_87:                              # %for.inc343
                                        #   in Loop: Header=BB64_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_82
.LBB64_88:                              # %for.end345
                                        #   in Loop: Header=BB64_80 Depth=1
	jmp	.LBB64_89
.LBB64_89:                              # %for.inc346
                                        #   in Loop: Header=BB64_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_80
.LBB64_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB64_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB64_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB64_91 Depth=1
	movl	$0, -4(%rbp)
.LBB64_93:                              # %for.cond352
                                        #   Parent Loop BB64_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB64_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB64_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_97
.LBB64_96:                              # %if.else370
                                        #   in Loop: Header=BB64_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_97:                              # %if.end384
                                        #   in Loop: Header=BB64_93 Depth=2
	jmp	.LBB64_98
.LBB64_98:                              # %for.inc385
                                        #   in Loop: Header=BB64_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_93
.LBB64_99:                              # %for.end387
                                        #   in Loop: Header=BB64_91 Depth=1
	jmp	.LBB64_100
.LBB64_100:                             # %for.inc388
                                        #   in Loop: Header=BB64_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_91
.LBB64_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB64_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB64_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB64_102 Depth=1
	movl	$0, -4(%rbp)
.LBB64_104:                             # %for.cond394
                                        #   Parent Loop BB64_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB64_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB64_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB64_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_108
.LBB64_107:                             # %if.else412
                                        #   in Loop: Header=BB64_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_108:                             # %if.end426
                                        #   in Loop: Header=BB64_104 Depth=2
	jmp	.LBB64_109
.LBB64_109:                             # %for.inc427
                                        #   in Loop: Header=BB64_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_104
.LBB64_110:                             # %for.end429
                                        #   in Loop: Header=BB64_102 Depth=1
	jmp	.LBB64_111
.LBB64_111:                             # %for.inc430
                                        #   in Loop: Header=BB64_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_102
.LBB64_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB64_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB64_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB64_113 Depth=1
	movl	$0, -4(%rbp)
.LBB64_115:                             # %for.cond436
                                        #   Parent Loop BB64_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB64_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB64_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB64_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_119
.LBB64_118:                             # %if.else454
                                        #   in Loop: Header=BB64_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_119:                             # %if.end468
                                        #   in Loop: Header=BB64_115 Depth=2
	jmp	.LBB64_120
.LBB64_120:                             # %for.inc469
                                        #   in Loop: Header=BB64_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_115
.LBB64_121:                             # %for.end471
                                        #   in Loop: Header=BB64_113 Depth=1
	jmp	.LBB64_122
.LBB64_122:                             # %for.inc472
                                        #   in Loop: Header=BB64_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_113
.LBB64_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB64_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB64_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB64_124 Depth=1
	movl	$0, -4(%rbp)
.LBB64_126:                             # %for.cond478
                                        #   Parent Loop BB64_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB64_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB64_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB64_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_130
.LBB64_129:                             # %if.else496
                                        #   in Loop: Header=BB64_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_130:                             # %if.end510
                                        #   in Loop: Header=BB64_126 Depth=2
	jmp	.LBB64_131
.LBB64_131:                             # %for.inc511
                                        #   in Loop: Header=BB64_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_126
.LBB64_132:                             # %for.end513
                                        #   in Loop: Header=BB64_124 Depth=1
	jmp	.LBB64_133
.LBB64_133:                             # %for.inc514
                                        #   in Loop: Header=BB64_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_124
.LBB64_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB64_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB64_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB64_135 Depth=1
	movl	$0, -4(%rbp)
.LBB64_137:                             # %for.cond520
                                        #   Parent Loop BB64_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB64_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB64_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB64_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_141
.LBB64_140:                             # %if.else538
                                        #   in Loop: Header=BB64_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_141:                             # %if.end552
                                        #   in Loop: Header=BB64_137 Depth=2
	jmp	.LBB64_142
.LBB64_142:                             # %for.inc553
                                        #   in Loop: Header=BB64_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_137
.LBB64_143:                             # %for.end555
                                        #   in Loop: Header=BB64_135 Depth=1
	jmp	.LBB64_144
.LBB64_144:                             # %for.inc556
                                        #   in Loop: Header=BB64_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_135
.LBB64_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB64_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB64_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB64_146 Depth=1
	movl	$0, -4(%rbp)
.LBB64_148:                             # %for.cond562
                                        #   Parent Loop BB64_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB64_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB64_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB64_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_152
.LBB64_151:                             # %if.else580
                                        #   in Loop: Header=BB64_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_152:                             # %if.end594
                                        #   in Loop: Header=BB64_148 Depth=2
	jmp	.LBB64_153
.LBB64_153:                             # %for.inc595
                                        #   in Loop: Header=BB64_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_148
.LBB64_154:                             # %for.end597
                                        #   in Loop: Header=BB64_146 Depth=1
	jmp	.LBB64_155
.LBB64_155:                             # %for.inc598
                                        #   in Loop: Header=BB64_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_146
.LBB64_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB64_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB64_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB64_157 Depth=1
	movl	$0, -4(%rbp)
.LBB64_159:                             # %for.cond604
                                        #   Parent Loop BB64_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB64_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB64_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB64_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB64_163
.LBB64_162:                             # %if.else622
                                        #   in Loop: Header=BB64_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB64_163:                             # %if.end636
                                        #   in Loop: Header=BB64_159 Depth=2
	jmp	.LBB64_164
.LBB64_164:                             # %for.inc637
                                        #   in Loop: Header=BB64_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_159
.LBB64_165:                             # %for.end639
                                        #   in Loop: Header=BB64_157 Depth=1
	jmp	.LBB64_166
.LBB64_166:                             # %for.inc640
                                        #   in Loop: Header=BB64_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_157
.LBB64_167:                             # %for.end642
	cmpl	$675782682, -28(%rbp)   # imm = 0x2847A01A
	jne	.LBB64_169
.LBB64_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_168
.Lfunc_end64:
	.size	init_contexts.57, .Lfunc_end64-init_contexts.57
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.58
.LCPI65_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.58
	.p2align	4, 0x90
	.type	GetCtxModelNumber.58,@function
GetCtxModelNumber.58:                   # @GetCtxModelNumber.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI65_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1984553494, -48(%rbp)  # imm = 0x7649E216
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
                                        #       Child Loop BB65_5 Depth 3
                                        #     Child Loop BB65_14 Depth 2
                                        #       Child Loop BB65_16 Depth 3
                                        #     Child Loop BB65_25 Depth 2
                                        #       Child Loop BB65_27 Depth 3
                                        #     Child Loop BB65_36 Depth 2
                                        #       Child Loop BB65_38 Depth 3
                                        #     Child Loop BB65_47 Depth 2
                                        #     Child Loop BB65_54 Depth 2
                                        #     Child Loop BB65_61 Depth 2
                                        #     Child Loop BB65_68 Depth 2
                                        #     Child Loop BB65_75 Depth 2
                                        #     Child Loop BB65_82 Depth 2
                                        #       Child Loop BB65_84 Depth 3
                                        #     Child Loop BB65_93 Depth 2
                                        #       Child Loop BB65_95 Depth 3
                                        #     Child Loop BB65_104 Depth 2
                                        #       Child Loop BB65_106 Depth 3
                                        #     Child Loop BB65_115 Depth 2
                                        #       Child Loop BB65_117 Depth 3
                                        #     Child Loop BB65_126 Depth 2
                                        #       Child Loop BB65_128 Depth 3
                                        #     Child Loop BB65_137 Depth 2
                                        #       Child Loop BB65_139 Depth 3
                                        #     Child Loop BB65_148 Depth 2
                                        #       Child Loop BB65_150 Depth 3
                                        #     Child Loop BB65_159 Depth 2
                                        #       Child Loop BB65_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB65_3:                               # %for.cond2
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB65_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	$0, -4(%rbp)
.LBB65_5:                               # %for.cond5
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB65_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_9
.LBB65_8:                               # %if.else
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_9:                               # %if.end
                                        #   in Loop: Header=BB65_5 Depth=3
	jmp	.LBB65_10
.LBB65_10:                              # %for.inc
                                        #   in Loop: Header=BB65_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_5
.LBB65_11:                              # %for.end
                                        #   in Loop: Header=BB65_3 Depth=2
	jmp	.LBB65_12
.LBB65_12:                              # %for.inc33
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_3
.LBB65_13:                              # %for.end35
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_14:                              # %for.cond36
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	$0, -4(%rbp)
.LBB65_16:                              # %for.cond39
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB65_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_20
.LBB65_19:                              # %if.else58
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_20:                              # %if.end73
                                        #   in Loop: Header=BB65_16 Depth=3
	jmp	.LBB65_21
.LBB65_21:                              # %for.inc74
                                        #   in Loop: Header=BB65_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_16
.LBB65_22:                              # %for.end76
                                        #   in Loop: Header=BB65_14 Depth=2
	jmp	.LBB65_23
.LBB65_23:                              # %for.inc77
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_14
.LBB65_24:                              # %for.end79
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_25:                              # %for.cond80
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	$0, -4(%rbp)
.LBB65_27:                              # %for.cond83
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB65_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_31
.LBB65_30:                              # %if.else102
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_31:                              # %if.end117
                                        #   in Loop: Header=BB65_27 Depth=3
	jmp	.LBB65_32
.LBB65_32:                              # %for.inc118
                                        #   in Loop: Header=BB65_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_27
.LBB65_33:                              # %for.end120
                                        #   in Loop: Header=BB65_25 Depth=2
	jmp	.LBB65_34
.LBB65_34:                              # %for.inc121
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_25
.LBB65_35:                              # %for.end123
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_36:                              # %for.cond124
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	$0, -4(%rbp)
.LBB65_38:                              # %for.cond127
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB65_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_42
.LBB65_41:                              # %if.else146
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_42:                              # %if.end161
                                        #   in Loop: Header=BB65_38 Depth=3
	jmp	.LBB65_43
.LBB65_43:                              # %for.inc162
                                        #   in Loop: Header=BB65_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_38
.LBB65_44:                              # %for.end164
                                        #   in Loop: Header=BB65_36 Depth=2
	jmp	.LBB65_45
.LBB65_45:                              # %for.inc165
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_36
.LBB65_46:                              # %for.end167
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_47:                              # %for.cond168
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_51
.LBB65_50:                              # %if.else184
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_51:                              # %if.end196
                                        #   in Loop: Header=BB65_47 Depth=2
	jmp	.LBB65_52
.LBB65_52:                              # %for.inc197
                                        #   in Loop: Header=BB65_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_47
.LBB65_53:                              # %for.end199
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_54:                              # %for.cond200
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_58
.LBB65_57:                              # %if.else216
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_58:                              # %if.end228
                                        #   in Loop: Header=BB65_54 Depth=2
	jmp	.LBB65_59
.LBB65_59:                              # %for.inc229
                                        #   in Loop: Header=BB65_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_54
.LBB65_60:                              # %for.end231
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_61:                              # %for.cond232
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB65_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_65
.LBB65_64:                              # %if.else248
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_65:                              # %if.end260
                                        #   in Loop: Header=BB65_61 Depth=2
	jmp	.LBB65_66
.LBB65_66:                              # %for.inc261
                                        #   in Loop: Header=BB65_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_61
.LBB65_67:                              # %for.end263
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_68:                              # %for.cond264
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB65_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_72
.LBB65_71:                              # %if.else280
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_72:                              # %if.end292
                                        #   in Loop: Header=BB65_68 Depth=2
	jmp	.LBB65_73
.LBB65_73:                              # %for.inc293
                                        #   in Loop: Header=BB65_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_68
.LBB65_74:                              # %for.end295
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_75:                              # %for.cond296
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_79
.LBB65_78:                              # %if.else312
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_79:                              # %if.end324
                                        #   in Loop: Header=BB65_75 Depth=2
	jmp	.LBB65_80
.LBB65_80:                              # %for.inc325
                                        #   in Loop: Header=BB65_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_75
.LBB65_81:                              # %for.end327
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_82:                              # %for.cond328
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB65_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB65_82 Depth=2
	movl	$0, -4(%rbp)
.LBB65_84:                              # %for.cond331
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB65_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_88
.LBB65_87:                              # %if.else350
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_88:                              # %if.end365
                                        #   in Loop: Header=BB65_84 Depth=3
	jmp	.LBB65_89
.LBB65_89:                              # %for.inc366
                                        #   in Loop: Header=BB65_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_84
.LBB65_90:                              # %for.end368
                                        #   in Loop: Header=BB65_82 Depth=2
	jmp	.LBB65_91
.LBB65_91:                              # %for.inc369
                                        #   in Loop: Header=BB65_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_82
.LBB65_92:                              # %for.end371
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_93:                              # %for.cond372
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB65_93 Depth=2
	movl	$0, -4(%rbp)
.LBB65_95:                              # %for.cond375
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB65_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_99
.LBB65_98:                              # %if.else394
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_99:                              # %if.end409
                                        #   in Loop: Header=BB65_95 Depth=3
	jmp	.LBB65_100
.LBB65_100:                             # %for.inc410
                                        #   in Loop: Header=BB65_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_95
.LBB65_101:                             # %for.end412
                                        #   in Loop: Header=BB65_93 Depth=2
	jmp	.LBB65_102
.LBB65_102:                             # %for.inc413
                                        #   in Loop: Header=BB65_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_93
.LBB65_103:                             # %for.end415
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_104:                             # %for.cond416
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB65_104 Depth=2
	movl	$0, -4(%rbp)
.LBB65_106:                             # %for.cond419
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_110
.LBB65_109:                             # %if.else438
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_110:                             # %if.end453
                                        #   in Loop: Header=BB65_106 Depth=3
	jmp	.LBB65_111
.LBB65_111:                             # %for.inc454
                                        #   in Loop: Header=BB65_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_106
.LBB65_112:                             # %for.end456
                                        #   in Loop: Header=BB65_104 Depth=2
	jmp	.LBB65_113
.LBB65_113:                             # %for.inc457
                                        #   in Loop: Header=BB65_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_104
.LBB65_114:                             # %for.end459
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_115:                             # %for.cond460
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB65_115 Depth=2
	movl	$0, -4(%rbp)
.LBB65_117:                             # %for.cond463
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_121
.LBB65_120:                             # %if.else482
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_121:                             # %if.end497
                                        #   in Loop: Header=BB65_117 Depth=3
	jmp	.LBB65_122
.LBB65_122:                             # %for.inc498
                                        #   in Loop: Header=BB65_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_117
.LBB65_123:                             # %for.end500
                                        #   in Loop: Header=BB65_115 Depth=2
	jmp	.LBB65_124
.LBB65_124:                             # %for.inc501
                                        #   in Loop: Header=BB65_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_115
.LBB65_125:                             # %for.end503
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_126:                             # %for.cond504
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB65_126 Depth=2
	movl	$0, -4(%rbp)
.LBB65_128:                             # %for.cond507
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB65_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_132
.LBB65_131:                             # %if.else526
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_132:                             # %if.end541
                                        #   in Loop: Header=BB65_128 Depth=3
	jmp	.LBB65_133
.LBB65_133:                             # %for.inc542
                                        #   in Loop: Header=BB65_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_128
.LBB65_134:                             # %for.end544
                                        #   in Loop: Header=BB65_126 Depth=2
	jmp	.LBB65_135
.LBB65_135:                             # %for.inc545
                                        #   in Loop: Header=BB65_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_126
.LBB65_136:                             # %for.end547
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_137:                             # %for.cond548
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB65_137 Depth=2
	movl	$0, -4(%rbp)
.LBB65_139:                             # %for.cond551
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB65_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_143
.LBB65_142:                             # %if.else570
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_143:                             # %if.end585
                                        #   in Loop: Header=BB65_139 Depth=3
	jmp	.LBB65_144
.LBB65_144:                             # %for.inc586
                                        #   in Loop: Header=BB65_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_139
.LBB65_145:                             # %for.end588
                                        #   in Loop: Header=BB65_137 Depth=2
	jmp	.LBB65_146
.LBB65_146:                             # %for.inc589
                                        #   in Loop: Header=BB65_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_137
.LBB65_147:                             # %for.end591
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_148:                             # %for.cond592
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB65_148 Depth=2
	movl	$0, -4(%rbp)
.LBB65_150:                             # %for.cond595
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_154
.LBB65_153:                             # %if.else614
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_154:                             # %if.end629
                                        #   in Loop: Header=BB65_150 Depth=3
	jmp	.LBB65_155
.LBB65_155:                             # %for.inc630
                                        #   in Loop: Header=BB65_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_150
.LBB65_156:                             # %for.end632
                                        #   in Loop: Header=BB65_148 Depth=2
	jmp	.LBB65_157
.LBB65_157:                             # %for.inc633
                                        #   in Loop: Header=BB65_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_148
.LBB65_158:                             # %for.end635
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_159:                             # %for.cond636
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB65_159 Depth=2
	movl	$0, -4(%rbp)
.LBB65_161:                             # %for.cond639
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_165
.LBB65_164:                             # %if.else658
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_165:                             # %if.end673
                                        #   in Loop: Header=BB65_161 Depth=3
	jmp	.LBB65_166
.LBB65_166:                             # %for.inc674
                                        #   in Loop: Header=BB65_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_161
.LBB65_167:                             # %for.end676
                                        #   in Loop: Header=BB65_159 Depth=2
	jmp	.LBB65_168
.LBB65_168:                             # %for.inc677
                                        #   in Loop: Header=BB65_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_159
.LBB65_169:                             # %for.end679
                                        #   in Loop: Header=BB65_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB65_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB65_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB65_171:                             # %if.end682
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_172
.LBB65_172:                             # %for.inc683
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_1
.LBB65_173:                             # %for.end685
	cmpl	$1984553494, -48(%rbp)  # imm = 0x7649E216
	jne	.LBB65_175
.LBB65_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_174
.Lfunc_end65:
	.size	GetCtxModelNumber.58, .Lfunc_end65-GetCtxModelNumber.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.59
.LCPI66_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.59
	.p2align	4, 0x90
	.type	GetCtxModelNumber.59,@function
GetCtxModelNumber.59:                   # @GetCtxModelNumber.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI66_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1059114499, -44(%rbp)  # imm = 0x3F20CE03
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_3 Depth 2
                                        #       Child Loop BB66_5 Depth 3
                                        #     Child Loop BB66_14 Depth 2
                                        #       Child Loop BB66_16 Depth 3
                                        #     Child Loop BB66_25 Depth 2
                                        #       Child Loop BB66_27 Depth 3
                                        #     Child Loop BB66_36 Depth 2
                                        #       Child Loop BB66_38 Depth 3
                                        #     Child Loop BB66_47 Depth 2
                                        #     Child Loop BB66_54 Depth 2
                                        #     Child Loop BB66_61 Depth 2
                                        #     Child Loop BB66_68 Depth 2
                                        #     Child Loop BB66_75 Depth 2
                                        #     Child Loop BB66_82 Depth 2
                                        #       Child Loop BB66_84 Depth 3
                                        #     Child Loop BB66_93 Depth 2
                                        #       Child Loop BB66_95 Depth 3
                                        #     Child Loop BB66_104 Depth 2
                                        #       Child Loop BB66_106 Depth 3
                                        #     Child Loop BB66_115 Depth 2
                                        #       Child Loop BB66_117 Depth 3
                                        #     Child Loop BB66_126 Depth 2
                                        #       Child Loop BB66_128 Depth 3
                                        #     Child Loop BB66_137 Depth 2
                                        #       Child Loop BB66_139 Depth 3
                                        #     Child Loop BB66_148 Depth 2
                                        #       Child Loop BB66_150 Depth 3
                                        #     Child Loop BB66_159 Depth 2
                                        #       Child Loop BB66_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB66_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB66_3:                               # %for.cond2
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB66_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB66_3 Depth=2
	movl	$0, -4(%rbp)
.LBB66_5:                               # %for.cond5
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB66_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB66_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB66_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_9
.LBB66_8:                               # %if.else
                                        #   in Loop: Header=BB66_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_9:                               # %if.end
                                        #   in Loop: Header=BB66_5 Depth=3
	jmp	.LBB66_10
.LBB66_10:                              # %for.inc
                                        #   in Loop: Header=BB66_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_5
.LBB66_11:                              # %for.end
                                        #   in Loop: Header=BB66_3 Depth=2
	jmp	.LBB66_12
.LBB66_12:                              # %for.inc33
                                        #   in Loop: Header=BB66_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_3
.LBB66_13:                              # %for.end35
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_14:                              # %for.cond36
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB66_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB66_14 Depth=2
	movl	$0, -4(%rbp)
.LBB66_16:                              # %for.cond39
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB66_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB66_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB66_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_20
.LBB66_19:                              # %if.else58
                                        #   in Loop: Header=BB66_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_20:                              # %if.end73
                                        #   in Loop: Header=BB66_16 Depth=3
	jmp	.LBB66_21
.LBB66_21:                              # %for.inc74
                                        #   in Loop: Header=BB66_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_16
.LBB66_22:                              # %for.end76
                                        #   in Loop: Header=BB66_14 Depth=2
	jmp	.LBB66_23
.LBB66_23:                              # %for.inc77
                                        #   in Loop: Header=BB66_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_14
.LBB66_24:                              # %for.end79
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_25:                              # %for.cond80
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB66_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB66_25 Depth=2
	movl	$0, -4(%rbp)
.LBB66_27:                              # %for.cond83
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB66_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB66_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB66_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_31
.LBB66_30:                              # %if.else102
                                        #   in Loop: Header=BB66_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_31:                              # %if.end117
                                        #   in Loop: Header=BB66_27 Depth=3
	jmp	.LBB66_32
.LBB66_32:                              # %for.inc118
                                        #   in Loop: Header=BB66_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_27
.LBB66_33:                              # %for.end120
                                        #   in Loop: Header=BB66_25 Depth=2
	jmp	.LBB66_34
.LBB66_34:                              # %for.inc121
                                        #   in Loop: Header=BB66_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_25
.LBB66_35:                              # %for.end123
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_36:                              # %for.cond124
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB66_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB66_36 Depth=2
	movl	$0, -4(%rbp)
.LBB66_38:                              # %for.cond127
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB66_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB66_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB66_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_42
.LBB66_41:                              # %if.else146
                                        #   in Loop: Header=BB66_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_42:                              # %if.end161
                                        #   in Loop: Header=BB66_38 Depth=3
	jmp	.LBB66_43
.LBB66_43:                              # %for.inc162
                                        #   in Loop: Header=BB66_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_38
.LBB66_44:                              # %for.end164
                                        #   in Loop: Header=BB66_36 Depth=2
	jmp	.LBB66_45
.LBB66_45:                              # %for.inc165
                                        #   in Loop: Header=BB66_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_36
.LBB66_46:                              # %for.end167
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_47:                              # %for.cond168
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB66_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB66_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_51
.LBB66_50:                              # %if.else184
                                        #   in Loop: Header=BB66_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_51:                              # %if.end196
                                        #   in Loop: Header=BB66_47 Depth=2
	jmp	.LBB66_52
.LBB66_52:                              # %for.inc197
                                        #   in Loop: Header=BB66_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_47
.LBB66_53:                              # %for.end199
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_54:                              # %for.cond200
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB66_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB66_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_58
.LBB66_57:                              # %if.else216
                                        #   in Loop: Header=BB66_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_58:                              # %if.end228
                                        #   in Loop: Header=BB66_54 Depth=2
	jmp	.LBB66_59
.LBB66_59:                              # %for.inc229
                                        #   in Loop: Header=BB66_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_54
.LBB66_60:                              # %for.end231
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_61:                              # %for.cond232
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB66_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB66_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB66_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_65
.LBB66_64:                              # %if.else248
                                        #   in Loop: Header=BB66_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_65:                              # %if.end260
                                        #   in Loop: Header=BB66_61 Depth=2
	jmp	.LBB66_66
.LBB66_66:                              # %for.inc261
                                        #   in Loop: Header=BB66_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_61
.LBB66_67:                              # %for.end263
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_68:                              # %for.cond264
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB66_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB66_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB66_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_72
.LBB66_71:                              # %if.else280
                                        #   in Loop: Header=BB66_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_72:                              # %if.end292
                                        #   in Loop: Header=BB66_68 Depth=2
	jmp	.LBB66_73
.LBB66_73:                              # %for.inc293
                                        #   in Loop: Header=BB66_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_68
.LBB66_74:                              # %for.end295
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_75:                              # %for.cond296
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB66_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB66_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_79
.LBB66_78:                              # %if.else312
                                        #   in Loop: Header=BB66_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_79:                              # %if.end324
                                        #   in Loop: Header=BB66_75 Depth=2
	jmp	.LBB66_80
.LBB66_80:                              # %for.inc325
                                        #   in Loop: Header=BB66_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_75
.LBB66_81:                              # %for.end327
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_82:                              # %for.cond328
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB66_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB66_82 Depth=2
	movl	$0, -4(%rbp)
.LBB66_84:                              # %for.cond331
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB66_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB66_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB66_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_88
.LBB66_87:                              # %if.else350
                                        #   in Loop: Header=BB66_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_88:                              # %if.end365
                                        #   in Loop: Header=BB66_84 Depth=3
	jmp	.LBB66_89
.LBB66_89:                              # %for.inc366
                                        #   in Loop: Header=BB66_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_84
.LBB66_90:                              # %for.end368
                                        #   in Loop: Header=BB66_82 Depth=2
	jmp	.LBB66_91
.LBB66_91:                              # %for.inc369
                                        #   in Loop: Header=BB66_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_82
.LBB66_92:                              # %for.end371
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_93:                              # %for.cond372
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB66_93 Depth=2
	movl	$0, -4(%rbp)
.LBB66_95:                              # %for.cond375
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB66_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB66_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB66_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_99
.LBB66_98:                              # %if.else394
                                        #   in Loop: Header=BB66_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_99:                              # %if.end409
                                        #   in Loop: Header=BB66_95 Depth=3
	jmp	.LBB66_100
.LBB66_100:                             # %for.inc410
                                        #   in Loop: Header=BB66_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_95
.LBB66_101:                             # %for.end412
                                        #   in Loop: Header=BB66_93 Depth=2
	jmp	.LBB66_102
.LBB66_102:                             # %for.inc413
                                        #   in Loop: Header=BB66_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_93
.LBB66_103:                             # %for.end415
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_104:                             # %for.cond416
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB66_104 Depth=2
	movl	$0, -4(%rbp)
.LBB66_106:                             # %for.cond419
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB66_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB66_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB66_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_110
.LBB66_109:                             # %if.else438
                                        #   in Loop: Header=BB66_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_110:                             # %if.end453
                                        #   in Loop: Header=BB66_106 Depth=3
	jmp	.LBB66_111
.LBB66_111:                             # %for.inc454
                                        #   in Loop: Header=BB66_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_106
.LBB66_112:                             # %for.end456
                                        #   in Loop: Header=BB66_104 Depth=2
	jmp	.LBB66_113
.LBB66_113:                             # %for.inc457
                                        #   in Loop: Header=BB66_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_104
.LBB66_114:                             # %for.end459
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_115:                             # %for.cond460
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	$0, -4(%rbp)
.LBB66_117:                             # %for.cond463
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB66_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB66_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB66_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_121
.LBB66_120:                             # %if.else482
                                        #   in Loop: Header=BB66_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_121:                             # %if.end497
                                        #   in Loop: Header=BB66_117 Depth=3
	jmp	.LBB66_122
.LBB66_122:                             # %for.inc498
                                        #   in Loop: Header=BB66_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_117
.LBB66_123:                             # %for.end500
                                        #   in Loop: Header=BB66_115 Depth=2
	jmp	.LBB66_124
.LBB66_124:                             # %for.inc501
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_115
.LBB66_125:                             # %for.end503
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_126:                             # %for.cond504
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB66_126 Depth=2
	movl	$0, -4(%rbp)
.LBB66_128:                             # %for.cond507
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB66_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB66_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB66_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_132
.LBB66_131:                             # %if.else526
                                        #   in Loop: Header=BB66_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_132:                             # %if.end541
                                        #   in Loop: Header=BB66_128 Depth=3
	jmp	.LBB66_133
.LBB66_133:                             # %for.inc542
                                        #   in Loop: Header=BB66_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_128
.LBB66_134:                             # %for.end544
                                        #   in Loop: Header=BB66_126 Depth=2
	jmp	.LBB66_135
.LBB66_135:                             # %for.inc545
                                        #   in Loop: Header=BB66_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_126
.LBB66_136:                             # %for.end547
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_137:                             # %for.cond548
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB66_137 Depth=2
	movl	$0, -4(%rbp)
.LBB66_139:                             # %for.cond551
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB66_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB66_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB66_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_143
.LBB66_142:                             # %if.else570
                                        #   in Loop: Header=BB66_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_143:                             # %if.end585
                                        #   in Loop: Header=BB66_139 Depth=3
	jmp	.LBB66_144
.LBB66_144:                             # %for.inc586
                                        #   in Loop: Header=BB66_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_139
.LBB66_145:                             # %for.end588
                                        #   in Loop: Header=BB66_137 Depth=2
	jmp	.LBB66_146
.LBB66_146:                             # %for.inc589
                                        #   in Loop: Header=BB66_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_137
.LBB66_147:                             # %for.end591
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_148:                             # %for.cond592
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB66_148 Depth=2
	movl	$0, -4(%rbp)
.LBB66_150:                             # %for.cond595
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB66_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB66_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB66_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_154
.LBB66_153:                             # %if.else614
                                        #   in Loop: Header=BB66_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_154:                             # %if.end629
                                        #   in Loop: Header=BB66_150 Depth=3
	jmp	.LBB66_155
.LBB66_155:                             # %for.inc630
                                        #   in Loop: Header=BB66_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_150
.LBB66_156:                             # %for.end632
                                        #   in Loop: Header=BB66_148 Depth=2
	jmp	.LBB66_157
.LBB66_157:                             # %for.inc633
                                        #   in Loop: Header=BB66_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_148
.LBB66_158:                             # %for.end635
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_159:                             # %for.cond636
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB66_159 Depth=2
	movl	$0, -4(%rbp)
.LBB66_161:                             # %for.cond639
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB66_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB66_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB66_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_165
.LBB66_164:                             # %if.else658
                                        #   in Loop: Header=BB66_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_165:                             # %if.end673
                                        #   in Loop: Header=BB66_161 Depth=3
	jmp	.LBB66_166
.LBB66_166:                             # %for.inc674
                                        #   in Loop: Header=BB66_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_161
.LBB66_167:                             # %for.end676
                                        #   in Loop: Header=BB66_159 Depth=2
	jmp	.LBB66_168
.LBB66_168:                             # %for.inc677
                                        #   in Loop: Header=BB66_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_159
.LBB66_169:                             # %for.end679
                                        #   in Loop: Header=BB66_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB66_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB66_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB66_171:                             # %if.end682
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_172
.LBB66_172:                             # %for.inc683
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_1
.LBB66_173:                             # %for.end685
	cmpl	$1059114499, -44(%rbp)  # imm = 0x3F20CE03
	jne	.LBB66_175
.LBB66_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_174
.Lfunc_end66:
	.size	GetCtxModelNumber.59, .Lfunc_end66-GetCtxModelNumber.59
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.60
.LCPI67_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.60
	.p2align	4, 0x90
	.type	GetCtxModelNumber.60,@function
GetCtxModelNumber.60:                   # @GetCtxModelNumber.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$675935869, -44(%rbp)   # imm = 0x2849F67D
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_3 Depth 2
                                        #       Child Loop BB67_5 Depth 3
                                        #     Child Loop BB67_14 Depth 2
                                        #       Child Loop BB67_16 Depth 3
                                        #     Child Loop BB67_25 Depth 2
                                        #       Child Loop BB67_27 Depth 3
                                        #     Child Loop BB67_36 Depth 2
                                        #       Child Loop BB67_38 Depth 3
                                        #     Child Loop BB67_47 Depth 2
                                        #     Child Loop BB67_54 Depth 2
                                        #     Child Loop BB67_61 Depth 2
                                        #     Child Loop BB67_68 Depth 2
                                        #     Child Loop BB67_75 Depth 2
                                        #     Child Loop BB67_82 Depth 2
                                        #       Child Loop BB67_84 Depth 3
                                        #     Child Loop BB67_93 Depth 2
                                        #       Child Loop BB67_95 Depth 3
                                        #     Child Loop BB67_104 Depth 2
                                        #       Child Loop BB67_106 Depth 3
                                        #     Child Loop BB67_115 Depth 2
                                        #       Child Loop BB67_117 Depth 3
                                        #     Child Loop BB67_126 Depth 2
                                        #       Child Loop BB67_128 Depth 3
                                        #     Child Loop BB67_137 Depth 2
                                        #       Child Loop BB67_139 Depth 3
                                        #     Child Loop BB67_148 Depth 2
                                        #       Child Loop BB67_150 Depth 3
                                        #     Child Loop BB67_159 Depth 2
                                        #       Child Loop BB67_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB67_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB67_3:                               # %for.cond2
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB67_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	$0, -4(%rbp)
.LBB67_5:                               # %for.cond5
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB67_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB67_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB67_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_9
.LBB67_8:                               # %if.else
                                        #   in Loop: Header=BB67_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_9:                               # %if.end
                                        #   in Loop: Header=BB67_5 Depth=3
	jmp	.LBB67_10
.LBB67_10:                              # %for.inc
                                        #   in Loop: Header=BB67_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_5
.LBB67_11:                              # %for.end
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_12
.LBB67_12:                              # %for.inc33
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_3
.LBB67_13:                              # %for.end35
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_14:                              # %for.cond36
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB67_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB67_14 Depth=2
	movl	$0, -4(%rbp)
.LBB67_16:                              # %for.cond39
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB67_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB67_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB67_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_20
.LBB67_19:                              # %if.else58
                                        #   in Loop: Header=BB67_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_20:                              # %if.end73
                                        #   in Loop: Header=BB67_16 Depth=3
	jmp	.LBB67_21
.LBB67_21:                              # %for.inc74
                                        #   in Loop: Header=BB67_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_16
.LBB67_22:                              # %for.end76
                                        #   in Loop: Header=BB67_14 Depth=2
	jmp	.LBB67_23
.LBB67_23:                              # %for.inc77
                                        #   in Loop: Header=BB67_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_14
.LBB67_24:                              # %for.end79
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_25:                              # %for.cond80
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB67_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB67_25 Depth=2
	movl	$0, -4(%rbp)
.LBB67_27:                              # %for.cond83
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB67_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB67_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB67_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_31
.LBB67_30:                              # %if.else102
                                        #   in Loop: Header=BB67_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_31:                              # %if.end117
                                        #   in Loop: Header=BB67_27 Depth=3
	jmp	.LBB67_32
.LBB67_32:                              # %for.inc118
                                        #   in Loop: Header=BB67_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_27
.LBB67_33:                              # %for.end120
                                        #   in Loop: Header=BB67_25 Depth=2
	jmp	.LBB67_34
.LBB67_34:                              # %for.inc121
                                        #   in Loop: Header=BB67_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_25
.LBB67_35:                              # %for.end123
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_36:                              # %for.cond124
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB67_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB67_36 Depth=2
	movl	$0, -4(%rbp)
.LBB67_38:                              # %for.cond127
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB67_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB67_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB67_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_42
.LBB67_41:                              # %if.else146
                                        #   in Loop: Header=BB67_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_42:                              # %if.end161
                                        #   in Loop: Header=BB67_38 Depth=3
	jmp	.LBB67_43
.LBB67_43:                              # %for.inc162
                                        #   in Loop: Header=BB67_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_38
.LBB67_44:                              # %for.end164
                                        #   in Loop: Header=BB67_36 Depth=2
	jmp	.LBB67_45
.LBB67_45:                              # %for.inc165
                                        #   in Loop: Header=BB67_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_36
.LBB67_46:                              # %for.end167
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_47:                              # %for.cond168
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB67_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB67_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_51
.LBB67_50:                              # %if.else184
                                        #   in Loop: Header=BB67_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_51:                              # %if.end196
                                        #   in Loop: Header=BB67_47 Depth=2
	jmp	.LBB67_52
.LBB67_52:                              # %for.inc197
                                        #   in Loop: Header=BB67_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_47
.LBB67_53:                              # %for.end199
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_54:                              # %for.cond200
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB67_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB67_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_58
.LBB67_57:                              # %if.else216
                                        #   in Loop: Header=BB67_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_58:                              # %if.end228
                                        #   in Loop: Header=BB67_54 Depth=2
	jmp	.LBB67_59
.LBB67_59:                              # %for.inc229
                                        #   in Loop: Header=BB67_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_54
.LBB67_60:                              # %for.end231
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_61:                              # %for.cond232
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB67_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB67_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB67_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_65
.LBB67_64:                              # %if.else248
                                        #   in Loop: Header=BB67_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_65:                              # %if.end260
                                        #   in Loop: Header=BB67_61 Depth=2
	jmp	.LBB67_66
.LBB67_66:                              # %for.inc261
                                        #   in Loop: Header=BB67_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_61
.LBB67_67:                              # %for.end263
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_68:                              # %for.cond264
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB67_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB67_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB67_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_72
.LBB67_71:                              # %if.else280
                                        #   in Loop: Header=BB67_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_72:                              # %if.end292
                                        #   in Loop: Header=BB67_68 Depth=2
	jmp	.LBB67_73
.LBB67_73:                              # %for.inc293
                                        #   in Loop: Header=BB67_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_68
.LBB67_74:                              # %for.end295
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_75:                              # %for.cond296
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB67_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB67_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_79
.LBB67_78:                              # %if.else312
                                        #   in Loop: Header=BB67_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_79:                              # %if.end324
                                        #   in Loop: Header=BB67_75 Depth=2
	jmp	.LBB67_80
.LBB67_80:                              # %for.inc325
                                        #   in Loop: Header=BB67_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_75
.LBB67_81:                              # %for.end327
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_82:                              # %for.cond328
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB67_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB67_82 Depth=2
	movl	$0, -4(%rbp)
.LBB67_84:                              # %for.cond331
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB67_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB67_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB67_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_88
.LBB67_87:                              # %if.else350
                                        #   in Loop: Header=BB67_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_88:                              # %if.end365
                                        #   in Loop: Header=BB67_84 Depth=3
	jmp	.LBB67_89
.LBB67_89:                              # %for.inc366
                                        #   in Loop: Header=BB67_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_84
.LBB67_90:                              # %for.end368
                                        #   in Loop: Header=BB67_82 Depth=2
	jmp	.LBB67_91
.LBB67_91:                              # %for.inc369
                                        #   in Loop: Header=BB67_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_82
.LBB67_92:                              # %for.end371
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_93:                              # %for.cond372
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB67_93 Depth=2
	movl	$0, -4(%rbp)
.LBB67_95:                              # %for.cond375
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB67_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB67_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB67_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_99
.LBB67_98:                              # %if.else394
                                        #   in Loop: Header=BB67_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_99:                              # %if.end409
                                        #   in Loop: Header=BB67_95 Depth=3
	jmp	.LBB67_100
.LBB67_100:                             # %for.inc410
                                        #   in Loop: Header=BB67_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_95
.LBB67_101:                             # %for.end412
                                        #   in Loop: Header=BB67_93 Depth=2
	jmp	.LBB67_102
.LBB67_102:                             # %for.inc413
                                        #   in Loop: Header=BB67_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_93
.LBB67_103:                             # %for.end415
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_104:                             # %for.cond416
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB67_104 Depth=2
	movl	$0, -4(%rbp)
.LBB67_106:                             # %for.cond419
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB67_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB67_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB67_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_110
.LBB67_109:                             # %if.else438
                                        #   in Loop: Header=BB67_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_110:                             # %if.end453
                                        #   in Loop: Header=BB67_106 Depth=3
	jmp	.LBB67_111
.LBB67_111:                             # %for.inc454
                                        #   in Loop: Header=BB67_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_106
.LBB67_112:                             # %for.end456
                                        #   in Loop: Header=BB67_104 Depth=2
	jmp	.LBB67_113
.LBB67_113:                             # %for.inc457
                                        #   in Loop: Header=BB67_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_104
.LBB67_114:                             # %for.end459
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_115:                             # %for.cond460
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB67_115 Depth=2
	movl	$0, -4(%rbp)
.LBB67_117:                             # %for.cond463
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB67_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB67_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB67_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_121
.LBB67_120:                             # %if.else482
                                        #   in Loop: Header=BB67_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_121:                             # %if.end497
                                        #   in Loop: Header=BB67_117 Depth=3
	jmp	.LBB67_122
.LBB67_122:                             # %for.inc498
                                        #   in Loop: Header=BB67_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_117
.LBB67_123:                             # %for.end500
                                        #   in Loop: Header=BB67_115 Depth=2
	jmp	.LBB67_124
.LBB67_124:                             # %for.inc501
                                        #   in Loop: Header=BB67_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_115
.LBB67_125:                             # %for.end503
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_126:                             # %for.cond504
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB67_126 Depth=2
	movl	$0, -4(%rbp)
.LBB67_128:                             # %for.cond507
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB67_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB67_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB67_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_132
.LBB67_131:                             # %if.else526
                                        #   in Loop: Header=BB67_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_132:                             # %if.end541
                                        #   in Loop: Header=BB67_128 Depth=3
	jmp	.LBB67_133
.LBB67_133:                             # %for.inc542
                                        #   in Loop: Header=BB67_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_128
.LBB67_134:                             # %for.end544
                                        #   in Loop: Header=BB67_126 Depth=2
	jmp	.LBB67_135
.LBB67_135:                             # %for.inc545
                                        #   in Loop: Header=BB67_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_126
.LBB67_136:                             # %for.end547
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_137:                             # %for.cond548
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	$0, -4(%rbp)
.LBB67_139:                             # %for.cond551
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB67_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB67_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB67_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_143
.LBB67_142:                             # %if.else570
                                        #   in Loop: Header=BB67_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_143:                             # %if.end585
                                        #   in Loop: Header=BB67_139 Depth=3
	jmp	.LBB67_144
.LBB67_144:                             # %for.inc586
                                        #   in Loop: Header=BB67_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_139
.LBB67_145:                             # %for.end588
                                        #   in Loop: Header=BB67_137 Depth=2
	jmp	.LBB67_146
.LBB67_146:                             # %for.inc589
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_137
.LBB67_147:                             # %for.end591
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_148:                             # %for.cond592
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB67_148 Depth=2
	movl	$0, -4(%rbp)
.LBB67_150:                             # %for.cond595
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB67_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB67_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB67_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_154
.LBB67_153:                             # %if.else614
                                        #   in Loop: Header=BB67_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_154:                             # %if.end629
                                        #   in Loop: Header=BB67_150 Depth=3
	jmp	.LBB67_155
.LBB67_155:                             # %for.inc630
                                        #   in Loop: Header=BB67_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_150
.LBB67_156:                             # %for.end632
                                        #   in Loop: Header=BB67_148 Depth=2
	jmp	.LBB67_157
.LBB67_157:                             # %for.inc633
                                        #   in Loop: Header=BB67_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_148
.LBB67_158:                             # %for.end635
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_159:                             # %for.cond636
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB67_159 Depth=2
	movl	$0, -4(%rbp)
.LBB67_161:                             # %for.cond639
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB67_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB67_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB67_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_165
.LBB67_164:                             # %if.else658
                                        #   in Loop: Header=BB67_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_165:                             # %if.end673
                                        #   in Loop: Header=BB67_161 Depth=3
	jmp	.LBB67_166
.LBB67_166:                             # %for.inc674
                                        #   in Loop: Header=BB67_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_161
.LBB67_167:                             # %for.end676
                                        #   in Loop: Header=BB67_159 Depth=2
	jmp	.LBB67_168
.LBB67_168:                             # %for.inc677
                                        #   in Loop: Header=BB67_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_159
.LBB67_169:                             # %for.end679
                                        #   in Loop: Header=BB67_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB67_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB67_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB67_171:                             # %if.end682
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_172
.LBB67_172:                             # %for.inc683
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_1
.LBB67_173:                             # %for.end685
	cmpl	$675935869, -44(%rbp)   # imm = 0x2849F67D
	jne	.LBB67_175
.LBB67_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_174
.Lfunc_end67:
	.size	GetCtxModelNumber.60, .Lfunc_end67-GetCtxModelNumber.60
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.61
.LCPI68_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.61
	.p2align	4, 0x90
	.type	GetCtxModelNumber.61,@function
GetCtxModelNumber.61:                   # @GetCtxModelNumber.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI68_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1051039883, -44(%rbp)  # imm = 0x3EA5988B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
                                        #       Child Loop BB68_5 Depth 3
                                        #     Child Loop BB68_14 Depth 2
                                        #       Child Loop BB68_16 Depth 3
                                        #     Child Loop BB68_25 Depth 2
                                        #       Child Loop BB68_27 Depth 3
                                        #     Child Loop BB68_36 Depth 2
                                        #       Child Loop BB68_38 Depth 3
                                        #     Child Loop BB68_47 Depth 2
                                        #     Child Loop BB68_54 Depth 2
                                        #     Child Loop BB68_61 Depth 2
                                        #     Child Loop BB68_68 Depth 2
                                        #     Child Loop BB68_75 Depth 2
                                        #     Child Loop BB68_82 Depth 2
                                        #       Child Loop BB68_84 Depth 3
                                        #     Child Loop BB68_93 Depth 2
                                        #       Child Loop BB68_95 Depth 3
                                        #     Child Loop BB68_104 Depth 2
                                        #       Child Loop BB68_106 Depth 3
                                        #     Child Loop BB68_115 Depth 2
                                        #       Child Loop BB68_117 Depth 3
                                        #     Child Loop BB68_126 Depth 2
                                        #       Child Loop BB68_128 Depth 3
                                        #     Child Loop BB68_137 Depth 2
                                        #       Child Loop BB68_139 Depth 3
                                        #     Child Loop BB68_148 Depth 2
                                        #       Child Loop BB68_150 Depth 3
                                        #     Child Loop BB68_159 Depth 2
                                        #       Child Loop BB68_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB68_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB68_3:                               # %for.cond2
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB68_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	$0, -4(%rbp)
.LBB68_5:                               # %for.cond5
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB68_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB68_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB68_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_9
.LBB68_8:                               # %if.else
                                        #   in Loop: Header=BB68_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_9:                               # %if.end
                                        #   in Loop: Header=BB68_5 Depth=3
	jmp	.LBB68_10
.LBB68_10:                              # %for.inc
                                        #   in Loop: Header=BB68_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_5
.LBB68_11:                              # %for.end
                                        #   in Loop: Header=BB68_3 Depth=2
	jmp	.LBB68_12
.LBB68_12:                              # %for.inc33
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_3
.LBB68_13:                              # %for.end35
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_14:                              # %for.cond36
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB68_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB68_14 Depth=2
	movl	$0, -4(%rbp)
.LBB68_16:                              # %for.cond39
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB68_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_20
.LBB68_19:                              # %if.else58
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_20:                              # %if.end73
                                        #   in Loop: Header=BB68_16 Depth=3
	jmp	.LBB68_21
.LBB68_21:                              # %for.inc74
                                        #   in Loop: Header=BB68_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_16
.LBB68_22:                              # %for.end76
                                        #   in Loop: Header=BB68_14 Depth=2
	jmp	.LBB68_23
.LBB68_23:                              # %for.inc77
                                        #   in Loop: Header=BB68_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_14
.LBB68_24:                              # %for.end79
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_25:                              # %for.cond80
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB68_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	$0, -4(%rbp)
.LBB68_27:                              # %for.cond83
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB68_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB68_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB68_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_31
.LBB68_30:                              # %if.else102
                                        #   in Loop: Header=BB68_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_31:                              # %if.end117
                                        #   in Loop: Header=BB68_27 Depth=3
	jmp	.LBB68_32
.LBB68_32:                              # %for.inc118
                                        #   in Loop: Header=BB68_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_27
.LBB68_33:                              # %for.end120
                                        #   in Loop: Header=BB68_25 Depth=2
	jmp	.LBB68_34
.LBB68_34:                              # %for.inc121
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_25
.LBB68_35:                              # %for.end123
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_36:                              # %for.cond124
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB68_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB68_36 Depth=2
	movl	$0, -4(%rbp)
.LBB68_38:                              # %for.cond127
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB68_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB68_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB68_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_42
.LBB68_41:                              # %if.else146
                                        #   in Loop: Header=BB68_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_42:                              # %if.end161
                                        #   in Loop: Header=BB68_38 Depth=3
	jmp	.LBB68_43
.LBB68_43:                              # %for.inc162
                                        #   in Loop: Header=BB68_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_38
.LBB68_44:                              # %for.end164
                                        #   in Loop: Header=BB68_36 Depth=2
	jmp	.LBB68_45
.LBB68_45:                              # %for.inc165
                                        #   in Loop: Header=BB68_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_36
.LBB68_46:                              # %for.end167
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_47:                              # %for.cond168
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_51
.LBB68_50:                              # %if.else184
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_51:                              # %if.end196
                                        #   in Loop: Header=BB68_47 Depth=2
	jmp	.LBB68_52
.LBB68_52:                              # %for.inc197
                                        #   in Loop: Header=BB68_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_47
.LBB68_53:                              # %for.end199
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_54:                              # %for.cond200
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB68_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB68_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_58
.LBB68_57:                              # %if.else216
                                        #   in Loop: Header=BB68_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_58:                              # %if.end228
                                        #   in Loop: Header=BB68_54 Depth=2
	jmp	.LBB68_59
.LBB68_59:                              # %for.inc229
                                        #   in Loop: Header=BB68_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_54
.LBB68_60:                              # %for.end231
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_61:                              # %for.cond232
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB68_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB68_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB68_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_65
.LBB68_64:                              # %if.else248
                                        #   in Loop: Header=BB68_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_65:                              # %if.end260
                                        #   in Loop: Header=BB68_61 Depth=2
	jmp	.LBB68_66
.LBB68_66:                              # %for.inc261
                                        #   in Loop: Header=BB68_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_61
.LBB68_67:                              # %for.end263
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_68:                              # %for.cond264
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB68_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB68_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB68_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_72
.LBB68_71:                              # %if.else280
                                        #   in Loop: Header=BB68_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_72:                              # %if.end292
                                        #   in Loop: Header=BB68_68 Depth=2
	jmp	.LBB68_73
.LBB68_73:                              # %for.inc293
                                        #   in Loop: Header=BB68_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_68
.LBB68_74:                              # %for.end295
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_75:                              # %for.cond296
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB68_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB68_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_79
.LBB68_78:                              # %if.else312
                                        #   in Loop: Header=BB68_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_79:                              # %if.end324
                                        #   in Loop: Header=BB68_75 Depth=2
	jmp	.LBB68_80
.LBB68_80:                              # %for.inc325
                                        #   in Loop: Header=BB68_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_75
.LBB68_81:                              # %for.end327
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_82:                              # %for.cond328
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB68_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB68_82 Depth=2
	movl	$0, -4(%rbp)
.LBB68_84:                              # %for.cond331
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB68_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB68_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB68_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_88
.LBB68_87:                              # %if.else350
                                        #   in Loop: Header=BB68_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_88:                              # %if.end365
                                        #   in Loop: Header=BB68_84 Depth=3
	jmp	.LBB68_89
.LBB68_89:                              # %for.inc366
                                        #   in Loop: Header=BB68_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_84
.LBB68_90:                              # %for.end368
                                        #   in Loop: Header=BB68_82 Depth=2
	jmp	.LBB68_91
.LBB68_91:                              # %for.inc369
                                        #   in Loop: Header=BB68_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_82
.LBB68_92:                              # %for.end371
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_93:                              # %for.cond372
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB68_93 Depth=2
	movl	$0, -4(%rbp)
.LBB68_95:                              # %for.cond375
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB68_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB68_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB68_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_99
.LBB68_98:                              # %if.else394
                                        #   in Loop: Header=BB68_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_99:                              # %if.end409
                                        #   in Loop: Header=BB68_95 Depth=3
	jmp	.LBB68_100
.LBB68_100:                             # %for.inc410
                                        #   in Loop: Header=BB68_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_95
.LBB68_101:                             # %for.end412
                                        #   in Loop: Header=BB68_93 Depth=2
	jmp	.LBB68_102
.LBB68_102:                             # %for.inc413
                                        #   in Loop: Header=BB68_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_93
.LBB68_103:                             # %for.end415
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_104:                             # %for.cond416
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB68_104 Depth=2
	movl	$0, -4(%rbp)
.LBB68_106:                             # %for.cond419
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB68_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB68_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_110
.LBB68_109:                             # %if.else438
                                        #   in Loop: Header=BB68_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_110:                             # %if.end453
                                        #   in Loop: Header=BB68_106 Depth=3
	jmp	.LBB68_111
.LBB68_111:                             # %for.inc454
                                        #   in Loop: Header=BB68_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_106
.LBB68_112:                             # %for.end456
                                        #   in Loop: Header=BB68_104 Depth=2
	jmp	.LBB68_113
.LBB68_113:                             # %for.inc457
                                        #   in Loop: Header=BB68_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_104
.LBB68_114:                             # %for.end459
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_115:                             # %for.cond460
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB68_115 Depth=2
	movl	$0, -4(%rbp)
.LBB68_117:                             # %for.cond463
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB68_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB68_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_121
.LBB68_120:                             # %if.else482
                                        #   in Loop: Header=BB68_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_121:                             # %if.end497
                                        #   in Loop: Header=BB68_117 Depth=3
	jmp	.LBB68_122
.LBB68_122:                             # %for.inc498
                                        #   in Loop: Header=BB68_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_117
.LBB68_123:                             # %for.end500
                                        #   in Loop: Header=BB68_115 Depth=2
	jmp	.LBB68_124
.LBB68_124:                             # %for.inc501
                                        #   in Loop: Header=BB68_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_115
.LBB68_125:                             # %for.end503
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_126:                             # %for.cond504
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB68_126 Depth=2
	movl	$0, -4(%rbp)
.LBB68_128:                             # %for.cond507
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB68_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB68_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB68_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_132
.LBB68_131:                             # %if.else526
                                        #   in Loop: Header=BB68_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_132:                             # %if.end541
                                        #   in Loop: Header=BB68_128 Depth=3
	jmp	.LBB68_133
.LBB68_133:                             # %for.inc542
                                        #   in Loop: Header=BB68_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_128
.LBB68_134:                             # %for.end544
                                        #   in Loop: Header=BB68_126 Depth=2
	jmp	.LBB68_135
.LBB68_135:                             # %for.inc545
                                        #   in Loop: Header=BB68_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_126
.LBB68_136:                             # %for.end547
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_137:                             # %for.cond548
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB68_137 Depth=2
	movl	$0, -4(%rbp)
.LBB68_139:                             # %for.cond551
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB68_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB68_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB68_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_143
.LBB68_142:                             # %if.else570
                                        #   in Loop: Header=BB68_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_143:                             # %if.end585
                                        #   in Loop: Header=BB68_139 Depth=3
	jmp	.LBB68_144
.LBB68_144:                             # %for.inc586
                                        #   in Loop: Header=BB68_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_139
.LBB68_145:                             # %for.end588
                                        #   in Loop: Header=BB68_137 Depth=2
	jmp	.LBB68_146
.LBB68_146:                             # %for.inc589
                                        #   in Loop: Header=BB68_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_137
.LBB68_147:                             # %for.end591
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_148:                             # %for.cond592
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB68_148 Depth=2
	movl	$0, -4(%rbp)
.LBB68_150:                             # %for.cond595
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB68_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB68_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_154
.LBB68_153:                             # %if.else614
                                        #   in Loop: Header=BB68_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_154:                             # %if.end629
                                        #   in Loop: Header=BB68_150 Depth=3
	jmp	.LBB68_155
.LBB68_155:                             # %for.inc630
                                        #   in Loop: Header=BB68_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_150
.LBB68_156:                             # %for.end632
                                        #   in Loop: Header=BB68_148 Depth=2
	jmp	.LBB68_157
.LBB68_157:                             # %for.inc633
                                        #   in Loop: Header=BB68_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_148
.LBB68_158:                             # %for.end635
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_159:                             # %for.cond636
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB68_159 Depth=2
	movl	$0, -4(%rbp)
.LBB68_161:                             # %for.cond639
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB68_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB68_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_165
.LBB68_164:                             # %if.else658
                                        #   in Loop: Header=BB68_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_165:                             # %if.end673
                                        #   in Loop: Header=BB68_161 Depth=3
	jmp	.LBB68_166
.LBB68_166:                             # %for.inc674
                                        #   in Loop: Header=BB68_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_161
.LBB68_167:                             # %for.end676
                                        #   in Loop: Header=BB68_159 Depth=2
	jmp	.LBB68_168
.LBB68_168:                             # %for.inc677
                                        #   in Loop: Header=BB68_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_159
.LBB68_169:                             # %for.end679
                                        #   in Loop: Header=BB68_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB68_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB68_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB68_171:                             # %if.end682
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_172
.LBB68_172:                             # %for.inc683
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_1
.LBB68_173:                             # %for.end685
	cmpl	$1051039883, -44(%rbp)  # imm = 0x3EA5988B
	jne	.LBB68_175
.LBB68_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_174
.Lfunc_end68:
	.size	GetCtxModelNumber.61, .Lfunc_end68-GetCtxModelNumber.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.62
.LCPI69_0:
	.quad	4611686018427387904     # double 2
.LCPI69_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.62
	.p2align	4, 0x90
	.type	create_context_memory.62,@function
create_context_memory.62:               # @create_context_memory.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2142969527, -20(%rbp)  # imm = 0x7FBB1EB7
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB69_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB69_3
.LBB69_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB69_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB69_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB69_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB69_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB69_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB69_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB69_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB69_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB69_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB69_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB69_11:                              # %if.end10
                                        #   in Loop: Header=BB69_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB69_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB69_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB69_13:                              # %if.end16
                                        #   in Loop: Header=BB69_8 Depth=1
	movl	$0, -8(%rbp)
.LBB69_14:                              # %for.cond17
                                        #   Parent Loop BB69_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB69_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB69_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB69_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB69_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB69_17:                              # %if.end28
                                        #   in Loop: Header=BB69_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB69_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB69_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB69_19:                              # %if.end39
                                        #   in Loop: Header=BB69_14 Depth=2
	jmp	.LBB69_20
.LBB69_20:                              # %for.inc
                                        #   in Loop: Header=BB69_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_14
.LBB69_21:                              # %for.end
                                        #   in Loop: Header=BB69_8 Depth=1
	jmp	.LBB69_22
.LBB69_22:                              # %for.inc40
                                        #   in Loop: Header=BB69_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_8
.LBB69_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB69_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_26 Depth 2
                                        #       Child Loop BB69_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB69_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB69_24 Depth=1
	movl	$0, -8(%rbp)
.LBB69_26:                              # %for.cond47
                                        #   Parent Loop BB69_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB69_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB69_26 Depth=2
	movl	$0, -12(%rbp)
.LBB69_28:                              # %for.cond51
                                        #   Parent Loop BB69_24 Depth=1
                                        #     Parent Loop BB69_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB69_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB69_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB69_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_28
.LBB69_31:                              # %for.end63
                                        #   in Loop: Header=BB69_26 Depth=2
	jmp	.LBB69_32
.LBB69_32:                              # %for.inc64
                                        #   in Loop: Header=BB69_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_26
.LBB69_33:                              # %for.end66
                                        #   in Loop: Header=BB69_24 Depth=1
	jmp	.LBB69_34
.LBB69_34:                              # %for.inc67
                                        #   in Loop: Header=BB69_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_24
.LBB69_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB69_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB69_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB69_36 Depth=1
	vmovsd	.LCPI69_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB69_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_36
.LBB69_39:                              # %for.end98
	cmpl	$2142969527, -20(%rbp)  # imm = 0x7FBB1EB7
	jne	.LBB69_41
.LBB69_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_40
.Lfunc_end69:
	.size	create_context_memory.62, .Lfunc_end69-create_context_memory.62
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.63        # -- Begin function init_contexts.63
	.p2align	4, 0x90
	.type	init_contexts.63,@function
init_contexts.63:                       # @init_contexts.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$572529214, -28(%rbp)   # imm = 0x22201A3E
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB70_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	$0, -4(%rbp)
.LBB70_3:                               # %for.cond2
                                        #   Parent Loop BB70_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB70_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_7
.LBB70_6:                               # %if.else
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_7:                               # %if.end
                                        #   in Loop: Header=BB70_3 Depth=2
	jmp	.LBB70_8
.LBB70_8:                               # %for.inc
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_3
.LBB70_9:                               # %for.end
                                        #   in Loop: Header=BB70_1 Depth=1
	jmp	.LBB70_10
.LBB70_10:                              # %for.inc28
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_1
.LBB70_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB70_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB70_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB70_12 Depth=1
	movl	$0, -4(%rbp)
.LBB70_14:                              # %for.cond34
                                        #   Parent Loop BB70_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB70_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB70_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB70_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_18
.LBB70_17:                              # %if.else52
                                        #   in Loop: Header=BB70_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_18:                              # %if.end66
                                        #   in Loop: Header=BB70_14 Depth=2
	jmp	.LBB70_19
.LBB70_19:                              # %for.inc67
                                        #   in Loop: Header=BB70_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_14
.LBB70_20:                              # %for.end69
                                        #   in Loop: Header=BB70_12 Depth=1
	jmp	.LBB70_21
.LBB70_21:                              # %for.inc70
                                        #   in Loop: Header=BB70_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_12
.LBB70_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB70_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB70_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB70_23 Depth=1
	movl	$0, -4(%rbp)
.LBB70_25:                              # %for.cond76
                                        #   Parent Loop BB70_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB70_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB70_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB70_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_29
.LBB70_28:                              # %if.else94
                                        #   in Loop: Header=BB70_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_29:                              # %if.end108
                                        #   in Loop: Header=BB70_25 Depth=2
	jmp	.LBB70_30
.LBB70_30:                              # %for.inc109
                                        #   in Loop: Header=BB70_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_25
.LBB70_31:                              # %for.end111
                                        #   in Loop: Header=BB70_23 Depth=1
	jmp	.LBB70_32
.LBB70_32:                              # %for.inc112
                                        #   in Loop: Header=BB70_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_23
.LBB70_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB70_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB70_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB70_34 Depth=1
	movl	$0, -4(%rbp)
.LBB70_36:                              # %for.cond118
                                        #   Parent Loop BB70_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB70_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB70_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB70_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_40
.LBB70_39:                              # %if.else136
                                        #   in Loop: Header=BB70_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_40:                              # %if.end150
                                        #   in Loop: Header=BB70_36 Depth=2
	jmp	.LBB70_41
.LBB70_41:                              # %for.inc151
                                        #   in Loop: Header=BB70_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_36
.LBB70_42:                              # %for.end153
                                        #   in Loop: Header=BB70_34 Depth=1
	jmp	.LBB70_43
.LBB70_43:                              # %for.inc154
                                        #   in Loop: Header=BB70_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_34
.LBB70_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB70_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB70_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB70_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB70_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_49
.LBB70_48:                              # %if.else172
                                        #   in Loop: Header=BB70_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_49:                              # %if.end183
                                        #   in Loop: Header=BB70_45 Depth=1
	jmp	.LBB70_50
.LBB70_50:                              # %for.inc184
                                        #   in Loop: Header=BB70_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_45
.LBB70_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB70_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB70_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB70_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB70_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_56
.LBB70_55:                              # %if.else202
                                        #   in Loop: Header=BB70_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_56:                              # %if.end213
                                        #   in Loop: Header=BB70_52 Depth=1
	jmp	.LBB70_57
.LBB70_57:                              # %for.inc214
                                        #   in Loop: Header=BB70_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_52
.LBB70_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB70_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB70_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB70_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB70_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_63
.LBB70_62:                              # %if.else232
                                        #   in Loop: Header=BB70_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_63:                              # %if.end243
                                        #   in Loop: Header=BB70_59 Depth=1
	jmp	.LBB70_64
.LBB70_64:                              # %for.inc244
                                        #   in Loop: Header=BB70_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_59
.LBB70_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB70_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB70_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB70_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB70_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_70
.LBB70_69:                              # %if.else262
                                        #   in Loop: Header=BB70_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_70:                              # %if.end273
                                        #   in Loop: Header=BB70_66 Depth=1
	jmp	.LBB70_71
.LBB70_71:                              # %for.inc274
                                        #   in Loop: Header=BB70_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_66
.LBB70_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB70_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB70_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB70_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB70_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_77
.LBB70_76:                              # %if.else292
                                        #   in Loop: Header=BB70_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_77:                              # %if.end303
                                        #   in Loop: Header=BB70_73 Depth=1
	jmp	.LBB70_78
.LBB70_78:                              # %for.inc304
                                        #   in Loop: Header=BB70_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_73
.LBB70_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB70_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB70_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB70_80 Depth=1
	movl	$0, -4(%rbp)
.LBB70_82:                              # %for.cond310
                                        #   Parent Loop BB70_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB70_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB70_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_86
.LBB70_85:                              # %if.else328
                                        #   in Loop: Header=BB70_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_86:                              # %if.end342
                                        #   in Loop: Header=BB70_82 Depth=2
	jmp	.LBB70_87
.LBB70_87:                              # %for.inc343
                                        #   in Loop: Header=BB70_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_82
.LBB70_88:                              # %for.end345
                                        #   in Loop: Header=BB70_80 Depth=1
	jmp	.LBB70_89
.LBB70_89:                              # %for.inc346
                                        #   in Loop: Header=BB70_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_80
.LBB70_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB70_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB70_91 Depth=1
	movl	$0, -4(%rbp)
.LBB70_93:                              # %for.cond352
                                        #   Parent Loop BB70_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB70_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB70_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_97
.LBB70_96:                              # %if.else370
                                        #   in Loop: Header=BB70_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_97:                              # %if.end384
                                        #   in Loop: Header=BB70_93 Depth=2
	jmp	.LBB70_98
.LBB70_98:                              # %for.inc385
                                        #   in Loop: Header=BB70_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_93
.LBB70_99:                              # %for.end387
                                        #   in Loop: Header=BB70_91 Depth=1
	jmp	.LBB70_100
.LBB70_100:                             # %for.inc388
                                        #   in Loop: Header=BB70_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_91
.LBB70_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB70_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB70_102 Depth=1
	movl	$0, -4(%rbp)
.LBB70_104:                             # %for.cond394
                                        #   Parent Loop BB70_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB70_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB70_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB70_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_108
.LBB70_107:                             # %if.else412
                                        #   in Loop: Header=BB70_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_108:                             # %if.end426
                                        #   in Loop: Header=BB70_104 Depth=2
	jmp	.LBB70_109
.LBB70_109:                             # %for.inc427
                                        #   in Loop: Header=BB70_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_104
.LBB70_110:                             # %for.end429
                                        #   in Loop: Header=BB70_102 Depth=1
	jmp	.LBB70_111
.LBB70_111:                             # %for.inc430
                                        #   in Loop: Header=BB70_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_102
.LBB70_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB70_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB70_113 Depth=1
	movl	$0, -4(%rbp)
.LBB70_115:                             # %for.cond436
                                        #   Parent Loop BB70_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB70_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB70_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB70_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_119
.LBB70_118:                             # %if.else454
                                        #   in Loop: Header=BB70_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_119:                             # %if.end468
                                        #   in Loop: Header=BB70_115 Depth=2
	jmp	.LBB70_120
.LBB70_120:                             # %for.inc469
                                        #   in Loop: Header=BB70_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_115
.LBB70_121:                             # %for.end471
                                        #   in Loop: Header=BB70_113 Depth=1
	jmp	.LBB70_122
.LBB70_122:                             # %for.inc472
                                        #   in Loop: Header=BB70_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_113
.LBB70_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB70_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB70_124 Depth=1
	movl	$0, -4(%rbp)
.LBB70_126:                             # %for.cond478
                                        #   Parent Loop BB70_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB70_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB70_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB70_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_130
.LBB70_129:                             # %if.else496
                                        #   in Loop: Header=BB70_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_130:                             # %if.end510
                                        #   in Loop: Header=BB70_126 Depth=2
	jmp	.LBB70_131
.LBB70_131:                             # %for.inc511
                                        #   in Loop: Header=BB70_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_126
.LBB70_132:                             # %for.end513
                                        #   in Loop: Header=BB70_124 Depth=1
	jmp	.LBB70_133
.LBB70_133:                             # %for.inc514
                                        #   in Loop: Header=BB70_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_124
.LBB70_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB70_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB70_135 Depth=1
	movl	$0, -4(%rbp)
.LBB70_137:                             # %for.cond520
                                        #   Parent Loop BB70_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB70_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB70_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB70_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_141
.LBB70_140:                             # %if.else538
                                        #   in Loop: Header=BB70_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_141:                             # %if.end552
                                        #   in Loop: Header=BB70_137 Depth=2
	jmp	.LBB70_142
.LBB70_142:                             # %for.inc553
                                        #   in Loop: Header=BB70_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_137
.LBB70_143:                             # %for.end555
                                        #   in Loop: Header=BB70_135 Depth=1
	jmp	.LBB70_144
.LBB70_144:                             # %for.inc556
                                        #   in Loop: Header=BB70_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_135
.LBB70_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB70_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB70_146 Depth=1
	movl	$0, -4(%rbp)
.LBB70_148:                             # %for.cond562
                                        #   Parent Loop BB70_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB70_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB70_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB70_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_152
.LBB70_151:                             # %if.else580
                                        #   in Loop: Header=BB70_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_152:                             # %if.end594
                                        #   in Loop: Header=BB70_148 Depth=2
	jmp	.LBB70_153
.LBB70_153:                             # %for.inc595
                                        #   in Loop: Header=BB70_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_148
.LBB70_154:                             # %for.end597
                                        #   in Loop: Header=BB70_146 Depth=1
	jmp	.LBB70_155
.LBB70_155:                             # %for.inc598
                                        #   in Loop: Header=BB70_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_146
.LBB70_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB70_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB70_157 Depth=1
	movl	$0, -4(%rbp)
.LBB70_159:                             # %for.cond604
                                        #   Parent Loop BB70_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB70_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB70_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB70_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_163
.LBB70_162:                             # %if.else622
                                        #   in Loop: Header=BB70_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_163:                             # %if.end636
                                        #   in Loop: Header=BB70_159 Depth=2
	jmp	.LBB70_164
.LBB70_164:                             # %for.inc637
                                        #   in Loop: Header=BB70_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_159
.LBB70_165:                             # %for.end639
                                        #   in Loop: Header=BB70_157 Depth=1
	jmp	.LBB70_166
.LBB70_166:                             # %for.inc640
                                        #   in Loop: Header=BB70_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_157
.LBB70_167:                             # %for.end642
	cmpl	$572529214, -28(%rbp)   # imm = 0x22201A3E
	jne	.LBB70_169
.LBB70_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_168
.Lfunc_end70:
	.size	init_contexts.63, .Lfunc_end70-init_contexts.63
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.64
.LCPI71_0:
	.quad	4607182418800017408     # double 1
.LCPI71_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI71_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI71_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.64
	.p2align	4, 0x90
	.type	XRate.64,@function
XRate.64:                               # @XRate.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$262132319, -36(%rbp)   # imm = 0xF9FD25F
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB71_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB71_3
.LBB71_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB71_3:                               # %cond.end
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI71_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI71_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB71_6
.LBB71_5:                               # %cond.false6
	vmovsd	.LCPI71_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI71_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI71_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB71_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB71_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB71_9
.LBB71_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB71_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB71_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB71_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB71_13
.LBB71_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB71_13:                              # %cond.end26
	jmp	.LBB71_15
.LBB71_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB71_15
.LBB71_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB71_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB71_18
.LBB71_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB71_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$262132319, -36(%rbp)   # imm = 0xF9FD25F
	jne	.LBB71_20
.LBB71_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB71_19
.Lfunc_end71:
	.size	XRate.64, .Lfunc_end71-XRate.64
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.65
.LCPI72_0:
	.quad	4607182418800017408     # double 1
.LCPI72_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI72_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI72_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.65
	.p2align	4, 0x90
	.type	XRate.65,@function
XRate.65:                               # @XRate.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$901811048, -36(%rbp)   # imm = 0x35C08B68
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB72_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB72_3
.LBB72_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB72_3:                               # %cond.end
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI72_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI72_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI72_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB72_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB72_6
.LBB72_5:                               # %cond.false6
	vmovsd	.LCPI72_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI72_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI72_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB72_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB72_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB72_9
.LBB72_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB72_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB72_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB72_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB72_13
.LBB72_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB72_13:                              # %cond.end26
	jmp	.LBB72_15
.LBB72_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB72_15
.LBB72_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB72_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB72_18
.LBB72_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB72_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$901811048, -36(%rbp)   # imm = 0x35C08B68
	jne	.LBB72_20
.LBB72_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB72_19
.Lfunc_end72:
	.size	XRate.65, .Lfunc_end72-XRate.65
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.66
.LCPI73_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.66
	.p2align	4, 0x90
	.type	GetCtxModelNumber.66,@function
GetCtxModelNumber.66:                   # @GetCtxModelNumber.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI73_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1884927213, -44(%rbp)  # imm = 0x7059B4ED
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_3 Depth 2
                                        #       Child Loop BB73_5 Depth 3
                                        #     Child Loop BB73_14 Depth 2
                                        #       Child Loop BB73_16 Depth 3
                                        #     Child Loop BB73_25 Depth 2
                                        #       Child Loop BB73_27 Depth 3
                                        #     Child Loop BB73_36 Depth 2
                                        #       Child Loop BB73_38 Depth 3
                                        #     Child Loop BB73_47 Depth 2
                                        #     Child Loop BB73_54 Depth 2
                                        #     Child Loop BB73_61 Depth 2
                                        #     Child Loop BB73_68 Depth 2
                                        #     Child Loop BB73_75 Depth 2
                                        #     Child Loop BB73_82 Depth 2
                                        #       Child Loop BB73_84 Depth 3
                                        #     Child Loop BB73_93 Depth 2
                                        #       Child Loop BB73_95 Depth 3
                                        #     Child Loop BB73_104 Depth 2
                                        #       Child Loop BB73_106 Depth 3
                                        #     Child Loop BB73_115 Depth 2
                                        #       Child Loop BB73_117 Depth 3
                                        #     Child Loop BB73_126 Depth 2
                                        #       Child Loop BB73_128 Depth 3
                                        #     Child Loop BB73_137 Depth 2
                                        #       Child Loop BB73_139 Depth 3
                                        #     Child Loop BB73_148 Depth 2
                                        #       Child Loop BB73_150 Depth 3
                                        #     Child Loop BB73_159 Depth 2
                                        #       Child Loop BB73_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB73_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB73_3:                               # %for.cond2
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB73_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	$0, -4(%rbp)
.LBB73_5:                               # %for.cond5
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB73_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB73_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB73_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_9
.LBB73_8:                               # %if.else
                                        #   in Loop: Header=BB73_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_9:                               # %if.end
                                        #   in Loop: Header=BB73_5 Depth=3
	jmp	.LBB73_10
.LBB73_10:                              # %for.inc
                                        #   in Loop: Header=BB73_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_5
.LBB73_11:                              # %for.end
                                        #   in Loop: Header=BB73_3 Depth=2
	jmp	.LBB73_12
.LBB73_12:                              # %for.inc33
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_3
.LBB73_13:                              # %for.end35
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_14:                              # %for.cond36
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB73_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB73_14 Depth=2
	movl	$0, -4(%rbp)
.LBB73_16:                              # %for.cond39
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB73_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB73_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB73_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_20
.LBB73_19:                              # %if.else58
                                        #   in Loop: Header=BB73_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_20:                              # %if.end73
                                        #   in Loop: Header=BB73_16 Depth=3
	jmp	.LBB73_21
.LBB73_21:                              # %for.inc74
                                        #   in Loop: Header=BB73_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_16
.LBB73_22:                              # %for.end76
                                        #   in Loop: Header=BB73_14 Depth=2
	jmp	.LBB73_23
.LBB73_23:                              # %for.inc77
                                        #   in Loop: Header=BB73_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_14
.LBB73_24:                              # %for.end79
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_25:                              # %for.cond80
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB73_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB73_25 Depth=2
	movl	$0, -4(%rbp)
.LBB73_27:                              # %for.cond83
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB73_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB73_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB73_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_31
.LBB73_30:                              # %if.else102
                                        #   in Loop: Header=BB73_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_31:                              # %if.end117
                                        #   in Loop: Header=BB73_27 Depth=3
	jmp	.LBB73_32
.LBB73_32:                              # %for.inc118
                                        #   in Loop: Header=BB73_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_27
.LBB73_33:                              # %for.end120
                                        #   in Loop: Header=BB73_25 Depth=2
	jmp	.LBB73_34
.LBB73_34:                              # %for.inc121
                                        #   in Loop: Header=BB73_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_25
.LBB73_35:                              # %for.end123
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_36:                              # %for.cond124
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB73_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB73_36 Depth=2
	movl	$0, -4(%rbp)
.LBB73_38:                              # %for.cond127
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB73_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB73_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB73_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_42
.LBB73_41:                              # %if.else146
                                        #   in Loop: Header=BB73_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_42:                              # %if.end161
                                        #   in Loop: Header=BB73_38 Depth=3
	jmp	.LBB73_43
.LBB73_43:                              # %for.inc162
                                        #   in Loop: Header=BB73_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_38
.LBB73_44:                              # %for.end164
                                        #   in Loop: Header=BB73_36 Depth=2
	jmp	.LBB73_45
.LBB73_45:                              # %for.inc165
                                        #   in Loop: Header=BB73_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_36
.LBB73_46:                              # %for.end167
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_47:                              # %for.cond168
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB73_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB73_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_51
.LBB73_50:                              # %if.else184
                                        #   in Loop: Header=BB73_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_51:                              # %if.end196
                                        #   in Loop: Header=BB73_47 Depth=2
	jmp	.LBB73_52
.LBB73_52:                              # %for.inc197
                                        #   in Loop: Header=BB73_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_47
.LBB73_53:                              # %for.end199
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_54:                              # %for.cond200
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB73_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB73_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_58
.LBB73_57:                              # %if.else216
                                        #   in Loop: Header=BB73_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_58:                              # %if.end228
                                        #   in Loop: Header=BB73_54 Depth=2
	jmp	.LBB73_59
.LBB73_59:                              # %for.inc229
                                        #   in Loop: Header=BB73_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_54
.LBB73_60:                              # %for.end231
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_61:                              # %for.cond232
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB73_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB73_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB73_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_65
.LBB73_64:                              # %if.else248
                                        #   in Loop: Header=BB73_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_65:                              # %if.end260
                                        #   in Loop: Header=BB73_61 Depth=2
	jmp	.LBB73_66
.LBB73_66:                              # %for.inc261
                                        #   in Loop: Header=BB73_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_61
.LBB73_67:                              # %for.end263
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_68:                              # %for.cond264
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB73_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB73_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB73_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_72
.LBB73_71:                              # %if.else280
                                        #   in Loop: Header=BB73_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_72:                              # %if.end292
                                        #   in Loop: Header=BB73_68 Depth=2
	jmp	.LBB73_73
.LBB73_73:                              # %for.inc293
                                        #   in Loop: Header=BB73_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_68
.LBB73_74:                              # %for.end295
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_75:                              # %for.cond296
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB73_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB73_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_79
.LBB73_78:                              # %if.else312
                                        #   in Loop: Header=BB73_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_79:                              # %if.end324
                                        #   in Loop: Header=BB73_75 Depth=2
	jmp	.LBB73_80
.LBB73_80:                              # %for.inc325
                                        #   in Loop: Header=BB73_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_75
.LBB73_81:                              # %for.end327
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_82:                              # %for.cond328
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB73_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB73_82 Depth=2
	movl	$0, -4(%rbp)
.LBB73_84:                              # %for.cond331
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB73_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB73_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB73_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_88
.LBB73_87:                              # %if.else350
                                        #   in Loop: Header=BB73_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_88:                              # %if.end365
                                        #   in Loop: Header=BB73_84 Depth=3
	jmp	.LBB73_89
.LBB73_89:                              # %for.inc366
                                        #   in Loop: Header=BB73_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_84
.LBB73_90:                              # %for.end368
                                        #   in Loop: Header=BB73_82 Depth=2
	jmp	.LBB73_91
.LBB73_91:                              # %for.inc369
                                        #   in Loop: Header=BB73_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_82
.LBB73_92:                              # %for.end371
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_93:                              # %for.cond372
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB73_93 Depth=2
	movl	$0, -4(%rbp)
.LBB73_95:                              # %for.cond375
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB73_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB73_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB73_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_99
.LBB73_98:                              # %if.else394
                                        #   in Loop: Header=BB73_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_99:                              # %if.end409
                                        #   in Loop: Header=BB73_95 Depth=3
	jmp	.LBB73_100
.LBB73_100:                             # %for.inc410
                                        #   in Loop: Header=BB73_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_95
.LBB73_101:                             # %for.end412
                                        #   in Loop: Header=BB73_93 Depth=2
	jmp	.LBB73_102
.LBB73_102:                             # %for.inc413
                                        #   in Loop: Header=BB73_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_93
.LBB73_103:                             # %for.end415
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_104:                             # %for.cond416
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB73_104 Depth=2
	movl	$0, -4(%rbp)
.LBB73_106:                             # %for.cond419
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB73_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB73_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB73_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_110
.LBB73_109:                             # %if.else438
                                        #   in Loop: Header=BB73_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_110:                             # %if.end453
                                        #   in Loop: Header=BB73_106 Depth=3
	jmp	.LBB73_111
.LBB73_111:                             # %for.inc454
                                        #   in Loop: Header=BB73_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_106
.LBB73_112:                             # %for.end456
                                        #   in Loop: Header=BB73_104 Depth=2
	jmp	.LBB73_113
.LBB73_113:                             # %for.inc457
                                        #   in Loop: Header=BB73_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_104
.LBB73_114:                             # %for.end459
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_115:                             # %for.cond460
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB73_115 Depth=2
	movl	$0, -4(%rbp)
.LBB73_117:                             # %for.cond463
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB73_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB73_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB73_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_121
.LBB73_120:                             # %if.else482
                                        #   in Loop: Header=BB73_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_121:                             # %if.end497
                                        #   in Loop: Header=BB73_117 Depth=3
	jmp	.LBB73_122
.LBB73_122:                             # %for.inc498
                                        #   in Loop: Header=BB73_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_117
.LBB73_123:                             # %for.end500
                                        #   in Loop: Header=BB73_115 Depth=2
	jmp	.LBB73_124
.LBB73_124:                             # %for.inc501
                                        #   in Loop: Header=BB73_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_115
.LBB73_125:                             # %for.end503
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_126:                             # %for.cond504
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB73_126 Depth=2
	movl	$0, -4(%rbp)
.LBB73_128:                             # %for.cond507
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB73_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB73_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB73_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_132
.LBB73_131:                             # %if.else526
                                        #   in Loop: Header=BB73_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_132:                             # %if.end541
                                        #   in Loop: Header=BB73_128 Depth=3
	jmp	.LBB73_133
.LBB73_133:                             # %for.inc542
                                        #   in Loop: Header=BB73_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_128
.LBB73_134:                             # %for.end544
                                        #   in Loop: Header=BB73_126 Depth=2
	jmp	.LBB73_135
.LBB73_135:                             # %for.inc545
                                        #   in Loop: Header=BB73_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_126
.LBB73_136:                             # %for.end547
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_137:                             # %for.cond548
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB73_137 Depth=2
	movl	$0, -4(%rbp)
.LBB73_139:                             # %for.cond551
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB73_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB73_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB73_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_143
.LBB73_142:                             # %if.else570
                                        #   in Loop: Header=BB73_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_143:                             # %if.end585
                                        #   in Loop: Header=BB73_139 Depth=3
	jmp	.LBB73_144
.LBB73_144:                             # %for.inc586
                                        #   in Loop: Header=BB73_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_139
.LBB73_145:                             # %for.end588
                                        #   in Loop: Header=BB73_137 Depth=2
	jmp	.LBB73_146
.LBB73_146:                             # %for.inc589
                                        #   in Loop: Header=BB73_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_137
.LBB73_147:                             # %for.end591
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_148:                             # %for.cond592
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB73_148 Depth=2
	movl	$0, -4(%rbp)
.LBB73_150:                             # %for.cond595
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB73_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB73_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB73_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_154
.LBB73_153:                             # %if.else614
                                        #   in Loop: Header=BB73_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_154:                             # %if.end629
                                        #   in Loop: Header=BB73_150 Depth=3
	jmp	.LBB73_155
.LBB73_155:                             # %for.inc630
                                        #   in Loop: Header=BB73_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_150
.LBB73_156:                             # %for.end632
                                        #   in Loop: Header=BB73_148 Depth=2
	jmp	.LBB73_157
.LBB73_157:                             # %for.inc633
                                        #   in Loop: Header=BB73_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_148
.LBB73_158:                             # %for.end635
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_159:                             # %for.cond636
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB73_159 Depth=2
	movl	$0, -4(%rbp)
.LBB73_161:                             # %for.cond639
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB73_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB73_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB73_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_165
.LBB73_164:                             # %if.else658
                                        #   in Loop: Header=BB73_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_165:                             # %if.end673
                                        #   in Loop: Header=BB73_161 Depth=3
	jmp	.LBB73_166
.LBB73_166:                             # %for.inc674
                                        #   in Loop: Header=BB73_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_161
.LBB73_167:                             # %for.end676
                                        #   in Loop: Header=BB73_159 Depth=2
	jmp	.LBB73_168
.LBB73_168:                             # %for.inc677
                                        #   in Loop: Header=BB73_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_159
.LBB73_169:                             # %for.end679
                                        #   in Loop: Header=BB73_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB73_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB73_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB73_171:                             # %if.end682
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_172
.LBB73_172:                             # %for.inc683
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_1
.LBB73_173:                             # %for.end685
	cmpl	$1884927213, -44(%rbp)  # imm = 0x7059B4ED
	jne	.LBB73_175
.LBB73_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_174
.Lfunc_end73:
	.size	GetCtxModelNumber.66, .Lfunc_end73-GetCtxModelNumber.66
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.67
.LCPI74_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.67
	.p2align	4, 0x90
	.type	GetCtxModelNumber.67,@function
GetCtxModelNumber.67:                   # @GetCtxModelNumber.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI74_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1209564796, -44(%rbp)  # imm = 0x48187E7C
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
                                        #       Child Loop BB74_5 Depth 3
                                        #     Child Loop BB74_14 Depth 2
                                        #       Child Loop BB74_16 Depth 3
                                        #     Child Loop BB74_25 Depth 2
                                        #       Child Loop BB74_27 Depth 3
                                        #     Child Loop BB74_36 Depth 2
                                        #       Child Loop BB74_38 Depth 3
                                        #     Child Loop BB74_47 Depth 2
                                        #     Child Loop BB74_54 Depth 2
                                        #     Child Loop BB74_61 Depth 2
                                        #     Child Loop BB74_68 Depth 2
                                        #     Child Loop BB74_75 Depth 2
                                        #     Child Loop BB74_82 Depth 2
                                        #       Child Loop BB74_84 Depth 3
                                        #     Child Loop BB74_93 Depth 2
                                        #       Child Loop BB74_95 Depth 3
                                        #     Child Loop BB74_104 Depth 2
                                        #       Child Loop BB74_106 Depth 3
                                        #     Child Loop BB74_115 Depth 2
                                        #       Child Loop BB74_117 Depth 3
                                        #     Child Loop BB74_126 Depth 2
                                        #       Child Loop BB74_128 Depth 3
                                        #     Child Loop BB74_137 Depth 2
                                        #       Child Loop BB74_139 Depth 3
                                        #     Child Loop BB74_148 Depth 2
                                        #       Child Loop BB74_150 Depth 3
                                        #     Child Loop BB74_159 Depth 2
                                        #       Child Loop BB74_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB74_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB74_3:                               # %for.cond2
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB74_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	$0, -4(%rbp)
.LBB74_5:                               # %for.cond5
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB74_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB74_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB74_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_9
.LBB74_8:                               # %if.else
                                        #   in Loop: Header=BB74_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_9:                               # %if.end
                                        #   in Loop: Header=BB74_5 Depth=3
	jmp	.LBB74_10
.LBB74_10:                              # %for.inc
                                        #   in Loop: Header=BB74_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_5
.LBB74_11:                              # %for.end
                                        #   in Loop: Header=BB74_3 Depth=2
	jmp	.LBB74_12
.LBB74_12:                              # %for.inc33
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_3
.LBB74_13:                              # %for.end35
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_14:                              # %for.cond36
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB74_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB74_14 Depth=2
	movl	$0, -4(%rbp)
.LBB74_16:                              # %for.cond39
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB74_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB74_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB74_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_20
.LBB74_19:                              # %if.else58
                                        #   in Loop: Header=BB74_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_20:                              # %if.end73
                                        #   in Loop: Header=BB74_16 Depth=3
	jmp	.LBB74_21
.LBB74_21:                              # %for.inc74
                                        #   in Loop: Header=BB74_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_16
.LBB74_22:                              # %for.end76
                                        #   in Loop: Header=BB74_14 Depth=2
	jmp	.LBB74_23
.LBB74_23:                              # %for.inc77
                                        #   in Loop: Header=BB74_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_14
.LBB74_24:                              # %for.end79
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_25:                              # %for.cond80
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB74_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB74_25 Depth=2
	movl	$0, -4(%rbp)
.LBB74_27:                              # %for.cond83
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB74_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB74_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB74_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_31
.LBB74_30:                              # %if.else102
                                        #   in Loop: Header=BB74_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_31:                              # %if.end117
                                        #   in Loop: Header=BB74_27 Depth=3
	jmp	.LBB74_32
.LBB74_32:                              # %for.inc118
                                        #   in Loop: Header=BB74_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_27
.LBB74_33:                              # %for.end120
                                        #   in Loop: Header=BB74_25 Depth=2
	jmp	.LBB74_34
.LBB74_34:                              # %for.inc121
                                        #   in Loop: Header=BB74_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_25
.LBB74_35:                              # %for.end123
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_36:                              # %for.cond124
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB74_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB74_36 Depth=2
	movl	$0, -4(%rbp)
.LBB74_38:                              # %for.cond127
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB74_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB74_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB74_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_42
.LBB74_41:                              # %if.else146
                                        #   in Loop: Header=BB74_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_42:                              # %if.end161
                                        #   in Loop: Header=BB74_38 Depth=3
	jmp	.LBB74_43
.LBB74_43:                              # %for.inc162
                                        #   in Loop: Header=BB74_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_38
.LBB74_44:                              # %for.end164
                                        #   in Loop: Header=BB74_36 Depth=2
	jmp	.LBB74_45
.LBB74_45:                              # %for.inc165
                                        #   in Loop: Header=BB74_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_36
.LBB74_46:                              # %for.end167
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_47:                              # %for.cond168
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB74_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB74_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_51
.LBB74_50:                              # %if.else184
                                        #   in Loop: Header=BB74_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_51:                              # %if.end196
                                        #   in Loop: Header=BB74_47 Depth=2
	jmp	.LBB74_52
.LBB74_52:                              # %for.inc197
                                        #   in Loop: Header=BB74_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_47
.LBB74_53:                              # %for.end199
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_54:                              # %for.cond200
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB74_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB74_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_58
.LBB74_57:                              # %if.else216
                                        #   in Loop: Header=BB74_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_58:                              # %if.end228
                                        #   in Loop: Header=BB74_54 Depth=2
	jmp	.LBB74_59
.LBB74_59:                              # %for.inc229
                                        #   in Loop: Header=BB74_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_54
.LBB74_60:                              # %for.end231
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_61:                              # %for.cond232
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB74_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB74_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB74_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_65
.LBB74_64:                              # %if.else248
                                        #   in Loop: Header=BB74_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_65:                              # %if.end260
                                        #   in Loop: Header=BB74_61 Depth=2
	jmp	.LBB74_66
.LBB74_66:                              # %for.inc261
                                        #   in Loop: Header=BB74_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_61
.LBB74_67:                              # %for.end263
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_68:                              # %for.cond264
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB74_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB74_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB74_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_72
.LBB74_71:                              # %if.else280
                                        #   in Loop: Header=BB74_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_72:                              # %if.end292
                                        #   in Loop: Header=BB74_68 Depth=2
	jmp	.LBB74_73
.LBB74_73:                              # %for.inc293
                                        #   in Loop: Header=BB74_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_68
.LBB74_74:                              # %for.end295
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_75:                              # %for.cond296
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB74_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB74_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_79
.LBB74_78:                              # %if.else312
                                        #   in Loop: Header=BB74_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_79:                              # %if.end324
                                        #   in Loop: Header=BB74_75 Depth=2
	jmp	.LBB74_80
.LBB74_80:                              # %for.inc325
                                        #   in Loop: Header=BB74_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_75
.LBB74_81:                              # %for.end327
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_82:                              # %for.cond328
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB74_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB74_82 Depth=2
	movl	$0, -4(%rbp)
.LBB74_84:                              # %for.cond331
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB74_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB74_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB74_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_88
.LBB74_87:                              # %if.else350
                                        #   in Loop: Header=BB74_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_88:                              # %if.end365
                                        #   in Loop: Header=BB74_84 Depth=3
	jmp	.LBB74_89
.LBB74_89:                              # %for.inc366
                                        #   in Loop: Header=BB74_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_84
.LBB74_90:                              # %for.end368
                                        #   in Loop: Header=BB74_82 Depth=2
	jmp	.LBB74_91
.LBB74_91:                              # %for.inc369
                                        #   in Loop: Header=BB74_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_82
.LBB74_92:                              # %for.end371
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_93:                              # %for.cond372
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB74_93 Depth=2
	movl	$0, -4(%rbp)
.LBB74_95:                              # %for.cond375
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB74_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB74_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB74_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_99
.LBB74_98:                              # %if.else394
                                        #   in Loop: Header=BB74_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_99:                              # %if.end409
                                        #   in Loop: Header=BB74_95 Depth=3
	jmp	.LBB74_100
.LBB74_100:                             # %for.inc410
                                        #   in Loop: Header=BB74_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_95
.LBB74_101:                             # %for.end412
                                        #   in Loop: Header=BB74_93 Depth=2
	jmp	.LBB74_102
.LBB74_102:                             # %for.inc413
                                        #   in Loop: Header=BB74_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_93
.LBB74_103:                             # %for.end415
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_104:                             # %for.cond416
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB74_104 Depth=2
	movl	$0, -4(%rbp)
.LBB74_106:                             # %for.cond419
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB74_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB74_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB74_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_110
.LBB74_109:                             # %if.else438
                                        #   in Loop: Header=BB74_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_110:                             # %if.end453
                                        #   in Loop: Header=BB74_106 Depth=3
	jmp	.LBB74_111
.LBB74_111:                             # %for.inc454
                                        #   in Loop: Header=BB74_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_106
.LBB74_112:                             # %for.end456
                                        #   in Loop: Header=BB74_104 Depth=2
	jmp	.LBB74_113
.LBB74_113:                             # %for.inc457
                                        #   in Loop: Header=BB74_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_104
.LBB74_114:                             # %for.end459
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_115:                             # %for.cond460
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB74_115 Depth=2
	movl	$0, -4(%rbp)
.LBB74_117:                             # %for.cond463
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB74_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB74_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB74_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_121
.LBB74_120:                             # %if.else482
                                        #   in Loop: Header=BB74_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_121:                             # %if.end497
                                        #   in Loop: Header=BB74_117 Depth=3
	jmp	.LBB74_122
.LBB74_122:                             # %for.inc498
                                        #   in Loop: Header=BB74_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_117
.LBB74_123:                             # %for.end500
                                        #   in Loop: Header=BB74_115 Depth=2
	jmp	.LBB74_124
.LBB74_124:                             # %for.inc501
                                        #   in Loop: Header=BB74_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_115
.LBB74_125:                             # %for.end503
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_126:                             # %for.cond504
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB74_126 Depth=2
	movl	$0, -4(%rbp)
.LBB74_128:                             # %for.cond507
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB74_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB74_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB74_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_132
.LBB74_131:                             # %if.else526
                                        #   in Loop: Header=BB74_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_132:                             # %if.end541
                                        #   in Loop: Header=BB74_128 Depth=3
	jmp	.LBB74_133
.LBB74_133:                             # %for.inc542
                                        #   in Loop: Header=BB74_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_128
.LBB74_134:                             # %for.end544
                                        #   in Loop: Header=BB74_126 Depth=2
	jmp	.LBB74_135
.LBB74_135:                             # %for.inc545
                                        #   in Loop: Header=BB74_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_126
.LBB74_136:                             # %for.end547
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_137:                             # %for.cond548
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB74_137 Depth=2
	movl	$0, -4(%rbp)
.LBB74_139:                             # %for.cond551
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB74_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB74_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB74_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_143
.LBB74_142:                             # %if.else570
                                        #   in Loop: Header=BB74_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_143:                             # %if.end585
                                        #   in Loop: Header=BB74_139 Depth=3
	jmp	.LBB74_144
.LBB74_144:                             # %for.inc586
                                        #   in Loop: Header=BB74_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_139
.LBB74_145:                             # %for.end588
                                        #   in Loop: Header=BB74_137 Depth=2
	jmp	.LBB74_146
.LBB74_146:                             # %for.inc589
                                        #   in Loop: Header=BB74_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_137
.LBB74_147:                             # %for.end591
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_148:                             # %for.cond592
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB74_148 Depth=2
	movl	$0, -4(%rbp)
.LBB74_150:                             # %for.cond595
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB74_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB74_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB74_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_154
.LBB74_153:                             # %if.else614
                                        #   in Loop: Header=BB74_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_154:                             # %if.end629
                                        #   in Loop: Header=BB74_150 Depth=3
	jmp	.LBB74_155
.LBB74_155:                             # %for.inc630
                                        #   in Loop: Header=BB74_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_150
.LBB74_156:                             # %for.end632
                                        #   in Loop: Header=BB74_148 Depth=2
	jmp	.LBB74_157
.LBB74_157:                             # %for.inc633
                                        #   in Loop: Header=BB74_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_148
.LBB74_158:                             # %for.end635
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_159:                             # %for.cond636
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB74_159 Depth=2
	movl	$0, -4(%rbp)
.LBB74_161:                             # %for.cond639
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB74_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB74_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB74_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_165
.LBB74_164:                             # %if.else658
                                        #   in Loop: Header=BB74_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_165:                             # %if.end673
                                        #   in Loop: Header=BB74_161 Depth=3
	jmp	.LBB74_166
.LBB74_166:                             # %for.inc674
                                        #   in Loop: Header=BB74_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_161
.LBB74_167:                             # %for.end676
                                        #   in Loop: Header=BB74_159 Depth=2
	jmp	.LBB74_168
.LBB74_168:                             # %for.inc677
                                        #   in Loop: Header=BB74_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_159
.LBB74_169:                             # %for.end679
                                        #   in Loop: Header=BB74_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB74_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB74_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB74_171:                             # %if.end682
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_172
.LBB74_172:                             # %for.inc683
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_1
.LBB74_173:                             # %for.end685
	cmpl	$1209564796, -44(%rbp)  # imm = 0x48187E7C
	jne	.LBB74_175
.LBB74_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_174
.Lfunc_end74:
	.size	GetCtxModelNumber.67, .Lfunc_end74-GetCtxModelNumber.67
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.68        # -- Begin function init_contexts.68
	.p2align	4, 0x90
	.type	init_contexts.68,@function
init_contexts.68:                       # @init_contexts.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1070844226, -28(%rbp)  # imm = 0x3FD3C942
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB75_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -4(%rbp)
.LBB75_3:                               # %for.cond2
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB75_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_7
.LBB75_6:                               # %if.else
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_7:                               # %if.end
                                        #   in Loop: Header=BB75_3 Depth=2
	jmp	.LBB75_8
.LBB75_8:                               # %for.inc
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_3
.LBB75_9:                               # %for.end
                                        #   in Loop: Header=BB75_1 Depth=1
	jmp	.LBB75_10
.LBB75_10:                              # %for.inc28
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_1
.LBB75_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB75_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB75_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB75_12 Depth=1
	movl	$0, -4(%rbp)
.LBB75_14:                              # %for.cond34
                                        #   Parent Loop BB75_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB75_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB75_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB75_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_18
.LBB75_17:                              # %if.else52
                                        #   in Loop: Header=BB75_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_18:                              # %if.end66
                                        #   in Loop: Header=BB75_14 Depth=2
	jmp	.LBB75_19
.LBB75_19:                              # %for.inc67
                                        #   in Loop: Header=BB75_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_14
.LBB75_20:                              # %for.end69
                                        #   in Loop: Header=BB75_12 Depth=1
	jmp	.LBB75_21
.LBB75_21:                              # %for.inc70
                                        #   in Loop: Header=BB75_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_12
.LBB75_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB75_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB75_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	$0, -4(%rbp)
.LBB75_25:                              # %for.cond76
                                        #   Parent Loop BB75_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB75_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB75_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB75_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_29
.LBB75_28:                              # %if.else94
                                        #   in Loop: Header=BB75_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_29:                              # %if.end108
                                        #   in Loop: Header=BB75_25 Depth=2
	jmp	.LBB75_30
.LBB75_30:                              # %for.inc109
                                        #   in Loop: Header=BB75_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_25
.LBB75_31:                              # %for.end111
                                        #   in Loop: Header=BB75_23 Depth=1
	jmp	.LBB75_32
.LBB75_32:                              # %for.inc112
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_23
.LBB75_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB75_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB75_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB75_34 Depth=1
	movl	$0, -4(%rbp)
.LBB75_36:                              # %for.cond118
                                        #   Parent Loop BB75_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB75_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB75_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB75_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_40
.LBB75_39:                              # %if.else136
                                        #   in Loop: Header=BB75_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_40:                              # %if.end150
                                        #   in Loop: Header=BB75_36 Depth=2
	jmp	.LBB75_41
.LBB75_41:                              # %for.inc151
                                        #   in Loop: Header=BB75_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_36
.LBB75_42:                              # %for.end153
                                        #   in Loop: Header=BB75_34 Depth=1
	jmp	.LBB75_43
.LBB75_43:                              # %for.inc154
                                        #   in Loop: Header=BB75_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_34
.LBB75_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB75_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB75_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB75_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB75_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_49
.LBB75_48:                              # %if.else172
                                        #   in Loop: Header=BB75_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_49:                              # %if.end183
                                        #   in Loop: Header=BB75_45 Depth=1
	jmp	.LBB75_50
.LBB75_50:                              # %for.inc184
                                        #   in Loop: Header=BB75_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_45
.LBB75_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB75_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB75_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB75_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB75_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_56
.LBB75_55:                              # %if.else202
                                        #   in Loop: Header=BB75_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_56:                              # %if.end213
                                        #   in Loop: Header=BB75_52 Depth=1
	jmp	.LBB75_57
.LBB75_57:                              # %for.inc214
                                        #   in Loop: Header=BB75_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_52
.LBB75_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB75_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB75_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB75_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB75_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_63
.LBB75_62:                              # %if.else232
                                        #   in Loop: Header=BB75_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_63:                              # %if.end243
                                        #   in Loop: Header=BB75_59 Depth=1
	jmp	.LBB75_64
.LBB75_64:                              # %for.inc244
                                        #   in Loop: Header=BB75_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_59
.LBB75_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB75_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB75_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB75_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB75_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_70
.LBB75_69:                              # %if.else262
                                        #   in Loop: Header=BB75_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_70:                              # %if.end273
                                        #   in Loop: Header=BB75_66 Depth=1
	jmp	.LBB75_71
.LBB75_71:                              # %for.inc274
                                        #   in Loop: Header=BB75_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_66
.LBB75_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB75_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB75_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB75_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB75_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_77
.LBB75_76:                              # %if.else292
                                        #   in Loop: Header=BB75_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_77:                              # %if.end303
                                        #   in Loop: Header=BB75_73 Depth=1
	jmp	.LBB75_78
.LBB75_78:                              # %for.inc304
                                        #   in Loop: Header=BB75_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_73
.LBB75_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB75_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB75_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB75_80 Depth=1
	movl	$0, -4(%rbp)
.LBB75_82:                              # %for.cond310
                                        #   Parent Loop BB75_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB75_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB75_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_86
.LBB75_85:                              # %if.else328
                                        #   in Loop: Header=BB75_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_86:                              # %if.end342
                                        #   in Loop: Header=BB75_82 Depth=2
	jmp	.LBB75_87
.LBB75_87:                              # %for.inc343
                                        #   in Loop: Header=BB75_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_82
.LBB75_88:                              # %for.end345
                                        #   in Loop: Header=BB75_80 Depth=1
	jmp	.LBB75_89
.LBB75_89:                              # %for.inc346
                                        #   in Loop: Header=BB75_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_80
.LBB75_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB75_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB75_91 Depth=1
	movl	$0, -4(%rbp)
.LBB75_93:                              # %for.cond352
                                        #   Parent Loop BB75_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB75_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB75_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_97
.LBB75_96:                              # %if.else370
                                        #   in Loop: Header=BB75_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_97:                              # %if.end384
                                        #   in Loop: Header=BB75_93 Depth=2
	jmp	.LBB75_98
.LBB75_98:                              # %for.inc385
                                        #   in Loop: Header=BB75_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_93
.LBB75_99:                              # %for.end387
                                        #   in Loop: Header=BB75_91 Depth=1
	jmp	.LBB75_100
.LBB75_100:                             # %for.inc388
                                        #   in Loop: Header=BB75_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_91
.LBB75_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB75_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB75_102 Depth=1
	movl	$0, -4(%rbp)
.LBB75_104:                             # %for.cond394
                                        #   Parent Loop BB75_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB75_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB75_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB75_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_108
.LBB75_107:                             # %if.else412
                                        #   in Loop: Header=BB75_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_108:                             # %if.end426
                                        #   in Loop: Header=BB75_104 Depth=2
	jmp	.LBB75_109
.LBB75_109:                             # %for.inc427
                                        #   in Loop: Header=BB75_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_104
.LBB75_110:                             # %for.end429
                                        #   in Loop: Header=BB75_102 Depth=1
	jmp	.LBB75_111
.LBB75_111:                             # %for.inc430
                                        #   in Loop: Header=BB75_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_102
.LBB75_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB75_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB75_113 Depth=1
	movl	$0, -4(%rbp)
.LBB75_115:                             # %for.cond436
                                        #   Parent Loop BB75_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB75_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB75_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB75_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_119
.LBB75_118:                             # %if.else454
                                        #   in Loop: Header=BB75_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_119:                             # %if.end468
                                        #   in Loop: Header=BB75_115 Depth=2
	jmp	.LBB75_120
.LBB75_120:                             # %for.inc469
                                        #   in Loop: Header=BB75_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_115
.LBB75_121:                             # %for.end471
                                        #   in Loop: Header=BB75_113 Depth=1
	jmp	.LBB75_122
.LBB75_122:                             # %for.inc472
                                        #   in Loop: Header=BB75_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_113
.LBB75_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB75_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB75_124 Depth=1
	movl	$0, -4(%rbp)
.LBB75_126:                             # %for.cond478
                                        #   Parent Loop BB75_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB75_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB75_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB75_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_130
.LBB75_129:                             # %if.else496
                                        #   in Loop: Header=BB75_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_130:                             # %if.end510
                                        #   in Loop: Header=BB75_126 Depth=2
	jmp	.LBB75_131
.LBB75_131:                             # %for.inc511
                                        #   in Loop: Header=BB75_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_126
.LBB75_132:                             # %for.end513
                                        #   in Loop: Header=BB75_124 Depth=1
	jmp	.LBB75_133
.LBB75_133:                             # %for.inc514
                                        #   in Loop: Header=BB75_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_124
.LBB75_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB75_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	$0, -4(%rbp)
.LBB75_137:                             # %for.cond520
                                        #   Parent Loop BB75_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB75_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB75_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB75_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_141
.LBB75_140:                             # %if.else538
                                        #   in Loop: Header=BB75_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_141:                             # %if.end552
                                        #   in Loop: Header=BB75_137 Depth=2
	jmp	.LBB75_142
.LBB75_142:                             # %for.inc553
                                        #   in Loop: Header=BB75_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_137
.LBB75_143:                             # %for.end555
                                        #   in Loop: Header=BB75_135 Depth=1
	jmp	.LBB75_144
.LBB75_144:                             # %for.inc556
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_135
.LBB75_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB75_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB75_146 Depth=1
	movl	$0, -4(%rbp)
.LBB75_148:                             # %for.cond562
                                        #   Parent Loop BB75_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB75_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB75_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB75_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_152
.LBB75_151:                             # %if.else580
                                        #   in Loop: Header=BB75_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_152:                             # %if.end594
                                        #   in Loop: Header=BB75_148 Depth=2
	jmp	.LBB75_153
.LBB75_153:                             # %for.inc595
                                        #   in Loop: Header=BB75_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_148
.LBB75_154:                             # %for.end597
                                        #   in Loop: Header=BB75_146 Depth=1
	jmp	.LBB75_155
.LBB75_155:                             # %for.inc598
                                        #   in Loop: Header=BB75_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_146
.LBB75_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB75_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB75_157 Depth=1
	movl	$0, -4(%rbp)
.LBB75_159:                             # %for.cond604
                                        #   Parent Loop BB75_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB75_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB75_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB75_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_163
.LBB75_162:                             # %if.else622
                                        #   in Loop: Header=BB75_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_163:                             # %if.end636
                                        #   in Loop: Header=BB75_159 Depth=2
	jmp	.LBB75_164
.LBB75_164:                             # %for.inc637
                                        #   in Loop: Header=BB75_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_159
.LBB75_165:                             # %for.end639
                                        #   in Loop: Header=BB75_157 Depth=1
	jmp	.LBB75_166
.LBB75_166:                             # %for.inc640
                                        #   in Loop: Header=BB75_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_157
.LBB75_167:                             # %for.end642
	cmpl	$1070844226, -28(%rbp)  # imm = 0x3FD3C942
	jne	.LBB75_169
.LBB75_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_168
.Lfunc_end75:
	.size	init_contexts.68, .Lfunc_end75-init_contexts.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.69
.LCPI76_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.69
	.p2align	4, 0x90
	.type	GetCtxModelNumber.69,@function
GetCtxModelNumber.69:                   # @GetCtxModelNumber.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1702390706, -48(%rbp)  # imm = 0x65786BB2
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_3 Depth 2
                                        #       Child Loop BB76_5 Depth 3
                                        #     Child Loop BB76_14 Depth 2
                                        #       Child Loop BB76_16 Depth 3
                                        #     Child Loop BB76_25 Depth 2
                                        #       Child Loop BB76_27 Depth 3
                                        #     Child Loop BB76_36 Depth 2
                                        #       Child Loop BB76_38 Depth 3
                                        #     Child Loop BB76_47 Depth 2
                                        #     Child Loop BB76_54 Depth 2
                                        #     Child Loop BB76_61 Depth 2
                                        #     Child Loop BB76_68 Depth 2
                                        #     Child Loop BB76_75 Depth 2
                                        #     Child Loop BB76_82 Depth 2
                                        #       Child Loop BB76_84 Depth 3
                                        #     Child Loop BB76_93 Depth 2
                                        #       Child Loop BB76_95 Depth 3
                                        #     Child Loop BB76_104 Depth 2
                                        #       Child Loop BB76_106 Depth 3
                                        #     Child Loop BB76_115 Depth 2
                                        #       Child Loop BB76_117 Depth 3
                                        #     Child Loop BB76_126 Depth 2
                                        #       Child Loop BB76_128 Depth 3
                                        #     Child Loop BB76_137 Depth 2
                                        #       Child Loop BB76_139 Depth 3
                                        #     Child Loop BB76_148 Depth 2
                                        #       Child Loop BB76_150 Depth 3
                                        #     Child Loop BB76_159 Depth 2
                                        #       Child Loop BB76_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB76_3:                               # %for.cond2
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB76_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	$0, -4(%rbp)
.LBB76_5:                               # %for.cond5
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB76_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_9
.LBB76_8:                               # %if.else
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_9:                               # %if.end
                                        #   in Loop: Header=BB76_5 Depth=3
	jmp	.LBB76_10
.LBB76_10:                              # %for.inc
                                        #   in Loop: Header=BB76_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_5
.LBB76_11:                              # %for.end
                                        #   in Loop: Header=BB76_3 Depth=2
	jmp	.LBB76_12
.LBB76_12:                              # %for.inc33
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_3
.LBB76_13:                              # %for.end35
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_14:                              # %for.cond36
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB76_14 Depth=2
	movl	$0, -4(%rbp)
.LBB76_16:                              # %for.cond39
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB76_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_20
.LBB76_19:                              # %if.else58
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_20:                              # %if.end73
                                        #   in Loop: Header=BB76_16 Depth=3
	jmp	.LBB76_21
.LBB76_21:                              # %for.inc74
                                        #   in Loop: Header=BB76_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_16
.LBB76_22:                              # %for.end76
                                        #   in Loop: Header=BB76_14 Depth=2
	jmp	.LBB76_23
.LBB76_23:                              # %for.inc77
                                        #   in Loop: Header=BB76_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_14
.LBB76_24:                              # %for.end79
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_25:                              # %for.cond80
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB76_25 Depth=2
	movl	$0, -4(%rbp)
.LBB76_27:                              # %for.cond83
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB76_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_31
.LBB76_30:                              # %if.else102
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_31:                              # %if.end117
                                        #   in Loop: Header=BB76_27 Depth=3
	jmp	.LBB76_32
.LBB76_32:                              # %for.inc118
                                        #   in Loop: Header=BB76_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_27
.LBB76_33:                              # %for.end120
                                        #   in Loop: Header=BB76_25 Depth=2
	jmp	.LBB76_34
.LBB76_34:                              # %for.inc121
                                        #   in Loop: Header=BB76_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_25
.LBB76_35:                              # %for.end123
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_36:                              # %for.cond124
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	$0, -4(%rbp)
.LBB76_38:                              # %for.cond127
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB76_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_42
.LBB76_41:                              # %if.else146
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_42:                              # %if.end161
                                        #   in Loop: Header=BB76_38 Depth=3
	jmp	.LBB76_43
.LBB76_43:                              # %for.inc162
                                        #   in Loop: Header=BB76_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_38
.LBB76_44:                              # %for.end164
                                        #   in Loop: Header=BB76_36 Depth=2
	jmp	.LBB76_45
.LBB76_45:                              # %for.inc165
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_36
.LBB76_46:                              # %for.end167
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_47:                              # %for.cond168
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_51
.LBB76_50:                              # %if.else184
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_51:                              # %if.end196
                                        #   in Loop: Header=BB76_47 Depth=2
	jmp	.LBB76_52
.LBB76_52:                              # %for.inc197
                                        #   in Loop: Header=BB76_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_47
.LBB76_53:                              # %for.end199
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_54:                              # %for.cond200
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_58
.LBB76_57:                              # %if.else216
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_58:                              # %if.end228
                                        #   in Loop: Header=BB76_54 Depth=2
	jmp	.LBB76_59
.LBB76_59:                              # %for.inc229
                                        #   in Loop: Header=BB76_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_54
.LBB76_60:                              # %for.end231
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_61:                              # %for.cond232
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB76_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_65
.LBB76_64:                              # %if.else248
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_65:                              # %if.end260
                                        #   in Loop: Header=BB76_61 Depth=2
	jmp	.LBB76_66
.LBB76_66:                              # %for.inc261
                                        #   in Loop: Header=BB76_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_61
.LBB76_67:                              # %for.end263
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_68:                              # %for.cond264
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB76_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_72
.LBB76_71:                              # %if.else280
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_72:                              # %if.end292
                                        #   in Loop: Header=BB76_68 Depth=2
	jmp	.LBB76_73
.LBB76_73:                              # %for.inc293
                                        #   in Loop: Header=BB76_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_68
.LBB76_74:                              # %for.end295
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_75:                              # %for.cond296
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_79
.LBB76_78:                              # %if.else312
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_79:                              # %if.end324
                                        #   in Loop: Header=BB76_75 Depth=2
	jmp	.LBB76_80
.LBB76_80:                              # %for.inc325
                                        #   in Loop: Header=BB76_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_75
.LBB76_81:                              # %for.end327
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_82:                              # %for.cond328
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB76_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB76_82 Depth=2
	movl	$0, -4(%rbp)
.LBB76_84:                              # %for.cond331
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB76_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_88
.LBB76_87:                              # %if.else350
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_88:                              # %if.end365
                                        #   in Loop: Header=BB76_84 Depth=3
	jmp	.LBB76_89
.LBB76_89:                              # %for.inc366
                                        #   in Loop: Header=BB76_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_84
.LBB76_90:                              # %for.end368
                                        #   in Loop: Header=BB76_82 Depth=2
	jmp	.LBB76_91
.LBB76_91:                              # %for.inc369
                                        #   in Loop: Header=BB76_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_82
.LBB76_92:                              # %for.end371
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_93:                              # %for.cond372
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB76_93 Depth=2
	movl	$0, -4(%rbp)
.LBB76_95:                              # %for.cond375
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB76_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_99
.LBB76_98:                              # %if.else394
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_99:                              # %if.end409
                                        #   in Loop: Header=BB76_95 Depth=3
	jmp	.LBB76_100
.LBB76_100:                             # %for.inc410
                                        #   in Loop: Header=BB76_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_95
.LBB76_101:                             # %for.end412
                                        #   in Loop: Header=BB76_93 Depth=2
	jmp	.LBB76_102
.LBB76_102:                             # %for.inc413
                                        #   in Loop: Header=BB76_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_93
.LBB76_103:                             # %for.end415
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_104:                             # %for.cond416
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB76_104 Depth=2
	movl	$0, -4(%rbp)
.LBB76_106:                             # %for.cond419
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_110
.LBB76_109:                             # %if.else438
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_110:                             # %if.end453
                                        #   in Loop: Header=BB76_106 Depth=3
	jmp	.LBB76_111
.LBB76_111:                             # %for.inc454
                                        #   in Loop: Header=BB76_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_106
.LBB76_112:                             # %for.end456
                                        #   in Loop: Header=BB76_104 Depth=2
	jmp	.LBB76_113
.LBB76_113:                             # %for.inc457
                                        #   in Loop: Header=BB76_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_104
.LBB76_114:                             # %for.end459
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_115:                             # %for.cond460
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB76_115 Depth=2
	movl	$0, -4(%rbp)
.LBB76_117:                             # %for.cond463
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_121
.LBB76_120:                             # %if.else482
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_121:                             # %if.end497
                                        #   in Loop: Header=BB76_117 Depth=3
	jmp	.LBB76_122
.LBB76_122:                             # %for.inc498
                                        #   in Loop: Header=BB76_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_117
.LBB76_123:                             # %for.end500
                                        #   in Loop: Header=BB76_115 Depth=2
	jmp	.LBB76_124
.LBB76_124:                             # %for.inc501
                                        #   in Loop: Header=BB76_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_115
.LBB76_125:                             # %for.end503
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_126:                             # %for.cond504
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB76_126 Depth=2
	movl	$0, -4(%rbp)
.LBB76_128:                             # %for.cond507
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB76_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_132
.LBB76_131:                             # %if.else526
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_132:                             # %if.end541
                                        #   in Loop: Header=BB76_128 Depth=3
	jmp	.LBB76_133
.LBB76_133:                             # %for.inc542
                                        #   in Loop: Header=BB76_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_128
.LBB76_134:                             # %for.end544
                                        #   in Loop: Header=BB76_126 Depth=2
	jmp	.LBB76_135
.LBB76_135:                             # %for.inc545
                                        #   in Loop: Header=BB76_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_126
.LBB76_136:                             # %for.end547
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_137:                             # %for.cond548
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB76_137 Depth=2
	movl	$0, -4(%rbp)
.LBB76_139:                             # %for.cond551
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB76_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_143
.LBB76_142:                             # %if.else570
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_143:                             # %if.end585
                                        #   in Loop: Header=BB76_139 Depth=3
	jmp	.LBB76_144
.LBB76_144:                             # %for.inc586
                                        #   in Loop: Header=BB76_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_139
.LBB76_145:                             # %for.end588
                                        #   in Loop: Header=BB76_137 Depth=2
	jmp	.LBB76_146
.LBB76_146:                             # %for.inc589
                                        #   in Loop: Header=BB76_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_137
.LBB76_147:                             # %for.end591
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_148:                             # %for.cond592
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB76_148 Depth=2
	movl	$0, -4(%rbp)
.LBB76_150:                             # %for.cond595
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_154
.LBB76_153:                             # %if.else614
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_154:                             # %if.end629
                                        #   in Loop: Header=BB76_150 Depth=3
	jmp	.LBB76_155
.LBB76_155:                             # %for.inc630
                                        #   in Loop: Header=BB76_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_150
.LBB76_156:                             # %for.end632
                                        #   in Loop: Header=BB76_148 Depth=2
	jmp	.LBB76_157
.LBB76_157:                             # %for.inc633
                                        #   in Loop: Header=BB76_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_148
.LBB76_158:                             # %for.end635
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_159:                             # %for.cond636
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB76_159 Depth=2
	movl	$0, -4(%rbp)
.LBB76_161:                             # %for.cond639
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_165
.LBB76_164:                             # %if.else658
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_165:                             # %if.end673
                                        #   in Loop: Header=BB76_161 Depth=3
	jmp	.LBB76_166
.LBB76_166:                             # %for.inc674
                                        #   in Loop: Header=BB76_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_161
.LBB76_167:                             # %for.end676
                                        #   in Loop: Header=BB76_159 Depth=2
	jmp	.LBB76_168
.LBB76_168:                             # %for.inc677
                                        #   in Loop: Header=BB76_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_159
.LBB76_169:                             # %for.end679
                                        #   in Loop: Header=BB76_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB76_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB76_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB76_171:                             # %if.end682
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_172
.LBB76_172:                             # %for.inc683
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_1
.LBB76_173:                             # %for.end685
	cmpl	$1702390706, -48(%rbp)  # imm = 0x65786BB2
	jne	.LBB76_175
.LBB76_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_174
.Lfunc_end76:
	.size	GetCtxModelNumber.69, .Lfunc_end76-GetCtxModelNumber.69
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.70
.LCPI77_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.70
	.p2align	4, 0x90
	.type	GetCtxModelNumber.70,@function
GetCtxModelNumber.70:                   # @GetCtxModelNumber.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1033065853, -48(%rbp)  # imm = 0x3D93557D
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
                                        #       Child Loop BB77_5 Depth 3
                                        #     Child Loop BB77_14 Depth 2
                                        #       Child Loop BB77_16 Depth 3
                                        #     Child Loop BB77_25 Depth 2
                                        #       Child Loop BB77_27 Depth 3
                                        #     Child Loop BB77_36 Depth 2
                                        #       Child Loop BB77_38 Depth 3
                                        #     Child Loop BB77_47 Depth 2
                                        #     Child Loop BB77_54 Depth 2
                                        #     Child Loop BB77_61 Depth 2
                                        #     Child Loop BB77_68 Depth 2
                                        #     Child Loop BB77_75 Depth 2
                                        #     Child Loop BB77_82 Depth 2
                                        #       Child Loop BB77_84 Depth 3
                                        #     Child Loop BB77_93 Depth 2
                                        #       Child Loop BB77_95 Depth 3
                                        #     Child Loop BB77_104 Depth 2
                                        #       Child Loop BB77_106 Depth 3
                                        #     Child Loop BB77_115 Depth 2
                                        #       Child Loop BB77_117 Depth 3
                                        #     Child Loop BB77_126 Depth 2
                                        #       Child Loop BB77_128 Depth 3
                                        #     Child Loop BB77_137 Depth 2
                                        #       Child Loop BB77_139 Depth 3
                                        #     Child Loop BB77_148 Depth 2
                                        #       Child Loop BB77_150 Depth 3
                                        #     Child Loop BB77_159 Depth 2
                                        #       Child Loop BB77_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB77_3:                               # %for.cond2
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB77_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	$0, -4(%rbp)
.LBB77_5:                               # %for.cond5
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB77_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_9
.LBB77_8:                               # %if.else
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_9:                               # %if.end
                                        #   in Loop: Header=BB77_5 Depth=3
	jmp	.LBB77_10
.LBB77_10:                              # %for.inc
                                        #   in Loop: Header=BB77_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_5
.LBB77_11:                              # %for.end
                                        #   in Loop: Header=BB77_3 Depth=2
	jmp	.LBB77_12
.LBB77_12:                              # %for.inc33
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_3
.LBB77_13:                              # %for.end35
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_14:                              # %for.cond36
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB77_14 Depth=2
	movl	$0, -4(%rbp)
.LBB77_16:                              # %for.cond39
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB77_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_20
.LBB77_19:                              # %if.else58
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_20:                              # %if.end73
                                        #   in Loop: Header=BB77_16 Depth=3
	jmp	.LBB77_21
.LBB77_21:                              # %for.inc74
                                        #   in Loop: Header=BB77_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_16
.LBB77_22:                              # %for.end76
                                        #   in Loop: Header=BB77_14 Depth=2
	jmp	.LBB77_23
.LBB77_23:                              # %for.inc77
                                        #   in Loop: Header=BB77_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_14
.LBB77_24:                              # %for.end79
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_25:                              # %for.cond80
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB77_25 Depth=2
	movl	$0, -4(%rbp)
.LBB77_27:                              # %for.cond83
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB77_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_31
.LBB77_30:                              # %if.else102
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_31:                              # %if.end117
                                        #   in Loop: Header=BB77_27 Depth=3
	jmp	.LBB77_32
.LBB77_32:                              # %for.inc118
                                        #   in Loop: Header=BB77_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_27
.LBB77_33:                              # %for.end120
                                        #   in Loop: Header=BB77_25 Depth=2
	jmp	.LBB77_34
.LBB77_34:                              # %for.inc121
                                        #   in Loop: Header=BB77_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_25
.LBB77_35:                              # %for.end123
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_36:                              # %for.cond124
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB77_36 Depth=2
	movl	$0, -4(%rbp)
.LBB77_38:                              # %for.cond127
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB77_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_42
.LBB77_41:                              # %if.else146
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_42:                              # %if.end161
                                        #   in Loop: Header=BB77_38 Depth=3
	jmp	.LBB77_43
.LBB77_43:                              # %for.inc162
                                        #   in Loop: Header=BB77_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_38
.LBB77_44:                              # %for.end164
                                        #   in Loop: Header=BB77_36 Depth=2
	jmp	.LBB77_45
.LBB77_45:                              # %for.inc165
                                        #   in Loop: Header=BB77_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_36
.LBB77_46:                              # %for.end167
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_47:                              # %for.cond168
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_51
.LBB77_50:                              # %if.else184
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_51:                              # %if.end196
                                        #   in Loop: Header=BB77_47 Depth=2
	jmp	.LBB77_52
.LBB77_52:                              # %for.inc197
                                        #   in Loop: Header=BB77_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_47
.LBB77_53:                              # %for.end199
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_54:                              # %for.cond200
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_58
.LBB77_57:                              # %if.else216
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_58:                              # %if.end228
                                        #   in Loop: Header=BB77_54 Depth=2
	jmp	.LBB77_59
.LBB77_59:                              # %for.inc229
                                        #   in Loop: Header=BB77_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_54
.LBB77_60:                              # %for.end231
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_61:                              # %for.cond232
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB77_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_65
.LBB77_64:                              # %if.else248
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_65:                              # %if.end260
                                        #   in Loop: Header=BB77_61 Depth=2
	jmp	.LBB77_66
.LBB77_66:                              # %for.inc261
                                        #   in Loop: Header=BB77_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_61
.LBB77_67:                              # %for.end263
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_68:                              # %for.cond264
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB77_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_72
.LBB77_71:                              # %if.else280
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_72:                              # %if.end292
                                        #   in Loop: Header=BB77_68 Depth=2
	jmp	.LBB77_73
.LBB77_73:                              # %for.inc293
                                        #   in Loop: Header=BB77_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_68
.LBB77_74:                              # %for.end295
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_75:                              # %for.cond296
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_79
.LBB77_78:                              # %if.else312
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_79:                              # %if.end324
                                        #   in Loop: Header=BB77_75 Depth=2
	jmp	.LBB77_80
.LBB77_80:                              # %for.inc325
                                        #   in Loop: Header=BB77_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_75
.LBB77_81:                              # %for.end327
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_82:                              # %for.cond328
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB77_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB77_82 Depth=2
	movl	$0, -4(%rbp)
.LBB77_84:                              # %for.cond331
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB77_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_88
.LBB77_87:                              # %if.else350
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_88:                              # %if.end365
                                        #   in Loop: Header=BB77_84 Depth=3
	jmp	.LBB77_89
.LBB77_89:                              # %for.inc366
                                        #   in Loop: Header=BB77_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_84
.LBB77_90:                              # %for.end368
                                        #   in Loop: Header=BB77_82 Depth=2
	jmp	.LBB77_91
.LBB77_91:                              # %for.inc369
                                        #   in Loop: Header=BB77_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_82
.LBB77_92:                              # %for.end371
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_93:                              # %for.cond372
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB77_93 Depth=2
	movl	$0, -4(%rbp)
.LBB77_95:                              # %for.cond375
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB77_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_99
.LBB77_98:                              # %if.else394
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_99:                              # %if.end409
                                        #   in Loop: Header=BB77_95 Depth=3
	jmp	.LBB77_100
.LBB77_100:                             # %for.inc410
                                        #   in Loop: Header=BB77_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_95
.LBB77_101:                             # %for.end412
                                        #   in Loop: Header=BB77_93 Depth=2
	jmp	.LBB77_102
.LBB77_102:                             # %for.inc413
                                        #   in Loop: Header=BB77_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_93
.LBB77_103:                             # %for.end415
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_104:                             # %for.cond416
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB77_104 Depth=2
	movl	$0, -4(%rbp)
.LBB77_106:                             # %for.cond419
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_110
.LBB77_109:                             # %if.else438
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_110:                             # %if.end453
                                        #   in Loop: Header=BB77_106 Depth=3
	jmp	.LBB77_111
.LBB77_111:                             # %for.inc454
                                        #   in Loop: Header=BB77_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_106
.LBB77_112:                             # %for.end456
                                        #   in Loop: Header=BB77_104 Depth=2
	jmp	.LBB77_113
.LBB77_113:                             # %for.inc457
                                        #   in Loop: Header=BB77_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_104
.LBB77_114:                             # %for.end459
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_115:                             # %for.cond460
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB77_115 Depth=2
	movl	$0, -4(%rbp)
.LBB77_117:                             # %for.cond463
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_121
.LBB77_120:                             # %if.else482
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_121:                             # %if.end497
                                        #   in Loop: Header=BB77_117 Depth=3
	jmp	.LBB77_122
.LBB77_122:                             # %for.inc498
                                        #   in Loop: Header=BB77_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_117
.LBB77_123:                             # %for.end500
                                        #   in Loop: Header=BB77_115 Depth=2
	jmp	.LBB77_124
.LBB77_124:                             # %for.inc501
                                        #   in Loop: Header=BB77_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_115
.LBB77_125:                             # %for.end503
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_126:                             # %for.cond504
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB77_126 Depth=2
	movl	$0, -4(%rbp)
.LBB77_128:                             # %for.cond507
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB77_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_132
.LBB77_131:                             # %if.else526
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_132:                             # %if.end541
                                        #   in Loop: Header=BB77_128 Depth=3
	jmp	.LBB77_133
.LBB77_133:                             # %for.inc542
                                        #   in Loop: Header=BB77_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_128
.LBB77_134:                             # %for.end544
                                        #   in Loop: Header=BB77_126 Depth=2
	jmp	.LBB77_135
.LBB77_135:                             # %for.inc545
                                        #   in Loop: Header=BB77_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_126
.LBB77_136:                             # %for.end547
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_137:                             # %for.cond548
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB77_137 Depth=2
	movl	$0, -4(%rbp)
.LBB77_139:                             # %for.cond551
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB77_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_143
.LBB77_142:                             # %if.else570
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_143:                             # %if.end585
                                        #   in Loop: Header=BB77_139 Depth=3
	jmp	.LBB77_144
.LBB77_144:                             # %for.inc586
                                        #   in Loop: Header=BB77_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_139
.LBB77_145:                             # %for.end588
                                        #   in Loop: Header=BB77_137 Depth=2
	jmp	.LBB77_146
.LBB77_146:                             # %for.inc589
                                        #   in Loop: Header=BB77_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_137
.LBB77_147:                             # %for.end591
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_148:                             # %for.cond592
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB77_148 Depth=2
	movl	$0, -4(%rbp)
.LBB77_150:                             # %for.cond595
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_154
.LBB77_153:                             # %if.else614
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_154:                             # %if.end629
                                        #   in Loop: Header=BB77_150 Depth=3
	jmp	.LBB77_155
.LBB77_155:                             # %for.inc630
                                        #   in Loop: Header=BB77_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_150
.LBB77_156:                             # %for.end632
                                        #   in Loop: Header=BB77_148 Depth=2
	jmp	.LBB77_157
.LBB77_157:                             # %for.inc633
                                        #   in Loop: Header=BB77_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_148
.LBB77_158:                             # %for.end635
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_159:                             # %for.cond636
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB77_159 Depth=2
	movl	$0, -4(%rbp)
.LBB77_161:                             # %for.cond639
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_165
.LBB77_164:                             # %if.else658
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_165:                             # %if.end673
                                        #   in Loop: Header=BB77_161 Depth=3
	jmp	.LBB77_166
.LBB77_166:                             # %for.inc674
                                        #   in Loop: Header=BB77_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_161
.LBB77_167:                             # %for.end676
                                        #   in Loop: Header=BB77_159 Depth=2
	jmp	.LBB77_168
.LBB77_168:                             # %for.inc677
                                        #   in Loop: Header=BB77_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_159
.LBB77_169:                             # %for.end679
                                        #   in Loop: Header=BB77_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB77_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB77_171:                             # %if.end682
                                        #   in Loop: Header=BB77_1 Depth=1
	jmp	.LBB77_172
.LBB77_172:                             # %for.inc683
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_1
.LBB77_173:                             # %for.end685
	cmpl	$1033065853, -48(%rbp)  # imm = 0x3D93557D
	jne	.LBB77_175
.LBB77_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_174
.Lfunc_end77:
	.size	GetCtxModelNumber.70, .Lfunc_end77-GetCtxModelNumber.70
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.71
.LCPI78_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.71
	.p2align	4, 0x90
	.type	GetCtxModelNumber.71,@function
GetCtxModelNumber.71:                   # @GetCtxModelNumber.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1520002084, -48(%rbp)  # imm = 0x5A996424
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_3 Depth 2
                                        #       Child Loop BB78_5 Depth 3
                                        #     Child Loop BB78_14 Depth 2
                                        #       Child Loop BB78_16 Depth 3
                                        #     Child Loop BB78_25 Depth 2
                                        #       Child Loop BB78_27 Depth 3
                                        #     Child Loop BB78_36 Depth 2
                                        #       Child Loop BB78_38 Depth 3
                                        #     Child Loop BB78_47 Depth 2
                                        #     Child Loop BB78_54 Depth 2
                                        #     Child Loop BB78_61 Depth 2
                                        #     Child Loop BB78_68 Depth 2
                                        #     Child Loop BB78_75 Depth 2
                                        #     Child Loop BB78_82 Depth 2
                                        #       Child Loop BB78_84 Depth 3
                                        #     Child Loop BB78_93 Depth 2
                                        #       Child Loop BB78_95 Depth 3
                                        #     Child Loop BB78_104 Depth 2
                                        #       Child Loop BB78_106 Depth 3
                                        #     Child Loop BB78_115 Depth 2
                                        #       Child Loop BB78_117 Depth 3
                                        #     Child Loop BB78_126 Depth 2
                                        #       Child Loop BB78_128 Depth 3
                                        #     Child Loop BB78_137 Depth 2
                                        #       Child Loop BB78_139 Depth 3
                                        #     Child Loop BB78_148 Depth 2
                                        #       Child Loop BB78_150 Depth 3
                                        #     Child Loop BB78_159 Depth 2
                                        #       Child Loop BB78_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB78_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB78_3:                               # %for.cond2
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB78_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB78_3 Depth=2
	movl	$0, -4(%rbp)
.LBB78_5:                               # %for.cond5
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB78_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB78_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB78_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_9
.LBB78_8:                               # %if.else
                                        #   in Loop: Header=BB78_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_9:                               # %if.end
                                        #   in Loop: Header=BB78_5 Depth=3
	jmp	.LBB78_10
.LBB78_10:                              # %for.inc
                                        #   in Loop: Header=BB78_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_5
.LBB78_11:                              # %for.end
                                        #   in Loop: Header=BB78_3 Depth=2
	jmp	.LBB78_12
.LBB78_12:                              # %for.inc33
                                        #   in Loop: Header=BB78_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_3
.LBB78_13:                              # %for.end35
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_14:                              # %for.cond36
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB78_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB78_14 Depth=2
	movl	$0, -4(%rbp)
.LBB78_16:                              # %for.cond39
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB78_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB78_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB78_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_20
.LBB78_19:                              # %if.else58
                                        #   in Loop: Header=BB78_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_20:                              # %if.end73
                                        #   in Loop: Header=BB78_16 Depth=3
	jmp	.LBB78_21
.LBB78_21:                              # %for.inc74
                                        #   in Loop: Header=BB78_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_16
.LBB78_22:                              # %for.end76
                                        #   in Loop: Header=BB78_14 Depth=2
	jmp	.LBB78_23
.LBB78_23:                              # %for.inc77
                                        #   in Loop: Header=BB78_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_14
.LBB78_24:                              # %for.end79
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_25:                              # %for.cond80
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB78_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB78_25 Depth=2
	movl	$0, -4(%rbp)
.LBB78_27:                              # %for.cond83
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB78_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB78_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB78_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_31
.LBB78_30:                              # %if.else102
                                        #   in Loop: Header=BB78_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_31:                              # %if.end117
                                        #   in Loop: Header=BB78_27 Depth=3
	jmp	.LBB78_32
.LBB78_32:                              # %for.inc118
                                        #   in Loop: Header=BB78_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_27
.LBB78_33:                              # %for.end120
                                        #   in Loop: Header=BB78_25 Depth=2
	jmp	.LBB78_34
.LBB78_34:                              # %for.inc121
                                        #   in Loop: Header=BB78_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_25
.LBB78_35:                              # %for.end123
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_36:                              # %for.cond124
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB78_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB78_36 Depth=2
	movl	$0, -4(%rbp)
.LBB78_38:                              # %for.cond127
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB78_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB78_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB78_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_42
.LBB78_41:                              # %if.else146
                                        #   in Loop: Header=BB78_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_42:                              # %if.end161
                                        #   in Loop: Header=BB78_38 Depth=3
	jmp	.LBB78_43
.LBB78_43:                              # %for.inc162
                                        #   in Loop: Header=BB78_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_38
.LBB78_44:                              # %for.end164
                                        #   in Loop: Header=BB78_36 Depth=2
	jmp	.LBB78_45
.LBB78_45:                              # %for.inc165
                                        #   in Loop: Header=BB78_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_36
.LBB78_46:                              # %for.end167
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_47:                              # %for.cond168
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB78_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB78_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_51
.LBB78_50:                              # %if.else184
                                        #   in Loop: Header=BB78_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_51:                              # %if.end196
                                        #   in Loop: Header=BB78_47 Depth=2
	jmp	.LBB78_52
.LBB78_52:                              # %for.inc197
                                        #   in Loop: Header=BB78_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_47
.LBB78_53:                              # %for.end199
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_54:                              # %for.cond200
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB78_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB78_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_58
.LBB78_57:                              # %if.else216
                                        #   in Loop: Header=BB78_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_58:                              # %if.end228
                                        #   in Loop: Header=BB78_54 Depth=2
	jmp	.LBB78_59
.LBB78_59:                              # %for.inc229
                                        #   in Loop: Header=BB78_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_54
.LBB78_60:                              # %for.end231
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_61:                              # %for.cond232
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB78_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB78_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB78_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_65
.LBB78_64:                              # %if.else248
                                        #   in Loop: Header=BB78_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_65:                              # %if.end260
                                        #   in Loop: Header=BB78_61 Depth=2
	jmp	.LBB78_66
.LBB78_66:                              # %for.inc261
                                        #   in Loop: Header=BB78_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_61
.LBB78_67:                              # %for.end263
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_68:                              # %for.cond264
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB78_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB78_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB78_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_72
.LBB78_71:                              # %if.else280
                                        #   in Loop: Header=BB78_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_72:                              # %if.end292
                                        #   in Loop: Header=BB78_68 Depth=2
	jmp	.LBB78_73
.LBB78_73:                              # %for.inc293
                                        #   in Loop: Header=BB78_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_68
.LBB78_74:                              # %for.end295
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_75:                              # %for.cond296
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB78_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB78_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_79
.LBB78_78:                              # %if.else312
                                        #   in Loop: Header=BB78_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_79:                              # %if.end324
                                        #   in Loop: Header=BB78_75 Depth=2
	jmp	.LBB78_80
.LBB78_80:                              # %for.inc325
                                        #   in Loop: Header=BB78_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_75
.LBB78_81:                              # %for.end327
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_82:                              # %for.cond328
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB78_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB78_82 Depth=2
	movl	$0, -4(%rbp)
.LBB78_84:                              # %for.cond331
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB78_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB78_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB78_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_88
.LBB78_87:                              # %if.else350
                                        #   in Loop: Header=BB78_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_88:                              # %if.end365
                                        #   in Loop: Header=BB78_84 Depth=3
	jmp	.LBB78_89
.LBB78_89:                              # %for.inc366
                                        #   in Loop: Header=BB78_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_84
.LBB78_90:                              # %for.end368
                                        #   in Loop: Header=BB78_82 Depth=2
	jmp	.LBB78_91
.LBB78_91:                              # %for.inc369
                                        #   in Loop: Header=BB78_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_82
.LBB78_92:                              # %for.end371
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_93:                              # %for.cond372
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB78_93 Depth=2
	movl	$0, -4(%rbp)
.LBB78_95:                              # %for.cond375
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB78_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB78_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB78_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_99
.LBB78_98:                              # %if.else394
                                        #   in Loop: Header=BB78_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_99:                              # %if.end409
                                        #   in Loop: Header=BB78_95 Depth=3
	jmp	.LBB78_100
.LBB78_100:                             # %for.inc410
                                        #   in Loop: Header=BB78_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_95
.LBB78_101:                             # %for.end412
                                        #   in Loop: Header=BB78_93 Depth=2
	jmp	.LBB78_102
.LBB78_102:                             # %for.inc413
                                        #   in Loop: Header=BB78_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_93
.LBB78_103:                             # %for.end415
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_104:                             # %for.cond416
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB78_104 Depth=2
	movl	$0, -4(%rbp)
.LBB78_106:                             # %for.cond419
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB78_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB78_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB78_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_110
.LBB78_109:                             # %if.else438
                                        #   in Loop: Header=BB78_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_110:                             # %if.end453
                                        #   in Loop: Header=BB78_106 Depth=3
	jmp	.LBB78_111
.LBB78_111:                             # %for.inc454
                                        #   in Loop: Header=BB78_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_106
.LBB78_112:                             # %for.end456
                                        #   in Loop: Header=BB78_104 Depth=2
	jmp	.LBB78_113
.LBB78_113:                             # %for.inc457
                                        #   in Loop: Header=BB78_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_104
.LBB78_114:                             # %for.end459
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_115:                             # %for.cond460
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB78_115 Depth=2
	movl	$0, -4(%rbp)
.LBB78_117:                             # %for.cond463
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB78_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB78_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB78_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_121
.LBB78_120:                             # %if.else482
                                        #   in Loop: Header=BB78_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_121:                             # %if.end497
                                        #   in Loop: Header=BB78_117 Depth=3
	jmp	.LBB78_122
.LBB78_122:                             # %for.inc498
                                        #   in Loop: Header=BB78_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_117
.LBB78_123:                             # %for.end500
                                        #   in Loop: Header=BB78_115 Depth=2
	jmp	.LBB78_124
.LBB78_124:                             # %for.inc501
                                        #   in Loop: Header=BB78_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_115
.LBB78_125:                             # %for.end503
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_126:                             # %for.cond504
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB78_126 Depth=2
	movl	$0, -4(%rbp)
.LBB78_128:                             # %for.cond507
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB78_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB78_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB78_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_132
.LBB78_131:                             # %if.else526
                                        #   in Loop: Header=BB78_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_132:                             # %if.end541
                                        #   in Loop: Header=BB78_128 Depth=3
	jmp	.LBB78_133
.LBB78_133:                             # %for.inc542
                                        #   in Loop: Header=BB78_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_128
.LBB78_134:                             # %for.end544
                                        #   in Loop: Header=BB78_126 Depth=2
	jmp	.LBB78_135
.LBB78_135:                             # %for.inc545
                                        #   in Loop: Header=BB78_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_126
.LBB78_136:                             # %for.end547
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_137:                             # %for.cond548
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB78_137 Depth=2
	movl	$0, -4(%rbp)
.LBB78_139:                             # %for.cond551
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB78_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB78_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB78_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_143
.LBB78_142:                             # %if.else570
                                        #   in Loop: Header=BB78_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_143:                             # %if.end585
                                        #   in Loop: Header=BB78_139 Depth=3
	jmp	.LBB78_144
.LBB78_144:                             # %for.inc586
                                        #   in Loop: Header=BB78_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_139
.LBB78_145:                             # %for.end588
                                        #   in Loop: Header=BB78_137 Depth=2
	jmp	.LBB78_146
.LBB78_146:                             # %for.inc589
                                        #   in Loop: Header=BB78_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_137
.LBB78_147:                             # %for.end591
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_148:                             # %for.cond592
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB78_148 Depth=2
	movl	$0, -4(%rbp)
.LBB78_150:                             # %for.cond595
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB78_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB78_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB78_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_154
.LBB78_153:                             # %if.else614
                                        #   in Loop: Header=BB78_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_154:                             # %if.end629
                                        #   in Loop: Header=BB78_150 Depth=3
	jmp	.LBB78_155
.LBB78_155:                             # %for.inc630
                                        #   in Loop: Header=BB78_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_150
.LBB78_156:                             # %for.end632
                                        #   in Loop: Header=BB78_148 Depth=2
	jmp	.LBB78_157
.LBB78_157:                             # %for.inc633
                                        #   in Loop: Header=BB78_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_148
.LBB78_158:                             # %for.end635
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_159:                             # %for.cond636
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB78_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB78_159 Depth=2
	movl	$0, -4(%rbp)
.LBB78_161:                             # %for.cond639
                                        #   Parent Loop BB78_1 Depth=1
                                        #     Parent Loop BB78_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB78_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB78_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB78_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB78_165
.LBB78_164:                             # %if.else658
                                        #   in Loop: Header=BB78_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB78_165:                             # %if.end673
                                        #   in Loop: Header=BB78_161 Depth=3
	jmp	.LBB78_166
.LBB78_166:                             # %for.inc674
                                        #   in Loop: Header=BB78_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_161
.LBB78_167:                             # %for.end676
                                        #   in Loop: Header=BB78_159 Depth=2
	jmp	.LBB78_168
.LBB78_168:                             # %for.inc677
                                        #   in Loop: Header=BB78_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_159
.LBB78_169:                             # %for.end679
                                        #   in Loop: Header=BB78_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB78_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB78_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB78_171:                             # %if.end682
                                        #   in Loop: Header=BB78_1 Depth=1
	jmp	.LBB78_172
.LBB78_172:                             # %for.inc683
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_1
.LBB78_173:                             # %for.end685
	cmpl	$1520002084, -48(%rbp)  # imm = 0x5A996424
	jne	.LBB78_175
.LBB78_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_174
.Lfunc_end78:
	.size	GetCtxModelNumber.71, .Lfunc_end78-GetCtxModelNumber.71
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.72
.LCPI79_0:
	.quad	4607182418800017408     # double 1
.LCPI79_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI79_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI79_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.72
	.p2align	4, 0x90
	.type	XRate.72,@function
XRate.72:                               # @XRate.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1165877737, -32(%rbp)  # imm = 0x457DE1E9
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB79_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB79_3
.LBB79_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB79_3:                               # %cond.end
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI79_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI79_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI79_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB79_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB79_6
.LBB79_5:                               # %cond.false6
	vmovsd	.LCPI79_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI79_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI79_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB79_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB79_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB79_9
.LBB79_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB79_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB79_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB79_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB79_13
.LBB79_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB79_13:                              # %cond.end26
	jmp	.LBB79_15
.LBB79_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB79_15
.LBB79_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB79_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB79_18
.LBB79_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB79_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1165877737, -32(%rbp)  # imm = 0x457DE1E9
	jne	.LBB79_20
.LBB79_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB79_19
.Lfunc_end79:
	.size	XRate.72, .Lfunc_end79-XRate.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.73
.LCPI80_0:
	.quad	4611686018427387904     # double 2
.LCPI80_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.73
	.p2align	4, 0x90
	.type	create_context_memory.73,@function
create_context_memory.73:               # @create_context_memory.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1994773749, -20(%rbp)  # imm = 0x76E5D4F5
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB80_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB80_3
.LBB80_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB80_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB80_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB80_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB80_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB80_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB80_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_11:                              # %if.end10
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB80_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_13:                              # %if.end16
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$0, -8(%rbp)
.LBB80_14:                              # %for.cond17
                                        #   Parent Loop BB80_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB80_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB80_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB80_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_17:                              # %if.end28
                                        #   in Loop: Header=BB80_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB80_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_19:                              # %if.end39
                                        #   in Loop: Header=BB80_14 Depth=2
	jmp	.LBB80_20
.LBB80_20:                              # %for.inc
                                        #   in Loop: Header=BB80_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_14
.LBB80_21:                              # %for.end
                                        #   in Loop: Header=BB80_8 Depth=1
	jmp	.LBB80_22
.LBB80_22:                              # %for.inc40
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_8
.LBB80_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB80_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_26 Depth 2
                                        #       Child Loop BB80_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB80_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	$0, -8(%rbp)
.LBB80_26:                              # %for.cond47
                                        #   Parent Loop BB80_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB80_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB80_26 Depth=2
	movl	$0, -12(%rbp)
.LBB80_28:                              # %for.cond51
                                        #   Parent Loop BB80_24 Depth=1
                                        #     Parent Loop BB80_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB80_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB80_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB80_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_28
.LBB80_31:                              # %for.end63
                                        #   in Loop: Header=BB80_26 Depth=2
	jmp	.LBB80_32
.LBB80_32:                              # %for.inc64
                                        #   in Loop: Header=BB80_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_26
.LBB80_33:                              # %for.end66
                                        #   in Loop: Header=BB80_24 Depth=1
	jmp	.LBB80_34
.LBB80_34:                              # %for.inc67
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_24
.LBB80_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB80_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB80_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB80_36 Depth=1
	vmovsd	.LCPI80_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB80_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_36
.LBB80_39:                              # %for.end98
	cmpl	$1994773749, -20(%rbp)  # imm = 0x76E5D4F5
	jne	.LBB80_41
.LBB80_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_40
.Lfunc_end80:
	.size	create_context_memory.73, .Lfunc_end80-create_context_memory.73
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.74
.LCPI81_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.74
	.p2align	4, 0x90
	.type	GetCtxModelNumber.74,@function
GetCtxModelNumber.74:                   # @GetCtxModelNumber.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1717858064, -48(%rbp)  # imm = 0x66646F10
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_3 Depth 2
                                        #       Child Loop BB81_5 Depth 3
                                        #     Child Loop BB81_14 Depth 2
                                        #       Child Loop BB81_16 Depth 3
                                        #     Child Loop BB81_25 Depth 2
                                        #       Child Loop BB81_27 Depth 3
                                        #     Child Loop BB81_36 Depth 2
                                        #       Child Loop BB81_38 Depth 3
                                        #     Child Loop BB81_47 Depth 2
                                        #     Child Loop BB81_54 Depth 2
                                        #     Child Loop BB81_61 Depth 2
                                        #     Child Loop BB81_68 Depth 2
                                        #     Child Loop BB81_75 Depth 2
                                        #     Child Loop BB81_82 Depth 2
                                        #       Child Loop BB81_84 Depth 3
                                        #     Child Loop BB81_93 Depth 2
                                        #       Child Loop BB81_95 Depth 3
                                        #     Child Loop BB81_104 Depth 2
                                        #       Child Loop BB81_106 Depth 3
                                        #     Child Loop BB81_115 Depth 2
                                        #       Child Loop BB81_117 Depth 3
                                        #     Child Loop BB81_126 Depth 2
                                        #       Child Loop BB81_128 Depth 3
                                        #     Child Loop BB81_137 Depth 2
                                        #       Child Loop BB81_139 Depth 3
                                        #     Child Loop BB81_148 Depth 2
                                        #       Child Loop BB81_150 Depth 3
                                        #     Child Loop BB81_159 Depth 2
                                        #       Child Loop BB81_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB81_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB81_3:                               # %for.cond2
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB81_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	$0, -4(%rbp)
.LBB81_5:                               # %for.cond5
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB81_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB81_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB81_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_9
.LBB81_8:                               # %if.else
                                        #   in Loop: Header=BB81_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_9:                               # %if.end
                                        #   in Loop: Header=BB81_5 Depth=3
	jmp	.LBB81_10
.LBB81_10:                              # %for.inc
                                        #   in Loop: Header=BB81_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_5
.LBB81_11:                              # %for.end
                                        #   in Loop: Header=BB81_3 Depth=2
	jmp	.LBB81_12
.LBB81_12:                              # %for.inc33
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_3
.LBB81_13:                              # %for.end35
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_14:                              # %for.cond36
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB81_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB81_14 Depth=2
	movl	$0, -4(%rbp)
.LBB81_16:                              # %for.cond39
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB81_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB81_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB81_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_20
.LBB81_19:                              # %if.else58
                                        #   in Loop: Header=BB81_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_20:                              # %if.end73
                                        #   in Loop: Header=BB81_16 Depth=3
	jmp	.LBB81_21
.LBB81_21:                              # %for.inc74
                                        #   in Loop: Header=BB81_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_16
.LBB81_22:                              # %for.end76
                                        #   in Loop: Header=BB81_14 Depth=2
	jmp	.LBB81_23
.LBB81_23:                              # %for.inc77
                                        #   in Loop: Header=BB81_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_14
.LBB81_24:                              # %for.end79
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_25:                              # %for.cond80
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB81_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB81_25 Depth=2
	movl	$0, -4(%rbp)
.LBB81_27:                              # %for.cond83
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB81_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB81_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB81_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_31
.LBB81_30:                              # %if.else102
                                        #   in Loop: Header=BB81_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_31:                              # %if.end117
                                        #   in Loop: Header=BB81_27 Depth=3
	jmp	.LBB81_32
.LBB81_32:                              # %for.inc118
                                        #   in Loop: Header=BB81_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_27
.LBB81_33:                              # %for.end120
                                        #   in Loop: Header=BB81_25 Depth=2
	jmp	.LBB81_34
.LBB81_34:                              # %for.inc121
                                        #   in Loop: Header=BB81_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_25
.LBB81_35:                              # %for.end123
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_36:                              # %for.cond124
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB81_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB81_36 Depth=2
	movl	$0, -4(%rbp)
.LBB81_38:                              # %for.cond127
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB81_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB81_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB81_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_42
.LBB81_41:                              # %if.else146
                                        #   in Loop: Header=BB81_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_42:                              # %if.end161
                                        #   in Loop: Header=BB81_38 Depth=3
	jmp	.LBB81_43
.LBB81_43:                              # %for.inc162
                                        #   in Loop: Header=BB81_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_38
.LBB81_44:                              # %for.end164
                                        #   in Loop: Header=BB81_36 Depth=2
	jmp	.LBB81_45
.LBB81_45:                              # %for.inc165
                                        #   in Loop: Header=BB81_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_36
.LBB81_46:                              # %for.end167
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -4(%rbp)
.LBB81_47:                              # %for.cond168
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB81_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB81_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_51
.LBB81_50:                              # %if.else184
                                        #   in Loop: Header=BB81_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_51:                              # %if.end196
                                        #   in Loop: Header=BB81_47 Depth=2
	jmp	.LBB81_52
.LBB81_52:                              # %for.inc197
                                        #   in Loop: Header=BB81_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_47
.LBB81_53:                              # %for.end199
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -4(%rbp)
.LBB81_54:                              # %for.cond200
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB81_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB81_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_58
.LBB81_57:                              # %if.else216
                                        #   in Loop: Header=BB81_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_58:                              # %if.end228
                                        #   in Loop: Header=BB81_54 Depth=2
	jmp	.LBB81_59
.LBB81_59:                              # %for.inc229
                                        #   in Loop: Header=BB81_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_54
.LBB81_60:                              # %for.end231
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -4(%rbp)
.LBB81_61:                              # %for.cond232
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB81_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB81_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB81_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_65
.LBB81_64:                              # %if.else248
                                        #   in Loop: Header=BB81_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_65:                              # %if.end260
                                        #   in Loop: Header=BB81_61 Depth=2
	jmp	.LBB81_66
.LBB81_66:                              # %for.inc261
                                        #   in Loop: Header=BB81_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_61
.LBB81_67:                              # %for.end263
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -4(%rbp)
.LBB81_68:                              # %for.cond264
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB81_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB81_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB81_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_72
.LBB81_71:                              # %if.else280
                                        #   in Loop: Header=BB81_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_72:                              # %if.end292
                                        #   in Loop: Header=BB81_68 Depth=2
	jmp	.LBB81_73
.LBB81_73:                              # %for.inc293
                                        #   in Loop: Header=BB81_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_68
.LBB81_74:                              # %for.end295
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -4(%rbp)
.LBB81_75:                              # %for.cond296
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB81_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB81_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_79
.LBB81_78:                              # %if.else312
                                        #   in Loop: Header=BB81_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_79:                              # %if.end324
                                        #   in Loop: Header=BB81_75 Depth=2
	jmp	.LBB81_80
.LBB81_80:                              # %for.inc325
                                        #   in Loop: Header=BB81_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_75
.LBB81_81:                              # %for.end327
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_82:                              # %for.cond328
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB81_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB81_82 Depth=2
	movl	$0, -4(%rbp)
.LBB81_84:                              # %for.cond331
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB81_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB81_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB81_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_88
.LBB81_87:                              # %if.else350
                                        #   in Loop: Header=BB81_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_88:                              # %if.end365
                                        #   in Loop: Header=BB81_84 Depth=3
	jmp	.LBB81_89
.LBB81_89:                              # %for.inc366
                                        #   in Loop: Header=BB81_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_84
.LBB81_90:                              # %for.end368
                                        #   in Loop: Header=BB81_82 Depth=2
	jmp	.LBB81_91
.LBB81_91:                              # %for.inc369
                                        #   in Loop: Header=BB81_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_82
.LBB81_92:                              # %for.end371
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_93:                              # %for.cond372
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB81_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB81_93 Depth=2
	movl	$0, -4(%rbp)
.LBB81_95:                              # %for.cond375
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB81_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB81_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB81_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_99
.LBB81_98:                              # %if.else394
                                        #   in Loop: Header=BB81_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_99:                              # %if.end409
                                        #   in Loop: Header=BB81_95 Depth=3
	jmp	.LBB81_100
.LBB81_100:                             # %for.inc410
                                        #   in Loop: Header=BB81_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_95
.LBB81_101:                             # %for.end412
                                        #   in Loop: Header=BB81_93 Depth=2
	jmp	.LBB81_102
.LBB81_102:                             # %for.inc413
                                        #   in Loop: Header=BB81_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_93
.LBB81_103:                             # %for.end415
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_104:                             # %for.cond416
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB81_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB81_104 Depth=2
	movl	$0, -4(%rbp)
.LBB81_106:                             # %for.cond419
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB81_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB81_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB81_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_110
.LBB81_109:                             # %if.else438
                                        #   in Loop: Header=BB81_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_110:                             # %if.end453
                                        #   in Loop: Header=BB81_106 Depth=3
	jmp	.LBB81_111
.LBB81_111:                             # %for.inc454
                                        #   in Loop: Header=BB81_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_106
.LBB81_112:                             # %for.end456
                                        #   in Loop: Header=BB81_104 Depth=2
	jmp	.LBB81_113
.LBB81_113:                             # %for.inc457
                                        #   in Loop: Header=BB81_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_104
.LBB81_114:                             # %for.end459
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_115:                             # %for.cond460
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB81_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB81_115 Depth=2
	movl	$0, -4(%rbp)
.LBB81_117:                             # %for.cond463
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB81_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB81_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB81_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_121
.LBB81_120:                             # %if.else482
                                        #   in Loop: Header=BB81_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_121:                             # %if.end497
                                        #   in Loop: Header=BB81_117 Depth=3
	jmp	.LBB81_122
.LBB81_122:                             # %for.inc498
                                        #   in Loop: Header=BB81_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_117
.LBB81_123:                             # %for.end500
                                        #   in Loop: Header=BB81_115 Depth=2
	jmp	.LBB81_124
.LBB81_124:                             # %for.inc501
                                        #   in Loop: Header=BB81_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_115
.LBB81_125:                             # %for.end503
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_126:                             # %for.cond504
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB81_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB81_126 Depth=2
	movl	$0, -4(%rbp)
.LBB81_128:                             # %for.cond507
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB81_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB81_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB81_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_132
.LBB81_131:                             # %if.else526
                                        #   in Loop: Header=BB81_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_132:                             # %if.end541
                                        #   in Loop: Header=BB81_128 Depth=3
	jmp	.LBB81_133
.LBB81_133:                             # %for.inc542
                                        #   in Loop: Header=BB81_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_128
.LBB81_134:                             # %for.end544
                                        #   in Loop: Header=BB81_126 Depth=2
	jmp	.LBB81_135
.LBB81_135:                             # %for.inc545
                                        #   in Loop: Header=BB81_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_126
.LBB81_136:                             # %for.end547
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_137:                             # %for.cond548
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB81_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB81_137 Depth=2
	movl	$0, -4(%rbp)
.LBB81_139:                             # %for.cond551
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB81_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB81_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB81_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_143
.LBB81_142:                             # %if.else570
                                        #   in Loop: Header=BB81_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_143:                             # %if.end585
                                        #   in Loop: Header=BB81_139 Depth=3
	jmp	.LBB81_144
.LBB81_144:                             # %for.inc586
                                        #   in Loop: Header=BB81_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_139
.LBB81_145:                             # %for.end588
                                        #   in Loop: Header=BB81_137 Depth=2
	jmp	.LBB81_146
.LBB81_146:                             # %for.inc589
                                        #   in Loop: Header=BB81_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_137
.LBB81_147:                             # %for.end591
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_148:                             # %for.cond592
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB81_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB81_148 Depth=2
	movl	$0, -4(%rbp)
.LBB81_150:                             # %for.cond595
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB81_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB81_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB81_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_154
.LBB81_153:                             # %if.else614
                                        #   in Loop: Header=BB81_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_154:                             # %if.end629
                                        #   in Loop: Header=BB81_150 Depth=3
	jmp	.LBB81_155
.LBB81_155:                             # %for.inc630
                                        #   in Loop: Header=BB81_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_150
.LBB81_156:                             # %for.end632
                                        #   in Loop: Header=BB81_148 Depth=2
	jmp	.LBB81_157
.LBB81_157:                             # %for.inc633
                                        #   in Loop: Header=BB81_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_148
.LBB81_158:                             # %for.end635
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -8(%rbp)
.LBB81_159:                             # %for.cond636
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB81_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB81_159 Depth=2
	movl	$0, -4(%rbp)
.LBB81_161:                             # %for.cond639
                                        #   Parent Loop BB81_1 Depth=1
                                        #     Parent Loop BB81_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB81_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB81_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB81_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB81_165
.LBB81_164:                             # %if.else658
                                        #   in Loop: Header=BB81_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB81_165:                             # %if.end673
                                        #   in Loop: Header=BB81_161 Depth=3
	jmp	.LBB81_166
.LBB81_166:                             # %for.inc674
                                        #   in Loop: Header=BB81_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_161
.LBB81_167:                             # %for.end676
                                        #   in Loop: Header=BB81_159 Depth=2
	jmp	.LBB81_168
.LBB81_168:                             # %for.inc677
                                        #   in Loop: Header=BB81_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_159
.LBB81_169:                             # %for.end679
                                        #   in Loop: Header=BB81_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB81_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB81_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB81_171:                             # %if.end682
                                        #   in Loop: Header=BB81_1 Depth=1
	jmp	.LBB81_172
.LBB81_172:                             # %for.inc683
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_1
.LBB81_173:                             # %for.end685
	cmpl	$1717858064, -48(%rbp)  # imm = 0x66646F10
	jne	.LBB81_175
.LBB81_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_174
.Lfunc_end81:
	.size	GetCtxModelNumber.74, .Lfunc_end81-GetCtxModelNumber.74
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.75
.LCPI82_0:
	.quad	4611686018427387904     # double 2
.LCPI82_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.75
	.p2align	4, 0x90
	.type	create_context_memory.75,@function
create_context_memory.75:               # @create_context_memory.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1500527121, -20(%rbp)  # imm = 0x59703A11
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB82_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB82_3
.LBB82_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB82_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB82_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB82_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB82_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB82_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB82_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB82_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB82_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB82_11:                              # %if.end10
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB82_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB82_13:                              # %if.end16
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	$0, -8(%rbp)
.LBB82_14:                              # %for.cond17
                                        #   Parent Loop BB82_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB82_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB82_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB82_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB82_17:                              # %if.end28
                                        #   in Loop: Header=BB82_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB82_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB82_19:                              # %if.end39
                                        #   in Loop: Header=BB82_14 Depth=2
	jmp	.LBB82_20
.LBB82_20:                              # %for.inc
                                        #   in Loop: Header=BB82_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_14
.LBB82_21:                              # %for.end
                                        #   in Loop: Header=BB82_8 Depth=1
	jmp	.LBB82_22
.LBB82_22:                              # %for.inc40
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_8
.LBB82_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB82_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_26 Depth 2
                                        #       Child Loop BB82_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB82_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	$0, -8(%rbp)
.LBB82_26:                              # %for.cond47
                                        #   Parent Loop BB82_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB82_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB82_26 Depth=2
	movl	$0, -12(%rbp)
.LBB82_28:                              # %for.cond51
                                        #   Parent Loop BB82_24 Depth=1
                                        #     Parent Loop BB82_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB82_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB82_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB82_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_28
.LBB82_31:                              # %for.end63
                                        #   in Loop: Header=BB82_26 Depth=2
	jmp	.LBB82_32
.LBB82_32:                              # %for.inc64
                                        #   in Loop: Header=BB82_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_26
.LBB82_33:                              # %for.end66
                                        #   in Loop: Header=BB82_24 Depth=1
	jmp	.LBB82_34
.LBB82_34:                              # %for.inc67
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_24
.LBB82_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB82_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB82_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB82_36 Depth=1
	vmovsd	.LCPI82_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB82_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_36
.LBB82_39:                              # %for.end98
	cmpl	$1500527121, -20(%rbp)  # imm = 0x59703A11
	jne	.LBB82_41
.LBB82_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_40
.Lfunc_end82:
	.size	create_context_memory.75, .Lfunc_end82-create_context_memory.75
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.76
.LCPI83_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.76
	.p2align	4, 0x90
	.type	GetCtxModelNumber.76,@function
GetCtxModelNumber.76:                   # @GetCtxModelNumber.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI83_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1159234288, -48(%rbp)  # imm = 0x451882F0
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
                                        #       Child Loop BB83_5 Depth 3
                                        #     Child Loop BB83_14 Depth 2
                                        #       Child Loop BB83_16 Depth 3
                                        #     Child Loop BB83_25 Depth 2
                                        #       Child Loop BB83_27 Depth 3
                                        #     Child Loop BB83_36 Depth 2
                                        #       Child Loop BB83_38 Depth 3
                                        #     Child Loop BB83_47 Depth 2
                                        #     Child Loop BB83_54 Depth 2
                                        #     Child Loop BB83_61 Depth 2
                                        #     Child Loop BB83_68 Depth 2
                                        #     Child Loop BB83_75 Depth 2
                                        #     Child Loop BB83_82 Depth 2
                                        #       Child Loop BB83_84 Depth 3
                                        #     Child Loop BB83_93 Depth 2
                                        #       Child Loop BB83_95 Depth 3
                                        #     Child Loop BB83_104 Depth 2
                                        #       Child Loop BB83_106 Depth 3
                                        #     Child Loop BB83_115 Depth 2
                                        #       Child Loop BB83_117 Depth 3
                                        #     Child Loop BB83_126 Depth 2
                                        #       Child Loop BB83_128 Depth 3
                                        #     Child Loop BB83_137 Depth 2
                                        #       Child Loop BB83_139 Depth 3
                                        #     Child Loop BB83_148 Depth 2
                                        #       Child Loop BB83_150 Depth 3
                                        #     Child Loop BB83_159 Depth 2
                                        #       Child Loop BB83_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB83_3:                               # %for.cond2
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB83_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	$0, -4(%rbp)
.LBB83_5:                               # %for.cond5
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB83_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_9
.LBB83_8:                               # %if.else
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_9:                               # %if.end
                                        #   in Loop: Header=BB83_5 Depth=3
	jmp	.LBB83_10
.LBB83_10:                              # %for.inc
                                        #   in Loop: Header=BB83_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_5
.LBB83_11:                              # %for.end
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_12
.LBB83_12:                              # %for.inc33
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_3
.LBB83_13:                              # %for.end35
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_14:                              # %for.cond36
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB83_14 Depth=2
	movl	$0, -4(%rbp)
.LBB83_16:                              # %for.cond39
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB83_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_20
.LBB83_19:                              # %if.else58
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_20:                              # %if.end73
                                        #   in Loop: Header=BB83_16 Depth=3
	jmp	.LBB83_21
.LBB83_21:                              # %for.inc74
                                        #   in Loop: Header=BB83_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_16
.LBB83_22:                              # %for.end76
                                        #   in Loop: Header=BB83_14 Depth=2
	jmp	.LBB83_23
.LBB83_23:                              # %for.inc77
                                        #   in Loop: Header=BB83_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_14
.LBB83_24:                              # %for.end79
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_25:                              # %for.cond80
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB83_25 Depth=2
	movl	$0, -4(%rbp)
.LBB83_27:                              # %for.cond83
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB83_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_31
.LBB83_30:                              # %if.else102
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_31:                              # %if.end117
                                        #   in Loop: Header=BB83_27 Depth=3
	jmp	.LBB83_32
.LBB83_32:                              # %for.inc118
                                        #   in Loop: Header=BB83_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_27
.LBB83_33:                              # %for.end120
                                        #   in Loop: Header=BB83_25 Depth=2
	jmp	.LBB83_34
.LBB83_34:                              # %for.inc121
                                        #   in Loop: Header=BB83_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_25
.LBB83_35:                              # %for.end123
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_36:                              # %for.cond124
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB83_36 Depth=2
	movl	$0, -4(%rbp)
.LBB83_38:                              # %for.cond127
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB83_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_42
.LBB83_41:                              # %if.else146
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_42:                              # %if.end161
                                        #   in Loop: Header=BB83_38 Depth=3
	jmp	.LBB83_43
.LBB83_43:                              # %for.inc162
                                        #   in Loop: Header=BB83_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_38
.LBB83_44:                              # %for.end164
                                        #   in Loop: Header=BB83_36 Depth=2
	jmp	.LBB83_45
.LBB83_45:                              # %for.inc165
                                        #   in Loop: Header=BB83_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_36
.LBB83_46:                              # %for.end167
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_47:                              # %for.cond168
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_51
.LBB83_50:                              # %if.else184
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_51:                              # %if.end196
                                        #   in Loop: Header=BB83_47 Depth=2
	jmp	.LBB83_52
.LBB83_52:                              # %for.inc197
                                        #   in Loop: Header=BB83_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_47
.LBB83_53:                              # %for.end199
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_54:                              # %for.cond200
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_58
.LBB83_57:                              # %if.else216
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_58:                              # %if.end228
                                        #   in Loop: Header=BB83_54 Depth=2
	jmp	.LBB83_59
.LBB83_59:                              # %for.inc229
                                        #   in Loop: Header=BB83_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_54
.LBB83_60:                              # %for.end231
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_61:                              # %for.cond232
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB83_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_65
.LBB83_64:                              # %if.else248
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_65:                              # %if.end260
                                        #   in Loop: Header=BB83_61 Depth=2
	jmp	.LBB83_66
.LBB83_66:                              # %for.inc261
                                        #   in Loop: Header=BB83_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_61
.LBB83_67:                              # %for.end263
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_68:                              # %for.cond264
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB83_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_72
.LBB83_71:                              # %if.else280
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_72:                              # %if.end292
                                        #   in Loop: Header=BB83_68 Depth=2
	jmp	.LBB83_73
.LBB83_73:                              # %for.inc293
                                        #   in Loop: Header=BB83_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_68
.LBB83_74:                              # %for.end295
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_75:                              # %for.cond296
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_79
.LBB83_78:                              # %if.else312
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_79:                              # %if.end324
                                        #   in Loop: Header=BB83_75 Depth=2
	jmp	.LBB83_80
.LBB83_80:                              # %for.inc325
                                        #   in Loop: Header=BB83_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_75
.LBB83_81:                              # %for.end327
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_82:                              # %for.cond328
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB83_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB83_82 Depth=2
	movl	$0, -4(%rbp)
.LBB83_84:                              # %for.cond331
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB83_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_88
.LBB83_87:                              # %if.else350
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_88:                              # %if.end365
                                        #   in Loop: Header=BB83_84 Depth=3
	jmp	.LBB83_89
.LBB83_89:                              # %for.inc366
                                        #   in Loop: Header=BB83_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_84
.LBB83_90:                              # %for.end368
                                        #   in Loop: Header=BB83_82 Depth=2
	jmp	.LBB83_91
.LBB83_91:                              # %for.inc369
                                        #   in Loop: Header=BB83_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_82
.LBB83_92:                              # %for.end371
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_93:                              # %for.cond372
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB83_93 Depth=2
	movl	$0, -4(%rbp)
.LBB83_95:                              # %for.cond375
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB83_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_99
.LBB83_98:                              # %if.else394
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_99:                              # %if.end409
                                        #   in Loop: Header=BB83_95 Depth=3
	jmp	.LBB83_100
.LBB83_100:                             # %for.inc410
                                        #   in Loop: Header=BB83_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_95
.LBB83_101:                             # %for.end412
                                        #   in Loop: Header=BB83_93 Depth=2
	jmp	.LBB83_102
.LBB83_102:                             # %for.inc413
                                        #   in Loop: Header=BB83_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_93
.LBB83_103:                             # %for.end415
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_104:                             # %for.cond416
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB83_104 Depth=2
	movl	$0, -4(%rbp)
.LBB83_106:                             # %for.cond419
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_110
.LBB83_109:                             # %if.else438
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_110:                             # %if.end453
                                        #   in Loop: Header=BB83_106 Depth=3
	jmp	.LBB83_111
.LBB83_111:                             # %for.inc454
                                        #   in Loop: Header=BB83_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_106
.LBB83_112:                             # %for.end456
                                        #   in Loop: Header=BB83_104 Depth=2
	jmp	.LBB83_113
.LBB83_113:                             # %for.inc457
                                        #   in Loop: Header=BB83_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_104
.LBB83_114:                             # %for.end459
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_115:                             # %for.cond460
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB83_115 Depth=2
	movl	$0, -4(%rbp)
.LBB83_117:                             # %for.cond463
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_121
.LBB83_120:                             # %if.else482
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_121:                             # %if.end497
                                        #   in Loop: Header=BB83_117 Depth=3
	jmp	.LBB83_122
.LBB83_122:                             # %for.inc498
                                        #   in Loop: Header=BB83_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_117
.LBB83_123:                             # %for.end500
                                        #   in Loop: Header=BB83_115 Depth=2
	jmp	.LBB83_124
.LBB83_124:                             # %for.inc501
                                        #   in Loop: Header=BB83_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_115
.LBB83_125:                             # %for.end503
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_126:                             # %for.cond504
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB83_126 Depth=2
	movl	$0, -4(%rbp)
.LBB83_128:                             # %for.cond507
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB83_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_132
.LBB83_131:                             # %if.else526
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_132:                             # %if.end541
                                        #   in Loop: Header=BB83_128 Depth=3
	jmp	.LBB83_133
.LBB83_133:                             # %for.inc542
                                        #   in Loop: Header=BB83_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_128
.LBB83_134:                             # %for.end544
                                        #   in Loop: Header=BB83_126 Depth=2
	jmp	.LBB83_135
.LBB83_135:                             # %for.inc545
                                        #   in Loop: Header=BB83_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_126
.LBB83_136:                             # %for.end547
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_137:                             # %for.cond548
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB83_137 Depth=2
	movl	$0, -4(%rbp)
.LBB83_139:                             # %for.cond551
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB83_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_143
.LBB83_142:                             # %if.else570
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_143:                             # %if.end585
                                        #   in Loop: Header=BB83_139 Depth=3
	jmp	.LBB83_144
.LBB83_144:                             # %for.inc586
                                        #   in Loop: Header=BB83_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_139
.LBB83_145:                             # %for.end588
                                        #   in Loop: Header=BB83_137 Depth=2
	jmp	.LBB83_146
.LBB83_146:                             # %for.inc589
                                        #   in Loop: Header=BB83_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_137
.LBB83_147:                             # %for.end591
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_148:                             # %for.cond592
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB83_148 Depth=2
	movl	$0, -4(%rbp)
.LBB83_150:                             # %for.cond595
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_154
.LBB83_153:                             # %if.else614
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_154:                             # %if.end629
                                        #   in Loop: Header=BB83_150 Depth=3
	jmp	.LBB83_155
.LBB83_155:                             # %for.inc630
                                        #   in Loop: Header=BB83_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_150
.LBB83_156:                             # %for.end632
                                        #   in Loop: Header=BB83_148 Depth=2
	jmp	.LBB83_157
.LBB83_157:                             # %for.inc633
                                        #   in Loop: Header=BB83_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_148
.LBB83_158:                             # %for.end635
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_159:                             # %for.cond636
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB83_159 Depth=2
	movl	$0, -4(%rbp)
.LBB83_161:                             # %for.cond639
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_165
.LBB83_164:                             # %if.else658
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_165:                             # %if.end673
                                        #   in Loop: Header=BB83_161 Depth=3
	jmp	.LBB83_166
.LBB83_166:                             # %for.inc674
                                        #   in Loop: Header=BB83_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_161
.LBB83_167:                             # %for.end676
                                        #   in Loop: Header=BB83_159 Depth=2
	jmp	.LBB83_168
.LBB83_168:                             # %for.inc677
                                        #   in Loop: Header=BB83_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_159
.LBB83_169:                             # %for.end679
                                        #   in Loop: Header=BB83_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB83_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB83_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB83_171:                             # %if.end682
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_172
.LBB83_172:                             # %for.inc683
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_1
.LBB83_173:                             # %for.end685
	cmpl	$1159234288, -48(%rbp)  # imm = 0x451882F0
	jne	.LBB83_175
.LBB83_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_174
.Lfunc_end83:
	.size	GetCtxModelNumber.76, .Lfunc_end83-GetCtxModelNumber.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.77
.LCPI84_0:
	.quad	4611686018427387904     # double 2
.LCPI84_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.77
	.p2align	4, 0x90
	.type	create_context_memory.77,@function
create_context_memory.77:               # @create_context_memory.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$511166732, -20(%rbp)   # imm = 0x1E77C90C
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB84_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB84_3
.LBB84_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB84_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB84_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB84_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB84_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB84_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB84_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB84_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB84_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB84_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB84_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB84_11:                              # %if.end10
                                        #   in Loop: Header=BB84_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB84_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB84_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB84_13:                              # %if.end16
                                        #   in Loop: Header=BB84_8 Depth=1
	movl	$0, -8(%rbp)
.LBB84_14:                              # %for.cond17
                                        #   Parent Loop BB84_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB84_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB84_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB84_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB84_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB84_17:                              # %if.end28
                                        #   in Loop: Header=BB84_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB84_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB84_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB84_19:                              # %if.end39
                                        #   in Loop: Header=BB84_14 Depth=2
	jmp	.LBB84_20
.LBB84_20:                              # %for.inc
                                        #   in Loop: Header=BB84_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_14
.LBB84_21:                              # %for.end
                                        #   in Loop: Header=BB84_8 Depth=1
	jmp	.LBB84_22
.LBB84_22:                              # %for.inc40
                                        #   in Loop: Header=BB84_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_8
.LBB84_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB84_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_26 Depth 2
                                        #       Child Loop BB84_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB84_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB84_24 Depth=1
	movl	$0, -8(%rbp)
.LBB84_26:                              # %for.cond47
                                        #   Parent Loop BB84_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB84_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB84_26 Depth=2
	movl	$0, -12(%rbp)
.LBB84_28:                              # %for.cond51
                                        #   Parent Loop BB84_24 Depth=1
                                        #     Parent Loop BB84_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB84_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB84_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB84_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_28
.LBB84_31:                              # %for.end63
                                        #   in Loop: Header=BB84_26 Depth=2
	jmp	.LBB84_32
.LBB84_32:                              # %for.inc64
                                        #   in Loop: Header=BB84_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_26
.LBB84_33:                              # %for.end66
                                        #   in Loop: Header=BB84_24 Depth=1
	jmp	.LBB84_34
.LBB84_34:                              # %for.inc67
                                        #   in Loop: Header=BB84_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_24
.LBB84_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB84_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB84_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB84_36 Depth=1
	vmovsd	.LCPI84_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB84_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_36
.LBB84_39:                              # %for.end98
	cmpl	$511166732, -20(%rbp)   # imm = 0x1E77C90C
	jne	.LBB84_41
.LBB84_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_40
.Lfunc_end84:
	.size	create_context_memory.77, .Lfunc_end84-create_context_memory.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.78
.LCPI85_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.78
	.p2align	4, 0x90
	.type	GetCtxModelNumber.78,@function
GetCtxModelNumber.78:                   # @GetCtxModelNumber.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1655877270, -48(%rbp)  # imm = 0x62B2AE96
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_3 Depth 2
                                        #       Child Loop BB85_5 Depth 3
                                        #     Child Loop BB85_14 Depth 2
                                        #       Child Loop BB85_16 Depth 3
                                        #     Child Loop BB85_25 Depth 2
                                        #       Child Loop BB85_27 Depth 3
                                        #     Child Loop BB85_36 Depth 2
                                        #       Child Loop BB85_38 Depth 3
                                        #     Child Loop BB85_47 Depth 2
                                        #     Child Loop BB85_54 Depth 2
                                        #     Child Loop BB85_61 Depth 2
                                        #     Child Loop BB85_68 Depth 2
                                        #     Child Loop BB85_75 Depth 2
                                        #     Child Loop BB85_82 Depth 2
                                        #       Child Loop BB85_84 Depth 3
                                        #     Child Loop BB85_93 Depth 2
                                        #       Child Loop BB85_95 Depth 3
                                        #     Child Loop BB85_104 Depth 2
                                        #       Child Loop BB85_106 Depth 3
                                        #     Child Loop BB85_115 Depth 2
                                        #       Child Loop BB85_117 Depth 3
                                        #     Child Loop BB85_126 Depth 2
                                        #       Child Loop BB85_128 Depth 3
                                        #     Child Loop BB85_137 Depth 2
                                        #       Child Loop BB85_139 Depth 3
                                        #     Child Loop BB85_148 Depth 2
                                        #       Child Loop BB85_150 Depth 3
                                        #     Child Loop BB85_159 Depth 2
                                        #       Child Loop BB85_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB85_3:                               # %for.cond2
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB85_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	$0, -4(%rbp)
.LBB85_5:                               # %for.cond5
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB85_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB85_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB85_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_9
.LBB85_8:                               # %if.else
                                        #   in Loop: Header=BB85_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_9:                               # %if.end
                                        #   in Loop: Header=BB85_5 Depth=3
	jmp	.LBB85_10
.LBB85_10:                              # %for.inc
                                        #   in Loop: Header=BB85_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_5
.LBB85_11:                              # %for.end
                                        #   in Loop: Header=BB85_3 Depth=2
	jmp	.LBB85_12
.LBB85_12:                              # %for.inc33
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_3
.LBB85_13:                              # %for.end35
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_14:                              # %for.cond36
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB85_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB85_14 Depth=2
	movl	$0, -4(%rbp)
.LBB85_16:                              # %for.cond39
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB85_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB85_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB85_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_20
.LBB85_19:                              # %if.else58
                                        #   in Loop: Header=BB85_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_20:                              # %if.end73
                                        #   in Loop: Header=BB85_16 Depth=3
	jmp	.LBB85_21
.LBB85_21:                              # %for.inc74
                                        #   in Loop: Header=BB85_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_16
.LBB85_22:                              # %for.end76
                                        #   in Loop: Header=BB85_14 Depth=2
	jmp	.LBB85_23
.LBB85_23:                              # %for.inc77
                                        #   in Loop: Header=BB85_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_14
.LBB85_24:                              # %for.end79
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_25:                              # %for.cond80
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB85_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB85_25 Depth=2
	movl	$0, -4(%rbp)
.LBB85_27:                              # %for.cond83
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB85_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB85_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB85_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_31
.LBB85_30:                              # %if.else102
                                        #   in Loop: Header=BB85_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_31:                              # %if.end117
                                        #   in Loop: Header=BB85_27 Depth=3
	jmp	.LBB85_32
.LBB85_32:                              # %for.inc118
                                        #   in Loop: Header=BB85_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_27
.LBB85_33:                              # %for.end120
                                        #   in Loop: Header=BB85_25 Depth=2
	jmp	.LBB85_34
.LBB85_34:                              # %for.inc121
                                        #   in Loop: Header=BB85_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_25
.LBB85_35:                              # %for.end123
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_36:                              # %for.cond124
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB85_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB85_36 Depth=2
	movl	$0, -4(%rbp)
.LBB85_38:                              # %for.cond127
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB85_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB85_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB85_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_42
.LBB85_41:                              # %if.else146
                                        #   in Loop: Header=BB85_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_42:                              # %if.end161
                                        #   in Loop: Header=BB85_38 Depth=3
	jmp	.LBB85_43
.LBB85_43:                              # %for.inc162
                                        #   in Loop: Header=BB85_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_38
.LBB85_44:                              # %for.end164
                                        #   in Loop: Header=BB85_36 Depth=2
	jmp	.LBB85_45
.LBB85_45:                              # %for.inc165
                                        #   in Loop: Header=BB85_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_36
.LBB85_46:                              # %for.end167
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_47:                              # %for.cond168
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB85_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB85_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_51
.LBB85_50:                              # %if.else184
                                        #   in Loop: Header=BB85_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_51:                              # %if.end196
                                        #   in Loop: Header=BB85_47 Depth=2
	jmp	.LBB85_52
.LBB85_52:                              # %for.inc197
                                        #   in Loop: Header=BB85_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_47
.LBB85_53:                              # %for.end199
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_54:                              # %for.cond200
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB85_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB85_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_58
.LBB85_57:                              # %if.else216
                                        #   in Loop: Header=BB85_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_58:                              # %if.end228
                                        #   in Loop: Header=BB85_54 Depth=2
	jmp	.LBB85_59
.LBB85_59:                              # %for.inc229
                                        #   in Loop: Header=BB85_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_54
.LBB85_60:                              # %for.end231
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_61:                              # %for.cond232
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB85_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB85_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB85_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_65
.LBB85_64:                              # %if.else248
                                        #   in Loop: Header=BB85_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_65:                              # %if.end260
                                        #   in Loop: Header=BB85_61 Depth=2
	jmp	.LBB85_66
.LBB85_66:                              # %for.inc261
                                        #   in Loop: Header=BB85_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_61
.LBB85_67:                              # %for.end263
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_68:                              # %for.cond264
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB85_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB85_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB85_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_72
.LBB85_71:                              # %if.else280
                                        #   in Loop: Header=BB85_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_72:                              # %if.end292
                                        #   in Loop: Header=BB85_68 Depth=2
	jmp	.LBB85_73
.LBB85_73:                              # %for.inc293
                                        #   in Loop: Header=BB85_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_68
.LBB85_74:                              # %for.end295
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_75:                              # %for.cond296
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB85_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB85_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_79
.LBB85_78:                              # %if.else312
                                        #   in Loop: Header=BB85_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_79:                              # %if.end324
                                        #   in Loop: Header=BB85_75 Depth=2
	jmp	.LBB85_80
.LBB85_80:                              # %for.inc325
                                        #   in Loop: Header=BB85_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_75
.LBB85_81:                              # %for.end327
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_82:                              # %for.cond328
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB85_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB85_82 Depth=2
	movl	$0, -4(%rbp)
.LBB85_84:                              # %for.cond331
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB85_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB85_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB85_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_88
.LBB85_87:                              # %if.else350
                                        #   in Loop: Header=BB85_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_88:                              # %if.end365
                                        #   in Loop: Header=BB85_84 Depth=3
	jmp	.LBB85_89
.LBB85_89:                              # %for.inc366
                                        #   in Loop: Header=BB85_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_84
.LBB85_90:                              # %for.end368
                                        #   in Loop: Header=BB85_82 Depth=2
	jmp	.LBB85_91
.LBB85_91:                              # %for.inc369
                                        #   in Loop: Header=BB85_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_82
.LBB85_92:                              # %for.end371
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_93:                              # %for.cond372
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB85_93 Depth=2
	movl	$0, -4(%rbp)
.LBB85_95:                              # %for.cond375
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB85_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB85_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB85_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_99
.LBB85_98:                              # %if.else394
                                        #   in Loop: Header=BB85_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_99:                              # %if.end409
                                        #   in Loop: Header=BB85_95 Depth=3
	jmp	.LBB85_100
.LBB85_100:                             # %for.inc410
                                        #   in Loop: Header=BB85_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_95
.LBB85_101:                             # %for.end412
                                        #   in Loop: Header=BB85_93 Depth=2
	jmp	.LBB85_102
.LBB85_102:                             # %for.inc413
                                        #   in Loop: Header=BB85_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_93
.LBB85_103:                             # %for.end415
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_104:                             # %for.cond416
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB85_104 Depth=2
	movl	$0, -4(%rbp)
.LBB85_106:                             # %for.cond419
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB85_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB85_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB85_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_110
.LBB85_109:                             # %if.else438
                                        #   in Loop: Header=BB85_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_110:                             # %if.end453
                                        #   in Loop: Header=BB85_106 Depth=3
	jmp	.LBB85_111
.LBB85_111:                             # %for.inc454
                                        #   in Loop: Header=BB85_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_106
.LBB85_112:                             # %for.end456
                                        #   in Loop: Header=BB85_104 Depth=2
	jmp	.LBB85_113
.LBB85_113:                             # %for.inc457
                                        #   in Loop: Header=BB85_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_104
.LBB85_114:                             # %for.end459
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_115:                             # %for.cond460
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB85_115 Depth=2
	movl	$0, -4(%rbp)
.LBB85_117:                             # %for.cond463
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB85_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB85_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB85_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_121
.LBB85_120:                             # %if.else482
                                        #   in Loop: Header=BB85_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_121:                             # %if.end497
                                        #   in Loop: Header=BB85_117 Depth=3
	jmp	.LBB85_122
.LBB85_122:                             # %for.inc498
                                        #   in Loop: Header=BB85_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_117
.LBB85_123:                             # %for.end500
                                        #   in Loop: Header=BB85_115 Depth=2
	jmp	.LBB85_124
.LBB85_124:                             # %for.inc501
                                        #   in Loop: Header=BB85_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_115
.LBB85_125:                             # %for.end503
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_126:                             # %for.cond504
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB85_126 Depth=2
	movl	$0, -4(%rbp)
.LBB85_128:                             # %for.cond507
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB85_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB85_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB85_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_132
.LBB85_131:                             # %if.else526
                                        #   in Loop: Header=BB85_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_132:                             # %if.end541
                                        #   in Loop: Header=BB85_128 Depth=3
	jmp	.LBB85_133
.LBB85_133:                             # %for.inc542
                                        #   in Loop: Header=BB85_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_128
.LBB85_134:                             # %for.end544
                                        #   in Loop: Header=BB85_126 Depth=2
	jmp	.LBB85_135
.LBB85_135:                             # %for.inc545
                                        #   in Loop: Header=BB85_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_126
.LBB85_136:                             # %for.end547
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_137:                             # %for.cond548
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB85_137 Depth=2
	movl	$0, -4(%rbp)
.LBB85_139:                             # %for.cond551
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB85_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB85_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB85_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_143
.LBB85_142:                             # %if.else570
                                        #   in Loop: Header=BB85_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_143:                             # %if.end585
                                        #   in Loop: Header=BB85_139 Depth=3
	jmp	.LBB85_144
.LBB85_144:                             # %for.inc586
                                        #   in Loop: Header=BB85_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_139
.LBB85_145:                             # %for.end588
                                        #   in Loop: Header=BB85_137 Depth=2
	jmp	.LBB85_146
.LBB85_146:                             # %for.inc589
                                        #   in Loop: Header=BB85_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_137
.LBB85_147:                             # %for.end591
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_148:                             # %for.cond592
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB85_148 Depth=2
	movl	$0, -4(%rbp)
.LBB85_150:                             # %for.cond595
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB85_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB85_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB85_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_154
.LBB85_153:                             # %if.else614
                                        #   in Loop: Header=BB85_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_154:                             # %if.end629
                                        #   in Loop: Header=BB85_150 Depth=3
	jmp	.LBB85_155
.LBB85_155:                             # %for.inc630
                                        #   in Loop: Header=BB85_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_150
.LBB85_156:                             # %for.end632
                                        #   in Loop: Header=BB85_148 Depth=2
	jmp	.LBB85_157
.LBB85_157:                             # %for.inc633
                                        #   in Loop: Header=BB85_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_148
.LBB85_158:                             # %for.end635
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_159:                             # %for.cond636
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB85_159 Depth=2
	movl	$0, -4(%rbp)
.LBB85_161:                             # %for.cond639
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB85_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB85_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB85_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_165
.LBB85_164:                             # %if.else658
                                        #   in Loop: Header=BB85_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_165:                             # %if.end673
                                        #   in Loop: Header=BB85_161 Depth=3
	jmp	.LBB85_166
.LBB85_166:                             # %for.inc674
                                        #   in Loop: Header=BB85_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_161
.LBB85_167:                             # %for.end676
                                        #   in Loop: Header=BB85_159 Depth=2
	jmp	.LBB85_168
.LBB85_168:                             # %for.inc677
                                        #   in Loop: Header=BB85_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_159
.LBB85_169:                             # %for.end679
                                        #   in Loop: Header=BB85_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB85_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB85_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB85_171:                             # %if.end682
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_172
.LBB85_172:                             # %for.inc683
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_1
.LBB85_173:                             # %for.end685
	cmpl	$1655877270, -48(%rbp)  # imm = 0x62B2AE96
	jne	.LBB85_175
.LBB85_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_174
.Lfunc_end85:
	.size	GetCtxModelNumber.78, .Lfunc_end85-GetCtxModelNumber.78
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.79
.LCPI86_0:
	.quad	4607182418800017408     # double 1
.LCPI86_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI86_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI86_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.79
	.p2align	4, 0x90
	.type	XRate.79,@function
XRate.79:                               # @XRate.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$2059250930, -36(%rbp)  # imm = 0x7ABDACF2
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB86_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB86_3
.LBB86_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB86_3:                               # %cond.end
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI86_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI86_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI86_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB86_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB86_6
.LBB86_5:                               # %cond.false6
	vmovsd	.LCPI86_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI86_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI86_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB86_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB86_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB86_9
.LBB86_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB86_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB86_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB86_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB86_13
.LBB86_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB86_13:                              # %cond.end26
	jmp	.LBB86_15
.LBB86_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB86_15
.LBB86_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB86_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB86_18
.LBB86_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB86_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2059250930, -36(%rbp)  # imm = 0x7ABDACF2
	jne	.LBB86_20
.LBB86_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB86_19
.Lfunc_end86:
	.size	XRate.79, .Lfunc_end86-XRate.79
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.80
.LCPI87_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.80
	.p2align	4, 0x90
	.type	GetCtxModelNumber.80,@function
GetCtxModelNumber.80:                   # @GetCtxModelNumber.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1373740872, -44(%rbp)  # imm = 0x51E19F48
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_3 Depth 2
                                        #       Child Loop BB87_5 Depth 3
                                        #     Child Loop BB87_14 Depth 2
                                        #       Child Loop BB87_16 Depth 3
                                        #     Child Loop BB87_25 Depth 2
                                        #       Child Loop BB87_27 Depth 3
                                        #     Child Loop BB87_36 Depth 2
                                        #       Child Loop BB87_38 Depth 3
                                        #     Child Loop BB87_47 Depth 2
                                        #     Child Loop BB87_54 Depth 2
                                        #     Child Loop BB87_61 Depth 2
                                        #     Child Loop BB87_68 Depth 2
                                        #     Child Loop BB87_75 Depth 2
                                        #     Child Loop BB87_82 Depth 2
                                        #       Child Loop BB87_84 Depth 3
                                        #     Child Loop BB87_93 Depth 2
                                        #       Child Loop BB87_95 Depth 3
                                        #     Child Loop BB87_104 Depth 2
                                        #       Child Loop BB87_106 Depth 3
                                        #     Child Loop BB87_115 Depth 2
                                        #       Child Loop BB87_117 Depth 3
                                        #     Child Loop BB87_126 Depth 2
                                        #       Child Loop BB87_128 Depth 3
                                        #     Child Loop BB87_137 Depth 2
                                        #       Child Loop BB87_139 Depth 3
                                        #     Child Loop BB87_148 Depth 2
                                        #       Child Loop BB87_150 Depth 3
                                        #     Child Loop BB87_159 Depth 2
                                        #       Child Loop BB87_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB87_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB87_3:                               # %for.cond2
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB87_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	$0, -4(%rbp)
.LBB87_5:                               # %for.cond5
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB87_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB87_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB87_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_9
.LBB87_8:                               # %if.else
                                        #   in Loop: Header=BB87_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_9:                               # %if.end
                                        #   in Loop: Header=BB87_5 Depth=3
	jmp	.LBB87_10
.LBB87_10:                              # %for.inc
                                        #   in Loop: Header=BB87_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_5
.LBB87_11:                              # %for.end
                                        #   in Loop: Header=BB87_3 Depth=2
	jmp	.LBB87_12
.LBB87_12:                              # %for.inc33
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_3
.LBB87_13:                              # %for.end35
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_14:                              # %for.cond36
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB87_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB87_14 Depth=2
	movl	$0, -4(%rbp)
.LBB87_16:                              # %for.cond39
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB87_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB87_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB87_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_20
.LBB87_19:                              # %if.else58
                                        #   in Loop: Header=BB87_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_20:                              # %if.end73
                                        #   in Loop: Header=BB87_16 Depth=3
	jmp	.LBB87_21
.LBB87_21:                              # %for.inc74
                                        #   in Loop: Header=BB87_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_16
.LBB87_22:                              # %for.end76
                                        #   in Loop: Header=BB87_14 Depth=2
	jmp	.LBB87_23
.LBB87_23:                              # %for.inc77
                                        #   in Loop: Header=BB87_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_14
.LBB87_24:                              # %for.end79
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_25:                              # %for.cond80
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB87_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB87_25 Depth=2
	movl	$0, -4(%rbp)
.LBB87_27:                              # %for.cond83
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB87_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB87_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB87_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_31
.LBB87_30:                              # %if.else102
                                        #   in Loop: Header=BB87_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_31:                              # %if.end117
                                        #   in Loop: Header=BB87_27 Depth=3
	jmp	.LBB87_32
.LBB87_32:                              # %for.inc118
                                        #   in Loop: Header=BB87_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_27
.LBB87_33:                              # %for.end120
                                        #   in Loop: Header=BB87_25 Depth=2
	jmp	.LBB87_34
.LBB87_34:                              # %for.inc121
                                        #   in Loop: Header=BB87_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_25
.LBB87_35:                              # %for.end123
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_36:                              # %for.cond124
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB87_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB87_36 Depth=2
	movl	$0, -4(%rbp)
.LBB87_38:                              # %for.cond127
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB87_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB87_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB87_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_42
.LBB87_41:                              # %if.else146
                                        #   in Loop: Header=BB87_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_42:                              # %if.end161
                                        #   in Loop: Header=BB87_38 Depth=3
	jmp	.LBB87_43
.LBB87_43:                              # %for.inc162
                                        #   in Loop: Header=BB87_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_38
.LBB87_44:                              # %for.end164
                                        #   in Loop: Header=BB87_36 Depth=2
	jmp	.LBB87_45
.LBB87_45:                              # %for.inc165
                                        #   in Loop: Header=BB87_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_36
.LBB87_46:                              # %for.end167
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_47:                              # %for.cond168
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB87_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB87_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_51
.LBB87_50:                              # %if.else184
                                        #   in Loop: Header=BB87_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_51:                              # %if.end196
                                        #   in Loop: Header=BB87_47 Depth=2
	jmp	.LBB87_52
.LBB87_52:                              # %for.inc197
                                        #   in Loop: Header=BB87_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_47
.LBB87_53:                              # %for.end199
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_54:                              # %for.cond200
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB87_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB87_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_58
.LBB87_57:                              # %if.else216
                                        #   in Loop: Header=BB87_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_58:                              # %if.end228
                                        #   in Loop: Header=BB87_54 Depth=2
	jmp	.LBB87_59
.LBB87_59:                              # %for.inc229
                                        #   in Loop: Header=BB87_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_54
.LBB87_60:                              # %for.end231
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_61:                              # %for.cond232
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB87_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB87_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB87_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_65
.LBB87_64:                              # %if.else248
                                        #   in Loop: Header=BB87_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_65:                              # %if.end260
                                        #   in Loop: Header=BB87_61 Depth=2
	jmp	.LBB87_66
.LBB87_66:                              # %for.inc261
                                        #   in Loop: Header=BB87_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_61
.LBB87_67:                              # %for.end263
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_68:                              # %for.cond264
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB87_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB87_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB87_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_72
.LBB87_71:                              # %if.else280
                                        #   in Loop: Header=BB87_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_72:                              # %if.end292
                                        #   in Loop: Header=BB87_68 Depth=2
	jmp	.LBB87_73
.LBB87_73:                              # %for.inc293
                                        #   in Loop: Header=BB87_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_68
.LBB87_74:                              # %for.end295
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_75:                              # %for.cond296
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB87_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB87_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_79
.LBB87_78:                              # %if.else312
                                        #   in Loop: Header=BB87_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_79:                              # %if.end324
                                        #   in Loop: Header=BB87_75 Depth=2
	jmp	.LBB87_80
.LBB87_80:                              # %for.inc325
                                        #   in Loop: Header=BB87_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_75
.LBB87_81:                              # %for.end327
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_82:                              # %for.cond328
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB87_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB87_82 Depth=2
	movl	$0, -4(%rbp)
.LBB87_84:                              # %for.cond331
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB87_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB87_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB87_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_88
.LBB87_87:                              # %if.else350
                                        #   in Loop: Header=BB87_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_88:                              # %if.end365
                                        #   in Loop: Header=BB87_84 Depth=3
	jmp	.LBB87_89
.LBB87_89:                              # %for.inc366
                                        #   in Loop: Header=BB87_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_84
.LBB87_90:                              # %for.end368
                                        #   in Loop: Header=BB87_82 Depth=2
	jmp	.LBB87_91
.LBB87_91:                              # %for.inc369
                                        #   in Loop: Header=BB87_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_82
.LBB87_92:                              # %for.end371
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_93:                              # %for.cond372
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB87_93 Depth=2
	movl	$0, -4(%rbp)
.LBB87_95:                              # %for.cond375
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB87_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB87_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB87_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_99
.LBB87_98:                              # %if.else394
                                        #   in Loop: Header=BB87_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_99:                              # %if.end409
                                        #   in Loop: Header=BB87_95 Depth=3
	jmp	.LBB87_100
.LBB87_100:                             # %for.inc410
                                        #   in Loop: Header=BB87_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_95
.LBB87_101:                             # %for.end412
                                        #   in Loop: Header=BB87_93 Depth=2
	jmp	.LBB87_102
.LBB87_102:                             # %for.inc413
                                        #   in Loop: Header=BB87_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_93
.LBB87_103:                             # %for.end415
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_104:                             # %for.cond416
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB87_104 Depth=2
	movl	$0, -4(%rbp)
.LBB87_106:                             # %for.cond419
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB87_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB87_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB87_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_110
.LBB87_109:                             # %if.else438
                                        #   in Loop: Header=BB87_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_110:                             # %if.end453
                                        #   in Loop: Header=BB87_106 Depth=3
	jmp	.LBB87_111
.LBB87_111:                             # %for.inc454
                                        #   in Loop: Header=BB87_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_106
.LBB87_112:                             # %for.end456
                                        #   in Loop: Header=BB87_104 Depth=2
	jmp	.LBB87_113
.LBB87_113:                             # %for.inc457
                                        #   in Loop: Header=BB87_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_104
.LBB87_114:                             # %for.end459
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_115:                             # %for.cond460
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB87_115 Depth=2
	movl	$0, -4(%rbp)
.LBB87_117:                             # %for.cond463
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB87_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB87_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB87_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_121
.LBB87_120:                             # %if.else482
                                        #   in Loop: Header=BB87_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_121:                             # %if.end497
                                        #   in Loop: Header=BB87_117 Depth=3
	jmp	.LBB87_122
.LBB87_122:                             # %for.inc498
                                        #   in Loop: Header=BB87_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_117
.LBB87_123:                             # %for.end500
                                        #   in Loop: Header=BB87_115 Depth=2
	jmp	.LBB87_124
.LBB87_124:                             # %for.inc501
                                        #   in Loop: Header=BB87_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_115
.LBB87_125:                             # %for.end503
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_126:                             # %for.cond504
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB87_126 Depth=2
	movl	$0, -4(%rbp)
.LBB87_128:                             # %for.cond507
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB87_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB87_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB87_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_132
.LBB87_131:                             # %if.else526
                                        #   in Loop: Header=BB87_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_132:                             # %if.end541
                                        #   in Loop: Header=BB87_128 Depth=3
	jmp	.LBB87_133
.LBB87_133:                             # %for.inc542
                                        #   in Loop: Header=BB87_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_128
.LBB87_134:                             # %for.end544
                                        #   in Loop: Header=BB87_126 Depth=2
	jmp	.LBB87_135
.LBB87_135:                             # %for.inc545
                                        #   in Loop: Header=BB87_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_126
.LBB87_136:                             # %for.end547
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_137:                             # %for.cond548
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB87_137 Depth=2
	movl	$0, -4(%rbp)
.LBB87_139:                             # %for.cond551
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB87_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB87_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB87_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_143
.LBB87_142:                             # %if.else570
                                        #   in Loop: Header=BB87_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_143:                             # %if.end585
                                        #   in Loop: Header=BB87_139 Depth=3
	jmp	.LBB87_144
.LBB87_144:                             # %for.inc586
                                        #   in Loop: Header=BB87_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_139
.LBB87_145:                             # %for.end588
                                        #   in Loop: Header=BB87_137 Depth=2
	jmp	.LBB87_146
.LBB87_146:                             # %for.inc589
                                        #   in Loop: Header=BB87_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_137
.LBB87_147:                             # %for.end591
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_148:                             # %for.cond592
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB87_148 Depth=2
	movl	$0, -4(%rbp)
.LBB87_150:                             # %for.cond595
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB87_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB87_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB87_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_154
.LBB87_153:                             # %if.else614
                                        #   in Loop: Header=BB87_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_154:                             # %if.end629
                                        #   in Loop: Header=BB87_150 Depth=3
	jmp	.LBB87_155
.LBB87_155:                             # %for.inc630
                                        #   in Loop: Header=BB87_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_150
.LBB87_156:                             # %for.end632
                                        #   in Loop: Header=BB87_148 Depth=2
	jmp	.LBB87_157
.LBB87_157:                             # %for.inc633
                                        #   in Loop: Header=BB87_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_148
.LBB87_158:                             # %for.end635
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_159:                             # %for.cond636
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB87_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB87_159 Depth=2
	movl	$0, -4(%rbp)
.LBB87_161:                             # %for.cond639
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB87_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB87_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB87_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB87_165
.LBB87_164:                             # %if.else658
                                        #   in Loop: Header=BB87_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB87_165:                             # %if.end673
                                        #   in Loop: Header=BB87_161 Depth=3
	jmp	.LBB87_166
.LBB87_166:                             # %for.inc674
                                        #   in Loop: Header=BB87_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_161
.LBB87_167:                             # %for.end676
                                        #   in Loop: Header=BB87_159 Depth=2
	jmp	.LBB87_168
.LBB87_168:                             # %for.inc677
                                        #   in Loop: Header=BB87_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_159
.LBB87_169:                             # %for.end679
                                        #   in Loop: Header=BB87_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB87_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB87_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB87_171:                             # %if.end682
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_172
.LBB87_172:                             # %for.inc683
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_1
.LBB87_173:                             # %for.end685
	cmpl	$1373740872, -44(%rbp)  # imm = 0x51E19F48
	jne	.LBB87_175
.LBB87_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_174
.Lfunc_end87:
	.size	GetCtxModelNumber.80, .Lfunc_end87-GetCtxModelNumber.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.81
.LCPI88_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.81
	.p2align	4, 0x90
	.type	GetCtxModelNumber.81,@function
GetCtxModelNumber.81:                   # @GetCtxModelNumber.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1668936375, -48(%rbp)  # imm = 0x6379F2B7
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB88_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_3 Depth 2
                                        #       Child Loop BB88_5 Depth 3
                                        #     Child Loop BB88_14 Depth 2
                                        #       Child Loop BB88_16 Depth 3
                                        #     Child Loop BB88_25 Depth 2
                                        #       Child Loop BB88_27 Depth 3
                                        #     Child Loop BB88_36 Depth 2
                                        #       Child Loop BB88_38 Depth 3
                                        #     Child Loop BB88_47 Depth 2
                                        #     Child Loop BB88_54 Depth 2
                                        #     Child Loop BB88_61 Depth 2
                                        #     Child Loop BB88_68 Depth 2
                                        #     Child Loop BB88_75 Depth 2
                                        #     Child Loop BB88_82 Depth 2
                                        #       Child Loop BB88_84 Depth 3
                                        #     Child Loop BB88_93 Depth 2
                                        #       Child Loop BB88_95 Depth 3
                                        #     Child Loop BB88_104 Depth 2
                                        #       Child Loop BB88_106 Depth 3
                                        #     Child Loop BB88_115 Depth 2
                                        #       Child Loop BB88_117 Depth 3
                                        #     Child Loop BB88_126 Depth 2
                                        #       Child Loop BB88_128 Depth 3
                                        #     Child Loop BB88_137 Depth 2
                                        #       Child Loop BB88_139 Depth 3
                                        #     Child Loop BB88_148 Depth 2
                                        #       Child Loop BB88_150 Depth 3
                                        #     Child Loop BB88_159 Depth 2
                                        #       Child Loop BB88_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB88_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB88_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB88_3:                               # %for.cond2
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB88_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	$0, -4(%rbp)
.LBB88_5:                               # %for.cond5
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB88_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB88_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB88_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_9
.LBB88_8:                               # %if.else
                                        #   in Loop: Header=BB88_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_9:                               # %if.end
                                        #   in Loop: Header=BB88_5 Depth=3
	jmp	.LBB88_10
.LBB88_10:                              # %for.inc
                                        #   in Loop: Header=BB88_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_5
.LBB88_11:                              # %for.end
                                        #   in Loop: Header=BB88_3 Depth=2
	jmp	.LBB88_12
.LBB88_12:                              # %for.inc33
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_3
.LBB88_13:                              # %for.end35
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_14:                              # %for.cond36
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB88_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	$0, -4(%rbp)
.LBB88_16:                              # %for.cond39
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB88_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB88_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB88_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_20
.LBB88_19:                              # %if.else58
                                        #   in Loop: Header=BB88_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_20:                              # %if.end73
                                        #   in Loop: Header=BB88_16 Depth=3
	jmp	.LBB88_21
.LBB88_21:                              # %for.inc74
                                        #   in Loop: Header=BB88_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_16
.LBB88_22:                              # %for.end76
                                        #   in Loop: Header=BB88_14 Depth=2
	jmp	.LBB88_23
.LBB88_23:                              # %for.inc77
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_14
.LBB88_24:                              # %for.end79
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_25:                              # %for.cond80
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB88_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB88_25 Depth=2
	movl	$0, -4(%rbp)
.LBB88_27:                              # %for.cond83
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB88_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB88_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB88_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_31
.LBB88_30:                              # %if.else102
                                        #   in Loop: Header=BB88_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_31:                              # %if.end117
                                        #   in Loop: Header=BB88_27 Depth=3
	jmp	.LBB88_32
.LBB88_32:                              # %for.inc118
                                        #   in Loop: Header=BB88_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_27
.LBB88_33:                              # %for.end120
                                        #   in Loop: Header=BB88_25 Depth=2
	jmp	.LBB88_34
.LBB88_34:                              # %for.inc121
                                        #   in Loop: Header=BB88_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_25
.LBB88_35:                              # %for.end123
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_36:                              # %for.cond124
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB88_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB88_36 Depth=2
	movl	$0, -4(%rbp)
.LBB88_38:                              # %for.cond127
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB88_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB88_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB88_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_42
.LBB88_41:                              # %if.else146
                                        #   in Loop: Header=BB88_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_42:                              # %if.end161
                                        #   in Loop: Header=BB88_38 Depth=3
	jmp	.LBB88_43
.LBB88_43:                              # %for.inc162
                                        #   in Loop: Header=BB88_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_38
.LBB88_44:                              # %for.end164
                                        #   in Loop: Header=BB88_36 Depth=2
	jmp	.LBB88_45
.LBB88_45:                              # %for.inc165
                                        #   in Loop: Header=BB88_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_36
.LBB88_46:                              # %for.end167
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -4(%rbp)
.LBB88_47:                              # %for.cond168
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB88_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB88_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_51
.LBB88_50:                              # %if.else184
                                        #   in Loop: Header=BB88_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_51:                              # %if.end196
                                        #   in Loop: Header=BB88_47 Depth=2
	jmp	.LBB88_52
.LBB88_52:                              # %for.inc197
                                        #   in Loop: Header=BB88_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_47
.LBB88_53:                              # %for.end199
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -4(%rbp)
.LBB88_54:                              # %for.cond200
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB88_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB88_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_58
.LBB88_57:                              # %if.else216
                                        #   in Loop: Header=BB88_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_58:                              # %if.end228
                                        #   in Loop: Header=BB88_54 Depth=2
	jmp	.LBB88_59
.LBB88_59:                              # %for.inc229
                                        #   in Loop: Header=BB88_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_54
.LBB88_60:                              # %for.end231
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -4(%rbp)
.LBB88_61:                              # %for.cond232
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB88_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB88_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB88_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_65
.LBB88_64:                              # %if.else248
                                        #   in Loop: Header=BB88_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_65:                              # %if.end260
                                        #   in Loop: Header=BB88_61 Depth=2
	jmp	.LBB88_66
.LBB88_66:                              # %for.inc261
                                        #   in Loop: Header=BB88_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_61
.LBB88_67:                              # %for.end263
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -4(%rbp)
.LBB88_68:                              # %for.cond264
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB88_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB88_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB88_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_72
.LBB88_71:                              # %if.else280
                                        #   in Loop: Header=BB88_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_72:                              # %if.end292
                                        #   in Loop: Header=BB88_68 Depth=2
	jmp	.LBB88_73
.LBB88_73:                              # %for.inc293
                                        #   in Loop: Header=BB88_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_68
.LBB88_74:                              # %for.end295
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -4(%rbp)
.LBB88_75:                              # %for.cond296
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB88_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB88_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_79
.LBB88_78:                              # %if.else312
                                        #   in Loop: Header=BB88_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_79:                              # %if.end324
                                        #   in Loop: Header=BB88_75 Depth=2
	jmp	.LBB88_80
.LBB88_80:                              # %for.inc325
                                        #   in Loop: Header=BB88_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_75
.LBB88_81:                              # %for.end327
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_82:                              # %for.cond328
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB88_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB88_82 Depth=2
	movl	$0, -4(%rbp)
.LBB88_84:                              # %for.cond331
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB88_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB88_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB88_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_88
.LBB88_87:                              # %if.else350
                                        #   in Loop: Header=BB88_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_88:                              # %if.end365
                                        #   in Loop: Header=BB88_84 Depth=3
	jmp	.LBB88_89
.LBB88_89:                              # %for.inc366
                                        #   in Loop: Header=BB88_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_84
.LBB88_90:                              # %for.end368
                                        #   in Loop: Header=BB88_82 Depth=2
	jmp	.LBB88_91
.LBB88_91:                              # %for.inc369
                                        #   in Loop: Header=BB88_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_82
.LBB88_92:                              # %for.end371
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_93:                              # %for.cond372
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB88_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB88_93 Depth=2
	movl	$0, -4(%rbp)
.LBB88_95:                              # %for.cond375
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB88_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB88_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB88_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_99
.LBB88_98:                              # %if.else394
                                        #   in Loop: Header=BB88_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_99:                              # %if.end409
                                        #   in Loop: Header=BB88_95 Depth=3
	jmp	.LBB88_100
.LBB88_100:                             # %for.inc410
                                        #   in Loop: Header=BB88_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_95
.LBB88_101:                             # %for.end412
                                        #   in Loop: Header=BB88_93 Depth=2
	jmp	.LBB88_102
.LBB88_102:                             # %for.inc413
                                        #   in Loop: Header=BB88_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_93
.LBB88_103:                             # %for.end415
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_104:                             # %for.cond416
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB88_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB88_104 Depth=2
	movl	$0, -4(%rbp)
.LBB88_106:                             # %for.cond419
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB88_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB88_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB88_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_110
.LBB88_109:                             # %if.else438
                                        #   in Loop: Header=BB88_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_110:                             # %if.end453
                                        #   in Loop: Header=BB88_106 Depth=3
	jmp	.LBB88_111
.LBB88_111:                             # %for.inc454
                                        #   in Loop: Header=BB88_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_106
.LBB88_112:                             # %for.end456
                                        #   in Loop: Header=BB88_104 Depth=2
	jmp	.LBB88_113
.LBB88_113:                             # %for.inc457
                                        #   in Loop: Header=BB88_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_104
.LBB88_114:                             # %for.end459
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_115:                             # %for.cond460
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB88_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB88_115 Depth=2
	movl	$0, -4(%rbp)
.LBB88_117:                             # %for.cond463
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB88_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB88_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB88_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_121
.LBB88_120:                             # %if.else482
                                        #   in Loop: Header=BB88_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_121:                             # %if.end497
                                        #   in Loop: Header=BB88_117 Depth=3
	jmp	.LBB88_122
.LBB88_122:                             # %for.inc498
                                        #   in Loop: Header=BB88_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_117
.LBB88_123:                             # %for.end500
                                        #   in Loop: Header=BB88_115 Depth=2
	jmp	.LBB88_124
.LBB88_124:                             # %for.inc501
                                        #   in Loop: Header=BB88_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_115
.LBB88_125:                             # %for.end503
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_126:                             # %for.cond504
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB88_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB88_126 Depth=2
	movl	$0, -4(%rbp)
.LBB88_128:                             # %for.cond507
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB88_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB88_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB88_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_132
.LBB88_131:                             # %if.else526
                                        #   in Loop: Header=BB88_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_132:                             # %if.end541
                                        #   in Loop: Header=BB88_128 Depth=3
	jmp	.LBB88_133
.LBB88_133:                             # %for.inc542
                                        #   in Loop: Header=BB88_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_128
.LBB88_134:                             # %for.end544
                                        #   in Loop: Header=BB88_126 Depth=2
	jmp	.LBB88_135
.LBB88_135:                             # %for.inc545
                                        #   in Loop: Header=BB88_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_126
.LBB88_136:                             # %for.end547
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_137:                             # %for.cond548
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB88_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB88_137 Depth=2
	movl	$0, -4(%rbp)
.LBB88_139:                             # %for.cond551
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB88_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB88_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB88_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_143
.LBB88_142:                             # %if.else570
                                        #   in Loop: Header=BB88_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_143:                             # %if.end585
                                        #   in Loop: Header=BB88_139 Depth=3
	jmp	.LBB88_144
.LBB88_144:                             # %for.inc586
                                        #   in Loop: Header=BB88_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_139
.LBB88_145:                             # %for.end588
                                        #   in Loop: Header=BB88_137 Depth=2
	jmp	.LBB88_146
.LBB88_146:                             # %for.inc589
                                        #   in Loop: Header=BB88_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_137
.LBB88_147:                             # %for.end591
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_148:                             # %for.cond592
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB88_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB88_148 Depth=2
	movl	$0, -4(%rbp)
.LBB88_150:                             # %for.cond595
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB88_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB88_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB88_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_154
.LBB88_153:                             # %if.else614
                                        #   in Loop: Header=BB88_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_154:                             # %if.end629
                                        #   in Loop: Header=BB88_150 Depth=3
	jmp	.LBB88_155
.LBB88_155:                             # %for.inc630
                                        #   in Loop: Header=BB88_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_150
.LBB88_156:                             # %for.end632
                                        #   in Loop: Header=BB88_148 Depth=2
	jmp	.LBB88_157
.LBB88_157:                             # %for.inc633
                                        #   in Loop: Header=BB88_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_148
.LBB88_158:                             # %for.end635
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_159:                             # %for.cond636
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB88_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB88_159 Depth=2
	movl	$0, -4(%rbp)
.LBB88_161:                             # %for.cond639
                                        #   Parent Loop BB88_1 Depth=1
                                        #     Parent Loop BB88_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB88_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB88_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB88_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB88_165
.LBB88_164:                             # %if.else658
                                        #   in Loop: Header=BB88_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB88_165:                             # %if.end673
                                        #   in Loop: Header=BB88_161 Depth=3
	jmp	.LBB88_166
.LBB88_166:                             # %for.inc674
                                        #   in Loop: Header=BB88_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_161
.LBB88_167:                             # %for.end676
                                        #   in Loop: Header=BB88_159 Depth=2
	jmp	.LBB88_168
.LBB88_168:                             # %for.inc677
                                        #   in Loop: Header=BB88_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_159
.LBB88_169:                             # %for.end679
                                        #   in Loop: Header=BB88_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB88_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB88_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB88_171:                             # %if.end682
                                        #   in Loop: Header=BB88_1 Depth=1
	jmp	.LBB88_172
.LBB88_172:                             # %for.inc683
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_1
.LBB88_173:                             # %for.end685
	cmpl	$1668936375, -48(%rbp)  # imm = 0x6379F2B7
	jne	.LBB88_175
.LBB88_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_174
.Lfunc_end88:
	.size	GetCtxModelNumber.81, .Lfunc_end88-GetCtxModelNumber.81
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.82
.LCPI89_0:
	.quad	4611686018427387904     # double 2
.LCPI89_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.82
	.p2align	4, 0x90
	.type	create_context_memory.82,@function
create_context_memory.82:               # @create_context_memory.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1149653570, -20(%rbp)  # imm = 0x44865242
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB89_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB89_3
.LBB89_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB89_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB89_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB89_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB89_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB89_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB89_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_11:                              # %if.end10
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB89_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_13:                              # %if.end16
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$0, -8(%rbp)
.LBB89_14:                              # %for.cond17
                                        #   Parent Loop BB89_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB89_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB89_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_17:                              # %if.end28
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB89_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_19:                              # %if.end39
                                        #   in Loop: Header=BB89_14 Depth=2
	jmp	.LBB89_20
.LBB89_20:                              # %for.inc
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_14
.LBB89_21:                              # %for.end
                                        #   in Loop: Header=BB89_8 Depth=1
	jmp	.LBB89_22
.LBB89_22:                              # %for.inc40
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_8
.LBB89_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB89_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_26 Depth 2
                                        #       Child Loop BB89_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB89_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	$0, -8(%rbp)
.LBB89_26:                              # %for.cond47
                                        #   Parent Loop BB89_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB89_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB89_26 Depth=2
	movl	$0, -12(%rbp)
.LBB89_28:                              # %for.cond51
                                        #   Parent Loop BB89_24 Depth=1
                                        #     Parent Loop BB89_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB89_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB89_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB89_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_28
.LBB89_31:                              # %for.end63
                                        #   in Loop: Header=BB89_26 Depth=2
	jmp	.LBB89_32
.LBB89_32:                              # %for.inc64
                                        #   in Loop: Header=BB89_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_26
.LBB89_33:                              # %for.end66
                                        #   in Loop: Header=BB89_24 Depth=1
	jmp	.LBB89_34
.LBB89_34:                              # %for.inc67
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_24
.LBB89_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB89_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB89_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB89_36 Depth=1
	vmovsd	.LCPI89_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB89_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_36
.LBB89_39:                              # %for.end98
	cmpl	$1149653570, -20(%rbp)  # imm = 0x44865242
	jne	.LBB89_41
.LBB89_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_40
.Lfunc_end89:
	.size	create_context_memory.82, .Lfunc_end89-create_context_memory.82
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.83
.LCPI90_0:
	.quad	4611686018427387904     # double 2
.LCPI90_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.83
	.p2align	4, 0x90
	.type	create_context_memory.83,@function
create_context_memory.83:               # @create_context_memory.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$883999046, -20(%rbp)   # imm = 0x34B0C146
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB90_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB90_3
.LBB90_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB90_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB90_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB90_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB90_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB90_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB90_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_11:                              # %if.end10
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB90_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_13:                              # %if.end16
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$0, -8(%rbp)
.LBB90_14:                              # %for.cond17
                                        #   Parent Loop BB90_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB90_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB90_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB90_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_17:                              # %if.end28
                                        #   in Loop: Header=BB90_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB90_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_19:                              # %if.end39
                                        #   in Loop: Header=BB90_14 Depth=2
	jmp	.LBB90_20
.LBB90_20:                              # %for.inc
                                        #   in Loop: Header=BB90_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_14
.LBB90_21:                              # %for.end
                                        #   in Loop: Header=BB90_8 Depth=1
	jmp	.LBB90_22
.LBB90_22:                              # %for.inc40
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_8
.LBB90_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB90_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_26 Depth 2
                                        #       Child Loop BB90_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB90_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	$0, -8(%rbp)
.LBB90_26:                              # %for.cond47
                                        #   Parent Loop BB90_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB90_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB90_26 Depth=2
	movl	$0, -12(%rbp)
.LBB90_28:                              # %for.cond51
                                        #   Parent Loop BB90_24 Depth=1
                                        #     Parent Loop BB90_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB90_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB90_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB90_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_28
.LBB90_31:                              # %for.end63
                                        #   in Loop: Header=BB90_26 Depth=2
	jmp	.LBB90_32
.LBB90_32:                              # %for.inc64
                                        #   in Loop: Header=BB90_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_26
.LBB90_33:                              # %for.end66
                                        #   in Loop: Header=BB90_24 Depth=1
	jmp	.LBB90_34
.LBB90_34:                              # %for.inc67
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_24
.LBB90_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB90_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB90_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB90_36 Depth=1
	vmovsd	.LCPI90_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB90_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_36
.LBB90_39:                              # %for.end98
	cmpl	$883999046, -20(%rbp)   # imm = 0x34B0C146
	jne	.LBB90_41
.LBB90_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_40
.Lfunc_end90:
	.size	create_context_memory.83, .Lfunc_end90-create_context_memory.83
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.84
.LCPI91_0:
	.quad	4611686018427387904     # double 2
.LCPI91_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.84
	.p2align	4, 0x90
	.type	create_context_memory.84,@function
create_context_memory.84:               # @create_context_memory.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1321399210, -20(%rbp)  # imm = 0x4EC2F3AA
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB91_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB91_3
.LBB91_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB91_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB91_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB91_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB91_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB91_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB91_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_11:                              # %if.end10
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB91_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_13:                              # %if.end16
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$0, -8(%rbp)
.LBB91_14:                              # %for.cond17
                                        #   Parent Loop BB91_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB91_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB91_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_17:                              # %if.end28
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB91_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_19:                              # %if.end39
                                        #   in Loop: Header=BB91_14 Depth=2
	jmp	.LBB91_20
.LBB91_20:                              # %for.inc
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_14
.LBB91_21:                              # %for.end
                                        #   in Loop: Header=BB91_8 Depth=1
	jmp	.LBB91_22
.LBB91_22:                              # %for.inc40
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_8
.LBB91_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB91_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_26 Depth 2
                                        #       Child Loop BB91_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB91_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	$0, -8(%rbp)
.LBB91_26:                              # %for.cond47
                                        #   Parent Loop BB91_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB91_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	$0, -12(%rbp)
.LBB91_28:                              # %for.cond51
                                        #   Parent Loop BB91_24 Depth=1
                                        #     Parent Loop BB91_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB91_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB91_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB91_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_28
.LBB91_31:                              # %for.end63
                                        #   in Loop: Header=BB91_26 Depth=2
	jmp	.LBB91_32
.LBB91_32:                              # %for.inc64
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_26
.LBB91_33:                              # %for.end66
                                        #   in Loop: Header=BB91_24 Depth=1
	jmp	.LBB91_34
.LBB91_34:                              # %for.inc67
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_24
.LBB91_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB91_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB91_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB91_36 Depth=1
	vmovsd	.LCPI91_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB91_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_36
.LBB91_39:                              # %for.end98
	cmpl	$1321399210, -20(%rbp)  # imm = 0x4EC2F3AA
	jne	.LBB91_41
.LBB91_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_40
.Lfunc_end91:
	.size	create_context_memory.84, .Lfunc_end91-create_context_memory.84
	.cfi_endproc
                                        # -- End function
	.type	num_mb_per_slice,@object # @num_mb_per_slice
	.comm	num_mb_per_slice,4,4
	.type	number_of_slices,@object # @number_of_slices
	.comm	number_of_slices,4,4
	.type	initialized,@object     # @initialized
	.comm	initialized,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"create_context_memory: initialized"
	.size	.L.str, 35

	.type	model_number,@object    # @model_number
	.comm	model_number,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"create_context_memory: model_number"
	.size	.L.str.1, 36

	.type	probability,@object     # @probability
	.data
	.globl	probability
	.p2align	4
probability:
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	4602678819172646912     # double 0.5
	.quad	4602221415580092655     # double 0.474609
	.quad	4601787232547217120     # double 0.45050699999999999
	.quad	4601375099138117191     # double 0.42762899999999998
	.quad	4600983880445686771     # double 0.405912
	.quad	4600612549649210819     # double 0.385299
	.quad	4600260061913575785     # double 0.365732
	.quad	4599925480490059176     # double 0.347159
	.quad	4599607904658735518     # double 0.32952999999999999
	.quad	4599306433699679337     # double 0.31279499999999999
	.quad	4599020292993754725     # double 0.29691099999999998
	.quad	4598748671893028756     # double 0.281833
	.quad	4598490831807162540     # double 0.26751999999999998
	.quad	4598246106203411228     # double 0.25393500000000002
	.quad	4597852365495189480     # double 0.241039
	.quad	4597411373019677361     # double 0.228799
	.quad	4596992754427114019     # double 0.21718000000000001
	.quad	4596595392824791865     # double 0.206151
	.quad	4596218207348800331     # double 0.19568199999999999
	.quad	4595860153164025867     # double 0.18574399999999999
	.quad	4595520329550542999     # double 0.176312
	.quad	4595197727702035196     # double 0.16735800000000001
	.quad	4594891518956171021     # double 0.158859
	.quad	4594600874650619039     # double 0.15079200000000001
	.quad	4594324966123047813     # double 0.14313400000000001
	.quad	4594063108826313982     # double 0.13586599999999999
	.quad	4593814510126883131     # double 0.128966
	.quad	4593485495152505952     # double 0.122417
	.quad	4593037513090372154     # double 0.1162
	.quad	4592612301227954341     # double 0.11029899999999999
	.quad	4592208706643747907     # double 0.104698
	.quad	4591825576416248244     # double 0.099380999999999997
	.quad	4591461901739138822     # double 0.094334000000000001
	.quad	4591116673806103109     # double 0.089542999999999998
	.quad	4590789027926012651     # double 0.084996000000000002
	.quad	4590478027350144954     # double 0.080680000000000001
	.quad	4590182807387371563     # double 0.076582999999999998
	.quad	4589902575404158061     # double 0.072693999999999995
	.quad	4589636538766970031     # double 0.069001999999999994
	.quad	4589384048957461132     # double 0.065498000000000001
	.quad	4589120750508846543     # double 0.062171999999999998
	.quad	4588665634744902990     # double 0.059013999999999997
	.quad	4588233865641427726     # double 0.056017999999999998
	.quad	4587823857931351916     # double 0.053172999999999998
	.quad	4587434746923547105     # double 0.050472999999999997
	.quad	4587065235581320611     # double 0.047909
	.quad	4586714603328732054     # double 0.045476000000000003
	.quad	4586381841359464902     # double 0.043166999999999997
	.quad	4586065940867202626     # double 0.040974999999999998
	.quad	4585766037160816770     # double 0.038893999999999998
	.quad	4585481409664366955     # double 0.036919
	.quad	4585211193686724725     # double 0.035043999999999999
	.quad	4584954668651949702     # double 0.033264000000000002
	.quad	4584711258099289581     # double 0.031574999999999999
	.quad	4584296062242443040     # double 0.029971999999999999
	.quad	4583857375609940135     # double 0.02845
	.quad	4583440882716400912     # double 0.027005000000000001
	.quad	4583045430640320763     # double 0.025633
	.quad	4582670442920947386     # double 0.024331999999999999
	.quad	4582314190176023870     # double 0.023095999999999998
	.quad	4581976095944797913     # double 0.021923000000000002
	.quad	4581655295536141057     # double 0.020809999999999999
	.quad	4581350636028548698     # double 0.019753
	.quad	4581061540961268531     # double 0.018749999999999999
	.size	probability, 1024

	.type	entropy,@object         # @entropy
	.comm	entropy,1024,16
	.type	INIT_MB_TYPE_I,@object  # @INIT_MB_TYPE_I
	.section	.rodata,"a",@progbits
	.p2align	4
INIT_MB_TYPE_I:
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_I, 264

	.type	INIT_MB_TYPE_P,@object  # @INIT_MB_TYPE_P
	.p2align	4
INIT_MB_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	23                      # 0x17
	.long	33                      # 0x21
	.long	23                      # 0x17
	.long	2                       # 0x2
	.long	21                      # 0x15
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	4294967259              # 0xffffffdb
	.long	118                     # 0x76
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	65                      # 0x41
	.long	1                       # 0x1
	.long	62                      # 0x3e
	.long	26                      # 0x1a
	.long	67                      # 0x43
	.long	16                      # 0x10
	.long	90                      # 0x5a
	.long	9                       # 0x9
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	4294967276              # 0xffffffec
	.long	104                     # 0x68
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	18                      # 0x12
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	43                      # 0x2b
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	9                       # 0x9
	.long	4                       # 0x4
	.long	41                      # 0x29
	.long	4294967267              # 0xffffffe3
	.long	118                     # 0x76
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	79                      # 0x4f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	57                      # 0x39
	.long	2                       # 0x2
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	26                      # 0x1a
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967251              # 0xffffffd3
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	101                     # 0x65
	.long	4294967292              # 0xfffffffc
	.long	76                      # 0x4c
	.long	26                      # 0x1a
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	29                      # 0x1d
	.long	16                      # 0x10
	.long	25                      # 0x19
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	51                      # 0x33
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967269              # 0xffffffe5
	.long	99                      # 0x63
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	4294967292              # 0xfffffffc
	.long	85                      # 0x55
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	37                      # 0x25
	.long	42                      # 0x2a
	.long	12                      # 0xc
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967264              # 0xffffffe0
	.long	127                     # 0x7f
	.long	4294967274              # 0xffffffea
	.long	117                     # 0x75
	.long	4294967294              # 0xfffffffe
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	40                      # 0x28
	.long	20                      # 0x14
	.long	10                      # 0xa
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_P, 792

	.type	INIT_B8_TYPE_I,@object  # @INIT_B8_TYPE_I
	.p2align	4
INIT_B8_TYPE_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_I, 144

	.type	INIT_B8_TYPE_P,@object  # @INIT_B8_TYPE_P
	.p2align	4
INIT_B8_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	73                      # 0x49
	.long	17                      # 0x11
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	86                      # 0x56
	.long	4294967279              # 0xffffffef
	.long	95                      # 0x5f
	.long	4294967290              # 0xfffffffa
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	10                      # 0xa
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	8                       # 0x8
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	73                      # 0x49
	.long	14                      # 0xe
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967282              # 0xfffffff2
	.long	88                      # 0x58
	.long	4294967290              # 0xfffffffa
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_P, 432

	.type	INIT_MV_RES_I,@object   # @INIT_MV_RES_I
	.p2align	4
INIT_MV_RES_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_I, 160

	.type	INIT_MV_RES_P,@object   # @INIT_MV_RES_P
	.p2align	4
INIT_MV_RES_P:
	.long	4294967293              # 0xfffffffd
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	2                       # 0x2
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	4                       # 0x4
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967289              # 0xfffffff9
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967281              # 0xfffffff1
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	116                     # 0x74
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	20                      # 0x14
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	84                      # 0x54
	.long	6                       # 0x6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	90                      # 0x5a
	.long	4294967295              # 0xffffffff
	.long	101                     # 0x65
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_P, 480

	.type	INIT_REF_NO_I,@object   # @INIT_REF_NO_I
	.p2align	4
INIT_REF_NO_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_I, 96

	.type	INIT_REF_NO_P,@object   # @INIT_REF_NO_P
	.p2align	4
INIT_REF_NO_P:
	.long	4294967289              # 0xfffffff9
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	80                      # 0x50
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	77                      # 0x4d
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	72                      # 0x48
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	50                      # 0x32
	.long	1                       # 0x1
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_P, 288

	.type	INIT_DELTA_QP_I,@object # @INIT_DELTA_QP_I
	.p2align	4
INIT_DELTA_QP_I:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_I, 32

	.type	INIT_DELTA_QP_P,@object # @INIT_DELTA_QP_P
	.p2align	4
INIT_DELTA_QP_P:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_P, 96

	.type	INIT_MB_AFF_I,@object   # @INIT_MB_AFF_I
	.p2align	4
INIT_MB_AFF_I:
	.long	0                       # 0x0
	.long	11                      # 0xb
	.long	1                       # 0x1
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_I, 32

	.type	INIT_MB_AFF_P,@object   # @INIT_MB_AFF_P
	.p2align	4
INIT_MB_AFF_P:
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	4294967293              # 0xfffffffd
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_P, 96

	.type	INIT_TRANSFORM_SIZE_I,@object # @INIT_TRANSFORM_SIZE_I
	.p2align	4
INIT_TRANSFORM_SIZE_I:
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	31                      # 0x1f
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	50                      # 0x32
	.size	INIT_TRANSFORM_SIZE_I, 24

	.type	INIT_TRANSFORM_SIZE_P,@object # @INIT_TRANSFORM_SIZE_P
	.p2align	4
INIT_TRANSFORM_SIZE_P:
	.long	12                      # 0xc
	.long	40                      # 0x28
	.long	11                      # 0xb
	.long	51                      # 0x33
	.long	14                      # 0xe
	.long	59                      # 0x3b
	.long	25                      # 0x19
	.long	32                      # 0x20
	.long	21                      # 0x15
	.long	49                      # 0x31
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	50                      # 0x32
	.long	17                      # 0x11
	.long	61                      # 0x3d
	.size	INIT_TRANSFORM_SIZE_P, 72

	.type	INIT_IPR_I,@object      # @INIT_IPR_I
	.p2align	4
INIT_IPR_I:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_I, 16

	.type	INIT_IPR_P,@object      # @INIT_IPR_P
	.p2align	4
INIT_IPR_P:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_P, 48

	.type	INIT_CIPR_I,@object     # @INIT_CIPR_I
	.p2align	4
INIT_CIPR_I:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_I, 32

	.type	INIT_CIPR_P,@object     # @INIT_CIPR_P
	.p2align	4
INIT_CIPR_P:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_P, 96

	.type	INIT_CBP_I,@object      # @INIT_CBP_I
	.p2align	4
INIT_CBP_I:
	.long	4294967279              # 0xffffffef
	.long	127                     # 0x7f
	.long	4294967283              # 0xfffffff3
	.long	102                     # 0x66
	.long	0                       # 0x0
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	95                      # 0x5f
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.size	INIT_CBP_I, 96

	.type	INIT_CBP_P,@object      # @INIT_CBP_P
	.p2align	4
INIT_CBP_P:
	.long	4294967269              # 0xffffffe5
	.long	126                     # 0x7e
	.long	4294967268              # 0xffffffe4
	.long	98                      # 0x62
	.long	4294967271              # 0xffffffe7
	.long	101                     # 0x65
	.long	4294967273              # 0xffffffe9
	.long	67                      # 0x43
	.long	4294967268              # 0xffffffe4
	.long	82                      # 0x52
	.long	4294967276              # 0xffffffec
	.long	94                      # 0x5e
	.long	4294967280              # 0xfffffff0
	.long	83                      # 0x53
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	91                      # 0x5b
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967283              # 0xfffffff3
	.long	93                      # 0x5d
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967257              # 0xffffffd9
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	91                      # 0x5b
	.long	4294967279              # 0xffffffef
	.long	96                      # 0x60
	.long	4294967270              # 0xffffffe6
	.long	81                      # 0x51
	.long	4294967261              # 0xffffffdd
	.long	98                      # 0x62
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	4294967273              # 0xffffffe9
	.long	97                      # 0x61
	.long	4294967269              # 0xffffffe5
	.long	119                     # 0x77
	.long	4294967272              # 0xffffffe8
	.long	99                      # 0x63
	.long	4294967275              # 0xffffffeb
	.long	110                     # 0x6e
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967271              # 0xffffffe7
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	89                      # 0x59
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967282              # 0xfffffff2
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.size	INIT_CBP_P, 288

	.type	INIT_BCBP_I,@object     # @INIT_BCBP_I
	.p2align	4
INIT_BCBP_I:
	.long	4294967279              # 0xffffffef
	.long	123                     # 0x7b
	.long	4294967284              # 0xfffffff4
	.long	115                     # 0x73
	.long	4294967280              # 0xfffffff0
	.long	122                     # 0x7a
	.long	4294967285              # 0xfffffff5
	.long	115                     # 0x73
	.long	4294967284              # 0xfffffff4
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	68                      # 0x44
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967283              # 0xfffffff3
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	93                      # 0x5d
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	91                      # 0x5b
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	4294967292              # 0xfffffffc
	.long	56                      # 0x38
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	76                      # 0x4c
	.long	4294967274              # 0xffffffea
	.long	125                     # 0x7d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_I, 256

	.type	INIT_BCBP_P,@object     # @INIT_BCBP_P
	.p2align	4
INIT_BCBP_P:
	.long	4294967289              # 0xfffffff9
	.long	92                      # 0x5c
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	96                      # 0x60
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	65                      # 0x41
	.long	4294967295              # 0xffffffff
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	126                     # 0x7e
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967288              # 0xfffffff8
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	80                      # 0x50
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	94                      # 0x5e
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967261              # 0xffffffdd
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	56                      # 0x38
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	4294967293              # 0xfffffffd
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	80                      # 0x50
	.long	5                       # 0x5
	.long	76                      # 0x4c
	.long	2                       # 0x2
	.long	84                      # 0x54
	.long	5                       # 0x5
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	4                       # 0x4
	.long	61                      # 0x3d
	.long	4294967282              # 0xfffffff2
	.long	83                      # 0x53
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	79                      # 0x4f
	.long	4294967285              # 0xfffffff5
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	91                      # 0x5b
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967294              # 0xfffffffe
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	4294967290              # 0xfffffffa
	.long	56                      # 0x38
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	4294967288              # 0xfffffff8
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	98                      # 0x62
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_P, 768

	.type	INIT_MAP_I,@object      # @INIT_MAP_I
	.p2align	4
INIT_MAP_I:
	.long	4294967289              # 0xfffffff9
	.long	93                      # 0x5d
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	4294967292              # 0xfffffffc
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	68                      # 0x44
	.long	4294967284              # 0xfffffff4
	.long	84                      # 0x54
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	65                      # 0x41
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	4294967294              # 0xfffffffe
	.long	66                      # 0x42
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967294              # 0xfffffffe
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	7                       # 0x7
	.long	52                      # 0x34
	.long	10                      # 0xa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	1                       # 0x1
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	28                      # 0x1c
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	33                      # 0x21
	.long	14                      # 0xe
	.long	62                      # 0x3e
	.long	4294967279              # 0xffffffef
	.long	120                     # 0x78
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967278              # 0xffffffee
	.long	114                     # 0x72
	.long	4294967285              # 0xfffffff5
	.long	85                      # 0x55
	.long	4294967281              # 0xfffffff1
	.long	92                      # 0x5c
	.long	4294967282              # 0xfffffff2
	.long	89                      # 0x59
	.long	4294967270              # 0xffffffe6
	.long	71                      # 0x47
	.long	4294967281              # 0xfffffff1
	.long	81                      # 0x51
	.long	4294967282              # 0xfffffff2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967282              # 0xfffffff2
	.long	70                      # 0x46
	.long	4294967272              # 0xffffffe8
	.long	56                      # 0x38
	.long	4294967273              # 0xffffffe9
	.long	68                      # 0x44
	.long	4294967272              # 0xffffffe8
	.long	50                      # 0x32
	.long	4294967285              # 0xfffffff5
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	4294967283              # 0xfffffff3
	.long	101                     # 0x65
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967284              # 0xfffffff4
	.long	94                      # 0x5e
	.long	4294967286              # 0xfffffff6
	.long	88                      # 0x58
	.long	4294967280              # 0xfffffff0
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967289              # 0xfffffff9
	.long	83                      # 0x53
	.long	4294967283              # 0xfffffff3
	.long	87                      # 0x57
	.long	4294967277              # 0xffffffed
	.long	94                      # 0x5e
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	18                      # 0x12
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	102                     # 0x66
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	4294967283              # 0xfffffff3
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	21                      # 0x15
	.long	37                      # 0x25
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	9                       # 0x9
	.long	57                      # 0x39
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	12                      # 0xc
	.long	72                      # 0x48
	.size	INIT_MAP_I, 960

	.type	INIT_MAP_P,@object      # @INIT_MAP_P
	.p2align	4
INIT_MAP_P:
	.long	4294967294              # 0xfffffffe
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967295              # 0xffffffff
	.long	75                      # 0x4b
	.long	4294967289              # 0xfffffff9
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	5                       # 0x5
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	6                       # 0x6
	.long	42                      # 0x2a
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	13                      # 0xd
	.long	29                      # 0x1d
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4294967286              # 0xfffffff6
	.long	93                      # 0x5d
	.long	4294967289              # 0xfffffff9
	.long	73                      # 0x49
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	13                      # 0xd
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	4294967289              # 0xfffffff9
	.long	100                     # 0x64
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967291              # 0xfffffffb
	.long	69                      # 0x45
	.long	4294967287              # 0xfffffff7
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967286              # 0xfffffff6
	.long	68                      # 0x44
	.long	4294967277              # 0xffffffed
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	70                      # 0x46
	.long	4294967281              # 0xfffffff1
	.long	67                      # 0x43
	.long	4294967276              # 0xffffffec
	.long	62                      # 0x3e
	.long	4294967277              # 0xffffffed
	.long	70                      # 0x46
	.long	4294967280              # 0xfffffff0
	.long	66                      # 0x42
	.long	4294967274              # 0xffffffea
	.long	65                      # 0x41
	.long	4294967276              # 0xffffffec
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	53                      # 0x35
	.long	2                       # 0x2
	.long	53                      # 0x35
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	4294967294              # 0xfffffffe
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	4294967283              # 0xfffffff3
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	69                      # 0x45
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	14                      # 0xe
	.long	39                      # 0x27
	.long	4                       # 0x4
	.long	51                      # 0x33
	.long	13                      # 0xd
	.long	68                      # 0x44
	.long	3                       # 0x3
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	11                      # 0xb
	.long	48                      # 0x30
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	43                      # 0x2b
	.long	4294967295              # 0xffffffff
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967287              # 0xfffffff7
	.long	89                      # 0x59
	.long	4294967282              # 0xfffffff2
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967284              # 0xfffffff4
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	110                     # 0x6e
	.long	4294967272              # 0xffffffe8
	.long	105                     # 0x69
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967279              # 0xffffffef
	.long	99                      # 0x63
	.long	4294967218              # 0xffffffb2
	.long	127                     # 0x7f
	.long	4294967226              # 0xffffffba
	.long	127                     # 0x7f
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	4294967295              # 0xffffffff
	.long	55                      # 0x37
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	4294967262              # 0xffffffde
	.long	119                     # 0x77
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	32                      # 0x20
	.long	20                      # 0x14
	.long	30                      # 0x1e
	.long	22                      # 0x16
	.long	4294967252              # 0xffffffd4
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	60                      # 0x3c
	.long	4294967293              # 0xfffffffd
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	67                      # 0x43
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967282              # 0xfffffff2
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	65                      # 0x41
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967285              # 0xfffffff5
	.long	70                      # 0x46
	.long	18                      # 0x12
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	9                       # 0x9
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	43                      # 0x2b
	.long	9                       # 0x9
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	46                      # 0x2e
	.long	19                      # 0x13
	.long	38                      # 0x26
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	15                      # 0xf
	.long	38                      # 0x26
	.long	12                      # 0xc
	.long	42                      # 0x2a
	.long	9                       # 0x9
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	4294967292              # 0xfffffffc
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	88                      # 0x58
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	5                       # 0x5
	.long	66                      # 0x42
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	44                      # 0x2c
	.long	4294967295              # 0xffffffff
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	51                      # 0x33
	.long	4294967292              # 0xfffffffc
	.long	47                      # 0x2f
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967293              # 0xfffffffd
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	8                       # 0x8
	.long	76                      # 0x4c
	.long	4294967287              # 0xfffffff7
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	83                      # 0x53
	.long	9                       # 0x9
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	90                      # 0x5a
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	80                      # 0x50
	.long	4294967275              # 0xffffffeb
	.long	83                      # 0x53
	.long	4294967275              # 0xffffffeb
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	31                      # 0x1f
	.long	4294967271              # 0xffffffe7
	.long	64                      # 0x40
	.long	4294967267              # 0xffffffe3
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	75                      # 0x4b
	.long	17                      # 0x11
	.long	63                      # 0x3f
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	27                      # 0x1b
	.long	13                      # 0xd
	.long	91                      # 0x5b
	.long	3                       # 0x3
	.long	65                      # 0x41
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	66                      # 0x42
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	4294967276              # 0xffffffec
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	4294967293              # 0xfffffffd
	.long	23                      # 0x17
	.long	4294967275              # 0xffffffeb
	.long	74                      # 0x4a
	.long	16                      # 0x10
	.long	66                      # 0x42
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	17                      # 0x11
	.long	37                      # 0x25
	.long	44                      # 0x2c
	.long	4294967278              # 0xffffffee
	.long	50                      # 0x32
	.long	4294967262              # 0xffffffde
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.size	INIT_MAP_P, 2880

	.type	INIT_LAST_I,@object     # @INIT_LAST_I
	.p2align	4
INIT_LAST_I:
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	8                       # 0x8
	.long	25                      # 0x19
	.long	13                      # 0xd
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	13                      # 0xd
	.long	19                      # 0x13
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	18                      # 0x12
	.long	6                       # 0x6
	.long	29                      # 0x1d
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	38                      # 0x26
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	42                      # 0x2a
	.long	13                      # 0xd
	.long	44                      # 0x2c
	.long	16                      # 0x10
	.long	45                      # 0x2d
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	49                      # 0x31
	.long	30                      # 0x1e
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	10                      # 0xa
	.long	55                      # 0x37
	.long	17                      # 0x11
	.long	51                      # 0x33
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	23                      # 0x17
	.long	4294967283              # 0xfffffff3
	.long	26                      # 0x1a
	.long	4294967283              # 0xfffffff3
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	49                      # 0x31
	.long	4294967282              # 0xfffffff2
	.long	44                      # 0x2c
	.long	3                       # 0x3
	.long	45                      # 0x2d
	.long	6                       # 0x6
	.long	44                      # 0x2c
	.long	34                      # 0x22
	.long	33                      # 0x21
	.long	54                      # 0x36
	.long	19                      # 0x13
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	26                      # 0x1a
	.long	4294967277              # 0xffffffed
	.long	22                      # 0x16
	.long	4294967279              # 0xffffffef
	.long	26                      # 0x1a
	.long	4294967279              # 0xffffffef
	.long	30                      # 0x1e
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967276              # 0xffffffec
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	37                      # 0x25
	.long	4294967269              # 0xffffffe5
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	40                      # 0x28
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967279              # 0xffffffef
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	41                      # 0x29
	.long	17                      # 0x11
	.long	30                      # 0x1e
	.long	4294967290              # 0xfffffffa
	.long	27                      # 0x1b
	.long	3                       # 0x3
	.long	26                      # 0x1a
	.long	22                      # 0x16
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967280              # 0xfffffff0
	.long	35                      # 0x23
	.long	4294967292              # 0xfffffffc
	.long	38                      # 0x26
	.long	4294967288              # 0xfffffff8
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	37                      # 0x25
	.long	3                       # 0x3
	.long	38                      # 0x26
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	22                      # 0x16
	.long	14                      # 0xe
	.long	48                      # 0x30
	.long	27                      # 0x1b
	.long	37                      # 0x25
	.long	21                      # 0x15
	.long	60                      # 0x3c
	.long	12                      # 0xc
	.long	68                      # 0x44
	.long	2                       # 0x2
	.long	97                      # 0x61
	.size	INIT_LAST_I, 960

	.type	INIT_LAST_P,@object     # @INIT_LAST_P
	.p2align	4
INIT_LAST_P:
	.long	11                      # 0xb
	.long	28                      # 0x1c
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	2                       # 0x2
	.long	44                      # 0x2c
	.long	2                       # 0x2
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	2                       # 0x2
	.long	62                      # 0x3e
	.long	6                       # 0x6
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	51                      # 0x33
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	53                      # 0x35
	.long	6                       # 0x6
	.long	52                      # 0x34
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	14                      # 0xe
	.long	36                      # 0x24
	.long	8                       # 0x8
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	82                      # 0x52
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	4294967295              # 0xffffffff
	.long	84                      # 0x54
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	26                      # 0x1a
	.long	4294967287              # 0xfffffff7
	.long	33                      # 0x21
	.long	4294967287              # 0xfffffff7
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	41                      # 0x29
	.long	4294967294              # 0xfffffffe
	.long	45                      # 0x2d
	.long	3                       # 0x3
	.long	49                      # 0x31
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	25                      # 0x19
	.long	7                       # 0x7
	.long	30                      # 0x1e
	.long	4294967289              # 0xfffffff9
	.long	28                      # 0x1c
	.long	3                       # 0x3
	.long	28                      # 0x1c
	.long	4                       # 0x4
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	30                      # 0x1e
	.long	37                      # 0x25
	.long	20                      # 0x14
	.long	28                      # 0x1c
	.long	34                      # 0x22
	.long	17                      # 0x11
	.long	70                      # 0x46
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	30                      # 0x1e
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	31                      # 0x1f
	.long	23                      # 0x17
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	43                      # 0x2b
	.long	20                      # 0x14
	.long	41                      # 0x29
	.long	11                      # 0xb
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	94                      # 0x5e
	.long	4294967294              # 0xfffffffe
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	108                     # 0x6c
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	10                      # 0xa
	.long	31                      # 0x1f
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	52                      # 0x34
	.long	4294967253              # 0xffffffd5
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	4294967274              # 0xffffffea
	.long	38                      # 0x26
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	4294967278              # 0xffffffee
	.long	32                      # 0x20
	.long	4294967284              # 0xfffffff4
	.long	102                     # 0x66
	.long	4294967202              # 0xffffffa2
	.zero	8
	.long	56                      # 0x38
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	4294967291              # 0xfffffffb
	.long	51                      # 0x33
	.long	4294967267              # 0xffffffe3
	.long	39                      # 0x27
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967262              # 0xffffffde
	.long	69                      # 0x45
	.long	4294967238              # 0xffffffc6
	.long	67                      # 0x43
	.long	4294967233              # 0xffffffc1
	.long	44                      # 0x2c
	.long	4294967291              # 0xfffffffb
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967267              # 0xffffffe3
	.long	32                      # 0x20
	.long	1                       # 0x1
	.zero	8
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	4294967266              # 0xffffffe2
	.long	36                      # 0x24
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967269              # 0xffffffe5
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	35                      # 0x23
	.long	4294967280              # 0xfffffff0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	32                      # 0x20
	.long	4294967288              # 0xfffffff8
	.long	37                      # 0x25
	.long	4294967290              # 0xfffffffa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	14                      # 0xe
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	35                      # 0x23
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	45                      # 0x2d
	.long	20                      # 0x14
	.long	42                      # 0x2a
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	66                      # 0x42
	.long	16                      # 0x10
	.long	56                      # 0x38
	.long	11                      # 0xb
	.long	73                      # 0x49
	.long	10                      # 0xa
	.long	67                      # 0x43
	.long	4294967286              # 0xfffffff6
	.long	116                     # 0x74
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	11                      # 0xb
	.long	29                      # 0x1d
	.long	8                       # 0x8
	.long	31                      # 0x1f
	.long	6                       # 0x6
	.long	37                      # 0x25
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	3                       # 0x3
	.long	40                      # 0x28
	.long	8                       # 0x8
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	43                      # 0x2b
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4                       # 0x4
	.long	47                      # 0x2f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	8                       # 0x8
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	48                      # 0x30
	.long	4                       # 0x4
	.long	56                      # 0x38
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	37                      # 0x25
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	19                      # 0x13
	.long	58                      # 0x3a
	.long	10                      # 0xa
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	8                       # 0x8
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	35                      # 0x23
	.long	4294967278              # 0xffffffee
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967293              # 0xfffffffd
	.long	24                      # 0x18
	.long	10                      # 0xa
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	52                      # 0x34
	.long	4294967252              # 0xffffffd4
	.long	39                      # 0x27
	.long	4294967272              # 0xffffffe8
	.long	19                      # 0x13
	.long	17                      # 0x11
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	36                      # 0x24
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	22                      # 0x16
	.long	73                      # 0x49
	.long	20                      # 0x14
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	21                      # 0x15
	.long	28                      # 0x1c
	.long	25                      # 0x19
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	93                      # 0x5d
	.long	14                      # 0xe
	.long	56                      # 0x38
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	38                      # 0x26
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.size	INIT_LAST_P, 2880

	.type	INIT_ONE_I,@object      # @INIT_ONE_I
	.p2align	4
INIT_ONE_I:
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967291              # 0xfffffffb
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	54                      # 0x36
	.long	4294967294              # 0xfffffffe
	.long	62                      # 0x3e
	.long	4294967291              # 0xfffffffb
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	27                      # 0x1b
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	23                      # 0x17
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967281              # 0xfffffff1
	.long	55                      # 0x37
	.long	4294967286              # 0xfffffff6
	.long	60                      # 0x3c
	.long	4294967290              # 0xfffffffa
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967276              # 0xffffffec
	.long	84                      # 0x54
	.long	4294967285              # 0xfffffff5
	.long	79                      # 0x4f
	.long	4294967290              # 0xfffffffa
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967288              # 0xfffffff8
	.long	78                      # 0x4e
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	48                      # 0x30
	.long	4294967294              # 0xfffffffe
	.long	53                      # 0x35
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_I, 320

	.type	INIT_ONE_P,@object      # @INIT_ONE_P
	.p2align	4
INIT_ONE_P:
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	77                      # 0x4d
	.long	3                       # 0x3
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	55                      # 0x37
	.long	4294967290              # 0xfffffffa
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967289              # 0xfffffff9
	.long	42                      # 0x2a
	.long	4294967288              # 0xfffffff8
	.long	45                      # 0x2d
	.long	4294967291              # 0xfffffffb
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	29                      # 0x1d
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	1                       # 0x1
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	5                       # 0x5
	.long	31                      # 0x1f
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	8                       # 0x8
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967273              # 0xffffffe9
	.long	112                     # 0x70
	.long	4294967281              # 0xfffffff1
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967275              # 0xffffffeb
	.long	101                     # 0x65
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	4294967294              # 0xfffffffe
	.long	42                      # 0x2a
	.long	4294967294              # 0xfffffffe
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	44                      # 0x2c
	.long	4294967286              # 0xfffffff6
	.long	52                      # 0x34
	.long	4294967286              # 0xfffffff6
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	31                      # 0x1f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	3                       # 0x3
	.long	52                      # 0x34
	.long	7                       # 0x7
	.long	4                       # 0x4
	.long	10                      # 0xa
	.long	8                       # 0x8
	.long	17                      # 0x11
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	19                      # 0x13
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967272              # 0xffffffe8
	.long	115                     # 0x73
	.long	4294967274              # 0xffffffea
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967275              # 0xffffffeb
	.long	100                     # 0x64
	.long	4294967282              # 0xfffffff2
	.long	57                      # 0x39
	.long	4294967284              # 0xfffffff4
	.long	67                      # 0x43
	.long	4294967285              # 0xfffffff5
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	37                      # 0x25
	.long	4294967288              # 0xfffffff8
	.long	44                      # 0x2c
	.long	4294967285              # 0xfffffff5
	.long	49                      # 0x31
	.long	4294967286              # 0xfffffff6
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	82                      # 0x52
	.long	4294967288              # 0xfffffff8
	.long	48                      # 0x30
	.long	4294967288              # 0xfffffff8
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967274              # 0xffffffea
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	75                      # 0x4b
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967283              # 0xfffffff3
	.long	81                      # 0x51
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	4294967283              # 0xfffffff3
	.long	62                      # 0x3e
	.long	4294967290              # 0xfffffffa
	.long	58                      # 0x3a
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_P, 960

	.type	INIT_ABS_I,@object      # @INIT_ABS_I
	.p2align	4
INIT_ABS_I:
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	72                      # 0x48
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967280              # 0xfffffff0
	.long	64                      # 0x40
	.long	4294967288              # 0xfffffff8
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	77                      # 0x4d
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967279              # 0xffffffef
	.long	110                     # 0x6e
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	96                      # 0x60
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967277              # 0xffffffed
	.long	117                     # 0x75
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967284              # 0xfffffff4
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967282              # 0xfffffff2
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_I, 320

	.type	INIT_ABS_P,@object      # @INIT_ABS_P
	.p2align	4
INIT_ABS_P:
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	82                      # 0x52
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967290              # 0xfffffffa
	.long	59                      # 0x3b
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967284              # 0xfffffff4
	.long	83                      # 0x53
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967266              # 0xffffffe2
	.long	119                     # 0x77
	.long	4294967284              # 0xfffffff4
	.long	56                      # 0x38
	.long	4294967290              # 0xfffffffa
	.long	60                      # 0x3c
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	79                      # 0x4f
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967262              # 0xffffffde
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	77                      # 0x4d
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967271              # 0xffffffe7
	.long	107                     # 0x6b
	.long	4294967271              # 0xffffffe7
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	122                     # 0x7a
	.long	4294967287              # 0xfffffff7
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967289              # 0xfffffff9
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	72                      # 0x48
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	4294967294              # 0xfffffffe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	37                      # 0x25
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967291              # 0xfffffffb
	.long	73                      # 0x49
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	89                      # 0x59
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967285              # 0xfffffff5
	.long	92                      # 0x5c
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	85                      # 0x55
	.long	4294967280              # 0xfffffff0
	.long	88                      # 0x58
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967281              # 0xfffffff1
	.long	98                      # 0x62
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	4294967284              # 0xfffffff4
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	63                      # 0x3f
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967290              # 0xfffffffa
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	75                      # 0x4b
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967278              # 0xffffffee
	.long	108                     # 0x6c
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	4294967283              # 0xfffffff3
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	76                      # 0x4c
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_P, 960

	.type	INIT_FLD_MAP_I,@object  # @INIT_FLD_MAP_I
	.p2align	4
INIT_FLD_MAP_I:
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967290              # 0xfffffffa
	.long	84                      # 0x54
	.long	4294967288              # 0xfffffff8
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967294              # 0xfffffffe
	.long	60                      # 0x3c
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	58                      # 0x3a
	.long	4294967287              # 0xfffffff7
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	40                      # 0x28
	.long	16                      # 0x10
	.long	27                      # 0x1b
	.long	12                      # 0xc
	.long	29                      # 0x1d
	.long	1                       # 0x1
	.long	44                      # 0x2c
	.long	20                      # 0x14
	.long	36                      # 0x24
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	48                      # 0x30
	.long	10                      # 0xa
	.long	62                      # 0x3e
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	106                     # 0x6a
	.long	4294967283              # 0xfffffff3
	.long	97                      # 0x61
	.long	4294967281              # 0xfffffff1
	.long	90                      # 0x5a
	.long	4294967284              # 0xfffffff4
	.long	90                      # 0x5a
	.long	4294967278              # 0xffffffee
	.long	88                      # 0x58
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967287              # 0xfffffff7
	.long	79                      # 0x4f
	.long	4294967282              # 0xfffffff2
	.long	86                      # 0x56
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	70                      # 0x46
	.long	4294967286              # 0xfffffff6
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967280              # 0xfffffff0
	.long	96                      # 0x60
	.long	4294967289              # 0xfffffff9
	.long	88                      # 0x58
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	4294967289              # 0xfffffff9
	.long	85                      # 0x55
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	88                      # 0x58
	.long	4                       # 0x4
	.long	66                      # 0x42
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	10                      # 0xa
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	76                      # 0x4c
	.long	4294967295              # 0xffffffff
	.long	83                      # 0x53
	.long	4294967289              # 0xfffffff9
	.long	99                      # 0x63
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	2                       # 0x2
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967282              # 0xfffffff2
	.long	73                      # 0x49
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	62                      # 0x3e
	.long	4294967295              # 0xffffffff
	.long	68                      # 0x44
	.long	4294967283              # 0xfffffff3
	.long	75                      # 0x4b
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	70                      # 0x46
	.size	INIT_FLD_MAP_I, 960

	.type	INIT_FLD_MAP_P,@object  # @INIT_FLD_MAP_P
	.p2align	4
INIT_FLD_MAP_P:
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967280              # 0xfffffff0
	.long	106                     # 0x6a
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967278              # 0xffffffee
	.long	110                     # 0x6e
	.long	4294967282              # 0xfffffff2
	.long	98                      # 0x62
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	106                     # 0x6a
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967273              # 0xffffffe9
	.long	108                     # 0x6c
	.long	4294967270              # 0xffffffe6
	.long	112                     # 0x70
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	4294967284              # 0xfffffff4
	.long	95                      # 0x5f
	.long	4294967291              # 0xfffffffb
	.long	91                      # 0x5b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	4294967274              # 0xffffffea
	.long	94                      # 0x5e
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	4294967292              # 0xfffffffc
	.long	80                      # 0x50
	.long	4294967286              # 0xfffffff6
	.long	85                      # 0x55
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	7                       # 0x7
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	58                      # 0x3a
	.long	5                       # 0x5
	.long	61                      # 0x3d
	.long	12                      # 0xc
	.long	50                      # 0x32
	.long	15                      # 0xf
	.long	50                      # 0x32
	.long	18                      # 0x12
	.long	49                      # 0x31
	.long	17                      # 0x11
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	7                       # 0x7
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	49                      # 0x31
	.long	8                       # 0x8
	.long	52                      # 0x34
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	6                       # 0x6
	.long	47                      # 0x2f
	.long	2                       # 0x2
	.long	55                      # 0x37
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	6                       # 0x6
	.long	50                      # 0x32
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	13                      # 0xd
	.long	49                      # 0x31
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	43                      # 0x2b
	.long	3                       # 0x3
	.long	53                      # 0x35
	.long	14                      # 0xe
	.long	34                      # 0x22
	.long	10                      # 0xa
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	44                      # 0x2c
	.long	7                       # 0x7
	.long	38                      # 0x26
	.long	13                      # 0xd
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	43                      # 0x2b
	.long	4294967275              # 0xffffffeb
	.long	126                     # 0x7e
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	4294967276              # 0xffffffec
	.long	110                     # 0x6e
	.long	4294967270              # 0xffffffe6
	.long	126                     # 0x7e
	.long	4294967271              # 0xffffffe7
	.long	124                     # 0x7c
	.long	4294967279              # 0xffffffef
	.long	105                     # 0x69
	.long	4294967269              # 0xffffffe5
	.long	121                     # 0x79
	.long	4294967269              # 0xffffffe5
	.long	117                     # 0x75
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967269              # 0xffffffe5
	.long	116                     # 0x74
	.long	4294967263              # 0xffffffdf
	.long	122                     # 0x7a
	.long	4294967286              # 0xfffffff6
	.long	95                      # 0x5f
	.long	4294967282              # 0xfffffff2
	.long	100                     # 0x64
	.long	4294967288              # 0xfffffff8
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	114                     # 0x72
	.long	4294967290              # 0xfffffffa
	.long	89                      # 0x59
	.long	4294967294              # 0xfffffffe
	.long	80                      # 0x50
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967288              # 0xfffffff8
	.long	81                      # 0x51
	.long	4294967295              # 0xffffffff
	.long	72                      # 0x48
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	9                       # 0x9
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	1                       # 0x1
	.long	69                      # 0x45
	.long	7                       # 0x7
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967284              # 0xfffffff4
	.long	72                      # 0x48
	.long	4294967282              # 0xfffffff2
	.long	68                      # 0x44
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	60                      # 0x3c
	.long	1                       # 0x1
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967280              # 0xfffffff0
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	61                      # 0x3d
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	65                      # 0x41
	.long	4294967293              # 0xfffffffd
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	9                       # 0x9
	.long	51                      # 0x33
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	37                      # 0x25
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	11                      # 0xb
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	2                       # 0x2
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	3                       # 0x3
	.long	50                      # 0x32
	.long	19                      # 0x13
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	66                      # 0x42
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	120                     # 0x78
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967277              # 0xffffffed
	.long	114                     # 0x72
	.long	4294967273              # 0xffffffe9
	.long	117                     # 0x75
	.long	4294967271              # 0xffffffe7
	.long	118                     # 0x76
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967272              # 0xffffffe8
	.long	113                     # 0x71
	.long	4294967268              # 0xffffffe4
	.long	118                     # 0x76
	.long	4294967265              # 0xffffffe1
	.long	120                     # 0x78
	.long	4294967259              # 0xffffffdb
	.long	124                     # 0x7c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	4294967281              # 0xfffffff1
	.long	102                     # 0x66
	.long	4294967286              # 0xfffffff6
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	92                      # 0x5c
	.long	17                      # 0x11
	.long	57                      # 0x39
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967284              # 0xfffffff4
	.long	91                      # 0x5b
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	4294967295              # 0xffffffff
	.long	73                      # 0x49
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	67                      # 0x43
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	54                      # 0x36
	.long	15                      # 0xf
	.long	44                      # 0x2c
	.long	5                       # 0x5
	.long	60                      # 0x3c
	.long	2                       # 0x2
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	86                      # 0x56
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	70                      # 0x46
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	74                      # 0x4a
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	54                      # 0x36
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967285              # 0xfffffff5
	.long	82                      # 0x52
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	25                      # 0x19
	.long	42                      # 0x2a
	.size	INIT_FLD_MAP_P, 2880

	.type	INIT_FLD_LAST_I,@object # @INIT_FLD_LAST_I
	.p2align	4
INIT_FLD_LAST_I:
	.long	15                      # 0xf
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	19                      # 0x13
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	23                      # 0x17
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	26                      # 0x1a
	.long	14                      # 0xe
	.long	44                      # 0x2c
	.long	17                      # 0x11
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	17                      # 0x11
	.long	21                      # 0x15
	.long	21                      # 0x15
	.long	25                      # 0x19
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	19                      # 0x13
	.long	35                      # 0x23
	.long	14                      # 0xe
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967284              # 0xfffffff4
	.long	109                     # 0x6d
	.long	21                      # 0x15
	.long	4294967286              # 0xfffffff6
	.long	24                      # 0x18
	.long	4294967285              # 0xfffffff5
	.long	28                      # 0x1c
	.long	4294967288              # 0xfffffff8
	.long	28                      # 0x1c
	.long	4294967295              # 0xffffffff
	.long	29                      # 0x1d
	.long	3                       # 0x3
	.long	29                      # 0x1d
	.long	9                       # 0x9
	.long	35                      # 0x23
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967261              # 0xffffffdd
	.long	36                      # 0x24
	.long	4294967262              # 0xffffffde
	.long	32                      # 0x20
	.long	4294967270              # 0xffffffe6
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	44                      # 0x2c
	.long	4294967264              # 0xffffffe0
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	34                      # 0x22
	.long	4294967281              # 0xfffffff1
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	33                      # 0x21
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	0                       # 0x0
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	35                      # 0x23
	.long	13                      # 0xd
	.long	58                      # 0x3a
	.long	29                      # 0x1d
	.long	4294967293              # 0xfffffffd
	.long	26                      # 0x1a
	.long	0                       # 0x0
	.long	22                      # 0x16
	.long	30                      # 0x1e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	31                      # 0x1f
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967293              # 0xfffffffd
	.long	34                      # 0x22
	.long	3                       # 0x3
	.long	36                      # 0x24
	.long	4294967295              # 0xffffffff
	.long	34                      # 0x22
	.long	5                       # 0x5
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	5                       # 0x5
	.long	34                      # 0x22
	.long	12                      # 0xc
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	30                      # 0x1e
	.long	29                      # 0x1d
	.long	34                      # 0x22
	.long	26                      # 0x1a
	.long	29                      # 0x1d
	.long	39                      # 0x27
	.long	19                      # 0x13
	.long	66                      # 0x42
	.size	INIT_FLD_LAST_I, 960

	.type	INIT_FLD_LAST_P,@object # @INIT_FLD_LAST_P
	.p2align	4
INIT_FLD_LAST_P:
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	9                       # 0x9
	.long	11                      # 0xb
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	21                      # 0x15
	.long	9                       # 0x9
	.long	23                      # 0x17
	.long	4294967294              # 0xfffffffe
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967275              # 0xffffffeb
	.long	39                      # 0x27
	.long	4294967273              # 0xffffffe9
	.long	42                      # 0x2a
	.long	4294967263              # 0xffffffdf
	.long	41                      # 0x29
	.long	4294967265              # 0xffffffe1
	.long	46                      # 0x2e
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	21                      # 0x15
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	45                      # 0x2d
	.long	4294967272              # 0xffffffe8
	.long	53                      # 0x35
	.long	4294967251              # 0xffffffd3
	.long	48                      # 0x30
	.long	4294967270              # 0xffffffe6
	.long	65                      # 0x41
	.long	4294967253              # 0xffffffd5
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	39                      # 0x27
	.long	4294967286              # 0xfffffff6
	.long	30                      # 0x1e
	.long	9                       # 0x9
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	20                      # 0x14
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967282              # 0xfffffff2
	.long	82                      # 0x52
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967277              # 0xffffffed
	.long	97                      # 0x61
	.long	4294967261              # 0xffffffdd
	.long	125                     # 0x7d
	.long	21                      # 0x15
	.long	4294967283              # 0xfffffff3
	.long	33                      # 0x21
	.long	4294967282              # 0xfffffff2
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	46                      # 0x2e
	.long	4294967294              # 0xfffffffe
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	61                      # 0x3d
	.long	17                      # 0x11
	.long	55                      # 0x37
	.long	34                      # 0x22
	.long	42                      # 0x2a
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	27                      # 0x1b
	.long	6                       # 0x6
	.long	34                      # 0x22
	.long	8                       # 0x8
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	24                      # 0x18
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	32                      # 0x20
	.long	26                      # 0x1a
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	41                      # 0x29
	.long	26                      # 0x1a
	.long	44                      # 0x2c
	.long	23                      # 0x17
	.long	47                      # 0x2f
	.long	16                      # 0x10
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	8                       # 0x8
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	63                      # 0x3f
	.long	17                      # 0x11
	.long	65                      # 0x41
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	21                      # 0x15
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	23                      # 0x17
	.long	28                      # 0x1c
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	40                      # 0x28
	.long	24                      # 0x18
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	42                      # 0x2a
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	22                      # 0x16
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	86                      # 0x56
	.long	19                      # 0x13
	.long	4294967290              # 0xfffffffa
	.long	18                      # 0x12
	.long	4294967290              # 0xfffffffa
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	26                      # 0x1a
	.long	4294967284              # 0xfffffff4
	.long	31                      # 0x1f
	.long	4294967280              # 0xfffffff0
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	33                      # 0x21
	.long	4294967274              # 0xffffffea
	.long	37                      # 0x25
	.long	4294967268              # 0xffffffe4
	.long	39                      # 0x27
	.long	4294967266              # 0xffffffe2
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	47                      # 0x2f
	.long	4294967254              # 0xffffffd6
	.long	45                      # 0x2d
	.long	4294967260              # 0xffffffdc
	.long	49                      # 0x31
	.long	4294967262              # 0xffffffde
	.long	41                      # 0x29
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	69                      # 0x45
	.long	4294967225              # 0xffffffb9
	.long	63                      # 0x3f
	.long	4294967233              # 0xffffffc1
	.long	66                      # 0x42
	.long	4294967232              # 0xffffffc0
	.long	77                      # 0x4d
	.long	4294967222              # 0xffffffb6
	.long	54                      # 0x36
	.long	4294967257              # 0xffffffd9
	.long	52                      # 0x34
	.long	4294967261              # 0xffffffdd
	.long	41                      # 0x29
	.long	4294967286              # 0xfffffff6
	.long	36                      # 0x24
	.long	0                       # 0x0
	.long	40                      # 0x28
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	14                      # 0xe
	.long	28                      # 0x1c
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	65                      # 0x41
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967263              # 0xffffffdf
	.long	39                      # 0x27
	.long	4294967260              # 0xffffffdc
	.long	40                      # 0x28
	.long	4294967259              # 0xffffffdb
	.long	38                      # 0x26
	.long	4294967266              # 0xffffffe2
	.long	46                      # 0x2e
	.long	4294967263              # 0xffffffdf
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	40                      # 0x28
	.long	4294967272              # 0xffffffe8
	.long	49                      # 0x31
	.long	4294967267              # 0xffffffe3
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	40                      # 0x28
	.long	4294967286              # 0xfffffff6
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967291              # 0xfffffffb
	.long	31                      # 0x1f
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	25                      # 0x19
	.long	44                      # 0x2c
	.long	12                      # 0xc
	.long	48                      # 0x30
	.long	11                      # 0xb
	.long	49                      # 0x31
	.long	26                      # 0x1a
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	22                      # 0x16
	.long	23                      # 0x17
	.long	22                      # 0x16
	.long	27                      # 0x1b
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	28                      # 0x1c
	.long	30                      # 0x1e
	.long	24                      # 0x18
	.long	27                      # 0x1b
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	25                      # 0x19
	.long	39                      # 0x27
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	11                      # 0xb
	.long	83                      # 0x53
	.long	17                      # 0x11
	.long	4294967283              # 0xfffffff3
	.long	16                      # 0x10
	.long	4294967287              # 0xfffffff7
	.long	17                      # 0x11
	.long	4294967284              # 0xfffffff4
	.long	27                      # 0x1b
	.long	4294967275              # 0xffffffeb
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	41                      # 0x29
	.long	4294967256              # 0xffffffd8
	.long	42                      # 0x2a
	.long	4294967255              # 0xffffffd7
	.long	48                      # 0x30
	.long	4294967249              # 0xffffffd1
	.long	39                      # 0x27
	.long	4294967264              # 0xffffffe0
	.long	46                      # 0x2e
	.long	4294967256              # 0xffffffd8
	.long	52                      # 0x34
	.long	4294967245              # 0xffffffcd
	.long	46                      # 0x2e
	.long	4294967255              # 0xffffffd7
	.long	52                      # 0x34
	.long	4294967257              # 0xffffffd9
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	61                      # 0x3d
	.long	4294967241              # 0xffffffc9
	.long	56                      # 0x38
	.long	4294967250              # 0xffffffd2
	.long	62                      # 0x3e
	.long	4294967246              # 0xffffffce
	.long	81                      # 0x51
	.long	4294967229              # 0xffffffbd
	.long	45                      # 0x2d
	.long	4294967276              # 0xffffffec
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	28                      # 0x1c
	.long	15                      # 0xf
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	39                      # 0x27
	.long	1                       # 0x1
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	20                      # 0x14
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	79                      # 0x4f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967280              # 0xfffffff0
	.long	37                      # 0x25
	.long	4294967282              # 0xfffffff2
	.long	37                      # 0x25
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	29                      # 0x1d
	.long	15                      # 0xf
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	16                      # 0x10
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	28                      # 0x1c
	.long	33                      # 0x21
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	28                      # 0x1c
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	21                      # 0x15
	.long	62                      # 0x3e
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	36                      # 0x24
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	29                      # 0x1d
	.long	22                      # 0x16
	.long	41                      # 0x29
	.long	22                      # 0x16
	.long	42                      # 0x2a
	.long	16                      # 0x10
	.long	60                      # 0x3c
	.long	15                      # 0xf
	.long	52                      # 0x34
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	3                       # 0x3
	.long	78                      # 0x4e
	.long	4294967280              # 0xfffffff0
	.long	123                     # 0x7b
	.long	21                      # 0x15
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	56                      # 0x38
	.long	25                      # 0x19
	.long	61                      # 0x3d
	.size	INIT_FLD_LAST_P, 2880

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
