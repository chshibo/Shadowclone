	.text
	.file	"decoder.c"
	.globl	decode_one_b8block      # -- Begin function decode_one_b8block
	.p2align	4, 0x90
	.type	decode_one_b8block,@function
decode_one_b8block:                     # @decode_one_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_9
# %bb.1:                                # %func_decode_one_b8block.1
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.1
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_decode_one_b8block.2
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.2
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_decode_one_b8block.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.18
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_decode_one_b8block.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_decode_one_b8block.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_decode_one_b8block.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_decode_one_b8block.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.32
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_decode_one_b8block.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
	jmp	.LBB0_8
.Lfunc_end0:
	.size	decode_one_b8block, .Lfunc_end0-decode_one_b8block
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block     # -- Begin function Get_Reference_Block
	.p2align	4, 0x90
	.type	Get_Reference_Block,@function
Get_Reference_Block:                    # @Get_Reference_Block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_9
# %bb.1:                                # %func_Get_Reference_Block.10
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	Get_Reference_Block.10
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_Get_Reference_Block.24
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_Get_Reference_Block.51
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_Get_Reference_Block.53
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_Get_Reference_Block.58
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_Get_Reference_Block.64
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_Get_Reference_Block.65
	.cfi_def_cfa %rbp, 16
	callq	Get_Reference_Block.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_Get_Reference_Block.66
	.cfi_def_cfa %rbp, 16
	callq	Get_Reference_Block.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movq	%r15, %rdi
	je	.LBB1_7
	jmp	.LBB1_8
.Lfunc_end1:
	.size	Get_Reference_Block, .Lfunc_end1-Get_Reference_Block
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb           # -- Begin function decode_one_mb
	.p2align	4, 0x90
	.type	decode_one_mb,@function
decode_one_mb:                          # @decode_one_mb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_decode_one_mb.29
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_decode_one_mb.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	decode_one_mb, .Lfunc_end2-decode_one_mb
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel     # -- Begin function Get_Reference_Pixel
	.p2align	4, 0x90
	.type	Get_Reference_Pixel,@function
Get_Reference_Pixel:                    # @Get_Reference_Pixel
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_9
# %bb.1:                                # %func_Get_Reference_Pixel.12
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.12
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_Get_Reference_Pixel.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.15
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_Get_Reference_Pixel.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.30
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_Get_Reference_Pixel.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.33
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_Get_Reference_Pixel.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.48
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_Get_Reference_Pixel.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.54
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_Get_Reference_Pixel.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.57
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_Get_Reference_Pixel.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.61
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
	jmp	.LBB3_8
.Lfunc_end3:
	.size	Get_Reference_Pixel, .Lfunc_end3-Get_Reference_Pixel
	.cfi_endproc
                                        # -- End function
	.globl	UpdateDecoders          # -- Begin function UpdateDecoders
	.p2align	4, 0x90
	.type	UpdateDecoders,@function
UpdateDecoders:                         # @UpdateDecoders
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB4_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	decs, %rax
	movq	40(%rax), %rdi
	callq	Build_Status_Map
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	40(%rax), %rsi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	Error_Concealment
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	DecOneForthPix
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	UpdateDecoders, .Lfunc_end4-UpdateDecoders
	.cfi_endproc
                                        # -- End function
	.globl	Build_Status_Map        # -- Begin function Build_Status_Map
	.p2align	4, 0x90
	.type	Build_Status_Map,@function
Build_Status_Map:                       # @Build_Status_Map
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_Build_Status_Map.4
	movq	%rbx, %rdi
	callq	Build_Status_Map.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_Build_Status_Map.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.14
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_Build_Status_Map.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_Build_Status_Map.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_Build_Status_Map.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.44
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_Build_Status_Map.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.46
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_Build_Status_Map.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_Build_Status_Map.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	Build_Status_Map, .Lfunc_end5-Build_Status_Map
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment       # -- Begin function Error_Concealment
	.p2align	4, 0x90
	.type	Error_Concealment,@function
Error_Concealment:                      # @Error_Concealment
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_Error_Concealment.6
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Error_Concealment.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.26
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Error_Concealment.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Error_Concealment.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_Error_Concealment.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_Error_Concealment.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_Error_Concealment.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.62
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_Error_Concealment.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	Error_Concealment, .Lfunc_end6-Error_Concealment
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix          # -- Begin function DecOneForthPix
	.p2align	4, 0x90
	.type	DecOneForthPix,@function
DecOneForthPix:                         # @DecOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_DecOneForthPix.3
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.3
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_DecOneForthPix.7
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.7
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_DecOneForthPix.8
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_DecOneForthPix.9
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.9
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_DecOneForthPix.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.21
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_DecOneForthPix.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_DecOneForthPix.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_DecOneForthPix.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	DecOneForthPix, .Lfunc_end7-DecOneForthPix
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block # -- Begin function compute_residue_b8block
	.p2align	4, 0x90
	.type	compute_residue_b8block,@function
compute_residue_b8block:                # @compute_residue_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_9
# %bb.1:                                # %func_compute_residue_b8block.5
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_compute_residue_b8block.11
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.11
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_compute_residue_b8block.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_compute_residue_b8block.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.22
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_compute_residue_b8block.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.37
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_compute_residue_b8block.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_compute_residue_b8block.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_compute_residue_b8block.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.45
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
	jmp	.LBB8_8
.Lfunc_end8:
	.size	compute_residue_b8block, .Lfunc_end8-compute_residue_b8block
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_mb      # -- Begin function compute_residue_mb
	.p2align	4, 0x90
	.type	compute_residue_mb,@function
compute_residue_mb:                     # @compute_residue_mb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %esi
	xorl	%edi, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$1, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$2, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$3, %edi
	callq	compute_residue_b8block
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	compute_residue_mb, .Lfunc_end9-compute_residue_mb
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error           # -- Begin function Conceal_Error
	.p2align	4, 0x90
	.type	Conceal_Error,@function
Conceal_Error:                          # @Conceal_Error
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_Conceal_Error.16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.16
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_Conceal_Error.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.17
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_Conceal_Error.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_Conceal_Error.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_Conceal_Error.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_Conceal_Error.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_Conceal_Error.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.56
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_Conceal_Error.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	Conceal_Error, .Lfunc_end10-Conceal_Error
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.1    # -- Begin function decode_one_b8block.1
	.p2align	4, 0x90
	.type	decode_one_b8block.1,@function
decode_one_b8block.1:                   # @decode_one_b8block.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2051588249, -84(%rbp)  # imm = 0x7A48C099
	movl	%edi, -44(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB11_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB11_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_4:                               # %for.cond9
                                        #   Parent Loop BB11_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB11_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB11_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB11_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_4
.LBB11_7:                               # %for.end
                                        #   in Loop: Header=BB11_2 Depth=1
	jmp	.LBB11_8
.LBB11_8:                               # %for.inc26
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_2
.LBB11_9:                               # %for.end28
	jmp	.LBB11_96
.LBB11_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB11_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB11_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB11_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB11_31
.LBB11_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB11_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB11_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_17:                              # %for.cond40
                                        #   Parent Loop BB11_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB11_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB11_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB11_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_17
.LBB11_20:                              # %for.end49
                                        #   in Loop: Header=BB11_15 Depth=1
	jmp	.LBB11_21
.LBB11_21:                              # %for.inc50
                                        #   in Loop: Header=BB11_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_15
.LBB11_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB11_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB11_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB11_25:                              # %for.cond56
                                        #   Parent Loop BB11_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB11_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB11_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_25
.LBB11_28:                              # %for.end71
                                        #   in Loop: Header=BB11_23 Depth=1
	jmp	.LBB11_29
.LBB11_29:                              # %for.inc72
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_23
.LBB11_30:                              # %for.end74
	jmp	.LBB11_60
.LBB11_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB11_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB11_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB11_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB11_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB11_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB11_36:                              # %for.cond83
                                        #   Parent Loop BB11_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB11_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB11_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_36
.LBB11_39:                              # %for.end120
                                        #   in Loop: Header=BB11_34 Depth=1
	jmp	.LBB11_40
.LBB11_40:                              # %for.inc121
                                        #   in Loop: Header=BB11_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_34
.LBB11_41:                              # %for.end123
	jmp	.LBB11_51
.LBB11_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB11_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB11_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB11_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB11_45:                              # %for.cond129
                                        #   Parent Loop BB11_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB11_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB11_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_45
.LBB11_48:                              # %for.end145
                                        #   in Loop: Header=BB11_43 Depth=1
	jmp	.LBB11_49
.LBB11_49:                              # %for.inc146
                                        #   in Loop: Header=BB11_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_43
.LBB11_50:                              # %for.end148
	jmp	.LBB11_51
.LBB11_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB11_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB11_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_54:                              # %for.cond153
                                        #   Parent Loop BB11_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB11_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB11_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB11_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_54
.LBB11_57:                              # %for.end167
                                        #   in Loop: Header=BB11_52 Depth=1
	jmp	.LBB11_58
.LBB11_58:                              # %for.inc168
                                        #   in Loop: Header=BB11_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_52
.LBB11_59:                              # %for.end170
	jmp	.LBB11_60
.LBB11_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB11_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB11_66
.LBB11_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB11_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB11_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB11_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB11_86
.LBB11_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB11_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_69 Depth 2
                                        #       Child Loop BB11_74 Depth 3
                                        #         Child Loop BB11_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB11_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB11_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB11_69:                              # %for.cond197
                                        #   Parent Loop BB11_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_74 Depth 3
                                        #         Child Loop BB11_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB11_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB11_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB11_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB11_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB11_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB11_73:                              # %if.end218
                                        #   in Loop: Header=BB11_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB11_74:                              # %for.cond233
                                        #   Parent Loop BB11_67 Depth=1
                                        #     Parent Loop BB11_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB11_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB11_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB11_74 Depth=3
	movl	$0, -4(%rbp)
.LBB11_76:                              # %for.cond237
                                        #   Parent Loop BB11_67 Depth=1
                                        #     Parent Loop BB11_69 Depth=2
                                        #       Parent Loop BB11_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB11_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB11_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB11_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_76
.LBB11_79:                              # %for.end269
                                        #   in Loop: Header=BB11_74 Depth=3
	jmp	.LBB11_80
.LBB11_80:                              # %for.inc270
                                        #   in Loop: Header=BB11_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_74
.LBB11_81:                              # %for.end272
                                        #   in Loop: Header=BB11_69 Depth=2
	jmp	.LBB11_82
.LBB11_82:                              # %for.inc273
                                        #   in Loop: Header=BB11_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_69
.LBB11_83:                              # %for.end275
                                        #   in Loop: Header=BB11_67 Depth=1
	jmp	.LBB11_84
.LBB11_84:                              # %for.inc276
                                        #   in Loop: Header=BB11_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_67
.LBB11_85:                              # %for.end278
	jmp	.LBB11_95
.LBB11_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB11_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB11_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_89:                              # %for.cond284
                                        #   Parent Loop BB11_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB11_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB11_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB11_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_89
.LBB11_92:                              # %for.end310
                                        #   in Loop: Header=BB11_87 Depth=1
	jmp	.LBB11_93
.LBB11_93:                              # %for.inc311
                                        #   in Loop: Header=BB11_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_87
.LBB11_94:                              # %for.end313
	jmp	.LBB11_95
.LBB11_95:                              # %if.end314
	jmp	.LBB11_96
.LBB11_96:                              # %if.end315
	cmpl	$2051588249, -84(%rbp)  # imm = 0x7A48C099
	jne	.LBB11_98
.LBB11_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_97
.Lfunc_end11:
	.size	decode_one_b8block.1, .Lfunc_end11-decode_one_b8block.1
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.2    # -- Begin function decode_one_b8block.2
	.p2align	4, 0x90
	.type	decode_one_b8block.2,@function
decode_one_b8block.2:                   # @decode_one_b8block.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1362026858, -84(%rbp)  # imm = 0x512EE16A
	movl	%edi, -56(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB12_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB12_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB12_4:                               # %for.cond9
                                        #   Parent Loop BB12_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB12_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB12_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB12_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_4
.LBB12_7:                               # %for.end
                                        #   in Loop: Header=BB12_2 Depth=1
	jmp	.LBB12_8
.LBB12_8:                               # %for.inc26
                                        #   in Loop: Header=BB12_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_2
.LBB12_9:                               # %for.end28
	jmp	.LBB12_96
.LBB12_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB12_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB12_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB12_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB12_31
.LBB12_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB12_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB12_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB12_17:                              # %for.cond40
                                        #   Parent Loop BB12_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB12_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB12_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB12_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_17
.LBB12_20:                              # %for.end49
                                        #   in Loop: Header=BB12_15 Depth=1
	jmp	.LBB12_21
.LBB12_21:                              # %for.inc50
                                        #   in Loop: Header=BB12_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_15
.LBB12_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB12_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB12_25:                              # %for.cond56
                                        #   Parent Loop BB12_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB12_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB12_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB12_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_25
.LBB12_28:                              # %for.end71
                                        #   in Loop: Header=BB12_23 Depth=1
	jmp	.LBB12_29
.LBB12_29:                              # %for.inc72
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_23
.LBB12_30:                              # %for.end74
	jmp	.LBB12_60
.LBB12_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB12_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB12_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB12_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB12_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB12_36:                              # %for.cond83
                                        #   Parent Loop BB12_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB12_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB12_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB12_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_36
.LBB12_39:                              # %for.end120
                                        #   in Loop: Header=BB12_34 Depth=1
	jmp	.LBB12_40
.LBB12_40:                              # %for.inc121
                                        #   in Loop: Header=BB12_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_34
.LBB12_41:                              # %for.end123
	jmp	.LBB12_51
.LBB12_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB12_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB12_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB12_45:                              # %for.cond129
                                        #   Parent Loop BB12_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB12_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB12_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB12_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_45
.LBB12_48:                              # %for.end145
                                        #   in Loop: Header=BB12_43 Depth=1
	jmp	.LBB12_49
.LBB12_49:                              # %for.inc146
                                        #   in Loop: Header=BB12_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_43
.LBB12_50:                              # %for.end148
	jmp	.LBB12_51
.LBB12_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB12_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB12_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB12_54:                              # %for.cond153
                                        #   Parent Loop BB12_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB12_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB12_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB12_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_54
.LBB12_57:                              # %for.end167
                                        #   in Loop: Header=BB12_52 Depth=1
	jmp	.LBB12_58
.LBB12_58:                              # %for.inc168
                                        #   in Loop: Header=BB12_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_52
.LBB12_59:                              # %for.end170
	jmp	.LBB12_60
.LBB12_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB12_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB12_66
.LBB12_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB12_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB12_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB12_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB12_86
.LBB12_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB12_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_69 Depth 2
                                        #       Child Loop BB12_74 Depth 3
                                        #         Child Loop BB12_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB12_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB12_69:                              # %for.cond197
                                        #   Parent Loop BB12_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_74 Depth 3
                                        #         Child Loop BB12_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB12_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB12_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB12_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB12_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB12_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB12_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB12_73:                              # %if.end218
                                        #   in Loop: Header=BB12_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB12_74:                              # %for.cond233
                                        #   Parent Loop BB12_67 Depth=1
                                        #     Parent Loop BB12_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB12_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB12_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB12_74 Depth=3
	movl	$0, -8(%rbp)
.LBB12_76:                              # %for.cond237
                                        #   Parent Loop BB12_67 Depth=1
                                        #     Parent Loop BB12_69 Depth=2
                                        #       Parent Loop BB12_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB12_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB12_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB12_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_76
.LBB12_79:                              # %for.end269
                                        #   in Loop: Header=BB12_74 Depth=3
	jmp	.LBB12_80
.LBB12_80:                              # %for.inc270
                                        #   in Loop: Header=BB12_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_74
.LBB12_81:                              # %for.end272
                                        #   in Loop: Header=BB12_69 Depth=2
	jmp	.LBB12_82
.LBB12_82:                              # %for.inc273
                                        #   in Loop: Header=BB12_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_69
.LBB12_83:                              # %for.end275
                                        #   in Loop: Header=BB12_67 Depth=1
	jmp	.LBB12_84
.LBB12_84:                              # %for.inc276
                                        #   in Loop: Header=BB12_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_67
.LBB12_85:                              # %for.end278
	jmp	.LBB12_95
.LBB12_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB12_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB12_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB12_89:                              # %for.cond284
                                        #   Parent Loop BB12_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB12_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB12_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB12_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_89
.LBB12_92:                              # %for.end310
                                        #   in Loop: Header=BB12_87 Depth=1
	jmp	.LBB12_93
.LBB12_93:                              # %for.inc311
                                        #   in Loop: Header=BB12_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_87
.LBB12_94:                              # %for.end313
	jmp	.LBB12_95
.LBB12_95:                              # %if.end314
	jmp	.LBB12_96
.LBB12_96:                              # %if.end315
	cmpl	$1362026858, -84(%rbp)  # imm = 0x512EE16A
	jne	.LBB12_98
.LBB12_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_97
.Lfunc_end12:
	.size	decode_one_b8block.2, .Lfunc_end12-decode_one_b8block.2
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.3        # -- Begin function DecOneForthPix.3
	.p2align	4, 0x90
	.type	DecOneForthPix.3,@function
DecOneForthPix.3:                       # @DecOneForthPix.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$527327114, -12(%rbp)   # imm = 0x1F6E5F8A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB13_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_1
.LBB13_4:                               # %for.end
	cmpl	$527327114, -12(%rbp)   # imm = 0x1F6E5F8A
	jne	.LBB13_6
.LBB13_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_5
.Lfunc_end13:
	.size	DecOneForthPix.3, .Lfunc_end13-DecOneForthPix.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.4
.LCPI14_0:
	.quad	4636737291354636288     # double 100
.LCPI14_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.4
	.p2align	4, 0x90
	.type	Build_Status_Map.4,@function
Build_Status_Map.4:                     # @Build_Status_Map.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1179353664, -44(%rbp)  # imm = 0x464B8240
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB14_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	$0, -8(%rbp)
.LBB14_3:                               # %for.cond2
                                        #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB14_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB14_13
.LBB14_6:                               # %if.then
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI14_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB14_8:                               # %if.end
                                        #   in Loop: Header=BB14_3 Depth=2
	callq	rand
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI14_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB14_10:                              # %if.end20
                                        #   in Loop: Header=BB14_3 Depth=2
	callq	rand
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI14_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	$1, -4(%rbp)
.LBB14_12:                              # %if.end29
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB14_13:                              # %if.end30
                                        #   in Loop: Header=BB14_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB14_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB14_18
.LBB14_15:                              # %if.else
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB14_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB14_17:                              # %if.end49
                                        #   in Loop: Header=BB14_3 Depth=2
	jmp	.LBB14_18
.LBB14_18:                              # %if.end50
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_3
.LBB14_20:                              # %for.end
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_21
.LBB14_21:                              # %for.inc53
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_1
.LBB14_22:                              # %for.end55
	cmpl	$1179353664, -44(%rbp)  # imm = 0x464B8240
	jne	.LBB14_24
.LBB14_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_23
.Lfunc_end14:
	.size	Build_Status_Map.4, .Lfunc_end14-Build_Status_Map.4
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.5 # -- Begin function compute_residue_b8block.5
	.p2align	4, 0x90
	.type	compute_residue_b8block.5,@function
compute_residue_b8block.5:              # @compute_residue_b8block.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$821283849, -36(%rbp)   # imm = 0x30F3CC09
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB15_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB15_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB15_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB15_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB15_4:                               # %for.cond4
                                        #   Parent Loop BB15_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB15_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB15_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB15_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_4
.LBB15_7:                               # %for.end
                                        #   in Loop: Header=BB15_2 Depth=1
	jmp	.LBB15_8
.LBB15_8:                               # %for.inc22
                                        #   in Loop: Header=BB15_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_2
.LBB15_9:                               # %for.end24
	jmp	.LBB15_19
.LBB15_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB15_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB15_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB15_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB15_13:                              # %for.cond29
                                        #   Parent Loop BB15_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB15_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB15_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB15_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_13
.LBB15_16:                              # %for.end56
                                        #   in Loop: Header=BB15_11 Depth=1
	jmp	.LBB15_17
.LBB15_17:                              # %for.inc57
                                        #   in Loop: Header=BB15_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_11
.LBB15_18:                              # %for.end59
	jmp	.LBB15_19
.LBB15_19:                              # %if.end
	cmpl	$821283849, -36(%rbp)   # imm = 0x30F3CC09
	jne	.LBB15_21
.LBB15_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_20
.Lfunc_end15:
	.size	compute_residue_b8block.5, .Lfunc_end15-compute_residue_b8block.5
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.6     # -- Begin function Error_Concealment.6
	.p2align	4, 0x90
	.type	Error_Concealment.6,@function
Error_Concealment.6:                    # @Error_Concealment.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$165840877, -16(%rbp)   # imm = 0x9E287ED
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB16_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_3:                               # %for.cond2
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB16_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB16_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB16_6:                               # %if.end
                                        #   in Loop: Header=BB16_3 Depth=2
	jmp	.LBB16_7
.LBB16_7:                               # %for.inc
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_3
.LBB16_8:                               # %for.end
                                        #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_9
.LBB16_9:                               # %for.inc7
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_1
.LBB16_10:                              # %for.end9
	cmpl	$165840877, -16(%rbp)   # imm = 0x9E287ED
	jne	.LBB16_12
.LBB16_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_11
.Lfunc_end16:
	.size	Error_Concealment.6, .Lfunc_end16-Error_Concealment.6
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.7        # -- Begin function DecOneForthPix.7
	.p2align	4, 0x90
	.type	DecOneForthPix.7,@function
DecOneForthPix.7:                       # @DecOneForthPix.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1141706689, -12(%rbp)  # imm = 0x440D0FC1
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB17_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_1
.LBB17_4:                               # %for.end
	cmpl	$1141706689, -12(%rbp)  # imm = 0x440D0FC1
	jne	.LBB17_6
.LBB17_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_5
.Lfunc_end17:
	.size	DecOneForthPix.7, .Lfunc_end17-DecOneForthPix.7
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.8        # -- Begin function DecOneForthPix.8
	.p2align	4, 0x90
	.type	DecOneForthPix.8,@function
DecOneForthPix.8:                       # @DecOneForthPix.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1101017354, -12(%rbp)  # imm = 0x41A0310A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB18_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_1
.LBB18_4:                               # %for.end
	cmpl	$1101017354, -12(%rbp)  # imm = 0x41A0310A
	jne	.LBB18_6
.LBB18_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_5
.Lfunc_end18:
	.size	DecOneForthPix.8, .Lfunc_end18-DecOneForthPix.8
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.9        # -- Begin function DecOneForthPix.9
	.p2align	4, 0x90
	.type	DecOneForthPix.9,@function
DecOneForthPix.9:                       # @DecOneForthPix.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1991914093, -8(%rbp)   # imm = 0x76BA326D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB19_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_1
.LBB19_4:                               # %for.end
	cmpl	$1991914093, -8(%rbp)   # imm = 0x76BA326D
	jne	.LBB19_6
.LBB19_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_5
.Lfunc_end19:
	.size	DecOneForthPix.9, .Lfunc_end19-DecOneForthPix.9
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.10  # -- Begin function Get_Reference_Block.10
	.p2align	4, 0x90
	.type	Get_Reference_Block.10,@function
Get_Reference_Block.10:                 # @Get_Reference_Block.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$198043774, -32(%rbp)   # imm = 0xBCDE87E
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB20_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	$0, -4(%rbp)
.LBB20_3:                               # %for.cond5
                                        #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB20_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_3
.LBB20_6:                               # %for.end
                                        #   in Loop: Header=BB20_1 Depth=1
	jmp	.LBB20_7
.LBB20_7:                               # %for.inc14
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_1
.LBB20_8:                               # %for.end16
	cmpl	$198043774, -32(%rbp)   # imm = 0xBCDE87E
	jne	.LBB20_10
.LBB20_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_9
.Lfunc_end20:
	.size	Get_Reference_Block.10, .Lfunc_end20-Get_Reference_Block.10
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.11 # -- Begin function compute_residue_b8block.11
	.p2align	4, 0x90
	.type	compute_residue_b8block.11,@function
compute_residue_b8block.11:             # @compute_residue_b8block.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2079602779, -36(%rbp)  # imm = 0x7BF4385B
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB21_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB21_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB21_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB21_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB21_4:                               # %for.cond4
                                        #   Parent Loop BB21_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB21_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB21_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB21_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_4
.LBB21_7:                               # %for.end
                                        #   in Loop: Header=BB21_2 Depth=1
	jmp	.LBB21_8
.LBB21_8:                               # %for.inc22
                                        #   in Loop: Header=BB21_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_2
.LBB21_9:                               # %for.end24
	jmp	.LBB21_19
.LBB21_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB21_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB21_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB21_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB21_13:                              # %for.cond29
                                        #   Parent Loop BB21_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB21_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB21_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB21_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_13
.LBB21_16:                              # %for.end56
                                        #   in Loop: Header=BB21_11 Depth=1
	jmp	.LBB21_17
.LBB21_17:                              # %for.inc57
                                        #   in Loop: Header=BB21_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_11
.LBB21_18:                              # %for.end59
	jmp	.LBB21_19
.LBB21_19:                              # %if.end
	cmpl	$2079602779, -36(%rbp)  # imm = 0x7BF4385B
	jne	.LBB21_21
.LBB21_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_20
.Lfunc_end21:
	.size	compute_residue_b8block.11, .Lfunc_end21-compute_residue_b8block.11
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.12  # -- Begin function Get_Reference_Pixel.12
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.12,@function
Get_Reference_Pixel.12:                 # @Get_Reference_Pixel.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$683122127, -100(%rbp)  # imm = 0x28B79DCF
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB22_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB22_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB22_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB22_5
.LBB22_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB22_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB22_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB22_11
.LBB22_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB22_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB22_10
.LBB22_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB22_10:                              # %cond.end14
.LBB22_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB22_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB22_14
.LBB22_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB22_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB22_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB22_20
.LBB22_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB22_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB22_19
.LBB22_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB22_19:                              # %cond.end29
.LBB22_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_332
.LBB22_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB22_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB22_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB22_25
.LBB22_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB22_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB22_31
.LBB22_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB22_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB22_30
.LBB22_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB22_30:                              # %cond.end52
.LBB22_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB22_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_36
.LBB22_35:                              # %cond.false61
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_36:                              # %cond.end63
                                        #   in Loop: Header=BB22_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB22_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_42
.LBB22_38:                              # %cond.false68
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_41
.LBB22_40:                              # %cond.false73
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_41:                              # %cond.end75
                                        #   in Loop: Header=BB22_32 Depth=1
.LBB22_42:                              # %cond.end77
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_32
.LBB22_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_47
.LBB22_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB22_53
.LBB22_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_52
.LBB22_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_52:                              # %cond.end113
.LBB22_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB22_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB22_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB22_57
.LBB22_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB22_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB22_63
.LBB22_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB22_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB22_62
.LBB22_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB22_62:                              # %cond.end136
.LBB22_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_76
.LBB22_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB22_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB22_68
.LBB22_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB22_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB22_74
.LBB22_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB22_73
.LBB22_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB22_73:                              # %cond.end169
.LBB22_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_75:                              # %if.end
	jmp	.LBB22_76
.LBB22_76:                              # %if.end178
	jmp	.LBB22_331
.LBB22_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB22_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB22_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB22_81
.LBB22_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB22_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB22_87
.LBB22_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB22_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB22_86
.LBB22_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB22_86:                              # %cond.end197
.LBB22_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB22_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_92
.LBB22_91:                              # %cond.false209
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_92:                              # %cond.end211
                                        #   in Loop: Header=BB22_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB22_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_98
.LBB22_94:                              # %cond.false216
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_97
.LBB22_96:                              # %cond.false221
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_97:                              # %cond.end223
                                        #   in Loop: Header=BB22_88 Depth=1
.LBB22_98:                              # %cond.end225
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_88
.LBB22_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_103
.LBB22_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB22_109
.LBB22_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_108
.LBB22_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_108:                             # %cond.end266
.LBB22_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB22_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB22_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB22_113
.LBB22_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB22_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB22_119
.LBB22_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB22_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB22_118
.LBB22_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB22_118:                             # %cond.end287
.LBB22_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_132
.LBB22_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB22_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB22_124
.LBB22_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB22_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB22_130
.LBB22_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB22_129
.LBB22_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB22_129:                             # %cond.end320
.LBB22_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_131:                             # %if.end331
	jmp	.LBB22_132
.LBB22_132:                             # %if.end332
	jmp	.LBB22_330
.LBB22_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB22_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB22_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_139
.LBB22_138:                             # %cond.false345
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_139:                             # %cond.end347
                                        #   in Loop: Header=BB22_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB22_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_145
.LBB22_141:                             # %cond.false352
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_144
.LBB22_143:                             # %cond.false357
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_144:                             # %cond.end359
                                        #   in Loop: Header=BB22_135 Depth=1
.LBB22_145:                             # %cond.end361
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_146:                             # %for.cond363
                                        #   Parent Loop BB22_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB22_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB22_150
.LBB22_149:                             # %cond.false371
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_150:                             # %cond.end373
                                        #   in Loop: Header=BB22_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB22_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB22_156
.LBB22_152:                             # %cond.false378
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB22_155
.LBB22_154:                             # %cond.false383
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_155:                             # %cond.end385
                                        #   in Loop: Header=BB22_146 Depth=2
.LBB22_156:                             # %cond.end387
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_146
.LBB22_158:                             # %for.end401
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_135
.LBB22_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB22_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB22_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB22_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_161
.LBB22_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_167
.LBB22_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB22_173
.LBB22_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_172
.LBB22_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_172:                             # %cond.end449
.LBB22_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB22_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_177
.LBB22_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB22_183
.LBB22_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_182
.LBB22_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_182:                             # %cond.end486
.LBB22_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_196
.LBB22_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB22_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_188
.LBB22_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB22_194
.LBB22_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_193
.LBB22_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_193:                             # %cond.end526
.LBB22_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_195:                             # %if.end532
	jmp	.LBB22_196
.LBB22_196:                             # %if.end533
	jmp	.LBB22_329
.LBB22_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB22_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB22_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB22_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_203
.LBB22_202:                             # %cond.false546
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_203:                             # %cond.end548
                                        #   in Loop: Header=BB22_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB22_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_209
.LBB22_205:                             # %cond.false553
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_208
.LBB22_207:                             # %cond.false558
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_208:                             # %cond.end560
                                        #   in Loop: Header=BB22_199 Depth=1
.LBB22_209:                             # %cond.end562
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_210:                             # %for.cond564
                                        #   Parent Loop BB22_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB22_214
.LBB22_213:                             # %cond.false572
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_214:                             # %cond.end574
                                        #   in Loop: Header=BB22_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB22_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB22_220
.LBB22_216:                             # %cond.false579
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB22_219
.LBB22_218:                             # %cond.false584
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_219:                             # %cond.end586
                                        #   in Loop: Header=BB22_210 Depth=2
.LBB22_220:                             # %cond.end588
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_210
.LBB22_222:                             # %for.end602
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_199
.LBB22_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB22_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB22_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB22_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_225
.LBB22_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_231
.LBB22_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB22_237
.LBB22_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_236
.LBB22_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_236:                             # %cond.end650
.LBB22_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB22_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_241
.LBB22_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB22_247
.LBB22_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_246
.LBB22_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_246:                             # %cond.end687
.LBB22_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_258
.LBB22_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_251
.LBB22_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB22_257
.LBB22_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_256
.LBB22_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_256:                             # %cond.end724
.LBB22_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_258:                             # %if.end730
	jmp	.LBB22_328
.LBB22_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB22_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB22_262
.LBB22_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB22_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB22_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB22_265
.LBB22_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB22_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB22_271
.LBB22_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB22_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB22_270
.LBB22_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB22_270:                             # %cond.end753
.LBB22_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB22_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_276
.LBB22_275:                             # %cond.false765
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_276:                             # %cond.end767
                                        #   in Loop: Header=BB22_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB22_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_282
.LBB22_278:                             # %cond.false772
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_281
.LBB22_280:                             # %cond.false777
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_281:                             # %cond.end779
                                        #   in Loop: Header=BB22_272 Depth=1
.LBB22_282:                             # %cond.end781
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_272
.LBB22_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_287
.LBB22_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB22_293
.LBB22_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_292
.LBB22_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_292:                             # %cond.end822
.LBB22_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB22_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB22_296
.LBB22_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB22_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB22_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB22_299
.LBB22_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB22_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB22_305
.LBB22_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB22_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB22_304
.LBB22_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB22_304:                             # %cond.end847
.LBB22_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB22_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_310
.LBB22_309:                             # %cond.false859
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_310:                             # %cond.end861
                                        #   in Loop: Header=BB22_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB22_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_316
.LBB22_312:                             # %cond.false866
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_315
.LBB22_314:                             # %cond.false871
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_315:                             # %cond.end873
                                        #   in Loop: Header=BB22_306 Depth=1
.LBB22_316:                             # %cond.end875
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_306
.LBB22_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_321
.LBB22_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB22_327
.LBB22_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_326
.LBB22_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_326:                             # %cond.end916
.LBB22_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_328:                             # %if.end922
	jmp	.LBB22_329
.LBB22_329:                             # %if.end923
	jmp	.LBB22_330
.LBB22_330:                             # %if.end924
	jmp	.LBB22_331
.LBB22_331:                             # %if.end925
	jmp	.LBB22_332
.LBB22_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$683122127, -100(%rbp)  # imm = 0x28B79DCF
	jne	.LBB22_334
.LBB22_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_333
.Lfunc_end22:
	.size	Get_Reference_Pixel.12, .Lfunc_end22-Get_Reference_Pixel.12
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.13 # -- Begin function compute_residue_b8block.13
	.p2align	4, 0x90
	.type	compute_residue_b8block.13,@function
compute_residue_b8block.13:             # @compute_residue_b8block.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1824550660, -36(%rbp)  # imm = 0x6CC06F04
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB23_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB23_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB23_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB23_4:                               # %for.cond4
                                        #   Parent Loop BB23_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB23_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB23_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB23_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_4
.LBB23_7:                               # %for.end
                                        #   in Loop: Header=BB23_2 Depth=1
	jmp	.LBB23_8
.LBB23_8:                               # %for.inc22
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_2
.LBB23_9:                               # %for.end24
	jmp	.LBB23_19
.LBB23_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB23_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB23_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB23_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB23_13:                              # %for.cond29
                                        #   Parent Loop BB23_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB23_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB23_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB23_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_13
.LBB23_16:                              # %for.end56
                                        #   in Loop: Header=BB23_11 Depth=1
	jmp	.LBB23_17
.LBB23_17:                              # %for.inc57
                                        #   in Loop: Header=BB23_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_11
.LBB23_18:                              # %for.end59
	jmp	.LBB23_19
.LBB23_19:                              # %if.end
	cmpl	$1824550660, -36(%rbp)  # imm = 0x6CC06F04
	jne	.LBB23_21
.LBB23_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_20
.Lfunc_end23:
	.size	compute_residue_b8block.13, .Lfunc_end23-compute_residue_b8block.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.14
.LCPI24_0:
	.quad	4636737291354636288     # double 100
.LCPI24_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.14
	.p2align	4, 0x90
	.type	Build_Status_Map.14,@function
Build_Status_Map.14:                    # @Build_Status_Map.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1192555089, -44(%rbp)  # imm = 0x4714F251
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB24_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	$0, -12(%rbp)
.LBB24_3:                               # %for.cond2
                                        #   Parent Loop BB24_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB24_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB24_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB24_13
.LBB24_6:                               # %if.then
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI24_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB24_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB24_8:                               # %if.end
                                        #   in Loop: Header=BB24_3 Depth=2
	callq	rand
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI24_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB24_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB24_10:                              # %if.end20
                                        #   in Loop: Header=BB24_3 Depth=2
	callq	rand
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI24_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB24_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	$1, -4(%rbp)
.LBB24_12:                              # %if.end29
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB24_13:                              # %if.end30
                                        #   in Loop: Header=BB24_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB24_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB24_18
.LBB24_15:                              # %if.else
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB24_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB24_17:                              # %if.end49
                                        #   in Loop: Header=BB24_3 Depth=2
	jmp	.LBB24_18
.LBB24_18:                              # %if.end50
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_3
.LBB24_20:                              # %for.end
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_21
.LBB24_21:                              # %for.inc53
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_1
.LBB24_22:                              # %for.end55
	cmpl	$1192555089, -44(%rbp)  # imm = 0x4714F251
	jne	.LBB24_24
.LBB24_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_23
.Lfunc_end24:
	.size	Build_Status_Map.14, .Lfunc_end24-Build_Status_Map.14
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.15  # -- Begin function Get_Reference_Pixel.15
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.15,@function
Get_Reference_Pixel.15:                 # @Get_Reference_Pixel.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$244917064, -104(%rbp)  # imm = 0xE992348
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB25_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB25_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB25_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB25_5
.LBB25_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB25_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB25_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB25_11
.LBB25_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB25_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB25_10
.LBB25_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB25_10:                              # %cond.end14
.LBB25_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB25_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB25_14
.LBB25_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB25_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB25_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB25_20
.LBB25_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB25_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB25_19
.LBB25_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB25_19:                              # %cond.end29
.LBB25_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_332
.LBB25_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB25_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB25_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB25_25
.LBB25_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB25_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB25_31
.LBB25_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB25_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB25_30
.LBB25_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB25_30:                              # %cond.end52
.LBB25_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB25_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB25_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_36
.LBB25_35:                              # %cond.false61
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_36:                              # %cond.end63
                                        #   in Loop: Header=BB25_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB25_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_42
.LBB25_38:                              # %cond.false68
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_41
.LBB25_40:                              # %cond.false73
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_41:                              # %cond.end75
                                        #   in Loop: Header=BB25_32 Depth=1
.LBB25_42:                              # %cond.end77
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_32
.LBB25_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_47
.LBB25_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB25_53
.LBB25_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_52
.LBB25_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_52:                              # %cond.end113
.LBB25_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB25_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB25_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB25_57
.LBB25_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB25_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB25_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB25_63
.LBB25_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB25_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB25_62
.LBB25_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB25_62:                              # %cond.end136
.LBB25_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB25_76
.LBB25_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB25_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB25_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB25_68
.LBB25_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB25_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB25_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB25_74
.LBB25_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB25_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB25_73
.LBB25_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB25_73:                              # %cond.end169
.LBB25_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB25_75:                              # %if.end
	jmp	.LBB25_76
.LBB25_76:                              # %if.end178
	jmp	.LBB25_331
.LBB25_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB25_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB25_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB25_81
.LBB25_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB25_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB25_87
.LBB25_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB25_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB25_86
.LBB25_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB25_86:                              # %cond.end197
.LBB25_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB25_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB25_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_92
.LBB25_91:                              # %cond.false209
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_92:                              # %cond.end211
                                        #   in Loop: Header=BB25_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB25_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_98
.LBB25_94:                              # %cond.false216
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_97
.LBB25_96:                              # %cond.false221
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_97:                              # %cond.end223
                                        #   in Loop: Header=BB25_88 Depth=1
.LBB25_98:                              # %cond.end225
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_88
.LBB25_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_103
.LBB25_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB25_109
.LBB25_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_108
.LBB25_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_108:                             # %cond.end266
.LBB25_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB25_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB25_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB25_113
.LBB25_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB25_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB25_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB25_119
.LBB25_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB25_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB25_118
.LBB25_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB25_118:                             # %cond.end287
.LBB25_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB25_132
.LBB25_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB25_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB25_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB25_124
.LBB25_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB25_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB25_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB25_130
.LBB25_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB25_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB25_129
.LBB25_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB25_129:                             # %cond.end320
.LBB25_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB25_131:                             # %if.end331
	jmp	.LBB25_132
.LBB25_132:                             # %if.end332
	jmp	.LBB25_330
.LBB25_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB25_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB25_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_139
.LBB25_138:                             # %cond.false345
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_139:                             # %cond.end347
                                        #   in Loop: Header=BB25_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB25_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_145
.LBB25_141:                             # %cond.false352
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_144
.LBB25_143:                             # %cond.false357
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_144:                             # %cond.end359
                                        #   in Loop: Header=BB25_135 Depth=1
.LBB25_145:                             # %cond.end361
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB25_146:                             # %for.cond363
                                        #   Parent Loop BB25_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB25_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB25_150
.LBB25_149:                             # %cond.false371
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_150:                             # %cond.end373
                                        #   in Loop: Header=BB25_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB25_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB25_156
.LBB25_152:                             # %cond.false378
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB25_155
.LBB25_154:                             # %cond.false383
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_155:                             # %cond.end385
                                        #   in Loop: Header=BB25_146 Depth=2
.LBB25_156:                             # %cond.end387
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_146
.LBB25_158:                             # %for.end401
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_135
.LBB25_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB25_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB25_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB25_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB25_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_161
.LBB25_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_167
.LBB25_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB25_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB25_173
.LBB25_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_172
.LBB25_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB25_172:                             # %cond.end449
.LBB25_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB25_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_177
.LBB25_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB25_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB25_183
.LBB25_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_182
.LBB25_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_182:                             # %cond.end486
.LBB25_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB25_196
.LBB25_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB25_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_188
.LBB25_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB25_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB25_194
.LBB25_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_193
.LBB25_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_193:                             # %cond.end526
.LBB25_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB25_195:                             # %if.end532
	jmp	.LBB25_196
.LBB25_196:                             # %if.end533
	jmp	.LBB25_329
.LBB25_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB25_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB25_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB25_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_203
.LBB25_202:                             # %cond.false546
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_203:                             # %cond.end548
                                        #   in Loop: Header=BB25_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB25_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_209
.LBB25_205:                             # %cond.false553
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_208
.LBB25_207:                             # %cond.false558
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_208:                             # %cond.end560
                                        #   in Loop: Header=BB25_199 Depth=1
.LBB25_209:                             # %cond.end562
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB25_210:                             # %for.cond564
                                        #   Parent Loop BB25_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB25_214
.LBB25_213:                             # %cond.false572
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_214:                             # %cond.end574
                                        #   in Loop: Header=BB25_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB25_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB25_220
.LBB25_216:                             # %cond.false579
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB25_219
.LBB25_218:                             # %cond.false584
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_219:                             # %cond.end586
                                        #   in Loop: Header=BB25_210 Depth=2
.LBB25_220:                             # %cond.end588
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_210
.LBB25_222:                             # %for.end602
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_199
.LBB25_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB25_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB25_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB25_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB25_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_225
.LBB25_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_231
.LBB25_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB25_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB25_237
.LBB25_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_236
.LBB25_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB25_236:                             # %cond.end650
.LBB25_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB25_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_241
.LBB25_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB25_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB25_247
.LBB25_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_246
.LBB25_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_246:                             # %cond.end687
.LBB25_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB25_258
.LBB25_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_251
.LBB25_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB25_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB25_257
.LBB25_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_256
.LBB25_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_256:                             # %cond.end724
.LBB25_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB25_258:                             # %if.end730
	jmp	.LBB25_328
.LBB25_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB25_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB25_262
.LBB25_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB25_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB25_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB25_265
.LBB25_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB25_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB25_271
.LBB25_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB25_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB25_270
.LBB25_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB25_270:                             # %cond.end753
.LBB25_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB25_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB25_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_276
.LBB25_275:                             # %cond.false765
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_276:                             # %cond.end767
                                        #   in Loop: Header=BB25_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB25_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_282
.LBB25_278:                             # %cond.false772
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_281
.LBB25_280:                             # %cond.false777
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_281:                             # %cond.end779
                                        #   in Loop: Header=BB25_272 Depth=1
.LBB25_282:                             # %cond.end781
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_272
.LBB25_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_287
.LBB25_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB25_293
.LBB25_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_292
.LBB25_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_292:                             # %cond.end822
.LBB25_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB25_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB25_296
.LBB25_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB25_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB25_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB25_299
.LBB25_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB25_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB25_305
.LBB25_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB25_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB25_304
.LBB25_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB25_304:                             # %cond.end847
.LBB25_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB25_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB25_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_310
.LBB25_309:                             # %cond.false859
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_310:                             # %cond.end861
                                        #   in Loop: Header=BB25_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB25_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_316
.LBB25_312:                             # %cond.false866
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_315
.LBB25_314:                             # %cond.false871
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_315:                             # %cond.end873
                                        #   in Loop: Header=BB25_306 Depth=1
.LBB25_316:                             # %cond.end875
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_306
.LBB25_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_321
.LBB25_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB25_327
.LBB25_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_326
.LBB25_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_326:                             # %cond.end916
.LBB25_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB25_328:                             # %if.end922
	jmp	.LBB25_329
.LBB25_329:                             # %if.end923
	jmp	.LBB25_330
.LBB25_330:                             # %if.end924
	jmp	.LBB25_331
.LBB25_331:                             # %if.end925
	jmp	.LBB25_332
.LBB25_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$244917064, -104(%rbp)  # imm = 0xE992348
	jne	.LBB25_334
.LBB25_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_333
.Lfunc_end25:
	.size	Get_Reference_Pixel.15, .Lfunc_end25-Get_Reference_Pixel.15
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.16        # -- Begin function Conceal_Error.16
	.p2align	4, 0x90
	.type	Conceal_Error.16,@function
Conceal_Error.16:                       # @Conceal_Error.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$81847936, -68(%rbp)    # imm = 0x4E0E680
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB26_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB26_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB26_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB26_4:                               # %land.end
.LBB26_5:                               # %lor.end
.LBB26_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB26_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB26_9
.LBB26_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB26_14
.LBB26_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB26_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB26_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB26_12:                              # %land.end51
.LBB26_13:                              # %lor.end53
.LBB26_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB26_180
# %bb.15:                               # %land.end54
	movq	.LJTI26_0(,%rax,8), %rax
	jmpq	*%rax
.LBB26_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB26_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB26_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB26_18 Depth=1
	movl	$0, -4(%rbp)
.LBB26_20:                              # %for.cond68
                                        #   Parent Loop BB26_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB26_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB26_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_20
.LBB26_23:                              # %for.end
                                        #   in Loop: Header=BB26_18 Depth=1
	jmp	.LBB26_24
.LBB26_24:                              # %for.inc85
                                        #   in Loop: Header=BB26_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_18
.LBB26_25:                              # %for.end87
	jmp	.LBB26_35
.LBB26_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB26_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB26_27 Depth=1
	movl	$0, -4(%rbp)
.LBB26_29:                              # %for.cond92
                                        #   Parent Loop BB26_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB26_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB26_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_29
.LBB26_32:                              # %for.end104
                                        #   in Loop: Header=BB26_27 Depth=1
	jmp	.LBB26_33
.LBB26_33:                              # %for.inc105
                                        #   in Loop: Header=BB26_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_27
.LBB26_34:                              # %for.end107
	jmp	.LBB26_35
.LBB26_35:                              # %if.end
	jmp	.LBB26_180
.LBB26_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB26_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_39 Depth 2
                                        #       Child Loop BB26_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB26_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB26_37 Depth=1
	movl	$0, -12(%rbp)
.LBB26_39:                              # %for.cond113
                                        #   Parent Loop BB26_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB26_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB26_39 Depth=2
	movl	$0, -4(%rbp)
.LBB26_41:                              # %for.cond117
                                        #   Parent Loop BB26_37 Depth=1
                                        #     Parent Loop BB26_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB26_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB26_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB26_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_41
.LBB26_44:                              # %for.end141
                                        #   in Loop: Header=BB26_39 Depth=2
	jmp	.LBB26_45
.LBB26_45:                              # %for.inc142
                                        #   in Loop: Header=BB26_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_39
.LBB26_46:                              # %for.end144
                                        #   in Loop: Header=BB26_37 Depth=1
	jmp	.LBB26_47
.LBB26_47:                              # %for.inc145
                                        #   in Loop: Header=BB26_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_37
.LBB26_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB26_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB26_49 Depth=1
	movl	$0, -8(%rbp)
.LBB26_51:                              # %for.cond152
                                        #   Parent Loop BB26_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB26_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB26_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_51
.LBB26_54:                              # %for.end162
                                        #   in Loop: Header=BB26_49 Depth=1
	jmp	.LBB26_55
.LBB26_55:                              # %for.inc163
                                        #   in Loop: Header=BB26_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_49
.LBB26_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB26_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB26_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB26_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB26_59 Depth=1
	movl	$0, -4(%rbp)
.LBB26_61:                              # %for.cond175
                                        #   Parent Loop BB26_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB26_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB26_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_61
.LBB26_64:                              # %for.end195
                                        #   in Loop: Header=BB26_59 Depth=1
	jmp	.LBB26_65
.LBB26_65:                              # %for.inc196
                                        #   in Loop: Header=BB26_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_59
.LBB26_66:                              # %for.end198
	jmp	.LBB26_95
.LBB26_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB26_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB26_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_71 Depth 2
                                        #       Child Loop BB26_73 Depth 3
                                        #         Child Loop BB26_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB26_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB26_71:                              # %for.cond210
                                        #   Parent Loop BB26_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_73 Depth 3
                                        #         Child Loop BB26_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB26_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB26_73:                              # %for.cond236
                                        #   Parent Loop BB26_69 Depth=1
                                        #     Parent Loop BB26_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB26_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB26_73 Depth=3
	movl	$0, -4(%rbp)
.LBB26_75:                              # %for.cond240
                                        #   Parent Loop BB26_69 Depth=1
                                        #     Parent Loop BB26_71 Depth=2
                                        #       Parent Loop BB26_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB26_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB26_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB26_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_75
.LBB26_78:                              # %for.end259
                                        #   in Loop: Header=BB26_73 Depth=3
	jmp	.LBB26_79
.LBB26_79:                              # %for.inc260
                                        #   in Loop: Header=BB26_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_73
.LBB26_80:                              # %for.end262
                                        #   in Loop: Header=BB26_71 Depth=2
	jmp	.LBB26_81
.LBB26_81:                              # %for.inc263
                                        #   in Loop: Header=BB26_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_71
.LBB26_82:                              # %for.end265
                                        #   in Loop: Header=BB26_69 Depth=1
	jmp	.LBB26_83
.LBB26_83:                              # %for.inc266
                                        #   in Loop: Header=BB26_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_69
.LBB26_84:                              # %for.end268
	jmp	.LBB26_94
.LBB26_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB26_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB26_86 Depth=1
	movl	$0, -4(%rbp)
.LBB26_88:                              # %for.cond274
                                        #   Parent Loop BB26_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB26_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB26_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_88
.LBB26_91:                              # %for.end294
                                        #   in Loop: Header=BB26_86 Depth=1
	jmp	.LBB26_92
.LBB26_92:                              # %for.inc295
                                        #   in Loop: Header=BB26_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_86
.LBB26_93:                              # %for.end297
	jmp	.LBB26_94
.LBB26_94:                              # %if.end298
	jmp	.LBB26_95
.LBB26_95:                              # %if.end299
	jmp	.LBB26_105
.LBB26_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB26_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB26_97 Depth=1
	movl	$0, -4(%rbp)
.LBB26_99:                              # %for.cond305
                                        #   Parent Loop BB26_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB26_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB26_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_99
.LBB26_102:                             # %for.end317
                                        #   in Loop: Header=BB26_97 Depth=1
	jmp	.LBB26_103
.LBB26_103:                             # %for.inc318
                                        #   in Loop: Header=BB26_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_97
.LBB26_104:                             # %for.end320
	jmp	.LBB26_105
.LBB26_105:                             # %if.end321
	jmp	.LBB26_180
.LBB26_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB26_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB26_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_110 Depth 2
                                        #       Child Loop BB26_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB26_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB26_108 Depth=1
	movl	$0, -12(%rbp)
.LBB26_110:                             # %for.cond331
                                        #   Parent Loop BB26_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB26_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB26_110 Depth=2
	movl	$0, -4(%rbp)
.LBB26_112:                             # %for.cond335
                                        #   Parent Loop BB26_108 Depth=1
                                        #     Parent Loop BB26_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB26_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB26_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB26_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_112
.LBB26_115:                             # %for.end359
                                        #   in Loop: Header=BB26_110 Depth=2
	jmp	.LBB26_116
.LBB26_116:                             # %for.inc360
                                        #   in Loop: Header=BB26_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_110
.LBB26_117:                             # %for.end362
                                        #   in Loop: Header=BB26_108 Depth=1
	jmp	.LBB26_118
.LBB26_118:                             # %for.inc363
                                        #   in Loop: Header=BB26_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_108
.LBB26_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB26_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB26_120 Depth=1
	movl	$0, -8(%rbp)
.LBB26_122:                             # %for.cond370
                                        #   Parent Loop BB26_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB26_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB26_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_122
.LBB26_125:                             # %for.end380
                                        #   in Loop: Header=BB26_120 Depth=1
	jmp	.LBB26_126
.LBB26_126:                             # %for.inc381
                                        #   in Loop: Header=BB26_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_120
.LBB26_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB26_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB26_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB26_129 Depth=1
	movl	$0, -4(%rbp)
.LBB26_131:                             # %for.cond390
                                        #   Parent Loop BB26_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB26_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB26_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_131
.LBB26_134:                             # %for.end410
                                        #   in Loop: Header=BB26_129 Depth=1
	jmp	.LBB26_135
.LBB26_135:                             # %for.inc411
                                        #   in Loop: Header=BB26_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_129
.LBB26_136:                             # %for.end413
	jmp	.LBB26_156
.LBB26_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB26_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB26_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_141 Depth 2
                                        #       Child Loop BB26_143 Depth 3
                                        #         Child Loop BB26_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB26_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB26_141:                             # %for.cond425
                                        #   Parent Loop BB26_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_143 Depth 3
                                        #         Child Loop BB26_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB26_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB26_143:                             # %for.cond452
                                        #   Parent Loop BB26_139 Depth=1
                                        #     Parent Loop BB26_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB26_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB26_143 Depth=3
	movl	$0, -4(%rbp)
.LBB26_145:                             # %for.cond456
                                        #   Parent Loop BB26_139 Depth=1
                                        #     Parent Loop BB26_141 Depth=2
                                        #       Parent Loop BB26_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB26_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB26_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB26_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_145
.LBB26_148:                             # %for.end475
                                        #   in Loop: Header=BB26_143 Depth=3
	jmp	.LBB26_149
.LBB26_149:                             # %for.inc476
                                        #   in Loop: Header=BB26_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_143
.LBB26_150:                             # %for.end478
                                        #   in Loop: Header=BB26_141 Depth=2
	jmp	.LBB26_151
.LBB26_151:                             # %for.inc479
                                        #   in Loop: Header=BB26_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_141
.LBB26_152:                             # %for.end481
                                        #   in Loop: Header=BB26_139 Depth=1
	jmp	.LBB26_153
.LBB26_153:                             # %for.inc482
                                        #   in Loop: Header=BB26_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_139
.LBB26_154:                             # %for.end484
	jmp	.LBB26_155
.LBB26_155:                             # %if.end485
	jmp	.LBB26_156
.LBB26_156:                             # %if.end486
	jmp	.LBB26_157
.LBB26_157:                             # %if.end487
	jmp	.LBB26_180
.LBB26_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB26_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB26_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB26_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB26_161 Depth=1
	movl	$0, -4(%rbp)
.LBB26_163:                             # %for.cond499
                                        #   Parent Loop BB26_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB26_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB26_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_163
.LBB26_166:                             # %for.end519
                                        #   in Loop: Header=BB26_161 Depth=1
	jmp	.LBB26_167
.LBB26_167:                             # %for.inc520
                                        #   in Loop: Header=BB26_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_161
.LBB26_168:                             # %for.end522
	jmp	.LBB26_169
.LBB26_169:                             # %if.end523
	jmp	.LBB26_179
.LBB26_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB26_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB26_171 Depth=1
	movl	$0, -4(%rbp)
.LBB26_173:                             # %for.cond529
                                        #   Parent Loop BB26_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB26_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB26_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_173
.LBB26_176:                             # %for.end541
                                        #   in Loop: Header=BB26_171 Depth=1
	jmp	.LBB26_177
.LBB26_177:                             # %for.inc542
                                        #   in Loop: Header=BB26_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_171
.LBB26_178:                             # %for.end544
	jmp	.LBB26_179
.LBB26_179:                             # %if.end545
	jmp	.LBB26_180
.LBB26_180:                             # %sw.epilog
	cmpl	$81847936, -68(%rbp)    # imm = 0x4E0E680
	jne	.LBB26_182
.LBB26_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_181
.Lfunc_end26:
	.size	Conceal_Error.16, .Lfunc_end26-Conceal_Error.16
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI26_0:
	.quad	.LBB26_16
	.quad	.LBB26_158
	.quad	.LBB26_106
	.quad	.LBB26_180
	.quad	.LBB26_36
                                        # -- End function
	.text
	.globl	Conceal_Error.17        # -- Begin function Conceal_Error.17
	.p2align	4, 0x90
	.type	Conceal_Error.17,@function
Conceal_Error.17:                       # @Conceal_Error.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$129100405, -68(%rbp)   # imm = 0x7B1EA75
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB27_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB27_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB27_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB27_4:                               # %land.end
.LBB27_5:                               # %lor.end
.LBB27_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB27_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB27_9
.LBB27_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB27_14
.LBB27_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB27_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB27_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB27_12:                              # %land.end51
.LBB27_13:                              # %lor.end53
.LBB27_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB27_180
# %bb.15:                               # %land.end54
	movq	.LJTI27_0(,%rax,8), %rax
	jmpq	*%rax
.LBB27_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB27_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB27_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB27_18 Depth=1
	movl	$0, -4(%rbp)
.LBB27_20:                              # %for.cond68
                                        #   Parent Loop BB27_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB27_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB27_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_20
.LBB27_23:                              # %for.end
                                        #   in Loop: Header=BB27_18 Depth=1
	jmp	.LBB27_24
.LBB27_24:                              # %for.inc85
                                        #   in Loop: Header=BB27_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_18
.LBB27_25:                              # %for.end87
	jmp	.LBB27_35
.LBB27_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB27_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB27_27 Depth=1
	movl	$0, -4(%rbp)
.LBB27_29:                              # %for.cond92
                                        #   Parent Loop BB27_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB27_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB27_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_29
.LBB27_32:                              # %for.end104
                                        #   in Loop: Header=BB27_27 Depth=1
	jmp	.LBB27_33
.LBB27_33:                              # %for.inc105
                                        #   in Loop: Header=BB27_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_27
.LBB27_34:                              # %for.end107
	jmp	.LBB27_35
.LBB27_35:                              # %if.end
	jmp	.LBB27_180
.LBB27_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB27_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_39 Depth 2
                                        #       Child Loop BB27_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB27_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB27_37 Depth=1
	movl	$0, -12(%rbp)
.LBB27_39:                              # %for.cond113
                                        #   Parent Loop BB27_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB27_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB27_39 Depth=2
	movl	$0, -4(%rbp)
.LBB27_41:                              # %for.cond117
                                        #   Parent Loop BB27_37 Depth=1
                                        #     Parent Loop BB27_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB27_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB27_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB27_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_41
.LBB27_44:                              # %for.end141
                                        #   in Loop: Header=BB27_39 Depth=2
	jmp	.LBB27_45
.LBB27_45:                              # %for.inc142
                                        #   in Loop: Header=BB27_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_39
.LBB27_46:                              # %for.end144
                                        #   in Loop: Header=BB27_37 Depth=1
	jmp	.LBB27_47
.LBB27_47:                              # %for.inc145
                                        #   in Loop: Header=BB27_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_37
.LBB27_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB27_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB27_49 Depth=1
	movl	$0, -8(%rbp)
.LBB27_51:                              # %for.cond152
                                        #   Parent Loop BB27_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB27_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB27_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_51
.LBB27_54:                              # %for.end162
                                        #   in Loop: Header=BB27_49 Depth=1
	jmp	.LBB27_55
.LBB27_55:                              # %for.inc163
                                        #   in Loop: Header=BB27_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_49
.LBB27_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB27_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB27_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB27_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB27_59 Depth=1
	movl	$0, -4(%rbp)
.LBB27_61:                              # %for.cond175
                                        #   Parent Loop BB27_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB27_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB27_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_61
.LBB27_64:                              # %for.end195
                                        #   in Loop: Header=BB27_59 Depth=1
	jmp	.LBB27_65
.LBB27_65:                              # %for.inc196
                                        #   in Loop: Header=BB27_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_59
.LBB27_66:                              # %for.end198
	jmp	.LBB27_95
.LBB27_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB27_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB27_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_71 Depth 2
                                        #       Child Loop BB27_73 Depth 3
                                        #         Child Loop BB27_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB27_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB27_71:                              # %for.cond210
                                        #   Parent Loop BB27_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_73 Depth 3
                                        #         Child Loop BB27_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB27_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB27_73:                              # %for.cond236
                                        #   Parent Loop BB27_69 Depth=1
                                        #     Parent Loop BB27_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB27_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB27_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB27_73 Depth=3
	movl	$0, -4(%rbp)
.LBB27_75:                              # %for.cond240
                                        #   Parent Loop BB27_69 Depth=1
                                        #     Parent Loop BB27_71 Depth=2
                                        #       Parent Loop BB27_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB27_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB27_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB27_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_75
.LBB27_78:                              # %for.end259
                                        #   in Loop: Header=BB27_73 Depth=3
	jmp	.LBB27_79
.LBB27_79:                              # %for.inc260
                                        #   in Loop: Header=BB27_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_73
.LBB27_80:                              # %for.end262
                                        #   in Loop: Header=BB27_71 Depth=2
	jmp	.LBB27_81
.LBB27_81:                              # %for.inc263
                                        #   in Loop: Header=BB27_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_71
.LBB27_82:                              # %for.end265
                                        #   in Loop: Header=BB27_69 Depth=1
	jmp	.LBB27_83
.LBB27_83:                              # %for.inc266
                                        #   in Loop: Header=BB27_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_69
.LBB27_84:                              # %for.end268
	jmp	.LBB27_94
.LBB27_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB27_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB27_86 Depth=1
	movl	$0, -4(%rbp)
.LBB27_88:                              # %for.cond274
                                        #   Parent Loop BB27_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB27_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB27_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_88
.LBB27_91:                              # %for.end294
                                        #   in Loop: Header=BB27_86 Depth=1
	jmp	.LBB27_92
.LBB27_92:                              # %for.inc295
                                        #   in Loop: Header=BB27_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_86
.LBB27_93:                              # %for.end297
	jmp	.LBB27_94
.LBB27_94:                              # %if.end298
	jmp	.LBB27_95
.LBB27_95:                              # %if.end299
	jmp	.LBB27_105
.LBB27_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB27_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB27_97 Depth=1
	movl	$0, -4(%rbp)
.LBB27_99:                              # %for.cond305
                                        #   Parent Loop BB27_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB27_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB27_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_99
.LBB27_102:                             # %for.end317
                                        #   in Loop: Header=BB27_97 Depth=1
	jmp	.LBB27_103
.LBB27_103:                             # %for.inc318
                                        #   in Loop: Header=BB27_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_97
.LBB27_104:                             # %for.end320
	jmp	.LBB27_105
.LBB27_105:                             # %if.end321
	jmp	.LBB27_180
.LBB27_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB27_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB27_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_110 Depth 2
                                        #       Child Loop BB27_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB27_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB27_108 Depth=1
	movl	$0, -12(%rbp)
.LBB27_110:                             # %for.cond331
                                        #   Parent Loop BB27_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB27_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB27_110 Depth=2
	movl	$0, -4(%rbp)
.LBB27_112:                             # %for.cond335
                                        #   Parent Loop BB27_108 Depth=1
                                        #     Parent Loop BB27_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB27_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB27_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB27_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_112
.LBB27_115:                             # %for.end359
                                        #   in Loop: Header=BB27_110 Depth=2
	jmp	.LBB27_116
.LBB27_116:                             # %for.inc360
                                        #   in Loop: Header=BB27_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_110
.LBB27_117:                             # %for.end362
                                        #   in Loop: Header=BB27_108 Depth=1
	jmp	.LBB27_118
.LBB27_118:                             # %for.inc363
                                        #   in Loop: Header=BB27_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_108
.LBB27_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB27_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB27_120 Depth=1
	movl	$0, -8(%rbp)
.LBB27_122:                             # %for.cond370
                                        #   Parent Loop BB27_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB27_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB27_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_122
.LBB27_125:                             # %for.end380
                                        #   in Loop: Header=BB27_120 Depth=1
	jmp	.LBB27_126
.LBB27_126:                             # %for.inc381
                                        #   in Loop: Header=BB27_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_120
.LBB27_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB27_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB27_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB27_129 Depth=1
	movl	$0, -4(%rbp)
.LBB27_131:                             # %for.cond390
                                        #   Parent Loop BB27_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB27_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB27_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_131
.LBB27_134:                             # %for.end410
                                        #   in Loop: Header=BB27_129 Depth=1
	jmp	.LBB27_135
.LBB27_135:                             # %for.inc411
                                        #   in Loop: Header=BB27_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_129
.LBB27_136:                             # %for.end413
	jmp	.LBB27_156
.LBB27_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB27_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB27_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_141 Depth 2
                                        #       Child Loop BB27_143 Depth 3
                                        #         Child Loop BB27_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB27_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB27_141:                             # %for.cond425
                                        #   Parent Loop BB27_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_143 Depth 3
                                        #         Child Loop BB27_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB27_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB27_143:                             # %for.cond452
                                        #   Parent Loop BB27_139 Depth=1
                                        #     Parent Loop BB27_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB27_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB27_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB27_143 Depth=3
	movl	$0, -4(%rbp)
.LBB27_145:                             # %for.cond456
                                        #   Parent Loop BB27_139 Depth=1
                                        #     Parent Loop BB27_141 Depth=2
                                        #       Parent Loop BB27_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB27_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB27_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB27_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_145
.LBB27_148:                             # %for.end475
                                        #   in Loop: Header=BB27_143 Depth=3
	jmp	.LBB27_149
.LBB27_149:                             # %for.inc476
                                        #   in Loop: Header=BB27_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_143
.LBB27_150:                             # %for.end478
                                        #   in Loop: Header=BB27_141 Depth=2
	jmp	.LBB27_151
.LBB27_151:                             # %for.inc479
                                        #   in Loop: Header=BB27_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_141
.LBB27_152:                             # %for.end481
                                        #   in Loop: Header=BB27_139 Depth=1
	jmp	.LBB27_153
.LBB27_153:                             # %for.inc482
                                        #   in Loop: Header=BB27_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_139
.LBB27_154:                             # %for.end484
	jmp	.LBB27_155
.LBB27_155:                             # %if.end485
	jmp	.LBB27_156
.LBB27_156:                             # %if.end486
	jmp	.LBB27_157
.LBB27_157:                             # %if.end487
	jmp	.LBB27_180
.LBB27_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB27_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB27_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB27_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB27_161 Depth=1
	movl	$0, -4(%rbp)
.LBB27_163:                             # %for.cond499
                                        #   Parent Loop BB27_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB27_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB27_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_163
.LBB27_166:                             # %for.end519
                                        #   in Loop: Header=BB27_161 Depth=1
	jmp	.LBB27_167
.LBB27_167:                             # %for.inc520
                                        #   in Loop: Header=BB27_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_161
.LBB27_168:                             # %for.end522
	jmp	.LBB27_169
.LBB27_169:                             # %if.end523
	jmp	.LBB27_179
.LBB27_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB27_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB27_171 Depth=1
	movl	$0, -4(%rbp)
.LBB27_173:                             # %for.cond529
                                        #   Parent Loop BB27_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB27_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB27_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_173
.LBB27_176:                             # %for.end541
                                        #   in Loop: Header=BB27_171 Depth=1
	jmp	.LBB27_177
.LBB27_177:                             # %for.inc542
                                        #   in Loop: Header=BB27_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_171
.LBB27_178:                             # %for.end544
	jmp	.LBB27_179
.LBB27_179:                             # %if.end545
	jmp	.LBB27_180
.LBB27_180:                             # %sw.epilog
	cmpl	$129100405, -68(%rbp)   # imm = 0x7B1EA75
	jne	.LBB27_182
.LBB27_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_181
.Lfunc_end27:
	.size	Conceal_Error.17, .Lfunc_end27-Conceal_Error.17
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI27_0:
	.quad	.LBB27_16
	.quad	.LBB27_158
	.quad	.LBB27_106
	.quad	.LBB27_180
	.quad	.LBB27_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.18   # -- Begin function decode_one_b8block.18
	.p2align	4, 0x90
	.type	decode_one_b8block.18,@function
decode_one_b8block.18:                  # @decode_one_b8block.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$414948168, -84(%rbp)   # imm = 0x18BB9B48
	movl	%edi, -44(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB28_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB28_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_4:                               # %for.cond9
                                        #   Parent Loop BB28_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB28_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB28_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB28_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_4
.LBB28_7:                               # %for.end
                                        #   in Loop: Header=BB28_2 Depth=1
	jmp	.LBB28_8
.LBB28_8:                               # %for.inc26
                                        #   in Loop: Header=BB28_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_2
.LBB28_9:                               # %for.end28
	jmp	.LBB28_96
.LBB28_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB28_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB28_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB28_31
.LBB28_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB28_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB28_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_17:                              # %for.cond40
                                        #   Parent Loop BB28_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB28_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB28_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB28_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_17
.LBB28_20:                              # %for.end49
                                        #   in Loop: Header=BB28_15 Depth=1
	jmp	.LBB28_21
.LBB28_21:                              # %for.inc50
                                        #   in Loop: Header=BB28_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_15
.LBB28_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB28_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_25:                              # %for.cond56
                                        #   Parent Loop BB28_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB28_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB28_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_25
.LBB28_28:                              # %for.end71
                                        #   in Loop: Header=BB28_23 Depth=1
	jmp	.LBB28_29
.LBB28_29:                              # %for.inc72
                                        #   in Loop: Header=BB28_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_23
.LBB28_30:                              # %for.end74
	jmp	.LBB28_60
.LBB28_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB28_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB28_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB28_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_36:                              # %for.cond83
                                        #   Parent Loop BB28_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB28_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB28_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_36
.LBB28_39:                              # %for.end120
                                        #   in Loop: Header=BB28_34 Depth=1
	jmp	.LBB28_40
.LBB28_40:                              # %for.inc121
                                        #   in Loop: Header=BB28_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_34
.LBB28_41:                              # %for.end123
	jmp	.LBB28_51
.LBB28_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB28_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_45:                              # %for.cond129
                                        #   Parent Loop BB28_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB28_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB28_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_45
.LBB28_48:                              # %for.end145
                                        #   in Loop: Header=BB28_43 Depth=1
	jmp	.LBB28_49
.LBB28_49:                              # %for.inc146
                                        #   in Loop: Header=BB28_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_43
.LBB28_50:                              # %for.end148
	jmp	.LBB28_51
.LBB28_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB28_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB28_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_54:                              # %for.cond153
                                        #   Parent Loop BB28_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB28_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB28_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB28_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_54
.LBB28_57:                              # %for.end167
                                        #   in Loop: Header=BB28_52 Depth=1
	jmp	.LBB28_58
.LBB28_58:                              # %for.inc168
                                        #   in Loop: Header=BB28_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_52
.LBB28_59:                              # %for.end170
	jmp	.LBB28_60
.LBB28_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB28_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB28_66
.LBB28_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB28_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB28_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB28_86
.LBB28_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_69 Depth 2
                                        #       Child Loop BB28_74 Depth 3
                                        #         Child Loop BB28_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB28_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_69:                              # %for.cond197
                                        #   Parent Loop BB28_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_74 Depth 3
                                        #         Child Loop BB28_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB28_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB28_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB28_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB28_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB28_73:                              # %if.end218
                                        #   in Loop: Header=BB28_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB28_74:                              # %for.cond233
                                        #   Parent Loop BB28_67 Depth=1
                                        #     Parent Loop BB28_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB28_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB28_74 Depth=3
	movl	$0, -8(%rbp)
.LBB28_76:                              # %for.cond237
                                        #   Parent Loop BB28_67 Depth=1
                                        #     Parent Loop BB28_69 Depth=2
                                        #       Parent Loop BB28_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB28_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB28_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB28_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_76
.LBB28_79:                              # %for.end269
                                        #   in Loop: Header=BB28_74 Depth=3
	jmp	.LBB28_80
.LBB28_80:                              # %for.inc270
                                        #   in Loop: Header=BB28_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_74
.LBB28_81:                              # %for.end272
                                        #   in Loop: Header=BB28_69 Depth=2
	jmp	.LBB28_82
.LBB28_82:                              # %for.inc273
                                        #   in Loop: Header=BB28_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_69
.LBB28_83:                              # %for.end275
                                        #   in Loop: Header=BB28_67 Depth=1
	jmp	.LBB28_84
.LBB28_84:                              # %for.inc276
                                        #   in Loop: Header=BB28_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_67
.LBB28_85:                              # %for.end278
	jmp	.LBB28_95
.LBB28_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB28_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB28_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_89:                              # %for.cond284
                                        #   Parent Loop BB28_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB28_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB28_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB28_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_89
.LBB28_92:                              # %for.end310
                                        #   in Loop: Header=BB28_87 Depth=1
	jmp	.LBB28_93
.LBB28_93:                              # %for.inc311
                                        #   in Loop: Header=BB28_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_87
.LBB28_94:                              # %for.end313
	jmp	.LBB28_95
.LBB28_95:                              # %if.end314
	jmp	.LBB28_96
.LBB28_96:                              # %if.end315
	cmpl	$414948168, -84(%rbp)   # imm = 0x18BB9B48
	jne	.LBB28_98
.LBB28_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_97
.Lfunc_end28:
	.size	decode_one_b8block.18, .Lfunc_end28-decode_one_b8block.18
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.19   # -- Begin function decode_one_b8block.19
	.p2align	4, 0x90
	.type	decode_one_b8block.19,@function
decode_one_b8block.19:                  # @decode_one_b8block.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2046521740, -84(%rbp)  # imm = 0x79FB718C
	movl	%edi, -44(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB29_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB29_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB29_4:                               # %for.cond9
                                        #   Parent Loop BB29_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB29_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB29_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB29_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_4
.LBB29_7:                               # %for.end
                                        #   in Loop: Header=BB29_2 Depth=1
	jmp	.LBB29_8
.LBB29_8:                               # %for.inc26
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_2
.LBB29_9:                               # %for.end28
	jmp	.LBB29_96
.LBB29_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB29_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB29_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB29_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB29_31
.LBB29_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB29_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB29_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB29_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB29_17:                              # %for.cond40
                                        #   Parent Loop BB29_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB29_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB29_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB29_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_17
.LBB29_20:                              # %for.end49
                                        #   in Loop: Header=BB29_15 Depth=1
	jmp	.LBB29_21
.LBB29_21:                              # %for.inc50
                                        #   in Loop: Header=BB29_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_15
.LBB29_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB29_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB29_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB29_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB29_25:                              # %for.cond56
                                        #   Parent Loop BB29_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB29_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB29_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB29_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_25
.LBB29_28:                              # %for.end71
                                        #   in Loop: Header=BB29_23 Depth=1
	jmp	.LBB29_29
.LBB29_29:                              # %for.inc72
                                        #   in Loop: Header=BB29_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_23
.LBB29_30:                              # %for.end74
	jmp	.LBB29_60
.LBB29_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB29_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB29_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB29_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB29_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB29_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB29_36:                              # %for.cond83
                                        #   Parent Loop BB29_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB29_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB29_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB29_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_36
.LBB29_39:                              # %for.end120
                                        #   in Loop: Header=BB29_34 Depth=1
	jmp	.LBB29_40
.LBB29_40:                              # %for.inc121
                                        #   in Loop: Header=BB29_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_34
.LBB29_41:                              # %for.end123
	jmp	.LBB29_51
.LBB29_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB29_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB29_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB29_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB29_45:                              # %for.cond129
                                        #   Parent Loop BB29_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB29_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB29_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB29_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_45
.LBB29_48:                              # %for.end145
                                        #   in Loop: Header=BB29_43 Depth=1
	jmp	.LBB29_49
.LBB29_49:                              # %for.inc146
                                        #   in Loop: Header=BB29_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_43
.LBB29_50:                              # %for.end148
	jmp	.LBB29_51
.LBB29_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB29_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB29_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB29_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB29_54:                              # %for.cond153
                                        #   Parent Loop BB29_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB29_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB29_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB29_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_54
.LBB29_57:                              # %for.end167
                                        #   in Loop: Header=BB29_52 Depth=1
	jmp	.LBB29_58
.LBB29_58:                              # %for.inc168
                                        #   in Loop: Header=BB29_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_52
.LBB29_59:                              # %for.end170
	jmp	.LBB29_60
.LBB29_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB29_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB29_66
.LBB29_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB29_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB29_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB29_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB29_86
.LBB29_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB29_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_69 Depth 2
                                        #       Child Loop BB29_74 Depth 3
                                        #         Child Loop BB29_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB29_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB29_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB29_69:                              # %for.cond197
                                        #   Parent Loop BB29_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_74 Depth 3
                                        #         Child Loop BB29_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB29_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB29_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB29_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB29_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB29_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB29_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB29_73:                              # %if.end218
                                        #   in Loop: Header=BB29_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB29_74:                              # %for.cond233
                                        #   Parent Loop BB29_67 Depth=1
                                        #     Parent Loop BB29_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB29_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB29_74 Depth=3
	movl	$0, -8(%rbp)
.LBB29_76:                              # %for.cond237
                                        #   Parent Loop BB29_67 Depth=1
                                        #     Parent Loop BB29_69 Depth=2
                                        #       Parent Loop BB29_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB29_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB29_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB29_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_76
.LBB29_79:                              # %for.end269
                                        #   in Loop: Header=BB29_74 Depth=3
	jmp	.LBB29_80
.LBB29_80:                              # %for.inc270
                                        #   in Loop: Header=BB29_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_74
.LBB29_81:                              # %for.end272
                                        #   in Loop: Header=BB29_69 Depth=2
	jmp	.LBB29_82
.LBB29_82:                              # %for.inc273
                                        #   in Loop: Header=BB29_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_69
.LBB29_83:                              # %for.end275
                                        #   in Loop: Header=BB29_67 Depth=1
	jmp	.LBB29_84
.LBB29_84:                              # %for.inc276
                                        #   in Loop: Header=BB29_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_67
.LBB29_85:                              # %for.end278
	jmp	.LBB29_95
.LBB29_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB29_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB29_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB29_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB29_89:                              # %for.cond284
                                        #   Parent Loop BB29_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB29_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB29_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB29_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_89
.LBB29_92:                              # %for.end310
                                        #   in Loop: Header=BB29_87 Depth=1
	jmp	.LBB29_93
.LBB29_93:                              # %for.inc311
                                        #   in Loop: Header=BB29_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_87
.LBB29_94:                              # %for.end313
	jmp	.LBB29_95
.LBB29_95:                              # %if.end314
	jmp	.LBB29_96
.LBB29_96:                              # %if.end315
	cmpl	$2046521740, -84(%rbp)  # imm = 0x79FB718C
	jne	.LBB29_98
.LBB29_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_97
.Lfunc_end29:
	.size	decode_one_b8block.19, .Lfunc_end29-decode_one_b8block.19
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.20   # -- Begin function decode_one_b8block.20
	.p2align	4, 0x90
	.type	decode_one_b8block.20,@function
decode_one_b8block.20:                  # @decode_one_b8block.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2052612286, -84(%rbp)  # imm = 0x7A5860BE
	movl	%edi, -40(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB30_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_4:                               # %for.cond9
                                        #   Parent Loop BB30_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB30_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB30_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB30_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_4
.LBB30_7:                               # %for.end
                                        #   in Loop: Header=BB30_2 Depth=1
	jmp	.LBB30_8
.LBB30_8:                               # %for.inc26
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_2
.LBB30_9:                               # %for.end28
	jmp	.LBB30_96
.LBB30_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB30_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB30_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB30_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB30_31
.LBB30_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB30_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB30_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_17:                              # %for.cond40
                                        #   Parent Loop BB30_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB30_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB30_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB30_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_17
.LBB30_20:                              # %for.end49
                                        #   in Loop: Header=BB30_15 Depth=1
	jmp	.LBB30_21
.LBB30_21:                              # %for.inc50
                                        #   in Loop: Header=BB30_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_15
.LBB30_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB30_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB30_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB30_25:                              # %for.cond56
                                        #   Parent Loop BB30_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB30_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB30_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_25
.LBB30_28:                              # %for.end71
                                        #   in Loop: Header=BB30_23 Depth=1
	jmp	.LBB30_29
.LBB30_29:                              # %for.inc72
                                        #   in Loop: Header=BB30_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_23
.LBB30_30:                              # %for.end74
	jmp	.LBB30_60
.LBB30_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB30_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB30_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB30_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB30_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB30_36:                              # %for.cond83
                                        #   Parent Loop BB30_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB30_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB30_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_36
.LBB30_39:                              # %for.end120
                                        #   in Loop: Header=BB30_34 Depth=1
	jmp	.LBB30_40
.LBB30_40:                              # %for.inc121
                                        #   in Loop: Header=BB30_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_34
.LBB30_41:                              # %for.end123
	jmp	.LBB30_51
.LBB30_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB30_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB30_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB30_45:                              # %for.cond129
                                        #   Parent Loop BB30_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB30_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB30_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_45
.LBB30_48:                              # %for.end145
                                        #   in Loop: Header=BB30_43 Depth=1
	jmp	.LBB30_49
.LBB30_49:                              # %for.inc146
                                        #   in Loop: Header=BB30_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_43
.LBB30_50:                              # %for.end148
	jmp	.LBB30_51
.LBB30_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB30_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB30_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_54:                              # %for.cond153
                                        #   Parent Loop BB30_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB30_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB30_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB30_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_54
.LBB30_57:                              # %for.end167
                                        #   in Loop: Header=BB30_52 Depth=1
	jmp	.LBB30_58
.LBB30_58:                              # %for.inc168
                                        #   in Loop: Header=BB30_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_52
.LBB30_59:                              # %for.end170
	jmp	.LBB30_60
.LBB30_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB30_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB30_66
.LBB30_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB30_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB30_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB30_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB30_86
.LBB30_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB30_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_69 Depth 2
                                        #       Child Loop BB30_74 Depth 3
                                        #         Child Loop BB30_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB30_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB30_69:                              # %for.cond197
                                        #   Parent Loop BB30_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_74 Depth 3
                                        #         Child Loop BB30_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB30_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB30_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB30_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB30_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB30_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB30_73:                              # %if.end218
                                        #   in Loop: Header=BB30_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB30_74:                              # %for.cond233
                                        #   Parent Loop BB30_67 Depth=1
                                        #     Parent Loop BB30_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB30_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB30_74 Depth=3
	movl	$0, -4(%rbp)
.LBB30_76:                              # %for.cond237
                                        #   Parent Loop BB30_67 Depth=1
                                        #     Parent Loop BB30_69 Depth=2
                                        #       Parent Loop BB30_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB30_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB30_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB30_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_76
.LBB30_79:                              # %for.end269
                                        #   in Loop: Header=BB30_74 Depth=3
	jmp	.LBB30_80
.LBB30_80:                              # %for.inc270
                                        #   in Loop: Header=BB30_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_74
.LBB30_81:                              # %for.end272
                                        #   in Loop: Header=BB30_69 Depth=2
	jmp	.LBB30_82
.LBB30_82:                              # %for.inc273
                                        #   in Loop: Header=BB30_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_69
.LBB30_83:                              # %for.end275
                                        #   in Loop: Header=BB30_67 Depth=1
	jmp	.LBB30_84
.LBB30_84:                              # %for.inc276
                                        #   in Loop: Header=BB30_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_67
.LBB30_85:                              # %for.end278
	jmp	.LBB30_95
.LBB30_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB30_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB30_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_89:                              # %for.cond284
                                        #   Parent Loop BB30_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB30_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB30_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB30_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_89
.LBB30_92:                              # %for.end310
                                        #   in Loop: Header=BB30_87 Depth=1
	jmp	.LBB30_93
.LBB30_93:                              # %for.inc311
                                        #   in Loop: Header=BB30_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_87
.LBB30_94:                              # %for.end313
	jmp	.LBB30_95
.LBB30_95:                              # %if.end314
	jmp	.LBB30_96
.LBB30_96:                              # %if.end315
	cmpl	$2052612286, -84(%rbp)  # imm = 0x7A5860BE
	jne	.LBB30_98
.LBB30_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_97
.Lfunc_end30:
	.size	decode_one_b8block.20, .Lfunc_end30-decode_one_b8block.20
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.21       # -- Begin function DecOneForthPix.21
	.p2align	4, 0x90
	.type	DecOneForthPix.21,@function
DecOneForthPix.21:                      # @DecOneForthPix.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1562479465, -8(%rbp)   # imm = 0x5D218B69
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB31_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_1
.LBB31_4:                               # %for.end
	cmpl	$1562479465, -8(%rbp)   # imm = 0x5D218B69
	jne	.LBB31_6
.LBB31_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_5
.Lfunc_end31:
	.size	DecOneForthPix.21, .Lfunc_end31-DecOneForthPix.21
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.22 # -- Begin function compute_residue_b8block.22
	.p2align	4, 0x90
	.type	compute_residue_b8block.22,@function
compute_residue_b8block.22:             # @compute_residue_b8block.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1604806920, -36(%rbp)  # imm = 0x5FA76908
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB32_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB32_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_4:                               # %for.cond4
                                        #   Parent Loop BB32_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB32_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB32_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB32_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_4
.LBB32_7:                               # %for.end
                                        #   in Loop: Header=BB32_2 Depth=1
	jmp	.LBB32_8
.LBB32_8:                               # %for.inc22
                                        #   in Loop: Header=BB32_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_2
.LBB32_9:                               # %for.end24
	jmp	.LBB32_19
.LBB32_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB32_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_13:                              # %for.cond29
                                        #   Parent Loop BB32_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB32_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB32_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB32_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_13
.LBB32_16:                              # %for.end56
                                        #   in Loop: Header=BB32_11 Depth=1
	jmp	.LBB32_17
.LBB32_17:                              # %for.inc57
                                        #   in Loop: Header=BB32_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_11
.LBB32_18:                              # %for.end59
	jmp	.LBB32_19
.LBB32_19:                              # %if.end
	cmpl	$1604806920, -36(%rbp)  # imm = 0x5FA76908
	jne	.LBB32_21
.LBB32_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_20
.Lfunc_end32:
	.size	compute_residue_b8block.22, .Lfunc_end32-compute_residue_b8block.22
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.23        # -- Begin function Conceal_Error.23
	.p2align	4, 0x90
	.type	Conceal_Error.23,@function
Conceal_Error.23:                       # @Conceal_Error.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1709474356, -68(%rbp)  # imm = 0x65E48234
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB33_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB33_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB33_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB33_4:                               # %land.end
.LBB33_5:                               # %lor.end
.LBB33_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB33_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB33_9
.LBB33_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB33_14
.LBB33_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB33_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB33_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB33_12:                              # %land.end51
.LBB33_13:                              # %lor.end53
.LBB33_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB33_180
# %bb.15:                               # %land.end54
	movq	.LJTI33_0(,%rax,8), %rax
	jmpq	*%rax
.LBB33_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB33_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB33_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB33_18 Depth=1
	movl	$0, -4(%rbp)
.LBB33_20:                              # %for.cond68
                                        #   Parent Loop BB33_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB33_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB33_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_20
.LBB33_23:                              # %for.end
                                        #   in Loop: Header=BB33_18 Depth=1
	jmp	.LBB33_24
.LBB33_24:                              # %for.inc85
                                        #   in Loop: Header=BB33_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_18
.LBB33_25:                              # %for.end87
	jmp	.LBB33_35
.LBB33_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB33_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB33_27 Depth=1
	movl	$0, -4(%rbp)
.LBB33_29:                              # %for.cond92
                                        #   Parent Loop BB33_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB33_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB33_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_29
.LBB33_32:                              # %for.end104
                                        #   in Loop: Header=BB33_27 Depth=1
	jmp	.LBB33_33
.LBB33_33:                              # %for.inc105
                                        #   in Loop: Header=BB33_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_27
.LBB33_34:                              # %for.end107
	jmp	.LBB33_35
.LBB33_35:                              # %if.end
	jmp	.LBB33_180
.LBB33_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB33_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_39 Depth 2
                                        #       Child Loop BB33_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB33_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB33_37 Depth=1
	movl	$0, -16(%rbp)
.LBB33_39:                              # %for.cond113
                                        #   Parent Loop BB33_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB33_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB33_39 Depth=2
	movl	$0, -4(%rbp)
.LBB33_41:                              # %for.cond117
                                        #   Parent Loop BB33_37 Depth=1
                                        #     Parent Loop BB33_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB33_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB33_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB33_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_41
.LBB33_44:                              # %for.end141
                                        #   in Loop: Header=BB33_39 Depth=2
	jmp	.LBB33_45
.LBB33_45:                              # %for.inc142
                                        #   in Loop: Header=BB33_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_39
.LBB33_46:                              # %for.end144
                                        #   in Loop: Header=BB33_37 Depth=1
	jmp	.LBB33_47
.LBB33_47:                              # %for.inc145
                                        #   in Loop: Header=BB33_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_37
.LBB33_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB33_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB33_49 Depth=1
	movl	$0, -8(%rbp)
.LBB33_51:                              # %for.cond152
                                        #   Parent Loop BB33_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB33_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB33_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_51
.LBB33_54:                              # %for.end162
                                        #   in Loop: Header=BB33_49 Depth=1
	jmp	.LBB33_55
.LBB33_55:                              # %for.inc163
                                        #   in Loop: Header=BB33_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_49
.LBB33_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB33_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB33_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB33_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB33_59 Depth=1
	movl	$0, -4(%rbp)
.LBB33_61:                              # %for.cond175
                                        #   Parent Loop BB33_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB33_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB33_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_61
.LBB33_64:                              # %for.end195
                                        #   in Loop: Header=BB33_59 Depth=1
	jmp	.LBB33_65
.LBB33_65:                              # %for.inc196
                                        #   in Loop: Header=BB33_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_59
.LBB33_66:                              # %for.end198
	jmp	.LBB33_95
.LBB33_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB33_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB33_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_71 Depth 2
                                        #       Child Loop BB33_73 Depth 3
                                        #         Child Loop BB33_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB33_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB33_71:                              # %for.cond210
                                        #   Parent Loop BB33_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_73 Depth 3
                                        #         Child Loop BB33_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB33_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB33_73:                              # %for.cond236
                                        #   Parent Loop BB33_69 Depth=1
                                        #     Parent Loop BB33_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB33_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB33_73 Depth=3
	movl	$0, -4(%rbp)
.LBB33_75:                              # %for.cond240
                                        #   Parent Loop BB33_69 Depth=1
                                        #     Parent Loop BB33_71 Depth=2
                                        #       Parent Loop BB33_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB33_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB33_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB33_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_75
.LBB33_78:                              # %for.end259
                                        #   in Loop: Header=BB33_73 Depth=3
	jmp	.LBB33_79
.LBB33_79:                              # %for.inc260
                                        #   in Loop: Header=BB33_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_73
.LBB33_80:                              # %for.end262
                                        #   in Loop: Header=BB33_71 Depth=2
	jmp	.LBB33_81
.LBB33_81:                              # %for.inc263
                                        #   in Loop: Header=BB33_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_71
.LBB33_82:                              # %for.end265
                                        #   in Loop: Header=BB33_69 Depth=1
	jmp	.LBB33_83
.LBB33_83:                              # %for.inc266
                                        #   in Loop: Header=BB33_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_69
.LBB33_84:                              # %for.end268
	jmp	.LBB33_94
.LBB33_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB33_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB33_86 Depth=1
	movl	$0, -4(%rbp)
.LBB33_88:                              # %for.cond274
                                        #   Parent Loop BB33_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB33_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB33_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_88
.LBB33_91:                              # %for.end294
                                        #   in Loop: Header=BB33_86 Depth=1
	jmp	.LBB33_92
.LBB33_92:                              # %for.inc295
                                        #   in Loop: Header=BB33_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_86
.LBB33_93:                              # %for.end297
	jmp	.LBB33_94
.LBB33_94:                              # %if.end298
	jmp	.LBB33_95
.LBB33_95:                              # %if.end299
	jmp	.LBB33_105
.LBB33_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB33_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB33_97 Depth=1
	movl	$0, -4(%rbp)
.LBB33_99:                              # %for.cond305
                                        #   Parent Loop BB33_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB33_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB33_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_99
.LBB33_102:                             # %for.end317
                                        #   in Loop: Header=BB33_97 Depth=1
	jmp	.LBB33_103
.LBB33_103:                             # %for.inc318
                                        #   in Loop: Header=BB33_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_97
.LBB33_104:                             # %for.end320
	jmp	.LBB33_105
.LBB33_105:                             # %if.end321
	jmp	.LBB33_180
.LBB33_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB33_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB33_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_110 Depth 2
                                        #       Child Loop BB33_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB33_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB33_108 Depth=1
	movl	$0, -16(%rbp)
.LBB33_110:                             # %for.cond331
                                        #   Parent Loop BB33_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB33_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB33_110 Depth=2
	movl	$0, -4(%rbp)
.LBB33_112:                             # %for.cond335
                                        #   Parent Loop BB33_108 Depth=1
                                        #     Parent Loop BB33_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB33_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB33_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB33_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_112
.LBB33_115:                             # %for.end359
                                        #   in Loop: Header=BB33_110 Depth=2
	jmp	.LBB33_116
.LBB33_116:                             # %for.inc360
                                        #   in Loop: Header=BB33_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_110
.LBB33_117:                             # %for.end362
                                        #   in Loop: Header=BB33_108 Depth=1
	jmp	.LBB33_118
.LBB33_118:                             # %for.inc363
                                        #   in Loop: Header=BB33_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_108
.LBB33_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB33_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB33_120 Depth=1
	movl	$0, -8(%rbp)
.LBB33_122:                             # %for.cond370
                                        #   Parent Loop BB33_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB33_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB33_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_122
.LBB33_125:                             # %for.end380
                                        #   in Loop: Header=BB33_120 Depth=1
	jmp	.LBB33_126
.LBB33_126:                             # %for.inc381
                                        #   in Loop: Header=BB33_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_120
.LBB33_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB33_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB33_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB33_129 Depth=1
	movl	$0, -4(%rbp)
.LBB33_131:                             # %for.cond390
                                        #   Parent Loop BB33_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB33_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB33_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_131
.LBB33_134:                             # %for.end410
                                        #   in Loop: Header=BB33_129 Depth=1
	jmp	.LBB33_135
.LBB33_135:                             # %for.inc411
                                        #   in Loop: Header=BB33_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_129
.LBB33_136:                             # %for.end413
	jmp	.LBB33_156
.LBB33_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB33_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB33_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_141 Depth 2
                                        #       Child Loop BB33_143 Depth 3
                                        #         Child Loop BB33_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB33_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB33_141:                             # %for.cond425
                                        #   Parent Loop BB33_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_143 Depth 3
                                        #         Child Loop BB33_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB33_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB33_143:                             # %for.cond452
                                        #   Parent Loop BB33_139 Depth=1
                                        #     Parent Loop BB33_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB33_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB33_143 Depth=3
	movl	$0, -4(%rbp)
.LBB33_145:                             # %for.cond456
                                        #   Parent Loop BB33_139 Depth=1
                                        #     Parent Loop BB33_141 Depth=2
                                        #       Parent Loop BB33_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB33_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB33_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB33_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_145
.LBB33_148:                             # %for.end475
                                        #   in Loop: Header=BB33_143 Depth=3
	jmp	.LBB33_149
.LBB33_149:                             # %for.inc476
                                        #   in Loop: Header=BB33_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_143
.LBB33_150:                             # %for.end478
                                        #   in Loop: Header=BB33_141 Depth=2
	jmp	.LBB33_151
.LBB33_151:                             # %for.inc479
                                        #   in Loop: Header=BB33_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_141
.LBB33_152:                             # %for.end481
                                        #   in Loop: Header=BB33_139 Depth=1
	jmp	.LBB33_153
.LBB33_153:                             # %for.inc482
                                        #   in Loop: Header=BB33_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_139
.LBB33_154:                             # %for.end484
	jmp	.LBB33_155
.LBB33_155:                             # %if.end485
	jmp	.LBB33_156
.LBB33_156:                             # %if.end486
	jmp	.LBB33_157
.LBB33_157:                             # %if.end487
	jmp	.LBB33_180
.LBB33_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB33_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB33_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB33_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB33_161 Depth=1
	movl	$0, -4(%rbp)
.LBB33_163:                             # %for.cond499
                                        #   Parent Loop BB33_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB33_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB33_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_163
.LBB33_166:                             # %for.end519
                                        #   in Loop: Header=BB33_161 Depth=1
	jmp	.LBB33_167
.LBB33_167:                             # %for.inc520
                                        #   in Loop: Header=BB33_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_161
.LBB33_168:                             # %for.end522
	jmp	.LBB33_169
.LBB33_169:                             # %if.end523
	jmp	.LBB33_179
.LBB33_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB33_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB33_171 Depth=1
	movl	$0, -4(%rbp)
.LBB33_173:                             # %for.cond529
                                        #   Parent Loop BB33_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB33_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB33_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_173
.LBB33_176:                             # %for.end541
                                        #   in Loop: Header=BB33_171 Depth=1
	jmp	.LBB33_177
.LBB33_177:                             # %for.inc542
                                        #   in Loop: Header=BB33_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_171
.LBB33_178:                             # %for.end544
	jmp	.LBB33_179
.LBB33_179:                             # %if.end545
	jmp	.LBB33_180
.LBB33_180:                             # %sw.epilog
	cmpl	$1709474356, -68(%rbp)  # imm = 0x65E48234
	jne	.LBB33_182
.LBB33_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_181
.Lfunc_end33:
	.size	Conceal_Error.23, .Lfunc_end33-Conceal_Error.23
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI33_0:
	.quad	.LBB33_16
	.quad	.LBB33_158
	.quad	.LBB33_106
	.quad	.LBB33_180
	.quad	.LBB33_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.24  # -- Begin function Get_Reference_Block.24
	.p2align	4, 0x90
	.type	Get_Reference_Block.24,@function
Get_Reference_Block.24:                 # @Get_Reference_Block.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1700038580, -20(%rbp)  # imm = 0x655487B4
	movq	%rdi, -56(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -48(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_3:                               # %for.cond5
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB34_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_3
.LBB34_6:                               # %for.end
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_7
.LBB34_7:                               # %for.inc14
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_1
.LBB34_8:                               # %for.end16
	cmpl	$1700038580, -20(%rbp)  # imm = 0x655487B4
	jne	.LBB34_10
.LBB34_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_9
.Lfunc_end34:
	.size	Get_Reference_Block.24, .Lfunc_end34-Get_Reference_Block.24
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.25   # -- Begin function decode_one_b8block.25
	.p2align	4, 0x90
	.type	decode_one_b8block.25,@function
decode_one_b8block.25:                  # @decode_one_b8block.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1197218645, -84(%rbp)  # imm = 0x475C1B55
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB35_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB35_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_4:                               # %for.cond9
                                        #   Parent Loop BB35_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB35_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB35_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB35_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_4
.LBB35_7:                               # %for.end
                                        #   in Loop: Header=BB35_2 Depth=1
	jmp	.LBB35_8
.LBB35_8:                               # %for.inc26
                                        #   in Loop: Header=BB35_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_2
.LBB35_9:                               # %for.end28
	jmp	.LBB35_96
.LBB35_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB35_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB35_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB35_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB35_31
.LBB35_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB35_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB35_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_17:                              # %for.cond40
                                        #   Parent Loop BB35_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB35_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB35_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB35_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_17
.LBB35_20:                              # %for.end49
                                        #   in Loop: Header=BB35_15 Depth=1
	jmp	.LBB35_21
.LBB35_21:                              # %for.inc50
                                        #   in Loop: Header=BB35_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_15
.LBB35_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB35_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB35_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB35_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB35_25:                              # %for.cond56
                                        #   Parent Loop BB35_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB35_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB35_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB35_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_25
.LBB35_28:                              # %for.end71
                                        #   in Loop: Header=BB35_23 Depth=1
	jmp	.LBB35_29
.LBB35_29:                              # %for.inc72
                                        #   in Loop: Header=BB35_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_23
.LBB35_30:                              # %for.end74
	jmp	.LBB35_60
.LBB35_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB35_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB35_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB35_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB35_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB35_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB35_36:                              # %for.cond83
                                        #   Parent Loop BB35_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB35_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB35_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB35_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_36
.LBB35_39:                              # %for.end120
                                        #   in Loop: Header=BB35_34 Depth=1
	jmp	.LBB35_40
.LBB35_40:                              # %for.inc121
                                        #   in Loop: Header=BB35_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_34
.LBB35_41:                              # %for.end123
	jmp	.LBB35_51
.LBB35_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB35_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB35_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB35_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB35_45:                              # %for.cond129
                                        #   Parent Loop BB35_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB35_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB35_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB35_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_45
.LBB35_48:                              # %for.end145
                                        #   in Loop: Header=BB35_43 Depth=1
	jmp	.LBB35_49
.LBB35_49:                              # %for.inc146
                                        #   in Loop: Header=BB35_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_43
.LBB35_50:                              # %for.end148
	jmp	.LBB35_51
.LBB35_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB35_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB35_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_54:                              # %for.cond153
                                        #   Parent Loop BB35_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB35_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB35_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB35_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_54
.LBB35_57:                              # %for.end167
                                        #   in Loop: Header=BB35_52 Depth=1
	jmp	.LBB35_58
.LBB35_58:                              # %for.inc168
                                        #   in Loop: Header=BB35_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_52
.LBB35_59:                              # %for.end170
	jmp	.LBB35_60
.LBB35_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB35_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB35_66
.LBB35_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB35_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB35_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB35_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB35_86
.LBB35_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB35_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_69 Depth 2
                                        #       Child Loop BB35_74 Depth 3
                                        #         Child Loop BB35_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB35_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB35_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB35_69:                              # %for.cond197
                                        #   Parent Loop BB35_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_74 Depth 3
                                        #         Child Loop BB35_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB35_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB35_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB35_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB35_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB35_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB35_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB35_73:                              # %if.end218
                                        #   in Loop: Header=BB35_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB35_74:                              # %for.cond233
                                        #   Parent Loop BB35_67 Depth=1
                                        #     Parent Loop BB35_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB35_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB35_74 Depth=3
	movl	$0, -8(%rbp)
.LBB35_76:                              # %for.cond237
                                        #   Parent Loop BB35_67 Depth=1
                                        #     Parent Loop BB35_69 Depth=2
                                        #       Parent Loop BB35_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB35_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB35_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB35_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_76
.LBB35_79:                              # %for.end269
                                        #   in Loop: Header=BB35_74 Depth=3
	jmp	.LBB35_80
.LBB35_80:                              # %for.inc270
                                        #   in Loop: Header=BB35_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_74
.LBB35_81:                              # %for.end272
                                        #   in Loop: Header=BB35_69 Depth=2
	jmp	.LBB35_82
.LBB35_82:                              # %for.inc273
                                        #   in Loop: Header=BB35_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_69
.LBB35_83:                              # %for.end275
                                        #   in Loop: Header=BB35_67 Depth=1
	jmp	.LBB35_84
.LBB35_84:                              # %for.inc276
                                        #   in Loop: Header=BB35_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_67
.LBB35_85:                              # %for.end278
	jmp	.LBB35_95
.LBB35_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB35_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB35_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_89:                              # %for.cond284
                                        #   Parent Loop BB35_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB35_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB35_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB35_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_89
.LBB35_92:                              # %for.end310
                                        #   in Loop: Header=BB35_87 Depth=1
	jmp	.LBB35_93
.LBB35_93:                              # %for.inc311
                                        #   in Loop: Header=BB35_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_87
.LBB35_94:                              # %for.end313
	jmp	.LBB35_95
.LBB35_95:                              # %if.end314
	jmp	.LBB35_96
.LBB35_96:                              # %if.end315
	cmpl	$1197218645, -84(%rbp)  # imm = 0x475C1B55
	jne	.LBB35_98
.LBB35_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_97
.Lfunc_end35:
	.size	decode_one_b8block.25, .Lfunc_end35-decode_one_b8block.25
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.26    # -- Begin function Error_Concealment.26
	.p2align	4, 0x90
	.type	Error_Concealment.26,@function
Error_Concealment.26:                   # @Error_Concealment.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1535058557, -16(%rbp)  # imm = 0x5B7F227D
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB36_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_3:                               # %for.cond2
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB36_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB36_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB36_6:                               # %if.end
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_7
.LBB36_7:                               # %for.inc
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_3
.LBB36_8:                               # %for.end
                                        #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_9
.LBB36_9:                               # %for.inc7
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_1
.LBB36_10:                              # %for.end9
	cmpl	$1535058557, -16(%rbp)  # imm = 0x5B7F227D
	jne	.LBB36_12
.LBB36_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_11
.Lfunc_end36:
	.size	Error_Concealment.26, .Lfunc_end36-Error_Concealment.26
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.27       # -- Begin function DecOneForthPix.27
	.p2align	4, 0x90
	.type	DecOneForthPix.27,@function
DecOneForthPix.27:                      # @DecOneForthPix.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1748477620, -12(%rbp)  # imm = 0x6837A6B4
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB37_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_1
.LBB37_4:                               # %for.end
	cmpl	$1748477620, -12(%rbp)  # imm = 0x6837A6B4
	jne	.LBB37_6
.LBB37_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_5
.Lfunc_end37:
	.size	DecOneForthPix.27, .Lfunc_end37-DecOneForthPix.27
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.28       # -- Begin function DecOneForthPix.28
	.p2align	4, 0x90
	.type	DecOneForthPix.28,@function
DecOneForthPix.28:                      # @DecOneForthPix.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$361094238, -12(%rbp)   # imm = 0x1585DC5E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB38_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_1
.LBB38_4:                               # %for.end
	cmpl	$361094238, -12(%rbp)   # imm = 0x1585DC5E
	jne	.LBB38_6
.LBB38_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_5
.Lfunc_end38:
	.size	DecOneForthPix.28, .Lfunc_end38-DecOneForthPix.28
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.29        # -- Begin function decode_one_mb.29
	.p2align	4, 0x90
	.type	decode_one_mb.29,@function
decode_one_mb.29:                       # @decode_one_mb.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$109863595, -4(%rbp)    # imm = 0x68C62AB
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$109863595, -4(%rbp)    # imm = 0x68C62AB
	jne	.LBB39_2
.LBB39_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_1
.Lfunc_end39:
	.size	decode_one_mb.29, .Lfunc_end39-decode_one_mb.29
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.30  # -- Begin function Get_Reference_Pixel.30
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.30,@function
Get_Reference_Pixel.30:                 # @Get_Reference_Pixel.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1902369322, -104(%rbp) # imm = 0x7163DA2A
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB40_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB40_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB40_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB40_5
.LBB40_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB40_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB40_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB40_11
.LBB40_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB40_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB40_10
.LBB40_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB40_10:                              # %cond.end14
.LBB40_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB40_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB40_14
.LBB40_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB40_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB40_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB40_20
.LBB40_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB40_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB40_19
.LBB40_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB40_19:                              # %cond.end29
.LBB40_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_332
.LBB40_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB40_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB40_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB40_25
.LBB40_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB40_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB40_31
.LBB40_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB40_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB40_30
.LBB40_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB40_30:                              # %cond.end52
.LBB40_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB40_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB40_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_36
.LBB40_35:                              # %cond.false61
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_36:                              # %cond.end63
                                        #   in Loop: Header=BB40_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB40_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_42
.LBB40_38:                              # %cond.false68
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_41
.LBB40_40:                              # %cond.false73
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_41:                              # %cond.end75
                                        #   in Loop: Header=BB40_32 Depth=1
.LBB40_42:                              # %cond.end77
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB40_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_32
.LBB40_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_47
.LBB40_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB40_53
.LBB40_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_52
.LBB40_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_52:                              # %cond.end113
.LBB40_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB40_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB40_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB40_57
.LBB40_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB40_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB40_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB40_63
.LBB40_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB40_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB40_62
.LBB40_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB40_62:                              # %cond.end136
.LBB40_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB40_76
.LBB40_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB40_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB40_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB40_68
.LBB40_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB40_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB40_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB40_74
.LBB40_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB40_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB40_73
.LBB40_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB40_73:                              # %cond.end169
.LBB40_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB40_75:                              # %if.end
	jmp	.LBB40_76
.LBB40_76:                              # %if.end178
	jmp	.LBB40_331
.LBB40_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB40_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB40_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB40_81
.LBB40_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB40_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB40_87
.LBB40_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB40_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB40_86
.LBB40_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB40_86:                              # %cond.end197
.LBB40_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB40_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB40_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_92
.LBB40_91:                              # %cond.false209
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_92:                              # %cond.end211
                                        #   in Loop: Header=BB40_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB40_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_98
.LBB40_94:                              # %cond.false216
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_97
.LBB40_96:                              # %cond.false221
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_97:                              # %cond.end223
                                        #   in Loop: Header=BB40_88 Depth=1
.LBB40_98:                              # %cond.end225
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB40_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_88
.LBB40_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_103
.LBB40_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB40_109
.LBB40_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_108
.LBB40_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_108:                             # %cond.end266
.LBB40_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB40_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB40_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB40_113
.LBB40_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB40_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB40_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB40_119
.LBB40_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB40_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB40_118
.LBB40_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB40_118:                             # %cond.end287
.LBB40_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB40_132
.LBB40_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB40_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB40_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB40_124
.LBB40_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB40_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB40_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB40_130
.LBB40_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB40_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB40_129
.LBB40_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB40_129:                             # %cond.end320
.LBB40_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB40_131:                             # %if.end331
	jmp	.LBB40_132
.LBB40_132:                             # %if.end332
	jmp	.LBB40_330
.LBB40_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB40_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB40_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB40_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_139
.LBB40_138:                             # %cond.false345
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_139:                             # %cond.end347
                                        #   in Loop: Header=BB40_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB40_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_145
.LBB40_141:                             # %cond.false352
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_144
.LBB40_143:                             # %cond.false357
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_144:                             # %cond.end359
                                        #   in Loop: Header=BB40_135 Depth=1
.LBB40_145:                             # %cond.end361
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB40_146:                             # %for.cond363
                                        #   Parent Loop BB40_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB40_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB40_150
.LBB40_149:                             # %cond.false371
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_150:                             # %cond.end373
                                        #   in Loop: Header=BB40_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB40_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB40_156
.LBB40_152:                             # %cond.false378
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB40_155
.LBB40_154:                             # %cond.false383
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_155:                             # %cond.end385
                                        #   in Loop: Header=BB40_146 Depth=2
.LBB40_156:                             # %cond.end387
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB40_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_146
.LBB40_158:                             # %for.end401
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_135
.LBB40_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB40_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB40_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB40_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB40_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_161
.LBB40_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_167
.LBB40_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB40_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB40_173
.LBB40_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_172
.LBB40_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB40_172:                             # %cond.end449
.LBB40_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB40_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_177
.LBB40_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB40_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB40_183
.LBB40_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_182
.LBB40_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_182:                             # %cond.end486
.LBB40_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB40_196
.LBB40_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB40_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_188
.LBB40_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB40_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB40_194
.LBB40_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_193
.LBB40_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_193:                             # %cond.end526
.LBB40_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB40_195:                             # %if.end532
	jmp	.LBB40_196
.LBB40_196:                             # %if.end533
	jmp	.LBB40_329
.LBB40_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB40_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB40_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB40_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_203
.LBB40_202:                             # %cond.false546
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_203:                             # %cond.end548
                                        #   in Loop: Header=BB40_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB40_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_209
.LBB40_205:                             # %cond.false553
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_208
.LBB40_207:                             # %cond.false558
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_208:                             # %cond.end560
                                        #   in Loop: Header=BB40_199 Depth=1
.LBB40_209:                             # %cond.end562
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB40_210:                             # %for.cond564
                                        #   Parent Loop BB40_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB40_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB40_214
.LBB40_213:                             # %cond.false572
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_214:                             # %cond.end574
                                        #   in Loop: Header=BB40_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB40_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB40_220
.LBB40_216:                             # %cond.false579
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB40_219
.LBB40_218:                             # %cond.false584
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_219:                             # %cond.end586
                                        #   in Loop: Header=BB40_210 Depth=2
.LBB40_220:                             # %cond.end588
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB40_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_210
.LBB40_222:                             # %for.end602
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB40_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_199
.LBB40_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB40_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB40_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB40_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB40_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_225
.LBB40_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_231
.LBB40_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB40_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB40_237
.LBB40_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_236
.LBB40_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB40_236:                             # %cond.end650
.LBB40_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB40_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_241
.LBB40_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB40_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB40_247
.LBB40_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_246
.LBB40_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_246:                             # %cond.end687
.LBB40_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB40_258
.LBB40_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_251
.LBB40_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB40_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB40_257
.LBB40_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB40_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_256
.LBB40_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB40_256:                             # %cond.end724
.LBB40_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB40_258:                             # %if.end730
	jmp	.LBB40_328
.LBB40_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB40_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB40_262
.LBB40_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB40_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB40_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB40_265
.LBB40_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB40_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB40_271
.LBB40_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB40_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB40_270
.LBB40_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB40_270:                             # %cond.end753
.LBB40_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB40_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB40_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_276
.LBB40_275:                             # %cond.false765
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_276:                             # %cond.end767
                                        #   in Loop: Header=BB40_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB40_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_282
.LBB40_278:                             # %cond.false772
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB40_281
.LBB40_280:                             # %cond.false777
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB40_281:                             # %cond.end779
                                        #   in Loop: Header=BB40_272 Depth=1
.LBB40_282:                             # %cond.end781
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB40_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_272
.LBB40_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_287
.LBB40_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB40_293
.LBB40_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_292
.LBB40_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_292:                             # %cond.end822
.LBB40_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB40_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB40_296
.LBB40_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB40_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB40_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB40_299
.LBB40_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB40_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB40_305
.LBB40_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB40_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB40_304
.LBB40_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB40_304:                             # %cond.end847
.LBB40_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB40_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB40_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_310
.LBB40_309:                             # %cond.false859
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_310:                             # %cond.end861
                                        #   in Loop: Header=BB40_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB40_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_316
.LBB40_312:                             # %cond.false866
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB40_315
.LBB40_314:                             # %cond.false871
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB40_315:                             # %cond.end873
                                        #   in Loop: Header=BB40_306 Depth=1
.LBB40_316:                             # %cond.end875
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB40_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_306
.LBB40_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_321
.LBB40_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB40_327
.LBB40_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_326
.LBB40_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_326:                             # %cond.end916
.LBB40_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB40_328:                             # %if.end922
	jmp	.LBB40_329
.LBB40_329:                             # %if.end923
	jmp	.LBB40_330
.LBB40_330:                             # %if.end924
	jmp	.LBB40_331
.LBB40_331:                             # %if.end925
	jmp	.LBB40_332
.LBB40_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1902369322, -104(%rbp) # imm = 0x7163DA2A
	jne	.LBB40_334
.LBB40_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_333
.Lfunc_end40:
	.size	Get_Reference_Pixel.30, .Lfunc_end40-Get_Reference_Pixel.30
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.31        # -- Begin function Conceal_Error.31
	.p2align	4, 0x90
	.type	Conceal_Error.31,@function
Conceal_Error.31:                       # @Conceal_Error.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$677110041, -68(%rbp)   # imm = 0x285BE119
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB41_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB41_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB41_4:                               # %land.end
.LBB41_5:                               # %lor.end
.LBB41_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB41_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB41_9
.LBB41_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB41_14
.LBB41_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB41_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB41_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB41_12:                              # %land.end51
.LBB41_13:                              # %lor.end53
.LBB41_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB41_180
# %bb.15:                               # %land.end54
	movq	.LJTI41_0(,%rax,8), %rax
	jmpq	*%rax
.LBB41_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB41_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB41_18 Depth=1
	movl	$0, -4(%rbp)
.LBB41_20:                              # %for.cond68
                                        #   Parent Loop BB41_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB41_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB41_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_20
.LBB41_23:                              # %for.end
                                        #   in Loop: Header=BB41_18 Depth=1
	jmp	.LBB41_24
.LBB41_24:                              # %for.inc85
                                        #   in Loop: Header=BB41_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_18
.LBB41_25:                              # %for.end87
	jmp	.LBB41_35
.LBB41_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB41_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB41_27 Depth=1
	movl	$0, -4(%rbp)
.LBB41_29:                              # %for.cond92
                                        #   Parent Loop BB41_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB41_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB41_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_29
.LBB41_32:                              # %for.end104
                                        #   in Loop: Header=BB41_27 Depth=1
	jmp	.LBB41_33
.LBB41_33:                              # %for.inc105
                                        #   in Loop: Header=BB41_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_27
.LBB41_34:                              # %for.end107
	jmp	.LBB41_35
.LBB41_35:                              # %if.end
	jmp	.LBB41_180
.LBB41_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB41_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_39 Depth 2
                                        #       Child Loop BB41_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB41_37 Depth=1
	movl	$0, -16(%rbp)
.LBB41_39:                              # %for.cond113
                                        #   Parent Loop BB41_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB41_39 Depth=2
	movl	$0, -4(%rbp)
.LBB41_41:                              # %for.cond117
                                        #   Parent Loop BB41_37 Depth=1
                                        #     Parent Loop BB41_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB41_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB41_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB41_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_41
.LBB41_44:                              # %for.end141
                                        #   in Loop: Header=BB41_39 Depth=2
	jmp	.LBB41_45
.LBB41_45:                              # %for.inc142
                                        #   in Loop: Header=BB41_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_39
.LBB41_46:                              # %for.end144
                                        #   in Loop: Header=BB41_37 Depth=1
	jmp	.LBB41_47
.LBB41_47:                              # %for.inc145
                                        #   in Loop: Header=BB41_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_37
.LBB41_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB41_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB41_49 Depth=1
	movl	$0, -8(%rbp)
.LBB41_51:                              # %for.cond152
                                        #   Parent Loop BB41_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB41_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB41_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_51
.LBB41_54:                              # %for.end162
                                        #   in Loop: Header=BB41_49 Depth=1
	jmp	.LBB41_55
.LBB41_55:                              # %for.inc163
                                        #   in Loop: Header=BB41_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_49
.LBB41_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB41_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB41_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB41_59 Depth=1
	movl	$0, -4(%rbp)
.LBB41_61:                              # %for.cond175
                                        #   Parent Loop BB41_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB41_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB41_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_61
.LBB41_64:                              # %for.end195
                                        #   in Loop: Header=BB41_59 Depth=1
	jmp	.LBB41_65
.LBB41_65:                              # %for.inc196
                                        #   in Loop: Header=BB41_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_59
.LBB41_66:                              # %for.end198
	jmp	.LBB41_95
.LBB41_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB41_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB41_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_71 Depth 2
                                        #       Child Loop BB41_73 Depth 3
                                        #         Child Loop BB41_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB41_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB41_71:                              # %for.cond210
                                        #   Parent Loop BB41_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_73 Depth 3
                                        #         Child Loop BB41_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB41_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB41_73:                              # %for.cond236
                                        #   Parent Loop BB41_69 Depth=1
                                        #     Parent Loop BB41_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB41_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB41_73 Depth=3
	movl	$0, -4(%rbp)
.LBB41_75:                              # %for.cond240
                                        #   Parent Loop BB41_69 Depth=1
                                        #     Parent Loop BB41_71 Depth=2
                                        #       Parent Loop BB41_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB41_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB41_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB41_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_75
.LBB41_78:                              # %for.end259
                                        #   in Loop: Header=BB41_73 Depth=3
	jmp	.LBB41_79
.LBB41_79:                              # %for.inc260
                                        #   in Loop: Header=BB41_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_73
.LBB41_80:                              # %for.end262
                                        #   in Loop: Header=BB41_71 Depth=2
	jmp	.LBB41_81
.LBB41_81:                              # %for.inc263
                                        #   in Loop: Header=BB41_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_71
.LBB41_82:                              # %for.end265
                                        #   in Loop: Header=BB41_69 Depth=1
	jmp	.LBB41_83
.LBB41_83:                              # %for.inc266
                                        #   in Loop: Header=BB41_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_69
.LBB41_84:                              # %for.end268
	jmp	.LBB41_94
.LBB41_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB41_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB41_86 Depth=1
	movl	$0, -4(%rbp)
.LBB41_88:                              # %for.cond274
                                        #   Parent Loop BB41_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB41_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB41_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_88
.LBB41_91:                              # %for.end294
                                        #   in Loop: Header=BB41_86 Depth=1
	jmp	.LBB41_92
.LBB41_92:                              # %for.inc295
                                        #   in Loop: Header=BB41_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_86
.LBB41_93:                              # %for.end297
	jmp	.LBB41_94
.LBB41_94:                              # %if.end298
	jmp	.LBB41_95
.LBB41_95:                              # %if.end299
	jmp	.LBB41_105
.LBB41_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB41_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB41_97 Depth=1
	movl	$0, -4(%rbp)
.LBB41_99:                              # %for.cond305
                                        #   Parent Loop BB41_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB41_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB41_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_99
.LBB41_102:                             # %for.end317
                                        #   in Loop: Header=BB41_97 Depth=1
	jmp	.LBB41_103
.LBB41_103:                             # %for.inc318
                                        #   in Loop: Header=BB41_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_97
.LBB41_104:                             # %for.end320
	jmp	.LBB41_105
.LBB41_105:                             # %if.end321
	jmp	.LBB41_180
.LBB41_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB41_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_110 Depth 2
                                        #       Child Loop BB41_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB41_108 Depth=1
	movl	$0, -16(%rbp)
.LBB41_110:                             # %for.cond331
                                        #   Parent Loop BB41_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB41_110 Depth=2
	movl	$0, -4(%rbp)
.LBB41_112:                             # %for.cond335
                                        #   Parent Loop BB41_108 Depth=1
                                        #     Parent Loop BB41_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB41_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB41_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB41_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_112
.LBB41_115:                             # %for.end359
                                        #   in Loop: Header=BB41_110 Depth=2
	jmp	.LBB41_116
.LBB41_116:                             # %for.inc360
                                        #   in Loop: Header=BB41_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_110
.LBB41_117:                             # %for.end362
                                        #   in Loop: Header=BB41_108 Depth=1
	jmp	.LBB41_118
.LBB41_118:                             # %for.inc363
                                        #   in Loop: Header=BB41_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_108
.LBB41_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB41_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB41_120 Depth=1
	movl	$0, -8(%rbp)
.LBB41_122:                             # %for.cond370
                                        #   Parent Loop BB41_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB41_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB41_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_122
.LBB41_125:                             # %for.end380
                                        #   in Loop: Header=BB41_120 Depth=1
	jmp	.LBB41_126
.LBB41_126:                             # %for.inc381
                                        #   in Loop: Header=BB41_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_120
.LBB41_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB41_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB41_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB41_129 Depth=1
	movl	$0, -4(%rbp)
.LBB41_131:                             # %for.cond390
                                        #   Parent Loop BB41_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB41_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB41_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_131
.LBB41_134:                             # %for.end410
                                        #   in Loop: Header=BB41_129 Depth=1
	jmp	.LBB41_135
.LBB41_135:                             # %for.inc411
                                        #   in Loop: Header=BB41_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_129
.LBB41_136:                             # %for.end413
	jmp	.LBB41_156
.LBB41_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB41_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB41_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_141 Depth 2
                                        #       Child Loop BB41_143 Depth 3
                                        #         Child Loop BB41_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB41_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB41_141:                             # %for.cond425
                                        #   Parent Loop BB41_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_143 Depth 3
                                        #         Child Loop BB41_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB41_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB41_143:                             # %for.cond452
                                        #   Parent Loop BB41_139 Depth=1
                                        #     Parent Loop BB41_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB41_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB41_143 Depth=3
	movl	$0, -4(%rbp)
.LBB41_145:                             # %for.cond456
                                        #   Parent Loop BB41_139 Depth=1
                                        #     Parent Loop BB41_141 Depth=2
                                        #       Parent Loop BB41_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB41_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB41_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB41_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_145
.LBB41_148:                             # %for.end475
                                        #   in Loop: Header=BB41_143 Depth=3
	jmp	.LBB41_149
.LBB41_149:                             # %for.inc476
                                        #   in Loop: Header=BB41_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_143
.LBB41_150:                             # %for.end478
                                        #   in Loop: Header=BB41_141 Depth=2
	jmp	.LBB41_151
.LBB41_151:                             # %for.inc479
                                        #   in Loop: Header=BB41_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_141
.LBB41_152:                             # %for.end481
                                        #   in Loop: Header=BB41_139 Depth=1
	jmp	.LBB41_153
.LBB41_153:                             # %for.inc482
                                        #   in Loop: Header=BB41_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_139
.LBB41_154:                             # %for.end484
	jmp	.LBB41_155
.LBB41_155:                             # %if.end485
	jmp	.LBB41_156
.LBB41_156:                             # %if.end486
	jmp	.LBB41_157
.LBB41_157:                             # %if.end487
	jmp	.LBB41_180
.LBB41_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB41_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB41_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB41_161 Depth=1
	movl	$0, -4(%rbp)
.LBB41_163:                             # %for.cond499
                                        #   Parent Loop BB41_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB41_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB41_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_163
.LBB41_166:                             # %for.end519
                                        #   in Loop: Header=BB41_161 Depth=1
	jmp	.LBB41_167
.LBB41_167:                             # %for.inc520
                                        #   in Loop: Header=BB41_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_161
.LBB41_168:                             # %for.end522
	jmp	.LBB41_169
.LBB41_169:                             # %if.end523
	jmp	.LBB41_179
.LBB41_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB41_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB41_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -4(%rbp)
.LBB41_173:                             # %for.cond529
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB41_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB41_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB41_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_173
.LBB41_176:                             # %for.end541
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_177
.LBB41_177:                             # %for.inc542
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_171
.LBB41_178:                             # %for.end544
	jmp	.LBB41_179
.LBB41_179:                             # %if.end545
	jmp	.LBB41_180
.LBB41_180:                             # %sw.epilog
	cmpl	$677110041, -68(%rbp)   # imm = 0x285BE119
	jne	.LBB41_182
.LBB41_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_181
.Lfunc_end41:
	.size	Conceal_Error.31, .Lfunc_end41-Conceal_Error.31
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI41_0:
	.quad	.LBB41_16
	.quad	.LBB41_158
	.quad	.LBB41_106
	.quad	.LBB41_180
	.quad	.LBB41_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.32   # -- Begin function decode_one_b8block.32
	.p2align	4, 0x90
	.type	decode_one_b8block.32,@function
decode_one_b8block.32:                  # @decode_one_b8block.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$931294257, -84(%rbp)   # imm = 0x37826C31
	movl	%edi, -52(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_4:                               # %for.cond9
                                        #   Parent Loop BB42_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB42_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB42_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_4
.LBB42_7:                               # %for.end
                                        #   in Loop: Header=BB42_2 Depth=1
	jmp	.LBB42_8
.LBB42_8:                               # %for.inc26
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_2
.LBB42_9:                               # %for.end28
	jmp	.LBB42_96
.LBB42_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB42_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB42_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB42_31
.LBB42_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB42_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_17:                              # %for.cond40
                                        #   Parent Loop BB42_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB42_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB42_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_17
.LBB42_20:                              # %for.end49
                                        #   in Loop: Header=BB42_15 Depth=1
	jmp	.LBB42_21
.LBB42_21:                              # %for.inc50
                                        #   in Loop: Header=BB42_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_15
.LBB42_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB42_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB42_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_25:                              # %for.cond56
                                        #   Parent Loop BB42_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB42_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_25
.LBB42_28:                              # %for.end71
                                        #   in Loop: Header=BB42_23 Depth=1
	jmp	.LBB42_29
.LBB42_29:                              # %for.inc72
                                        #   in Loop: Header=BB42_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_23
.LBB42_30:                              # %for.end74
	jmp	.LBB42_60
.LBB42_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB42_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB42_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB42_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB42_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_36:                              # %for.cond83
                                        #   Parent Loop BB42_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB42_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_36
.LBB42_39:                              # %for.end120
                                        #   in Loop: Header=BB42_34 Depth=1
	jmp	.LBB42_40
.LBB42_40:                              # %for.inc121
                                        #   in Loop: Header=BB42_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_34
.LBB42_41:                              # %for.end123
	jmp	.LBB42_51
.LBB42_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB42_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB42_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_45:                              # %for.cond129
                                        #   Parent Loop BB42_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB42_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB42_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_45
.LBB42_48:                              # %for.end145
                                        #   in Loop: Header=BB42_43 Depth=1
	jmp	.LBB42_49
.LBB42_49:                              # %for.inc146
                                        #   in Loop: Header=BB42_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_43
.LBB42_50:                              # %for.end148
	jmp	.LBB42_51
.LBB42_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB42_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_54:                              # %for.cond153
                                        #   Parent Loop BB42_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB42_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_54
.LBB42_57:                              # %for.end167
                                        #   in Loop: Header=BB42_52 Depth=1
	jmp	.LBB42_58
.LBB42_58:                              # %for.inc168
                                        #   in Loop: Header=BB42_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_52
.LBB42_59:                              # %for.end170
	jmp	.LBB42_60
.LBB42_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB42_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB42_66
.LBB42_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB42_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB42_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB42_86
.LBB42_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_69 Depth 2
                                        #       Child Loop BB42_74 Depth 3
                                        #         Child Loop BB42_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB42_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB42_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_69:                              # %for.cond197
                                        #   Parent Loop BB42_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_74 Depth 3
                                        #         Child Loop BB42_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB42_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB42_73:                              # %if.end218
                                        #   in Loop: Header=BB42_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB42_74:                              # %for.cond233
                                        #   Parent Loop BB42_67 Depth=1
                                        #     Parent Loop BB42_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB42_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB42_74 Depth=3
	movl	$0, -8(%rbp)
.LBB42_76:                              # %for.cond237
                                        #   Parent Loop BB42_67 Depth=1
                                        #     Parent Loop BB42_69 Depth=2
                                        #       Parent Loop BB42_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB42_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB42_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB42_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_76
.LBB42_79:                              # %for.end269
                                        #   in Loop: Header=BB42_74 Depth=3
	jmp	.LBB42_80
.LBB42_80:                              # %for.inc270
                                        #   in Loop: Header=BB42_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_74
.LBB42_81:                              # %for.end272
                                        #   in Loop: Header=BB42_69 Depth=2
	jmp	.LBB42_82
.LBB42_82:                              # %for.inc273
                                        #   in Loop: Header=BB42_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_69
.LBB42_83:                              # %for.end275
                                        #   in Loop: Header=BB42_67 Depth=1
	jmp	.LBB42_84
.LBB42_84:                              # %for.inc276
                                        #   in Loop: Header=BB42_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_67
.LBB42_85:                              # %for.end278
	jmp	.LBB42_95
.LBB42_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB42_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_89:                              # %for.cond284
                                        #   Parent Loop BB42_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB42_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB42_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_89
.LBB42_92:                              # %for.end310
                                        #   in Loop: Header=BB42_87 Depth=1
	jmp	.LBB42_93
.LBB42_93:                              # %for.inc311
                                        #   in Loop: Header=BB42_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_87
.LBB42_94:                              # %for.end313
	jmp	.LBB42_95
.LBB42_95:                              # %if.end314
	jmp	.LBB42_96
.LBB42_96:                              # %if.end315
	cmpl	$931294257, -84(%rbp)   # imm = 0x37826C31
	jne	.LBB42_98
.LBB42_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_97
.Lfunc_end42:
	.size	decode_one_b8block.32, .Lfunc_end42-decode_one_b8block.32
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.33  # -- Begin function Get_Reference_Pixel.33
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.33,@function
Get_Reference_Pixel.33:                 # @Get_Reference_Pixel.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1918817335, -104(%rbp) # imm = 0x725ED437
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB43_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB43_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB43_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB43_5
.LBB43_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB43_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB43_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB43_11
.LBB43_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB43_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB43_10
.LBB43_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB43_10:                              # %cond.end14
.LBB43_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB43_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB43_14
.LBB43_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB43_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB43_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB43_20
.LBB43_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB43_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB43_19
.LBB43_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB43_19:                              # %cond.end29
.LBB43_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_332
.LBB43_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB43_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB43_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB43_25
.LBB43_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB43_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB43_31
.LBB43_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB43_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB43_30
.LBB43_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB43_30:                              # %cond.end52
.LBB43_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB43_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_36
.LBB43_35:                              # %cond.false61
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_36:                              # %cond.end63
                                        #   in Loop: Header=BB43_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB43_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_42
.LBB43_38:                              # %cond.false68
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_41
.LBB43_40:                              # %cond.false73
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_41:                              # %cond.end75
                                        #   in Loop: Header=BB43_32 Depth=1
.LBB43_42:                              # %cond.end77
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_32
.LBB43_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_47
.LBB43_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB43_53
.LBB43_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_52
.LBB43_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_52:                              # %cond.end113
.LBB43_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB43_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB43_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB43_57
.LBB43_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB43_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB43_63
.LBB43_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB43_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB43_62
.LBB43_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB43_62:                              # %cond.end136
.LBB43_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_76
.LBB43_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB43_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB43_68
.LBB43_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB43_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB43_74
.LBB43_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB43_73
.LBB43_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB43_73:                              # %cond.end169
.LBB43_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_75:                              # %if.end
	jmp	.LBB43_76
.LBB43_76:                              # %if.end178
	jmp	.LBB43_331
.LBB43_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB43_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB43_81
.LBB43_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB43_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB43_87
.LBB43_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB43_86
.LBB43_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB43_86:                              # %cond.end197
.LBB43_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB43_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_92
.LBB43_91:                              # %cond.false209
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_92:                              # %cond.end211
                                        #   in Loop: Header=BB43_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB43_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_98
.LBB43_94:                              # %cond.false216
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_97
.LBB43_96:                              # %cond.false221
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_97:                              # %cond.end223
                                        #   in Loop: Header=BB43_88 Depth=1
.LBB43_98:                              # %cond.end225
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_88
.LBB43_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_103
.LBB43_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB43_109
.LBB43_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_108
.LBB43_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_108:                             # %cond.end266
.LBB43_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB43_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB43_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB43_113
.LBB43_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB43_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB43_119
.LBB43_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB43_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB43_118
.LBB43_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB43_118:                             # %cond.end287
.LBB43_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_132
.LBB43_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB43_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB43_124
.LBB43_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB43_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB43_130
.LBB43_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB43_129
.LBB43_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB43_129:                             # %cond.end320
.LBB43_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_131:                             # %if.end331
	jmp	.LBB43_132
.LBB43_132:                             # %if.end332
	jmp	.LBB43_330
.LBB43_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB43_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB43_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB43_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_139
.LBB43_138:                             # %cond.false345
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_139:                             # %cond.end347
                                        #   in Loop: Header=BB43_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB43_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_145
.LBB43_141:                             # %cond.false352
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_144
.LBB43_143:                             # %cond.false357
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_144:                             # %cond.end359
                                        #   in Loop: Header=BB43_135 Depth=1
.LBB43_145:                             # %cond.end361
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_146:                             # %for.cond363
                                        #   Parent Loop BB43_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB43_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB43_150
.LBB43_149:                             # %cond.false371
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_150:                             # %cond.end373
                                        #   in Loop: Header=BB43_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB43_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB43_156
.LBB43_152:                             # %cond.false378
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB43_155
.LBB43_154:                             # %cond.false383
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_155:                             # %cond.end385
                                        #   in Loop: Header=BB43_146 Depth=2
.LBB43_156:                             # %cond.end387
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_146
.LBB43_158:                             # %for.end401
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_135
.LBB43_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB43_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB43_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB43_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_161
.LBB43_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_167
.LBB43_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB43_173
.LBB43_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_172
.LBB43_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_172:                             # %cond.end449
.LBB43_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB43_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_177
.LBB43_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB43_183
.LBB43_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_182
.LBB43_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_182:                             # %cond.end486
.LBB43_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_196
.LBB43_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB43_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_188
.LBB43_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB43_194
.LBB43_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_193
.LBB43_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_193:                             # %cond.end526
.LBB43_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_195:                             # %if.end532
	jmp	.LBB43_196
.LBB43_196:                             # %if.end533
	jmp	.LBB43_329
.LBB43_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB43_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB43_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB43_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_203
.LBB43_202:                             # %cond.false546
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_203:                             # %cond.end548
                                        #   in Loop: Header=BB43_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB43_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_209
.LBB43_205:                             # %cond.false553
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_208
.LBB43_207:                             # %cond.false558
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_208:                             # %cond.end560
                                        #   in Loop: Header=BB43_199 Depth=1
.LBB43_209:                             # %cond.end562
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_210:                             # %for.cond564
                                        #   Parent Loop BB43_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB43_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB43_214
.LBB43_213:                             # %cond.false572
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_214:                             # %cond.end574
                                        #   in Loop: Header=BB43_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB43_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB43_220
.LBB43_216:                             # %cond.false579
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB43_219
.LBB43_218:                             # %cond.false584
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_219:                             # %cond.end586
                                        #   in Loop: Header=BB43_210 Depth=2
.LBB43_220:                             # %cond.end588
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_210
.LBB43_222:                             # %for.end602
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_199
.LBB43_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB43_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB43_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB43_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_225
.LBB43_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_231
.LBB43_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB43_237
.LBB43_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_236
.LBB43_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_236:                             # %cond.end650
.LBB43_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB43_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_241
.LBB43_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB43_247
.LBB43_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_246
.LBB43_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_246:                             # %cond.end687
.LBB43_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_258
.LBB43_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_251
.LBB43_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB43_257
.LBB43_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_256
.LBB43_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_256:                             # %cond.end724
.LBB43_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_258:                             # %if.end730
	jmp	.LBB43_328
.LBB43_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB43_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB43_262
.LBB43_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB43_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB43_265
.LBB43_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB43_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB43_271
.LBB43_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB43_270
.LBB43_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB43_270:                             # %cond.end753
.LBB43_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB43_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_276
.LBB43_275:                             # %cond.false765
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_276:                             # %cond.end767
                                        #   in Loop: Header=BB43_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB43_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_282
.LBB43_278:                             # %cond.false772
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_281
.LBB43_280:                             # %cond.false777
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_281:                             # %cond.end779
                                        #   in Loop: Header=BB43_272 Depth=1
.LBB43_282:                             # %cond.end781
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_272
.LBB43_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_287
.LBB43_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB43_293
.LBB43_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_292
.LBB43_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_292:                             # %cond.end822
.LBB43_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB43_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB43_296
.LBB43_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB43_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB43_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB43_299
.LBB43_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB43_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB43_305
.LBB43_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB43_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB43_304
.LBB43_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB43_304:                             # %cond.end847
.LBB43_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB43_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_310
.LBB43_309:                             # %cond.false859
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_310:                             # %cond.end861
                                        #   in Loop: Header=BB43_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB43_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_316
.LBB43_312:                             # %cond.false866
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_315
.LBB43_314:                             # %cond.false871
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_315:                             # %cond.end873
                                        #   in Loop: Header=BB43_306 Depth=1
.LBB43_316:                             # %cond.end875
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_306
.LBB43_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_321
.LBB43_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB43_327
.LBB43_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_326
.LBB43_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_326:                             # %cond.end916
.LBB43_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_328:                             # %if.end922
	jmp	.LBB43_329
.LBB43_329:                             # %if.end923
	jmp	.LBB43_330
.LBB43_330:                             # %if.end924
	jmp	.LBB43_331
.LBB43_331:                             # %if.end925
	jmp	.LBB43_332
.LBB43_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1918817335, -104(%rbp) # imm = 0x725ED437
	jne	.LBB43_334
.LBB43_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_333
.Lfunc_end43:
	.size	Get_Reference_Pixel.33, .Lfunc_end43-Get_Reference_Pixel.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.34
.LCPI44_0:
	.quad	4636737291354636288     # double 100
.LCPI44_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.34
	.p2align	4, 0x90
	.type	Build_Status_Map.34,@function
Build_Status_Map.34:                    # @Build_Status_Map.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1346265224, -44(%rbp)  # imm = 0x503E6088
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB44_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -12(%rbp)
.LBB44_3:                               # %for.cond2
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB44_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB44_13
.LBB44_6:                               # %if.then
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB44_8:                               # %if.end
                                        #   in Loop: Header=BB44_3 Depth=2
	callq	rand
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB44_10:                              # %if.end20
                                        #   in Loop: Header=BB44_3 Depth=2
	callq	rand
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	$1, -4(%rbp)
.LBB44_12:                              # %if.end29
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB44_13:                              # %if.end30
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB44_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB44_18
.LBB44_15:                              # %if.else
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB44_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB44_17:                              # %if.end49
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_18
.LBB44_18:                              # %if.end50
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_3
.LBB44_20:                              # %for.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_21
.LBB44_21:                              # %for.inc53
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_1
.LBB44_22:                              # %for.end55
	cmpl	$1346265224, -44(%rbp)  # imm = 0x503E6088
	jne	.LBB44_24
.LBB44_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_23
.Lfunc_end44:
	.size	Build_Status_Map.34, .Lfunc_end44-Build_Status_Map.34
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.35    # -- Begin function Error_Concealment.35
	.p2align	4, 0x90
	.type	Error_Concealment.35,@function
Error_Concealment.35:                   # @Error_Concealment.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$498372137, -20(%rbp)   # imm = 0x1DB48E29
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB45_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_3:                               # %for.cond2
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB45_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB45_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB45_6:                               # %if.end
                                        #   in Loop: Header=BB45_3 Depth=2
	jmp	.LBB45_7
.LBB45_7:                               # %for.inc
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_3
.LBB45_8:                               # %for.end
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_9
.LBB45_9:                               # %for.inc7
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_1
.LBB45_10:                              # %for.end9
	cmpl	$498372137, -20(%rbp)   # imm = 0x1DB48E29
	jne	.LBB45_12
.LBB45_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_11
.Lfunc_end45:
	.size	Error_Concealment.35, .Lfunc_end45-Error_Concealment.35
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.36        # -- Begin function decode_one_mb.36
	.p2align	4, 0x90
	.type	decode_one_mb.36,@function
decode_one_mb.36:                       # @decode_one_mb.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$566941624, -4(%rbp)    # imm = 0x21CAD7B8
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$566941624, -4(%rbp)    # imm = 0x21CAD7B8
	jne	.LBB46_2
.LBB46_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_1
.Lfunc_end46:
	.size	decode_one_mb.36, .Lfunc_end46-decode_one_mb.36
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.37 # -- Begin function compute_residue_b8block.37
	.p2align	4, 0x90
	.type	compute_residue_b8block.37,@function
compute_residue_b8block.37:             # @compute_residue_b8block.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$422626285, -36(%rbp)   # imm = 0x1930C3ED
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB47_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB47_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB47_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB47_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB47_4:                               # %for.cond4
                                        #   Parent Loop BB47_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB47_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB47_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB47_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_4
.LBB47_7:                               # %for.end
                                        #   in Loop: Header=BB47_2 Depth=1
	jmp	.LBB47_8
.LBB47_8:                               # %for.inc22
                                        #   in Loop: Header=BB47_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_2
.LBB47_9:                               # %for.end24
	jmp	.LBB47_19
.LBB47_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB47_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB47_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB47_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB47_13:                              # %for.cond29
                                        #   Parent Loop BB47_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB47_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB47_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB47_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_13
.LBB47_16:                              # %for.end56
                                        #   in Loop: Header=BB47_11 Depth=1
	jmp	.LBB47_17
.LBB47_17:                              # %for.inc57
                                        #   in Loop: Header=BB47_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_11
.LBB47_18:                              # %for.end59
	jmp	.LBB47_19
.LBB47_19:                              # %if.end
	cmpl	$422626285, -36(%rbp)   # imm = 0x1930C3ED
	jne	.LBB47_21
.LBB47_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_20
.Lfunc_end47:
	.size	compute_residue_b8block.37, .Lfunc_end47-compute_residue_b8block.37
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.38   # -- Begin function decode_one_b8block.38
	.p2align	4, 0x90
	.type	decode_one_b8block.38,@function
decode_one_b8block.38:                  # @decode_one_b8block.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1367085322, -84(%rbp)  # imm = 0x517C110A
	movl	%edi, -52(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB48_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_4:                               # %for.cond9
                                        #   Parent Loop BB48_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB48_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB48_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_4
.LBB48_7:                               # %for.end
                                        #   in Loop: Header=BB48_2 Depth=1
	jmp	.LBB48_8
.LBB48_8:                               # %for.inc26
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_2
.LBB48_9:                               # %for.end28
	jmp	.LBB48_96
.LBB48_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB48_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB48_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB48_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB48_31
.LBB48_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB48_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB48_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_17:                              # %for.cond40
                                        #   Parent Loop BB48_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB48_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB48_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_17
.LBB48_20:                              # %for.end49
                                        #   in Loop: Header=BB48_15 Depth=1
	jmp	.LBB48_21
.LBB48_21:                              # %for.inc50
                                        #   in Loop: Header=BB48_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_15
.LBB48_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB48_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB48_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB48_25:                              # %for.cond56
                                        #   Parent Loop BB48_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB48_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB48_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_25
.LBB48_28:                              # %for.end71
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_29
.LBB48_29:                              # %for.inc72
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_23
.LBB48_30:                              # %for.end74
	jmp	.LBB48_60
.LBB48_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB48_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB48_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB48_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB48_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB48_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB48_36:                              # %for.cond83
                                        #   Parent Loop BB48_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB48_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB48_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_36
.LBB48_39:                              # %for.end120
                                        #   in Loop: Header=BB48_34 Depth=1
	jmp	.LBB48_40
.LBB48_40:                              # %for.inc121
                                        #   in Loop: Header=BB48_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_34
.LBB48_41:                              # %for.end123
	jmp	.LBB48_51
.LBB48_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB48_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB48_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB48_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB48_45:                              # %for.cond129
                                        #   Parent Loop BB48_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB48_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB48_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_45
.LBB48_48:                              # %for.end145
                                        #   in Loop: Header=BB48_43 Depth=1
	jmp	.LBB48_49
.LBB48_49:                              # %for.inc146
                                        #   in Loop: Header=BB48_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_43
.LBB48_50:                              # %for.end148
	jmp	.LBB48_51
.LBB48_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB48_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_54:                              # %for.cond153
                                        #   Parent Loop BB48_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB48_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB48_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_54
.LBB48_57:                              # %for.end167
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_58
.LBB48_58:                              # %for.inc168
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_52
.LBB48_59:                              # %for.end170
	jmp	.LBB48_60
.LBB48_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB48_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB48_66
.LBB48_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB48_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB48_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB48_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB48_86
.LBB48_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB48_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_69 Depth 2
                                        #       Child Loop BB48_74 Depth 3
                                        #         Child Loop BB48_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB48_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB48_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB48_69:                              # %for.cond197
                                        #   Parent Loop BB48_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_74 Depth 3
                                        #         Child Loop BB48_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB48_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB48_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB48_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB48_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB48_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB48_73:                              # %if.end218
                                        #   in Loop: Header=BB48_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB48_74:                              # %for.cond233
                                        #   Parent Loop BB48_67 Depth=1
                                        #     Parent Loop BB48_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB48_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB48_74 Depth=3
	movl	$0, -4(%rbp)
.LBB48_76:                              # %for.cond237
                                        #   Parent Loop BB48_67 Depth=1
                                        #     Parent Loop BB48_69 Depth=2
                                        #       Parent Loop BB48_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB48_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB48_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB48_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_76
.LBB48_79:                              # %for.end269
                                        #   in Loop: Header=BB48_74 Depth=3
	jmp	.LBB48_80
.LBB48_80:                              # %for.inc270
                                        #   in Loop: Header=BB48_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_74
.LBB48_81:                              # %for.end272
                                        #   in Loop: Header=BB48_69 Depth=2
	jmp	.LBB48_82
.LBB48_82:                              # %for.inc273
                                        #   in Loop: Header=BB48_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_69
.LBB48_83:                              # %for.end275
                                        #   in Loop: Header=BB48_67 Depth=1
	jmp	.LBB48_84
.LBB48_84:                              # %for.inc276
                                        #   in Loop: Header=BB48_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_67
.LBB48_85:                              # %for.end278
	jmp	.LBB48_95
.LBB48_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB48_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB48_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_89:                              # %for.cond284
                                        #   Parent Loop BB48_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB48_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB48_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_89
.LBB48_92:                              # %for.end310
                                        #   in Loop: Header=BB48_87 Depth=1
	jmp	.LBB48_93
.LBB48_93:                              # %for.inc311
                                        #   in Loop: Header=BB48_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_87
.LBB48_94:                              # %for.end313
	jmp	.LBB48_95
.LBB48_95:                              # %if.end314
	jmp	.LBB48_96
.LBB48_96:                              # %if.end315
	cmpl	$1367085322, -84(%rbp)  # imm = 0x517C110A
	jne	.LBB48_98
.LBB48_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_97
.Lfunc_end48:
	.size	decode_one_b8block.38, .Lfunc_end48-decode_one_b8block.38
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.39       # -- Begin function DecOneForthPix.39
	.p2align	4, 0x90
	.type	DecOneForthPix.39,@function
DecOneForthPix.39:                      # @DecOneForthPix.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2079055957, -12(%rbp)  # imm = 0x7BEBE055
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB49_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_1
.LBB49_4:                               # %for.end
	cmpl	$2079055957, -12(%rbp)  # imm = 0x7BEBE055
	jne	.LBB49_6
.LBB49_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_5
.Lfunc_end49:
	.size	DecOneForthPix.39, .Lfunc_end49-DecOneForthPix.39
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.40        # -- Begin function Conceal_Error.40
	.p2align	4, 0x90
	.type	Conceal_Error.40,@function
Conceal_Error.40:                       # @Conceal_Error.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$2062899618, -68(%rbp)  # imm = 0x7AF559A2
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB50_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB50_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB50_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB50_4:                               # %land.end
.LBB50_5:                               # %lor.end
.LBB50_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB50_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB50_9
.LBB50_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB50_14
.LBB50_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB50_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB50_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB50_12:                              # %land.end51
.LBB50_13:                              # %lor.end53
.LBB50_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB50_180
# %bb.15:                               # %land.end54
	movq	.LJTI50_0(,%rax,8), %rax
	jmpq	*%rax
.LBB50_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB50_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB50_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB50_18 Depth=1
	movl	$0, -4(%rbp)
.LBB50_20:                              # %for.cond68
                                        #   Parent Loop BB50_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB50_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB50_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_20
.LBB50_23:                              # %for.end
                                        #   in Loop: Header=BB50_18 Depth=1
	jmp	.LBB50_24
.LBB50_24:                              # %for.inc85
                                        #   in Loop: Header=BB50_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_18
.LBB50_25:                              # %for.end87
	jmp	.LBB50_35
.LBB50_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB50_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB50_27 Depth=1
	movl	$0, -4(%rbp)
.LBB50_29:                              # %for.cond92
                                        #   Parent Loop BB50_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB50_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB50_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_29
.LBB50_32:                              # %for.end104
                                        #   in Loop: Header=BB50_27 Depth=1
	jmp	.LBB50_33
.LBB50_33:                              # %for.inc105
                                        #   in Loop: Header=BB50_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_27
.LBB50_34:                              # %for.end107
	jmp	.LBB50_35
.LBB50_35:                              # %if.end
	jmp	.LBB50_180
.LBB50_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB50_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_39 Depth 2
                                        #       Child Loop BB50_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB50_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB50_37 Depth=1
	movl	$0, -12(%rbp)
.LBB50_39:                              # %for.cond113
                                        #   Parent Loop BB50_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB50_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB50_39 Depth=2
	movl	$0, -4(%rbp)
.LBB50_41:                              # %for.cond117
                                        #   Parent Loop BB50_37 Depth=1
                                        #     Parent Loop BB50_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB50_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB50_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB50_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_41
.LBB50_44:                              # %for.end141
                                        #   in Loop: Header=BB50_39 Depth=2
	jmp	.LBB50_45
.LBB50_45:                              # %for.inc142
                                        #   in Loop: Header=BB50_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_39
.LBB50_46:                              # %for.end144
                                        #   in Loop: Header=BB50_37 Depth=1
	jmp	.LBB50_47
.LBB50_47:                              # %for.inc145
                                        #   in Loop: Header=BB50_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_37
.LBB50_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB50_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB50_49 Depth=1
	movl	$0, -8(%rbp)
.LBB50_51:                              # %for.cond152
                                        #   Parent Loop BB50_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB50_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB50_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_51
.LBB50_54:                              # %for.end162
                                        #   in Loop: Header=BB50_49 Depth=1
	jmp	.LBB50_55
.LBB50_55:                              # %for.inc163
                                        #   in Loop: Header=BB50_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_49
.LBB50_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB50_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB50_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB50_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB50_59 Depth=1
	movl	$0, -4(%rbp)
.LBB50_61:                              # %for.cond175
                                        #   Parent Loop BB50_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB50_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB50_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_61
.LBB50_64:                              # %for.end195
                                        #   in Loop: Header=BB50_59 Depth=1
	jmp	.LBB50_65
.LBB50_65:                              # %for.inc196
                                        #   in Loop: Header=BB50_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_59
.LBB50_66:                              # %for.end198
	jmp	.LBB50_95
.LBB50_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB50_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB50_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_71 Depth 2
                                        #       Child Loop BB50_73 Depth 3
                                        #         Child Loop BB50_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB50_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB50_71:                              # %for.cond210
                                        #   Parent Loop BB50_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_73 Depth 3
                                        #         Child Loop BB50_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB50_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB50_73:                              # %for.cond236
                                        #   Parent Loop BB50_69 Depth=1
                                        #     Parent Loop BB50_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB50_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB50_73 Depth=3
	movl	$0, -4(%rbp)
.LBB50_75:                              # %for.cond240
                                        #   Parent Loop BB50_69 Depth=1
                                        #     Parent Loop BB50_71 Depth=2
                                        #       Parent Loop BB50_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB50_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB50_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB50_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_75
.LBB50_78:                              # %for.end259
                                        #   in Loop: Header=BB50_73 Depth=3
	jmp	.LBB50_79
.LBB50_79:                              # %for.inc260
                                        #   in Loop: Header=BB50_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_73
.LBB50_80:                              # %for.end262
                                        #   in Loop: Header=BB50_71 Depth=2
	jmp	.LBB50_81
.LBB50_81:                              # %for.inc263
                                        #   in Loop: Header=BB50_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_71
.LBB50_82:                              # %for.end265
                                        #   in Loop: Header=BB50_69 Depth=1
	jmp	.LBB50_83
.LBB50_83:                              # %for.inc266
                                        #   in Loop: Header=BB50_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_69
.LBB50_84:                              # %for.end268
	jmp	.LBB50_94
.LBB50_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB50_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB50_86 Depth=1
	movl	$0, -4(%rbp)
.LBB50_88:                              # %for.cond274
                                        #   Parent Loop BB50_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB50_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB50_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_88
.LBB50_91:                              # %for.end294
                                        #   in Loop: Header=BB50_86 Depth=1
	jmp	.LBB50_92
.LBB50_92:                              # %for.inc295
                                        #   in Loop: Header=BB50_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_86
.LBB50_93:                              # %for.end297
	jmp	.LBB50_94
.LBB50_94:                              # %if.end298
	jmp	.LBB50_95
.LBB50_95:                              # %if.end299
	jmp	.LBB50_105
.LBB50_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB50_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB50_97 Depth=1
	movl	$0, -4(%rbp)
.LBB50_99:                              # %for.cond305
                                        #   Parent Loop BB50_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB50_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB50_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_99
.LBB50_102:                             # %for.end317
                                        #   in Loop: Header=BB50_97 Depth=1
	jmp	.LBB50_103
.LBB50_103:                             # %for.inc318
                                        #   in Loop: Header=BB50_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_97
.LBB50_104:                             # %for.end320
	jmp	.LBB50_105
.LBB50_105:                             # %if.end321
	jmp	.LBB50_180
.LBB50_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB50_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB50_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_110 Depth 2
                                        #       Child Loop BB50_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB50_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB50_108 Depth=1
	movl	$0, -12(%rbp)
.LBB50_110:                             # %for.cond331
                                        #   Parent Loop BB50_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB50_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB50_110 Depth=2
	movl	$0, -4(%rbp)
.LBB50_112:                             # %for.cond335
                                        #   Parent Loop BB50_108 Depth=1
                                        #     Parent Loop BB50_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB50_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB50_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB50_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_112
.LBB50_115:                             # %for.end359
                                        #   in Loop: Header=BB50_110 Depth=2
	jmp	.LBB50_116
.LBB50_116:                             # %for.inc360
                                        #   in Loop: Header=BB50_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_110
.LBB50_117:                             # %for.end362
                                        #   in Loop: Header=BB50_108 Depth=1
	jmp	.LBB50_118
.LBB50_118:                             # %for.inc363
                                        #   in Loop: Header=BB50_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_108
.LBB50_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB50_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB50_120 Depth=1
	movl	$0, -8(%rbp)
.LBB50_122:                             # %for.cond370
                                        #   Parent Loop BB50_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB50_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB50_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_122
.LBB50_125:                             # %for.end380
                                        #   in Loop: Header=BB50_120 Depth=1
	jmp	.LBB50_126
.LBB50_126:                             # %for.inc381
                                        #   in Loop: Header=BB50_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_120
.LBB50_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB50_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB50_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB50_129 Depth=1
	movl	$0, -4(%rbp)
.LBB50_131:                             # %for.cond390
                                        #   Parent Loop BB50_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB50_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB50_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_131
.LBB50_134:                             # %for.end410
                                        #   in Loop: Header=BB50_129 Depth=1
	jmp	.LBB50_135
.LBB50_135:                             # %for.inc411
                                        #   in Loop: Header=BB50_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_129
.LBB50_136:                             # %for.end413
	jmp	.LBB50_156
.LBB50_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB50_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB50_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_141 Depth 2
                                        #       Child Loop BB50_143 Depth 3
                                        #         Child Loop BB50_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB50_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB50_141:                             # %for.cond425
                                        #   Parent Loop BB50_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_143 Depth 3
                                        #         Child Loop BB50_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB50_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB50_143:                             # %for.cond452
                                        #   Parent Loop BB50_139 Depth=1
                                        #     Parent Loop BB50_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB50_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB50_143 Depth=3
	movl	$0, -4(%rbp)
.LBB50_145:                             # %for.cond456
                                        #   Parent Loop BB50_139 Depth=1
                                        #     Parent Loop BB50_141 Depth=2
                                        #       Parent Loop BB50_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB50_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB50_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB50_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_145
.LBB50_148:                             # %for.end475
                                        #   in Loop: Header=BB50_143 Depth=3
	jmp	.LBB50_149
.LBB50_149:                             # %for.inc476
                                        #   in Loop: Header=BB50_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_143
.LBB50_150:                             # %for.end478
                                        #   in Loop: Header=BB50_141 Depth=2
	jmp	.LBB50_151
.LBB50_151:                             # %for.inc479
                                        #   in Loop: Header=BB50_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_141
.LBB50_152:                             # %for.end481
                                        #   in Loop: Header=BB50_139 Depth=1
	jmp	.LBB50_153
.LBB50_153:                             # %for.inc482
                                        #   in Loop: Header=BB50_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_139
.LBB50_154:                             # %for.end484
	jmp	.LBB50_155
.LBB50_155:                             # %if.end485
	jmp	.LBB50_156
.LBB50_156:                             # %if.end486
	jmp	.LBB50_157
.LBB50_157:                             # %if.end487
	jmp	.LBB50_180
.LBB50_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB50_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB50_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB50_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB50_161 Depth=1
	movl	$0, -4(%rbp)
.LBB50_163:                             # %for.cond499
                                        #   Parent Loop BB50_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB50_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB50_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_163
.LBB50_166:                             # %for.end519
                                        #   in Loop: Header=BB50_161 Depth=1
	jmp	.LBB50_167
.LBB50_167:                             # %for.inc520
                                        #   in Loop: Header=BB50_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_161
.LBB50_168:                             # %for.end522
	jmp	.LBB50_169
.LBB50_169:                             # %if.end523
	jmp	.LBB50_179
.LBB50_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB50_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB50_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB50_171 Depth=1
	movl	$0, -4(%rbp)
.LBB50_173:                             # %for.cond529
                                        #   Parent Loop BB50_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB50_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB50_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB50_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_173
.LBB50_176:                             # %for.end541
                                        #   in Loop: Header=BB50_171 Depth=1
	jmp	.LBB50_177
.LBB50_177:                             # %for.inc542
                                        #   in Loop: Header=BB50_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_171
.LBB50_178:                             # %for.end544
	jmp	.LBB50_179
.LBB50_179:                             # %if.end545
	jmp	.LBB50_180
.LBB50_180:                             # %sw.epilog
	cmpl	$2062899618, -68(%rbp)  # imm = 0x7AF559A2
	jne	.LBB50_182
.LBB50_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_181
.Lfunc_end50:
	.size	Conceal_Error.40, .Lfunc_end50-Conceal_Error.40
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI50_0:
	.quad	.LBB50_16
	.quad	.LBB50_158
	.quad	.LBB50_106
	.quad	.LBB50_180
	.quad	.LBB50_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.41
.LCPI51_0:
	.quad	4636737291354636288     # double 100
.LCPI51_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.41
	.p2align	4, 0x90
	.type	Build_Status_Map.41,@function
Build_Status_Map.41:                    # @Build_Status_Map.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1156232199, -40(%rbp)  # imm = 0x44EAB407
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB51_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_3:                               # %for.cond2
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB51_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB51_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB51_13
.LBB51_6:                               # %if.then
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB51_8:                               # %if.end
                                        #   in Loop: Header=BB51_3 Depth=2
	callq	rand
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB51_10:                              # %if.end20
                                        #   in Loop: Header=BB51_3 Depth=2
	callq	rand
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	$1, -4(%rbp)
.LBB51_12:                              # %if.end29
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB51_13:                              # %if.end30
                                        #   in Loop: Header=BB51_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB51_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB51_18
.LBB51_15:                              # %if.else
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB51_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB51_17:                              # %if.end49
                                        #   in Loop: Header=BB51_3 Depth=2
	jmp	.LBB51_18
.LBB51_18:                              # %if.end50
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_3
.LBB51_20:                              # %for.end
                                        #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_21
.LBB51_21:                              # %for.inc53
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_1
.LBB51_22:                              # %for.end55
	cmpl	$1156232199, -40(%rbp)  # imm = 0x44EAB407
	jne	.LBB51_24
.LBB51_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_23
.Lfunc_end51:
	.size	Build_Status_Map.41, .Lfunc_end51-Build_Status_Map.41
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.42 # -- Begin function compute_residue_b8block.42
	.p2align	4, 0x90
	.type	compute_residue_b8block.42,@function
compute_residue_b8block.42:             # @compute_residue_b8block.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1811476132, -36(%rbp)  # imm = 0x6BF8EEA4
	movl	%edi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB52_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB52_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB52_4:                               # %for.cond4
                                        #   Parent Loop BB52_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB52_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB52_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB52_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_4
.LBB52_7:                               # %for.end
                                        #   in Loop: Header=BB52_2 Depth=1
	jmp	.LBB52_8
.LBB52_8:                               # %for.inc22
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_2
.LBB52_9:                               # %for.end24
	jmp	.LBB52_19
.LBB52_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB52_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB52_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB52_13:                              # %for.cond29
                                        #   Parent Loop BB52_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB52_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB52_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB52_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_13
.LBB52_16:                              # %for.end56
                                        #   in Loop: Header=BB52_11 Depth=1
	jmp	.LBB52_17
.LBB52_17:                              # %for.inc57
                                        #   in Loop: Header=BB52_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_11
.LBB52_18:                              # %for.end59
	jmp	.LBB52_19
.LBB52_19:                              # %if.end
	cmpl	$1811476132, -36(%rbp)  # imm = 0x6BF8EEA4
	jne	.LBB52_21
.LBB52_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_20
.Lfunc_end52:
	.size	compute_residue_b8block.42, .Lfunc_end52-compute_residue_b8block.42
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.43 # -- Begin function compute_residue_b8block.43
	.p2align	4, 0x90
	.type	compute_residue_b8block.43,@function
compute_residue_b8block.43:             # @compute_residue_b8block.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1966108717, -36(%rbp)  # imm = 0x7530702D
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB53_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB53_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_4:                               # %for.cond4
                                        #   Parent Loop BB53_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB53_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB53_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB53_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_4
.LBB53_7:                               # %for.end
                                        #   in Loop: Header=BB53_2 Depth=1
	jmp	.LBB53_8
.LBB53_8:                               # %for.inc22
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_2
.LBB53_9:                               # %for.end24
	jmp	.LBB53_19
.LBB53_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB53_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB53_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_13:                              # %for.cond29
                                        #   Parent Loop BB53_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB53_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB53_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB53_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_13
.LBB53_16:                              # %for.end56
                                        #   in Loop: Header=BB53_11 Depth=1
	jmp	.LBB53_17
.LBB53_17:                              # %for.inc57
                                        #   in Loop: Header=BB53_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_11
.LBB53_18:                              # %for.end59
	jmp	.LBB53_19
.LBB53_19:                              # %if.end
	cmpl	$1966108717, -36(%rbp)  # imm = 0x7530702D
	jne	.LBB53_21
.LBB53_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_20
.Lfunc_end53:
	.size	compute_residue_b8block.43, .Lfunc_end53-compute_residue_b8block.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.44
.LCPI54_0:
	.quad	4636737291354636288     # double 100
.LCPI54_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.44
	.p2align	4, 0x90
	.type	Build_Status_Map.44,@function
Build_Status_Map.44:                    # @Build_Status_Map.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1927754216, -36(%rbp)  # imm = 0x72E731E8
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB54_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -12(%rbp)
.LBB54_3:                               # %for.cond2
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB54_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB54_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB54_13
.LBB54_6:                               # %if.then
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB54_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB54_8:                               # %if.end
                                        #   in Loop: Header=BB54_3 Depth=2
	callq	rand
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB54_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB54_10:                              # %if.end20
                                        #   in Loop: Header=BB54_3 Depth=2
	callq	rand
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB54_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	$1, -4(%rbp)
.LBB54_12:                              # %if.end29
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB54_13:                              # %if.end30
                                        #   in Loop: Header=BB54_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB54_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB54_18
.LBB54_15:                              # %if.else
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB54_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB54_17:                              # %if.end49
                                        #   in Loop: Header=BB54_3 Depth=2
	jmp	.LBB54_18
.LBB54_18:                              # %if.end50
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_3
.LBB54_20:                              # %for.end
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_21
.LBB54_21:                              # %for.inc53
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_1
.LBB54_22:                              # %for.end55
	cmpl	$1927754216, -36(%rbp)  # imm = 0x72E731E8
	jne	.LBB54_24
.LBB54_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_23
.Lfunc_end54:
	.size	Build_Status_Map.44, .Lfunc_end54-Build_Status_Map.44
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.45 # -- Begin function compute_residue_b8block.45
	.p2align	4, 0x90
	.type	compute_residue_b8block.45,@function
compute_residue_b8block.45:             # @compute_residue_b8block.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$707478315, -36(%rbp)   # imm = 0x2A2B432B
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB55_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB55_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_4:                               # %for.cond4
                                        #   Parent Loop BB55_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB55_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB55_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB55_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_4
.LBB55_7:                               # %for.end
                                        #   in Loop: Header=BB55_2 Depth=1
	jmp	.LBB55_8
.LBB55_8:                               # %for.inc22
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_2
.LBB55_9:                               # %for.end24
	jmp	.LBB55_19
.LBB55_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB55_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB55_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_13:                              # %for.cond29
                                        #   Parent Loop BB55_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB55_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB55_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB55_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_13
.LBB55_16:                              # %for.end56
                                        #   in Loop: Header=BB55_11 Depth=1
	jmp	.LBB55_17
.LBB55_17:                              # %for.inc57
                                        #   in Loop: Header=BB55_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_11
.LBB55_18:                              # %for.end59
	jmp	.LBB55_19
.LBB55_19:                              # %if.end
	cmpl	$707478315, -36(%rbp)   # imm = 0x2A2B432B
	jne	.LBB55_21
.LBB55_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_20
.Lfunc_end55:
	.size	compute_residue_b8block.45, .Lfunc_end55-compute_residue_b8block.45
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.46
.LCPI56_0:
	.quad	4636737291354636288     # double 100
.LCPI56_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.46
	.p2align	4, 0x90
	.type	Build_Status_Map.46,@function
Build_Status_Map.46:                    # @Build_Status_Map.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$73237133, -44(%rbp)    # imm = 0x45D828D
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB56_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -12(%rbp)
.LBB56_3:                               # %for.cond2
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB56_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB56_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB56_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB56_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB56_13
.LBB56_6:                               # %if.then
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB56_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB56_8:                               # %if.end
                                        #   in Loop: Header=BB56_3 Depth=2
	callq	rand
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB56_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB56_10:                              # %if.end20
                                        #   in Loop: Header=BB56_3 Depth=2
	callq	rand
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB56_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	$1, -4(%rbp)
.LBB56_12:                              # %if.end29
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB56_13:                              # %if.end30
                                        #   in Loop: Header=BB56_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB56_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB56_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB56_18
.LBB56_15:                              # %if.else
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB56_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB56_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB56_17:                              # %if.end49
                                        #   in Loop: Header=BB56_3 Depth=2
	jmp	.LBB56_18
.LBB56_18:                              # %if.end50
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_3
.LBB56_20:                              # %for.end
                                        #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_21
.LBB56_21:                              # %for.inc53
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_1
.LBB56_22:                              # %for.end55
	cmpl	$73237133, -44(%rbp)    # imm = 0x45D828D
	jne	.LBB56_24
.LBB56_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_23
.Lfunc_end56:
	.size	Build_Status_Map.46, .Lfunc_end56-Build_Status_Map.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.47
.LCPI57_0:
	.quad	4636737291354636288     # double 100
.LCPI57_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.47
	.p2align	4, 0x90
	.type	Build_Status_Map.47,@function
Build_Status_Map.47:                    # @Build_Status_Map.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1823075938, -40(%rbp)  # imm = 0x6CA9EE62
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB57_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	$0, -8(%rbp)
.LBB57_3:                               # %for.cond2
                                        #   Parent Loop BB57_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB57_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB57_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB57_13
.LBB57_6:                               # %if.then
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB57_8:                               # %if.end
                                        #   in Loop: Header=BB57_3 Depth=2
	callq	rand
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB57_10:                              # %if.end20
                                        #   in Loop: Header=BB57_3 Depth=2
	callq	rand
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	$1, -4(%rbp)
.LBB57_12:                              # %if.end29
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB57_13:                              # %if.end30
                                        #   in Loop: Header=BB57_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB57_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB57_18
.LBB57_15:                              # %if.else
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB57_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB57_17:                              # %if.end49
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_18
.LBB57_18:                              # %if.end50
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_3
.LBB57_20:                              # %for.end
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_21
.LBB57_21:                              # %for.inc53
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_1
.LBB57_22:                              # %for.end55
	cmpl	$1823075938, -40(%rbp)  # imm = 0x6CA9EE62
	jne	.LBB57_24
.LBB57_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_23
.Lfunc_end57:
	.size	Build_Status_Map.47, .Lfunc_end57-Build_Status_Map.47
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.48  # -- Begin function Get_Reference_Pixel.48
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.48,@function
Get_Reference_Pixel.48:                 # @Get_Reference_Pixel.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1172392462, -100(%rbp) # imm = 0x45E14A0E
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB58_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB58_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB58_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB58_5
.LBB58_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB58_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB58_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB58_11
.LBB58_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB58_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB58_10
.LBB58_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB58_10:                              # %cond.end14
.LBB58_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB58_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB58_14
.LBB58_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB58_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB58_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB58_20
.LBB58_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB58_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB58_19
.LBB58_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB58_19:                              # %cond.end29
.LBB58_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_332
.LBB58_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB58_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB58_25
.LBB58_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB58_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB58_31
.LBB58_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB58_30
.LBB58_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB58_30:                              # %cond.end52
.LBB58_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB58_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_36
.LBB58_35:                              # %cond.false61
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_36:                              # %cond.end63
                                        #   in Loop: Header=BB58_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB58_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_42
.LBB58_38:                              # %cond.false68
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_41
.LBB58_40:                              # %cond.false73
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_41:                              # %cond.end75
                                        #   in Loop: Header=BB58_32 Depth=1
.LBB58_42:                              # %cond.end77
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_32
.LBB58_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_47
.LBB58_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB58_53
.LBB58_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_52
.LBB58_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_52:                              # %cond.end113
.LBB58_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB58_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB58_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB58_57
.LBB58_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB58_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB58_63
.LBB58_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB58_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB58_62
.LBB58_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB58_62:                              # %cond.end136
.LBB58_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_76
.LBB58_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB58_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB58_68
.LBB58_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB58_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB58_74
.LBB58_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB58_73
.LBB58_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB58_73:                              # %cond.end169
.LBB58_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_75:                              # %if.end
	jmp	.LBB58_76
.LBB58_76:                              # %if.end178
	jmp	.LBB58_331
.LBB58_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB58_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB58_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB58_81
.LBB58_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB58_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB58_87
.LBB58_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB58_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB58_86
.LBB58_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB58_86:                              # %cond.end197
.LBB58_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB58_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_92
.LBB58_91:                              # %cond.false209
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_92:                              # %cond.end211
                                        #   in Loop: Header=BB58_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB58_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_98
.LBB58_94:                              # %cond.false216
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_97
.LBB58_96:                              # %cond.false221
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_97:                              # %cond.end223
                                        #   in Loop: Header=BB58_88 Depth=1
.LBB58_98:                              # %cond.end225
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_88
.LBB58_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_103
.LBB58_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB58_109
.LBB58_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_108
.LBB58_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_108:                             # %cond.end266
.LBB58_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB58_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB58_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB58_113
.LBB58_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB58_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB58_119
.LBB58_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB58_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB58_118
.LBB58_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB58_118:                             # %cond.end287
.LBB58_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_132
.LBB58_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB58_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB58_124
.LBB58_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB58_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB58_130
.LBB58_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB58_129
.LBB58_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB58_129:                             # %cond.end320
.LBB58_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_131:                             # %if.end331
	jmp	.LBB58_132
.LBB58_132:                             # %if.end332
	jmp	.LBB58_330
.LBB58_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB58_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB58_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB58_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_139
.LBB58_138:                             # %cond.false345
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_139:                             # %cond.end347
                                        #   in Loop: Header=BB58_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB58_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_145
.LBB58_141:                             # %cond.false352
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_144
.LBB58_143:                             # %cond.false357
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_144:                             # %cond.end359
                                        #   in Loop: Header=BB58_135 Depth=1
.LBB58_145:                             # %cond.end361
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_146:                             # %for.cond363
                                        #   Parent Loop BB58_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB58_150
.LBB58_149:                             # %cond.false371
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_150:                             # %cond.end373
                                        #   in Loop: Header=BB58_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB58_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_156
.LBB58_152:                             # %cond.false378
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB58_155
.LBB58_154:                             # %cond.false383
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_155:                             # %cond.end385
                                        #   in Loop: Header=BB58_146 Depth=2
.LBB58_156:                             # %cond.end387
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_146
.LBB58_158:                             # %for.end401
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_135
.LBB58_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB58_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB58_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB58_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_161
.LBB58_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_167
.LBB58_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB58_173
.LBB58_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_172
.LBB58_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_172:                             # %cond.end449
.LBB58_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB58_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_177
.LBB58_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB58_183
.LBB58_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_182
.LBB58_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_182:                             # %cond.end486
.LBB58_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_196
.LBB58_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB58_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_188
.LBB58_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB58_194
.LBB58_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_193
.LBB58_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_193:                             # %cond.end526
.LBB58_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_195:                             # %if.end532
	jmp	.LBB58_196
.LBB58_196:                             # %if.end533
	jmp	.LBB58_329
.LBB58_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB58_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB58_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_203
.LBB58_202:                             # %cond.false546
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_203:                             # %cond.end548
                                        #   in Loop: Header=BB58_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB58_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_209
.LBB58_205:                             # %cond.false553
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_208
.LBB58_207:                             # %cond.false558
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_208:                             # %cond.end560
                                        #   in Loop: Header=BB58_199 Depth=1
.LBB58_209:                             # %cond.end562
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_210:                             # %for.cond564
                                        #   Parent Loop BB58_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB58_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB58_214
.LBB58_213:                             # %cond.false572
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_214:                             # %cond.end574
                                        #   in Loop: Header=BB58_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB58_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_220
.LBB58_216:                             # %cond.false579
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB58_219
.LBB58_218:                             # %cond.false584
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_219:                             # %cond.end586
                                        #   in Loop: Header=BB58_210 Depth=2
.LBB58_220:                             # %cond.end588
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_210
.LBB58_222:                             # %for.end602
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_199
.LBB58_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB58_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB58_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB58_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_225
.LBB58_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_231
.LBB58_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB58_237
.LBB58_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_236
.LBB58_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_236:                             # %cond.end650
.LBB58_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB58_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_241
.LBB58_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB58_247
.LBB58_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_246
.LBB58_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_246:                             # %cond.end687
.LBB58_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_258
.LBB58_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_251
.LBB58_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB58_257
.LBB58_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_256
.LBB58_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_256:                             # %cond.end724
.LBB58_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_258:                             # %if.end730
	jmp	.LBB58_328
.LBB58_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB58_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB58_262
.LBB58_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB58_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB58_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB58_265
.LBB58_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB58_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB58_271
.LBB58_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB58_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB58_270
.LBB58_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB58_270:                             # %cond.end753
.LBB58_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB58_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_276
.LBB58_275:                             # %cond.false765
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_276:                             # %cond.end767
                                        #   in Loop: Header=BB58_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB58_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_282
.LBB58_278:                             # %cond.false772
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_281
.LBB58_280:                             # %cond.false777
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_281:                             # %cond.end779
                                        #   in Loop: Header=BB58_272 Depth=1
.LBB58_282:                             # %cond.end781
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_272
.LBB58_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_287
.LBB58_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB58_293
.LBB58_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_292
.LBB58_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_292:                             # %cond.end822
.LBB58_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB58_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB58_296
.LBB58_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB58_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB58_299
.LBB58_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB58_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB58_305
.LBB58_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB58_304
.LBB58_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB58_304:                             # %cond.end847
.LBB58_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB58_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_310
.LBB58_309:                             # %cond.false859
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_310:                             # %cond.end861
                                        #   in Loop: Header=BB58_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB58_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_316
.LBB58_312:                             # %cond.false866
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_315
.LBB58_314:                             # %cond.false871
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_315:                             # %cond.end873
                                        #   in Loop: Header=BB58_306 Depth=1
.LBB58_316:                             # %cond.end875
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_306
.LBB58_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_321
.LBB58_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB58_327
.LBB58_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_326
.LBB58_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_326:                             # %cond.end916
.LBB58_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_328:                             # %if.end922
	jmp	.LBB58_329
.LBB58_329:                             # %if.end923
	jmp	.LBB58_330
.LBB58_330:                             # %if.end924
	jmp	.LBB58_331
.LBB58_331:                             # %if.end925
	jmp	.LBB58_332
.LBB58_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1172392462, -100(%rbp) # imm = 0x45E14A0E
	jne	.LBB58_334
.LBB58_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_333
.Lfunc_end58:
	.size	Get_Reference_Pixel.48, .Lfunc_end58-Get_Reference_Pixel.48
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.49        # -- Begin function Conceal_Error.49
	.p2align	4, 0x90
	.type	Conceal_Error.49,@function
Conceal_Error.49:                       # @Conceal_Error.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$27409549, -68(%rbp)    # imm = 0x1A23C8D
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB59_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB59_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB59_4:                               # %land.end
.LBB59_5:                               # %lor.end
.LBB59_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB59_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB59_9
.LBB59_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB59_14
.LBB59_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB59_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB59_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB59_12:                              # %land.end51
.LBB59_13:                              # %lor.end53
.LBB59_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB59_180
# %bb.15:                               # %land.end54
	movq	.LJTI59_0(,%rax,8), %rax
	jmpq	*%rax
.LBB59_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB59_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	$0, -4(%rbp)
.LBB59_20:                              # %for.cond68
                                        #   Parent Loop BB59_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB59_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB59_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_20
.LBB59_23:                              # %for.end
                                        #   in Loop: Header=BB59_18 Depth=1
	jmp	.LBB59_24
.LBB59_24:                              # %for.inc85
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_18
.LBB59_25:                              # %for.end87
	jmp	.LBB59_35
.LBB59_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB59_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	$0, -4(%rbp)
.LBB59_29:                              # %for.cond92
                                        #   Parent Loop BB59_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB59_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB59_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_29
.LBB59_32:                              # %for.end104
                                        #   in Loop: Header=BB59_27 Depth=1
	jmp	.LBB59_33
.LBB59_33:                              # %for.inc105
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_27
.LBB59_34:                              # %for.end107
	jmp	.LBB59_35
.LBB59_35:                              # %if.end
	jmp	.LBB59_180
.LBB59_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB59_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_39 Depth 2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	$0, -12(%rbp)
.LBB59_39:                              # %for.cond113
                                        #   Parent Loop BB59_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	$0, -4(%rbp)
.LBB59_41:                              # %for.cond117
                                        #   Parent Loop BB59_37 Depth=1
                                        #     Parent Loop BB59_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB59_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB59_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_41
.LBB59_44:                              # %for.end141
                                        #   in Loop: Header=BB59_39 Depth=2
	jmp	.LBB59_45
.LBB59_45:                              # %for.inc142
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_39
.LBB59_46:                              # %for.end144
                                        #   in Loop: Header=BB59_37 Depth=1
	jmp	.LBB59_47
.LBB59_47:                              # %for.inc145
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_37
.LBB59_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB59_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	$0, -8(%rbp)
.LBB59_51:                              # %for.cond152
                                        #   Parent Loop BB59_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB59_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB59_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_51
.LBB59_54:                              # %for.end162
                                        #   in Loop: Header=BB59_49 Depth=1
	jmp	.LBB59_55
.LBB59_55:                              # %for.inc163
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_49
.LBB59_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB59_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB59_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	$0, -4(%rbp)
.LBB59_61:                              # %for.cond175
                                        #   Parent Loop BB59_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB59_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB59_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_61
.LBB59_64:                              # %for.end195
                                        #   in Loop: Header=BB59_59 Depth=1
	jmp	.LBB59_65
.LBB59_65:                              # %for.inc196
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_59
.LBB59_66:                              # %for.end198
	jmp	.LBB59_95
.LBB59_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB59_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_71 Depth 2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_71:                              # %for.cond210
                                        #   Parent Loop BB59_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB59_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_73:                              # %for.cond236
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	$0, -4(%rbp)
.LBB59_75:                              # %for.cond240
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        #       Parent Loop BB59_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB59_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB59_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_75
.LBB59_78:                              # %for.end259
                                        #   in Loop: Header=BB59_73 Depth=3
	jmp	.LBB59_79
.LBB59_79:                              # %for.inc260
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_73
.LBB59_80:                              # %for.end262
                                        #   in Loop: Header=BB59_71 Depth=2
	jmp	.LBB59_81
.LBB59_81:                              # %for.inc263
                                        #   in Loop: Header=BB59_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_71
.LBB59_82:                              # %for.end265
                                        #   in Loop: Header=BB59_69 Depth=1
	jmp	.LBB59_83
.LBB59_83:                              # %for.inc266
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_69
.LBB59_84:                              # %for.end268
	jmp	.LBB59_94
.LBB59_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB59_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	$0, -4(%rbp)
.LBB59_88:                              # %for.cond274
                                        #   Parent Loop BB59_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB59_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB59_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_88
.LBB59_91:                              # %for.end294
                                        #   in Loop: Header=BB59_86 Depth=1
	jmp	.LBB59_92
.LBB59_92:                              # %for.inc295
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_86
.LBB59_93:                              # %for.end297
	jmp	.LBB59_94
.LBB59_94:                              # %if.end298
	jmp	.LBB59_95
.LBB59_95:                              # %if.end299
	jmp	.LBB59_105
.LBB59_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB59_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	$0, -4(%rbp)
.LBB59_99:                              # %for.cond305
                                        #   Parent Loop BB59_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB59_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB59_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_99
.LBB59_102:                             # %for.end317
                                        #   in Loop: Header=BB59_97 Depth=1
	jmp	.LBB59_103
.LBB59_103:                             # %for.inc318
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_97
.LBB59_104:                             # %for.end320
	jmp	.LBB59_105
.LBB59_105:                             # %if.end321
	jmp	.LBB59_180
.LBB59_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB59_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_110 Depth 2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	$0, -12(%rbp)
.LBB59_110:                             # %for.cond331
                                        #   Parent Loop BB59_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	$0, -4(%rbp)
.LBB59_112:                             # %for.cond335
                                        #   Parent Loop BB59_108 Depth=1
                                        #     Parent Loop BB59_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB59_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB59_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_112
.LBB59_115:                             # %for.end359
                                        #   in Loop: Header=BB59_110 Depth=2
	jmp	.LBB59_116
.LBB59_116:                             # %for.inc360
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_110
.LBB59_117:                             # %for.end362
                                        #   in Loop: Header=BB59_108 Depth=1
	jmp	.LBB59_118
.LBB59_118:                             # %for.inc363
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_108
.LBB59_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB59_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	$0, -8(%rbp)
.LBB59_122:                             # %for.cond370
                                        #   Parent Loop BB59_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB59_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB59_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_122
.LBB59_125:                             # %for.end380
                                        #   in Loop: Header=BB59_120 Depth=1
	jmp	.LBB59_126
.LBB59_126:                             # %for.inc381
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_120
.LBB59_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB59_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB59_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	$0, -4(%rbp)
.LBB59_131:                             # %for.cond390
                                        #   Parent Loop BB59_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB59_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB59_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_131
.LBB59_134:                             # %for.end410
                                        #   in Loop: Header=BB59_129 Depth=1
	jmp	.LBB59_135
.LBB59_135:                             # %for.inc411
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_129
.LBB59_136:                             # %for.end413
	jmp	.LBB59_156
.LBB59_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB59_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_141 Depth 2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_141:                             # %for.cond425
                                        #   Parent Loop BB59_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB59_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_143:                             # %for.cond452
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	$0, -4(%rbp)
.LBB59_145:                             # %for.cond456
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        #       Parent Loop BB59_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB59_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB59_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_145
.LBB59_148:                             # %for.end475
                                        #   in Loop: Header=BB59_143 Depth=3
	jmp	.LBB59_149
.LBB59_149:                             # %for.inc476
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_143
.LBB59_150:                             # %for.end478
                                        #   in Loop: Header=BB59_141 Depth=2
	jmp	.LBB59_151
.LBB59_151:                             # %for.inc479
                                        #   in Loop: Header=BB59_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_141
.LBB59_152:                             # %for.end481
                                        #   in Loop: Header=BB59_139 Depth=1
	jmp	.LBB59_153
.LBB59_153:                             # %for.inc482
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_139
.LBB59_154:                             # %for.end484
	jmp	.LBB59_155
.LBB59_155:                             # %if.end485
	jmp	.LBB59_156
.LBB59_156:                             # %if.end486
	jmp	.LBB59_157
.LBB59_157:                             # %if.end487
	jmp	.LBB59_180
.LBB59_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB59_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB59_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	$0, -4(%rbp)
.LBB59_163:                             # %for.cond499
                                        #   Parent Loop BB59_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB59_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB59_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_163
.LBB59_166:                             # %for.end519
                                        #   in Loop: Header=BB59_161 Depth=1
	jmp	.LBB59_167
.LBB59_167:                             # %for.inc520
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_161
.LBB59_168:                             # %for.end522
	jmp	.LBB59_169
.LBB59_169:                             # %if.end523
	jmp	.LBB59_179
.LBB59_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB59_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	$0, -4(%rbp)
.LBB59_173:                             # %for.cond529
                                        #   Parent Loop BB59_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB59_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB59_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_173
.LBB59_176:                             # %for.end541
                                        #   in Loop: Header=BB59_171 Depth=1
	jmp	.LBB59_177
.LBB59_177:                             # %for.inc542
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_171
.LBB59_178:                             # %for.end544
	jmp	.LBB59_179
.LBB59_179:                             # %if.end545
	jmp	.LBB59_180
.LBB59_180:                             # %sw.epilog
	cmpl	$27409549, -68(%rbp)    # imm = 0x1A23C8D
	jne	.LBB59_182
.LBB59_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_181
.Lfunc_end59:
	.size	Conceal_Error.49, .Lfunc_end59-Conceal_Error.49
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI59_0:
	.quad	.LBB59_16
	.quad	.LBB59_158
	.quad	.LBB59_106
	.quad	.LBB59_180
	.quad	.LBB59_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.50
.LCPI60_0:
	.quad	4636737291354636288     # double 100
.LCPI60_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.50
	.p2align	4, 0x90
	.type	Build_Status_Map.50,@function
Build_Status_Map.50:                    # @Build_Status_Map.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1312935991, -44(%rbp)  # imm = 0x4E41D037
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB60_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_3:                               # %for.cond2
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB60_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB60_13
.LBB60_6:                               # %if.then
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI60_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB60_8:                               # %if.end
                                        #   in Loop: Header=BB60_3 Depth=2
	callq	rand
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI60_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB60_10:                              # %if.end20
                                        #   in Loop: Header=BB60_3 Depth=2
	callq	rand
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI60_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	$1, -4(%rbp)
.LBB60_12:                              # %if.end29
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB60_13:                              # %if.end30
                                        #   in Loop: Header=BB60_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB60_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB60_18
.LBB60_15:                              # %if.else
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB60_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB60_17:                              # %if.end49
                                        #   in Loop: Header=BB60_3 Depth=2
	jmp	.LBB60_18
.LBB60_18:                              # %if.end50
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_3
.LBB60_20:                              # %for.end
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_21
.LBB60_21:                              # %for.inc53
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_1
.LBB60_22:                              # %for.end55
	cmpl	$1312935991, -44(%rbp)  # imm = 0x4E41D037
	jne	.LBB60_24
.LBB60_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_23
.Lfunc_end60:
	.size	Build_Status_Map.50, .Lfunc_end60-Build_Status_Map.50
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.51  # -- Begin function Get_Reference_Block.51
	.p2align	4, 0x90
	.type	Get_Reference_Block.51,@function
Get_Reference_Block.51:                 # @Get_Reference_Block.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$638948798, -28(%rbp)   # imm = 0x261595BE
	movq	%rdi, -56(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -48(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB61_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	$0, -4(%rbp)
.LBB61_3:                               # %for.cond5
                                        #   Parent Loop BB61_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB61_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_3
.LBB61_6:                               # %for.end
                                        #   in Loop: Header=BB61_1 Depth=1
	jmp	.LBB61_7
.LBB61_7:                               # %for.inc14
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_1
.LBB61_8:                               # %for.end16
	cmpl	$638948798, -28(%rbp)   # imm = 0x261595BE
	jne	.LBB61_10
.LBB61_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_9
.Lfunc_end61:
	.size	Get_Reference_Block.51, .Lfunc_end61-Get_Reference_Block.51
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.52    # -- Begin function Error_Concealment.52
	.p2align	4, 0x90
	.type	Error_Concealment.52,@function
Error_Concealment.52:                   # @Error_Concealment.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$959767045, -16(%rbp)   # imm = 0x3934E205
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB62_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_3:                               # %for.cond2
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB62_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB62_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB62_6:                               # %if.end
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_7
.LBB62_7:                               # %for.inc
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_3
.LBB62_8:                               # %for.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_9
.LBB62_9:                               # %for.inc7
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_1
.LBB62_10:                              # %for.end9
	cmpl	$959767045, -16(%rbp)   # imm = 0x3934E205
	jne	.LBB62_12
.LBB62_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_11
.Lfunc_end62:
	.size	Error_Concealment.52, .Lfunc_end62-Error_Concealment.52
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.53  # -- Begin function Get_Reference_Block.53
	.p2align	4, 0x90
	.type	Get_Reference_Block.53,@function
Get_Reference_Block.53:                 # @Get_Reference_Block.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1067433732, -20(%rbp)  # imm = 0x3F9FBF04
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_3:                               # %for.cond5
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_3
.LBB63_6:                               # %for.end
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_7
.LBB63_7:                               # %for.inc14
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_1
.LBB63_8:                               # %for.end16
	cmpl	$1067433732, -20(%rbp)  # imm = 0x3F9FBF04
	jne	.LBB63_10
.LBB63_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_9
.Lfunc_end63:
	.size	Get_Reference_Block.53, .Lfunc_end63-Get_Reference_Block.53
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.54  # -- Begin function Get_Reference_Pixel.54
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.54,@function
Get_Reference_Pixel.54:                 # @Get_Reference_Pixel.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$705979904, -100(%rbp)  # imm = 0x2A146600
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB64_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB64_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB64_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB64_5
.LBB64_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB64_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB64_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB64_11
.LBB64_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB64_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB64_10
.LBB64_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB64_10:                              # %cond.end14
.LBB64_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB64_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB64_14
.LBB64_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB64_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB64_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB64_20
.LBB64_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB64_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB64_19
.LBB64_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB64_19:                              # %cond.end29
.LBB64_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_332
.LBB64_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB64_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB64_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB64_25
.LBB64_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB64_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB64_31
.LBB64_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB64_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB64_30
.LBB64_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB64_30:                              # %cond.end52
.LBB64_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB64_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB64_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB64_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB64_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB64_36
.LBB64_35:                              # %cond.false61
                                        #   in Loop: Header=BB64_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB64_36:                              # %cond.end63
                                        #   in Loop: Header=BB64_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB64_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB64_42
.LBB64_38:                              # %cond.false68
                                        #   in Loop: Header=BB64_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB64_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB64_41
.LBB64_40:                              # %cond.false73
                                        #   in Loop: Header=BB64_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB64_41:                              # %cond.end75
                                        #   in Loop: Header=BB64_32 Depth=1
.LBB64_42:                              # %cond.end77
                                        #   in Loop: Header=BB64_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB64_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_32
.LBB64_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_47
.LBB64_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB64_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB64_53
.LBB64_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_52
.LBB64_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB64_52:                              # %cond.end113
.LBB64_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB64_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB64_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB64_57
.LBB64_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB64_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB64_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB64_63
.LBB64_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB64_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB64_62
.LBB64_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB64_62:                              # %cond.end136
.LBB64_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB64_76
.LBB64_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB64_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB64_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB64_68
.LBB64_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB64_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB64_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB64_74
.LBB64_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB64_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB64_73
.LBB64_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB64_73:                              # %cond.end169
.LBB64_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB64_75:                              # %if.end
	jmp	.LBB64_76
.LBB64_76:                              # %if.end178
	jmp	.LBB64_331
.LBB64_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB64_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB64_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB64_81
.LBB64_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB64_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB64_87
.LBB64_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB64_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB64_86
.LBB64_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB64_86:                              # %cond.end197
.LBB64_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB64_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB64_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB64_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB64_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB64_92
.LBB64_91:                              # %cond.false209
                                        #   in Loop: Header=BB64_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB64_92:                              # %cond.end211
                                        #   in Loop: Header=BB64_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB64_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB64_98
.LBB64_94:                              # %cond.false216
                                        #   in Loop: Header=BB64_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB64_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB64_97
.LBB64_96:                              # %cond.false221
                                        #   in Loop: Header=BB64_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB64_97:                              # %cond.end223
                                        #   in Loop: Header=BB64_88 Depth=1
.LBB64_98:                              # %cond.end225
                                        #   in Loop: Header=BB64_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB64_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_88
.LBB64_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_103
.LBB64_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB64_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB64_109
.LBB64_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_108
.LBB64_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB64_108:                             # %cond.end266
.LBB64_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB64_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB64_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB64_113
.LBB64_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB64_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB64_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB64_119
.LBB64_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB64_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB64_118
.LBB64_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB64_118:                             # %cond.end287
.LBB64_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB64_132
.LBB64_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB64_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB64_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB64_124
.LBB64_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB64_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB64_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB64_130
.LBB64_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB64_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB64_129
.LBB64_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB64_129:                             # %cond.end320
.LBB64_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB64_131:                             # %if.end331
	jmp	.LBB64_132
.LBB64_132:                             # %if.end332
	jmp	.LBB64_330
.LBB64_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB64_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB64_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB64_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB64_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB64_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB64_139
.LBB64_138:                             # %cond.false345
                                        #   in Loop: Header=BB64_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB64_139:                             # %cond.end347
                                        #   in Loop: Header=BB64_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB64_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB64_145
.LBB64_141:                             # %cond.false352
                                        #   in Loop: Header=BB64_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB64_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB64_144
.LBB64_143:                             # %cond.false357
                                        #   in Loop: Header=BB64_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB64_144:                             # %cond.end359
                                        #   in Loop: Header=BB64_135 Depth=1
.LBB64_145:                             # %cond.end361
                                        #   in Loop: Header=BB64_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB64_146:                             # %for.cond363
                                        #   Parent Loop BB64_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB64_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB64_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB64_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB64_150
.LBB64_149:                             # %cond.false371
                                        #   in Loop: Header=BB64_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB64_150:                             # %cond.end373
                                        #   in Loop: Header=BB64_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB64_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB64_156
.LBB64_152:                             # %cond.false378
                                        #   in Loop: Header=BB64_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB64_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB64_155
.LBB64_154:                             # %cond.false383
                                        #   in Loop: Header=BB64_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB64_155:                             # %cond.end385
                                        #   in Loop: Header=BB64_146 Depth=2
.LBB64_156:                             # %cond.end387
                                        #   in Loop: Header=BB64_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB64_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_146
.LBB64_158:                             # %for.end401
                                        #   in Loop: Header=BB64_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB64_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_135
.LBB64_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB64_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB64_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB64_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB64_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_161
.LBB64_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_167
.LBB64_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB64_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB64_173
.LBB64_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_172
.LBB64_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB64_172:                             # %cond.end449
.LBB64_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB64_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB64_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_177
.LBB64_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB64_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB64_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB64_183
.LBB64_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB64_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_182
.LBB64_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB64_182:                             # %cond.end486
.LBB64_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB64_196
.LBB64_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB64_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB64_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_188
.LBB64_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB64_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB64_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB64_194
.LBB64_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB64_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_193
.LBB64_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB64_193:                             # %cond.end526
.LBB64_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB64_195:                             # %if.end532
	jmp	.LBB64_196
.LBB64_196:                             # %if.end533
	jmp	.LBB64_329
.LBB64_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB64_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB64_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB64_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB64_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB64_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB64_203
.LBB64_202:                             # %cond.false546
                                        #   in Loop: Header=BB64_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB64_203:                             # %cond.end548
                                        #   in Loop: Header=BB64_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB64_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB64_209
.LBB64_205:                             # %cond.false553
                                        #   in Loop: Header=BB64_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB64_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB64_208
.LBB64_207:                             # %cond.false558
                                        #   in Loop: Header=BB64_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB64_208:                             # %cond.end560
                                        #   in Loop: Header=BB64_199 Depth=1
.LBB64_209:                             # %cond.end562
                                        #   in Loop: Header=BB64_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB64_210:                             # %for.cond564
                                        #   Parent Loop BB64_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB64_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB64_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB64_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB64_214
.LBB64_213:                             # %cond.false572
                                        #   in Loop: Header=BB64_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB64_214:                             # %cond.end574
                                        #   in Loop: Header=BB64_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB64_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB64_220
.LBB64_216:                             # %cond.false579
                                        #   in Loop: Header=BB64_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB64_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB64_219
.LBB64_218:                             # %cond.false584
                                        #   in Loop: Header=BB64_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB64_219:                             # %cond.end586
                                        #   in Loop: Header=BB64_210 Depth=2
.LBB64_220:                             # %cond.end588
                                        #   in Loop: Header=BB64_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB64_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_210
.LBB64_222:                             # %for.end602
                                        #   in Loop: Header=BB64_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB64_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_199
.LBB64_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB64_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB64_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB64_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB64_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_225
.LBB64_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_231
.LBB64_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB64_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB64_237
.LBB64_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_236
.LBB64_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB64_236:                             # %cond.end650
.LBB64_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB64_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB64_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_241
.LBB64_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB64_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB64_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB64_247
.LBB64_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB64_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_246
.LBB64_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB64_246:                             # %cond.end687
.LBB64_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB64_258
.LBB64_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB64_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_251
.LBB64_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB64_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB64_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB64_257
.LBB64_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB64_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_256
.LBB64_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB64_256:                             # %cond.end724
.LBB64_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB64_258:                             # %if.end730
	jmp	.LBB64_328
.LBB64_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB64_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB64_262
.LBB64_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB64_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB64_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB64_265
.LBB64_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB64_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB64_271
.LBB64_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB64_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB64_270
.LBB64_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB64_270:                             # %cond.end753
.LBB64_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB64_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB64_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB64_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB64_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB64_276
.LBB64_275:                             # %cond.false765
                                        #   in Loop: Header=BB64_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB64_276:                             # %cond.end767
                                        #   in Loop: Header=BB64_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB64_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB64_282
.LBB64_278:                             # %cond.false772
                                        #   in Loop: Header=BB64_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB64_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB64_281
.LBB64_280:                             # %cond.false777
                                        #   in Loop: Header=BB64_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB64_281:                             # %cond.end779
                                        #   in Loop: Header=BB64_272 Depth=1
.LBB64_282:                             # %cond.end781
                                        #   in Loop: Header=BB64_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB64_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_272
.LBB64_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_287
.LBB64_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB64_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB64_293
.LBB64_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_292
.LBB64_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB64_292:                             # %cond.end822
.LBB64_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB64_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB64_296
.LBB64_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB64_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB64_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB64_299
.LBB64_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB64_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB64_305
.LBB64_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB64_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB64_304
.LBB64_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB64_304:                             # %cond.end847
.LBB64_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB64_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB64_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB64_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB64_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB64_310
.LBB64_309:                             # %cond.false859
                                        #   in Loop: Header=BB64_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB64_310:                             # %cond.end861
                                        #   in Loop: Header=BB64_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB64_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB64_316
.LBB64_312:                             # %cond.false866
                                        #   in Loop: Header=BB64_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB64_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB64_315
.LBB64_314:                             # %cond.false871
                                        #   in Loop: Header=BB64_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB64_315:                             # %cond.end873
                                        #   in Loop: Header=BB64_306 Depth=1
.LBB64_316:                             # %cond.end875
                                        #   in Loop: Header=BB64_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB64_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_306
.LBB64_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_321
.LBB64_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB64_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB64_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB64_327
.LBB64_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB64_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_326
.LBB64_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB64_326:                             # %cond.end916
.LBB64_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB64_328:                             # %if.end922
	jmp	.LBB64_329
.LBB64_329:                             # %if.end923
	jmp	.LBB64_330
.LBB64_330:                             # %if.end924
	jmp	.LBB64_331
.LBB64_331:                             # %if.end925
	jmp	.LBB64_332
.LBB64_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$705979904, -100(%rbp)  # imm = 0x2A146600
	jne	.LBB64_334
.LBB64_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_333
.Lfunc_end64:
	.size	Get_Reference_Pixel.54, .Lfunc_end64-Get_Reference_Pixel.54
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.55    # -- Begin function Error_Concealment.55
	.p2align	4, 0x90
	.type	Error_Concealment.55,@function
Error_Concealment.55:                   # @Error_Concealment.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1370291486, -20(%rbp)  # imm = 0x51ACFD1E
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB65_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_3:                               # %for.cond2
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB65_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB65_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB65_6:                               # %if.end
                                        #   in Loop: Header=BB65_3 Depth=2
	jmp	.LBB65_7
.LBB65_7:                               # %for.inc
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_3
.LBB65_8:                               # %for.end
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_9
.LBB65_9:                               # %for.inc7
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_1
.LBB65_10:                              # %for.end9
	cmpl	$1370291486, -20(%rbp)  # imm = 0x51ACFD1E
	jne	.LBB65_12
.LBB65_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_11
.Lfunc_end65:
	.size	Error_Concealment.55, .Lfunc_end65-Error_Concealment.55
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.56        # -- Begin function Conceal_Error.56
	.p2align	4, 0x90
	.type	Conceal_Error.56,@function
Conceal_Error.56:                       # @Conceal_Error.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$271405580, -68(%rbp)   # imm = 0x102D520C
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB66_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB66_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB66_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB66_4:                               # %land.end
.LBB66_5:                               # %lor.end
.LBB66_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB66_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB66_9
.LBB66_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB66_14
.LBB66_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB66_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB66_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB66_12:                              # %land.end51
.LBB66_13:                              # %lor.end53
.LBB66_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB66_180
# %bb.15:                               # %land.end54
	movq	.LJTI66_0(,%rax,8), %rax
	jmpq	*%rax
.LBB66_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB66_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB66_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB66_18 Depth=1
	movl	$0, -4(%rbp)
.LBB66_20:                              # %for.cond68
                                        #   Parent Loop BB66_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB66_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB66_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_20
.LBB66_23:                              # %for.end
                                        #   in Loop: Header=BB66_18 Depth=1
	jmp	.LBB66_24
.LBB66_24:                              # %for.inc85
                                        #   in Loop: Header=BB66_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_18
.LBB66_25:                              # %for.end87
	jmp	.LBB66_35
.LBB66_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB66_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB66_27 Depth=1
	movl	$0, -4(%rbp)
.LBB66_29:                              # %for.cond92
                                        #   Parent Loop BB66_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB66_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB66_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_29
.LBB66_32:                              # %for.end104
                                        #   in Loop: Header=BB66_27 Depth=1
	jmp	.LBB66_33
.LBB66_33:                              # %for.inc105
                                        #   in Loop: Header=BB66_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_27
.LBB66_34:                              # %for.end107
	jmp	.LBB66_35
.LBB66_35:                              # %if.end
	jmp	.LBB66_180
.LBB66_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB66_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_39 Depth 2
                                        #       Child Loop BB66_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB66_37 Depth=1
	movl	$0, -12(%rbp)
.LBB66_39:                              # %for.cond113
                                        #   Parent Loop BB66_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB66_39 Depth=2
	movl	$0, -4(%rbp)
.LBB66_41:                              # %for.cond117
                                        #   Parent Loop BB66_37 Depth=1
                                        #     Parent Loop BB66_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB66_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB66_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB66_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_41
.LBB66_44:                              # %for.end141
                                        #   in Loop: Header=BB66_39 Depth=2
	jmp	.LBB66_45
.LBB66_45:                              # %for.inc142
                                        #   in Loop: Header=BB66_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_39
.LBB66_46:                              # %for.end144
                                        #   in Loop: Header=BB66_37 Depth=1
	jmp	.LBB66_47
.LBB66_47:                              # %for.inc145
                                        #   in Loop: Header=BB66_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_37
.LBB66_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB66_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB66_49 Depth=1
	movl	$0, -8(%rbp)
.LBB66_51:                              # %for.cond152
                                        #   Parent Loop BB66_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB66_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB66_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_51
.LBB66_54:                              # %for.end162
                                        #   in Loop: Header=BB66_49 Depth=1
	jmp	.LBB66_55
.LBB66_55:                              # %for.inc163
                                        #   in Loop: Header=BB66_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_49
.LBB66_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB66_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB66_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB66_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB66_59 Depth=1
	movl	$0, -4(%rbp)
.LBB66_61:                              # %for.cond175
                                        #   Parent Loop BB66_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB66_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB66_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_61
.LBB66_64:                              # %for.end195
                                        #   in Loop: Header=BB66_59 Depth=1
	jmp	.LBB66_65
.LBB66_65:                              # %for.inc196
                                        #   in Loop: Header=BB66_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_59
.LBB66_66:                              # %for.end198
	jmp	.LBB66_95
.LBB66_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB66_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB66_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_71 Depth 2
                                        #       Child Loop BB66_73 Depth 3
                                        #         Child Loop BB66_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB66_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB66_71:                              # %for.cond210
                                        #   Parent Loop BB66_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_73 Depth 3
                                        #         Child Loop BB66_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB66_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB66_73:                              # %for.cond236
                                        #   Parent Loop BB66_69 Depth=1
                                        #     Parent Loop BB66_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB66_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB66_73 Depth=3
	movl	$0, -4(%rbp)
.LBB66_75:                              # %for.cond240
                                        #   Parent Loop BB66_69 Depth=1
                                        #     Parent Loop BB66_71 Depth=2
                                        #       Parent Loop BB66_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB66_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB66_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB66_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_75
.LBB66_78:                              # %for.end259
                                        #   in Loop: Header=BB66_73 Depth=3
	jmp	.LBB66_79
.LBB66_79:                              # %for.inc260
                                        #   in Loop: Header=BB66_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_73
.LBB66_80:                              # %for.end262
                                        #   in Loop: Header=BB66_71 Depth=2
	jmp	.LBB66_81
.LBB66_81:                              # %for.inc263
                                        #   in Loop: Header=BB66_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_71
.LBB66_82:                              # %for.end265
                                        #   in Loop: Header=BB66_69 Depth=1
	jmp	.LBB66_83
.LBB66_83:                              # %for.inc266
                                        #   in Loop: Header=BB66_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_69
.LBB66_84:                              # %for.end268
	jmp	.LBB66_94
.LBB66_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB66_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB66_86 Depth=1
	movl	$0, -4(%rbp)
.LBB66_88:                              # %for.cond274
                                        #   Parent Loop BB66_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB66_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB66_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_88
.LBB66_91:                              # %for.end294
                                        #   in Loop: Header=BB66_86 Depth=1
	jmp	.LBB66_92
.LBB66_92:                              # %for.inc295
                                        #   in Loop: Header=BB66_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_86
.LBB66_93:                              # %for.end297
	jmp	.LBB66_94
.LBB66_94:                              # %if.end298
	jmp	.LBB66_95
.LBB66_95:                              # %if.end299
	jmp	.LBB66_105
.LBB66_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB66_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB66_97 Depth=1
	movl	$0, -4(%rbp)
.LBB66_99:                              # %for.cond305
                                        #   Parent Loop BB66_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB66_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB66_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_99
.LBB66_102:                             # %for.end317
                                        #   in Loop: Header=BB66_97 Depth=1
	jmp	.LBB66_103
.LBB66_103:                             # %for.inc318
                                        #   in Loop: Header=BB66_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_97
.LBB66_104:                             # %for.end320
	jmp	.LBB66_105
.LBB66_105:                             # %if.end321
	jmp	.LBB66_180
.LBB66_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB66_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB66_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_110 Depth 2
                                        #       Child Loop BB66_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB66_108 Depth=1
	movl	$0, -12(%rbp)
.LBB66_110:                             # %for.cond331
                                        #   Parent Loop BB66_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB66_110 Depth=2
	movl	$0, -4(%rbp)
.LBB66_112:                             # %for.cond335
                                        #   Parent Loop BB66_108 Depth=1
                                        #     Parent Loop BB66_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB66_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB66_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB66_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_112
.LBB66_115:                             # %for.end359
                                        #   in Loop: Header=BB66_110 Depth=2
	jmp	.LBB66_116
.LBB66_116:                             # %for.inc360
                                        #   in Loop: Header=BB66_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_110
.LBB66_117:                             # %for.end362
                                        #   in Loop: Header=BB66_108 Depth=1
	jmp	.LBB66_118
.LBB66_118:                             # %for.inc363
                                        #   in Loop: Header=BB66_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_108
.LBB66_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB66_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB66_120 Depth=1
	movl	$0, -8(%rbp)
.LBB66_122:                             # %for.cond370
                                        #   Parent Loop BB66_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB66_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB66_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_122
.LBB66_125:                             # %for.end380
                                        #   in Loop: Header=BB66_120 Depth=1
	jmp	.LBB66_126
.LBB66_126:                             # %for.inc381
                                        #   in Loop: Header=BB66_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_120
.LBB66_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB66_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB66_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB66_129 Depth=1
	movl	$0, -4(%rbp)
.LBB66_131:                             # %for.cond390
                                        #   Parent Loop BB66_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB66_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB66_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_131
.LBB66_134:                             # %for.end410
                                        #   in Loop: Header=BB66_129 Depth=1
	jmp	.LBB66_135
.LBB66_135:                             # %for.inc411
                                        #   in Loop: Header=BB66_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_129
.LBB66_136:                             # %for.end413
	jmp	.LBB66_156
.LBB66_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB66_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB66_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_141 Depth 2
                                        #       Child Loop BB66_143 Depth 3
                                        #         Child Loop BB66_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB66_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB66_141:                             # %for.cond425
                                        #   Parent Loop BB66_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_143 Depth 3
                                        #         Child Loop BB66_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB66_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB66_143:                             # %for.cond452
                                        #   Parent Loop BB66_139 Depth=1
                                        #     Parent Loop BB66_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB66_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB66_143 Depth=3
	movl	$0, -4(%rbp)
.LBB66_145:                             # %for.cond456
                                        #   Parent Loop BB66_139 Depth=1
                                        #     Parent Loop BB66_141 Depth=2
                                        #       Parent Loop BB66_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB66_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB66_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB66_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_145
.LBB66_148:                             # %for.end475
                                        #   in Loop: Header=BB66_143 Depth=3
	jmp	.LBB66_149
.LBB66_149:                             # %for.inc476
                                        #   in Loop: Header=BB66_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_143
.LBB66_150:                             # %for.end478
                                        #   in Loop: Header=BB66_141 Depth=2
	jmp	.LBB66_151
.LBB66_151:                             # %for.inc479
                                        #   in Loop: Header=BB66_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_141
.LBB66_152:                             # %for.end481
                                        #   in Loop: Header=BB66_139 Depth=1
	jmp	.LBB66_153
.LBB66_153:                             # %for.inc482
                                        #   in Loop: Header=BB66_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_139
.LBB66_154:                             # %for.end484
	jmp	.LBB66_155
.LBB66_155:                             # %if.end485
	jmp	.LBB66_156
.LBB66_156:                             # %if.end486
	jmp	.LBB66_157
.LBB66_157:                             # %if.end487
	jmp	.LBB66_180
.LBB66_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB66_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB66_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB66_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB66_161 Depth=1
	movl	$0, -4(%rbp)
.LBB66_163:                             # %for.cond499
                                        #   Parent Loop BB66_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB66_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB66_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_163
.LBB66_166:                             # %for.end519
                                        #   in Loop: Header=BB66_161 Depth=1
	jmp	.LBB66_167
.LBB66_167:                             # %for.inc520
                                        #   in Loop: Header=BB66_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_161
.LBB66_168:                             # %for.end522
	jmp	.LBB66_169
.LBB66_169:                             # %if.end523
	jmp	.LBB66_179
.LBB66_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB66_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB66_171 Depth=1
	movl	$0, -4(%rbp)
.LBB66_173:                             # %for.cond529
                                        #   Parent Loop BB66_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB66_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB66_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_173
.LBB66_176:                             # %for.end541
                                        #   in Loop: Header=BB66_171 Depth=1
	jmp	.LBB66_177
.LBB66_177:                             # %for.inc542
                                        #   in Loop: Header=BB66_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_171
.LBB66_178:                             # %for.end544
	jmp	.LBB66_179
.LBB66_179:                             # %if.end545
	jmp	.LBB66_180
.LBB66_180:                             # %sw.epilog
	cmpl	$271405580, -68(%rbp)   # imm = 0x102D520C
	jne	.LBB66_182
.LBB66_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_181
.Lfunc_end66:
	.size	Conceal_Error.56, .Lfunc_end66-Conceal_Error.56
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI66_0:
	.quad	.LBB66_16
	.quad	.LBB66_158
	.quad	.LBB66_106
	.quad	.LBB66_180
	.quad	.LBB66_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.57  # -- Begin function Get_Reference_Pixel.57
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.57,@function
Get_Reference_Pixel.57:                 # @Get_Reference_Pixel.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1654422728, -104(%rbp) # imm = 0x629C7CC8
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB67_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB67_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB67_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB67_5
.LBB67_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB67_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB67_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB67_11
.LBB67_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB67_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB67_10
.LBB67_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB67_10:                              # %cond.end14
.LBB67_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB67_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB67_14
.LBB67_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB67_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB67_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB67_20
.LBB67_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB67_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB67_19
.LBB67_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB67_19:                              # %cond.end29
.LBB67_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_332
.LBB67_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB67_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB67_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB67_25
.LBB67_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB67_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB67_31
.LBB67_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB67_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB67_30
.LBB67_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB67_30:                              # %cond.end52
.LBB67_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB67_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB67_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_36
.LBB67_35:                              # %cond.false61
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_36:                              # %cond.end63
                                        #   in Loop: Header=BB67_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB67_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_42
.LBB67_38:                              # %cond.false68
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_41
.LBB67_40:                              # %cond.false73
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_41:                              # %cond.end75
                                        #   in Loop: Header=BB67_32 Depth=1
.LBB67_42:                              # %cond.end77
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_32
.LBB67_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_47
.LBB67_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB67_53
.LBB67_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_52
.LBB67_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_52:                              # %cond.end113
.LBB67_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB67_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB67_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB67_57
.LBB67_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB67_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB67_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB67_63
.LBB67_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB67_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB67_62
.LBB67_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB67_62:                              # %cond.end136
.LBB67_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB67_76
.LBB67_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB67_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB67_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB67_68
.LBB67_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB67_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB67_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB67_74
.LBB67_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB67_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB67_73
.LBB67_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB67_73:                              # %cond.end169
.LBB67_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB67_75:                              # %if.end
	jmp	.LBB67_76
.LBB67_76:                              # %if.end178
	jmp	.LBB67_331
.LBB67_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB67_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB67_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB67_81
.LBB67_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB67_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB67_87
.LBB67_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB67_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB67_86
.LBB67_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB67_86:                              # %cond.end197
.LBB67_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB67_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB67_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_92
.LBB67_91:                              # %cond.false209
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_92:                              # %cond.end211
                                        #   in Loop: Header=BB67_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB67_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_98
.LBB67_94:                              # %cond.false216
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_97
.LBB67_96:                              # %cond.false221
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_97:                              # %cond.end223
                                        #   in Loop: Header=BB67_88 Depth=1
.LBB67_98:                              # %cond.end225
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB67_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_88
.LBB67_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_103
.LBB67_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB67_109
.LBB67_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_108
.LBB67_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_108:                             # %cond.end266
.LBB67_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB67_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB67_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB67_113
.LBB67_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB67_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB67_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB67_119
.LBB67_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB67_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB67_118
.LBB67_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB67_118:                             # %cond.end287
.LBB67_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB67_132
.LBB67_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB67_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB67_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB67_124
.LBB67_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB67_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB67_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB67_130
.LBB67_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB67_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB67_129
.LBB67_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB67_129:                             # %cond.end320
.LBB67_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB67_131:                             # %if.end331
	jmp	.LBB67_132
.LBB67_132:                             # %if.end332
	jmp	.LBB67_330
.LBB67_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB67_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB67_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB67_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_139
.LBB67_138:                             # %cond.false345
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_139:                             # %cond.end347
                                        #   in Loop: Header=BB67_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB67_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_145
.LBB67_141:                             # %cond.false352
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_144
.LBB67_143:                             # %cond.false357
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_144:                             # %cond.end359
                                        #   in Loop: Header=BB67_135 Depth=1
.LBB67_145:                             # %cond.end361
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB67_146:                             # %for.cond363
                                        #   Parent Loop BB67_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB67_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB67_150
.LBB67_149:                             # %cond.false371
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_150:                             # %cond.end373
                                        #   in Loop: Header=BB67_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB67_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_156
.LBB67_152:                             # %cond.false378
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB67_155
.LBB67_154:                             # %cond.false383
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_155:                             # %cond.end385
                                        #   in Loop: Header=BB67_146 Depth=2
.LBB67_156:                             # %cond.end387
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB67_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_146
.LBB67_158:                             # %for.end401
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_135
.LBB67_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB67_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB67_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB67_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB67_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_161
.LBB67_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_167
.LBB67_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB67_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB67_173
.LBB67_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_172
.LBB67_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB67_172:                             # %cond.end449
.LBB67_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB67_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_177
.LBB67_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB67_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB67_183
.LBB67_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_182
.LBB67_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_182:                             # %cond.end486
.LBB67_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB67_196
.LBB67_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB67_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_188
.LBB67_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB67_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB67_194
.LBB67_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_193
.LBB67_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_193:                             # %cond.end526
.LBB67_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB67_195:                             # %if.end532
	jmp	.LBB67_196
.LBB67_196:                             # %if.end533
	jmp	.LBB67_329
.LBB67_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB67_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB67_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB67_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_203
.LBB67_202:                             # %cond.false546
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_203:                             # %cond.end548
                                        #   in Loop: Header=BB67_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB67_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_209
.LBB67_205:                             # %cond.false553
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_208
.LBB67_207:                             # %cond.false558
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_208:                             # %cond.end560
                                        #   in Loop: Header=BB67_199 Depth=1
.LBB67_209:                             # %cond.end562
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB67_210:                             # %for.cond564
                                        #   Parent Loop BB67_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB67_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB67_214
.LBB67_213:                             # %cond.false572
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_214:                             # %cond.end574
                                        #   in Loop: Header=BB67_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB67_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_220
.LBB67_216:                             # %cond.false579
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB67_219
.LBB67_218:                             # %cond.false584
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_219:                             # %cond.end586
                                        #   in Loop: Header=BB67_210 Depth=2
.LBB67_220:                             # %cond.end588
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB67_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_210
.LBB67_222:                             # %for.end602
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB67_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_199
.LBB67_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB67_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB67_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB67_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB67_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_225
.LBB67_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_231
.LBB67_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB67_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB67_237
.LBB67_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_236
.LBB67_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB67_236:                             # %cond.end650
.LBB67_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB67_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_241
.LBB67_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB67_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB67_247
.LBB67_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_246
.LBB67_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_246:                             # %cond.end687
.LBB67_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB67_258
.LBB67_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_251
.LBB67_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB67_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB67_257
.LBB67_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB67_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_256
.LBB67_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB67_256:                             # %cond.end724
.LBB67_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB67_258:                             # %if.end730
	jmp	.LBB67_328
.LBB67_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB67_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB67_262
.LBB67_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB67_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB67_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB67_265
.LBB67_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB67_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB67_271
.LBB67_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB67_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB67_270
.LBB67_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB67_270:                             # %cond.end753
.LBB67_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB67_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB67_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_276
.LBB67_275:                             # %cond.false765
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_276:                             # %cond.end767
                                        #   in Loop: Header=BB67_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB67_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_282
.LBB67_278:                             # %cond.false772
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB67_281
.LBB67_280:                             # %cond.false777
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB67_281:                             # %cond.end779
                                        #   in Loop: Header=BB67_272 Depth=1
.LBB67_282:                             # %cond.end781
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB67_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_272
.LBB67_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_287
.LBB67_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB67_293
.LBB67_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_292
.LBB67_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_292:                             # %cond.end822
.LBB67_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB67_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB67_296
.LBB67_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB67_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB67_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB67_299
.LBB67_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB67_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB67_305
.LBB67_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB67_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB67_304
.LBB67_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB67_304:                             # %cond.end847
.LBB67_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB67_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB67_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_310
.LBB67_309:                             # %cond.false859
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_310:                             # %cond.end861
                                        #   in Loop: Header=BB67_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB67_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_316
.LBB67_312:                             # %cond.false866
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB67_315
.LBB67_314:                             # %cond.false871
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB67_315:                             # %cond.end873
                                        #   in Loop: Header=BB67_306 Depth=1
.LBB67_316:                             # %cond.end875
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB67_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_306
.LBB67_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_321
.LBB67_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB67_327
.LBB67_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_326
.LBB67_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_326:                             # %cond.end916
.LBB67_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB67_328:                             # %if.end922
	jmp	.LBB67_329
.LBB67_329:                             # %if.end923
	jmp	.LBB67_330
.LBB67_330:                             # %if.end924
	jmp	.LBB67_331
.LBB67_331:                             # %if.end925
	jmp	.LBB67_332
.LBB67_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1654422728, -104(%rbp) # imm = 0x629C7CC8
	jne	.LBB67_334
.LBB67_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_333
.Lfunc_end67:
	.size	Get_Reference_Pixel.57, .Lfunc_end67-Get_Reference_Pixel.57
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.58  # -- Begin function Get_Reference_Block.58
	.p2align	4, 0x90
	.type	Get_Reference_Block.58,@function
Get_Reference_Block.58:                 # @Get_Reference_Block.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1490400825, -24(%rbp)  # imm = 0x58D5B639
	movq	%rdi, -48(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -56(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_3:                               # %for.cond5
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB68_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_3
.LBB68_6:                               # %for.end
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_7
.LBB68_7:                               # %for.inc14
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_1
.LBB68_8:                               # %for.end16
	cmpl	$1490400825, -24(%rbp)  # imm = 0x58D5B639
	jne	.LBB68_10
.LBB68_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_9
.Lfunc_end68:
	.size	Get_Reference_Block.58, .Lfunc_end68-Get_Reference_Block.58
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.59        # -- Begin function Conceal_Error.59
	.p2align	4, 0x90
	.type	Conceal_Error.59,@function
Conceal_Error.59:                       # @Conceal_Error.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1797909008, -68(%rbp)  # imm = 0x6B29EA10
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB69_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB69_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB69_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB69_4:                               # %land.end
.LBB69_5:                               # %lor.end
.LBB69_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB69_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB69_9
.LBB69_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB69_14
.LBB69_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB69_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB69_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB69_12:                              # %land.end51
.LBB69_13:                              # %lor.end53
.LBB69_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB69_180
# %bb.15:                               # %land.end54
	movq	.LJTI69_0(,%rax,8), %rax
	jmpq	*%rax
.LBB69_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB69_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB69_18 Depth=1
	movl	$0, -4(%rbp)
.LBB69_20:                              # %for.cond68
                                        #   Parent Loop BB69_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB69_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB69_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_20
.LBB69_23:                              # %for.end
                                        #   in Loop: Header=BB69_18 Depth=1
	jmp	.LBB69_24
.LBB69_24:                              # %for.inc85
                                        #   in Loop: Header=BB69_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_18
.LBB69_25:                              # %for.end87
	jmp	.LBB69_35
.LBB69_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB69_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB69_27 Depth=1
	movl	$0, -4(%rbp)
.LBB69_29:                              # %for.cond92
                                        #   Parent Loop BB69_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB69_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB69_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_29
.LBB69_32:                              # %for.end104
                                        #   in Loop: Header=BB69_27 Depth=1
	jmp	.LBB69_33
.LBB69_33:                              # %for.inc105
                                        #   in Loop: Header=BB69_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_27
.LBB69_34:                              # %for.end107
	jmp	.LBB69_35
.LBB69_35:                              # %if.end
	jmp	.LBB69_180
.LBB69_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB69_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_39 Depth 2
                                        #       Child Loop BB69_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB69_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB69_37 Depth=1
	movl	$0, -16(%rbp)
.LBB69_39:                              # %for.cond113
                                        #   Parent Loop BB69_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB69_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB69_39 Depth=2
	movl	$0, -4(%rbp)
.LBB69_41:                              # %for.cond117
                                        #   Parent Loop BB69_37 Depth=1
                                        #     Parent Loop BB69_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB69_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB69_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB69_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_41
.LBB69_44:                              # %for.end141
                                        #   in Loop: Header=BB69_39 Depth=2
	jmp	.LBB69_45
.LBB69_45:                              # %for.inc142
                                        #   in Loop: Header=BB69_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_39
.LBB69_46:                              # %for.end144
                                        #   in Loop: Header=BB69_37 Depth=1
	jmp	.LBB69_47
.LBB69_47:                              # %for.inc145
                                        #   in Loop: Header=BB69_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_37
.LBB69_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB69_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB69_49 Depth=1
	movl	$0, -8(%rbp)
.LBB69_51:                              # %for.cond152
                                        #   Parent Loop BB69_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB69_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB69_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_51
.LBB69_54:                              # %for.end162
                                        #   in Loop: Header=BB69_49 Depth=1
	jmp	.LBB69_55
.LBB69_55:                              # %for.inc163
                                        #   in Loop: Header=BB69_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_49
.LBB69_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB69_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB69_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB69_59 Depth=1
	movl	$0, -4(%rbp)
.LBB69_61:                              # %for.cond175
                                        #   Parent Loop BB69_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB69_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB69_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_61
.LBB69_64:                              # %for.end195
                                        #   in Loop: Header=BB69_59 Depth=1
	jmp	.LBB69_65
.LBB69_65:                              # %for.inc196
                                        #   in Loop: Header=BB69_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_59
.LBB69_66:                              # %for.end198
	jmp	.LBB69_95
.LBB69_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB69_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB69_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_71 Depth 2
                                        #       Child Loop BB69_73 Depth 3
                                        #         Child Loop BB69_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB69_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB69_71:                              # %for.cond210
                                        #   Parent Loop BB69_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_73 Depth 3
                                        #         Child Loop BB69_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB69_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB69_73:                              # %for.cond236
                                        #   Parent Loop BB69_69 Depth=1
                                        #     Parent Loop BB69_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB69_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB69_73 Depth=3
	movl	$0, -4(%rbp)
.LBB69_75:                              # %for.cond240
                                        #   Parent Loop BB69_69 Depth=1
                                        #     Parent Loop BB69_71 Depth=2
                                        #       Parent Loop BB69_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB69_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB69_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB69_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_75
.LBB69_78:                              # %for.end259
                                        #   in Loop: Header=BB69_73 Depth=3
	jmp	.LBB69_79
.LBB69_79:                              # %for.inc260
                                        #   in Loop: Header=BB69_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_73
.LBB69_80:                              # %for.end262
                                        #   in Loop: Header=BB69_71 Depth=2
	jmp	.LBB69_81
.LBB69_81:                              # %for.inc263
                                        #   in Loop: Header=BB69_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_71
.LBB69_82:                              # %for.end265
                                        #   in Loop: Header=BB69_69 Depth=1
	jmp	.LBB69_83
.LBB69_83:                              # %for.inc266
                                        #   in Loop: Header=BB69_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_69
.LBB69_84:                              # %for.end268
	jmp	.LBB69_94
.LBB69_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB69_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB69_86 Depth=1
	movl	$0, -4(%rbp)
.LBB69_88:                              # %for.cond274
                                        #   Parent Loop BB69_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB69_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB69_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_88
.LBB69_91:                              # %for.end294
                                        #   in Loop: Header=BB69_86 Depth=1
	jmp	.LBB69_92
.LBB69_92:                              # %for.inc295
                                        #   in Loop: Header=BB69_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_86
.LBB69_93:                              # %for.end297
	jmp	.LBB69_94
.LBB69_94:                              # %if.end298
	jmp	.LBB69_95
.LBB69_95:                              # %if.end299
	jmp	.LBB69_105
.LBB69_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB69_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB69_97 Depth=1
	movl	$0, -4(%rbp)
.LBB69_99:                              # %for.cond305
                                        #   Parent Loop BB69_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB69_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB69_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_99
.LBB69_102:                             # %for.end317
                                        #   in Loop: Header=BB69_97 Depth=1
	jmp	.LBB69_103
.LBB69_103:                             # %for.inc318
                                        #   in Loop: Header=BB69_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_97
.LBB69_104:                             # %for.end320
	jmp	.LBB69_105
.LBB69_105:                             # %if.end321
	jmp	.LBB69_180
.LBB69_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB69_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_110 Depth 2
                                        #       Child Loop BB69_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB69_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB69_108 Depth=1
	movl	$0, -16(%rbp)
.LBB69_110:                             # %for.cond331
                                        #   Parent Loop BB69_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB69_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB69_110 Depth=2
	movl	$0, -4(%rbp)
.LBB69_112:                             # %for.cond335
                                        #   Parent Loop BB69_108 Depth=1
                                        #     Parent Loop BB69_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB69_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB69_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB69_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_112
.LBB69_115:                             # %for.end359
                                        #   in Loop: Header=BB69_110 Depth=2
	jmp	.LBB69_116
.LBB69_116:                             # %for.inc360
                                        #   in Loop: Header=BB69_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_110
.LBB69_117:                             # %for.end362
                                        #   in Loop: Header=BB69_108 Depth=1
	jmp	.LBB69_118
.LBB69_118:                             # %for.inc363
                                        #   in Loop: Header=BB69_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_108
.LBB69_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB69_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB69_120 Depth=1
	movl	$0, -8(%rbp)
.LBB69_122:                             # %for.cond370
                                        #   Parent Loop BB69_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB69_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB69_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_122
.LBB69_125:                             # %for.end380
                                        #   in Loop: Header=BB69_120 Depth=1
	jmp	.LBB69_126
.LBB69_126:                             # %for.inc381
                                        #   in Loop: Header=BB69_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_120
.LBB69_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB69_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB69_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB69_129 Depth=1
	movl	$0, -4(%rbp)
.LBB69_131:                             # %for.cond390
                                        #   Parent Loop BB69_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB69_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB69_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_131
.LBB69_134:                             # %for.end410
                                        #   in Loop: Header=BB69_129 Depth=1
	jmp	.LBB69_135
.LBB69_135:                             # %for.inc411
                                        #   in Loop: Header=BB69_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_129
.LBB69_136:                             # %for.end413
	jmp	.LBB69_156
.LBB69_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB69_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB69_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_141 Depth 2
                                        #       Child Loop BB69_143 Depth 3
                                        #         Child Loop BB69_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB69_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB69_141:                             # %for.cond425
                                        #   Parent Loop BB69_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_143 Depth 3
                                        #         Child Loop BB69_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB69_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB69_143:                             # %for.cond452
                                        #   Parent Loop BB69_139 Depth=1
                                        #     Parent Loop BB69_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB69_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB69_143 Depth=3
	movl	$0, -4(%rbp)
.LBB69_145:                             # %for.cond456
                                        #   Parent Loop BB69_139 Depth=1
                                        #     Parent Loop BB69_141 Depth=2
                                        #       Parent Loop BB69_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB69_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB69_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB69_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_145
.LBB69_148:                             # %for.end475
                                        #   in Loop: Header=BB69_143 Depth=3
	jmp	.LBB69_149
.LBB69_149:                             # %for.inc476
                                        #   in Loop: Header=BB69_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_143
.LBB69_150:                             # %for.end478
                                        #   in Loop: Header=BB69_141 Depth=2
	jmp	.LBB69_151
.LBB69_151:                             # %for.inc479
                                        #   in Loop: Header=BB69_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_141
.LBB69_152:                             # %for.end481
                                        #   in Loop: Header=BB69_139 Depth=1
	jmp	.LBB69_153
.LBB69_153:                             # %for.inc482
                                        #   in Loop: Header=BB69_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_139
.LBB69_154:                             # %for.end484
	jmp	.LBB69_155
.LBB69_155:                             # %if.end485
	jmp	.LBB69_156
.LBB69_156:                             # %if.end486
	jmp	.LBB69_157
.LBB69_157:                             # %if.end487
	jmp	.LBB69_180
.LBB69_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB69_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB69_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB69_161 Depth=1
	movl	$0, -4(%rbp)
.LBB69_163:                             # %for.cond499
                                        #   Parent Loop BB69_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB69_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB69_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_163
.LBB69_166:                             # %for.end519
                                        #   in Loop: Header=BB69_161 Depth=1
	jmp	.LBB69_167
.LBB69_167:                             # %for.inc520
                                        #   in Loop: Header=BB69_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_161
.LBB69_168:                             # %for.end522
	jmp	.LBB69_169
.LBB69_169:                             # %if.end523
	jmp	.LBB69_179
.LBB69_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB69_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB69_171 Depth=1
	movl	$0, -4(%rbp)
.LBB69_173:                             # %for.cond529
                                        #   Parent Loop BB69_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB69_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB69_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_173
.LBB69_176:                             # %for.end541
                                        #   in Loop: Header=BB69_171 Depth=1
	jmp	.LBB69_177
.LBB69_177:                             # %for.inc542
                                        #   in Loop: Header=BB69_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_171
.LBB69_178:                             # %for.end544
	jmp	.LBB69_179
.LBB69_179:                             # %if.end545
	jmp	.LBB69_180
.LBB69_180:                             # %sw.epilog
	cmpl	$1797909008, -68(%rbp)  # imm = 0x6B29EA10
	jne	.LBB69_182
.LBB69_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_181
.Lfunc_end69:
	.size	Conceal_Error.59, .Lfunc_end69-Conceal_Error.59
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI69_0:
	.quad	.LBB69_16
	.quad	.LBB69_158
	.quad	.LBB69_106
	.quad	.LBB69_180
	.quad	.LBB69_36
                                        # -- End function
	.text
	.globl	Error_Concealment.60    # -- Begin function Error_Concealment.60
	.p2align	4, 0x90
	.type	Error_Concealment.60,@function
Error_Concealment.60:                   # @Error_Concealment.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1024825051, -16(%rbp)  # imm = 0x3D1596DB
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB70_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	$0, -4(%rbp)
.LBB70_3:                               # %for.cond2
                                        #   Parent Loop BB70_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB70_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB70_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB70_6:                               # %if.end
                                        #   in Loop: Header=BB70_3 Depth=2
	jmp	.LBB70_7
.LBB70_7:                               # %for.inc
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_3
.LBB70_8:                               # %for.end
                                        #   in Loop: Header=BB70_1 Depth=1
	jmp	.LBB70_9
.LBB70_9:                               # %for.inc7
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_1
.LBB70_10:                              # %for.end9
	cmpl	$1024825051, -16(%rbp)  # imm = 0x3D1596DB
	jne	.LBB70_12
.LBB70_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_11
.Lfunc_end70:
	.size	Error_Concealment.60, .Lfunc_end70-Error_Concealment.60
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.61  # -- Begin function Get_Reference_Pixel.61
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.61,@function
Get_Reference_Pixel.61:                 # @Get_Reference_Pixel.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1083617461, -108(%rbp) # imm = 0x4096B0B5
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB71_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB71_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB71_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB71_5
.LBB71_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB71_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB71_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB71_11
.LBB71_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB71_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB71_10
.LBB71_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB71_10:                              # %cond.end14
.LBB71_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB71_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB71_14
.LBB71_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB71_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB71_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB71_20
.LBB71_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB71_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB71_19
.LBB71_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB71_19:                              # %cond.end29
.LBB71_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_332
.LBB71_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB71_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB71_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB71_25
.LBB71_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB71_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB71_31
.LBB71_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB71_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB71_30
.LBB71_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB71_30:                              # %cond.end52
.LBB71_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB71_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB71_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB71_36
.LBB71_35:                              # %cond.false61
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB71_36:                              # %cond.end63
                                        #   in Loop: Header=BB71_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB71_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_42
.LBB71_38:                              # %cond.false68
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB71_41
.LBB71_40:                              # %cond.false73
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB71_41:                              # %cond.end75
                                        #   in Loop: Header=BB71_32 Depth=1
.LBB71_42:                              # %cond.end77
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB71_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_32
.LBB71_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_47
.LBB71_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB71_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB71_53
.LBB71_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_52
.LBB71_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB71_52:                              # %cond.end113
.LBB71_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB71_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB71_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB71_57
.LBB71_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB71_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB71_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB71_63
.LBB71_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB71_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB71_62
.LBB71_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB71_62:                              # %cond.end136
.LBB71_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB71_76
.LBB71_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB71_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB71_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB71_68
.LBB71_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB71_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB71_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB71_74
.LBB71_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB71_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB71_73
.LBB71_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB71_73:                              # %cond.end169
.LBB71_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB71_75:                              # %if.end
	jmp	.LBB71_76
.LBB71_76:                              # %if.end178
	jmp	.LBB71_331
.LBB71_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB71_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB71_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB71_81
.LBB71_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB71_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB71_87
.LBB71_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB71_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB71_86
.LBB71_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB71_86:                              # %cond.end197
.LBB71_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB71_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB71_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB71_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB71_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB71_92
.LBB71_91:                              # %cond.false209
                                        #   in Loop: Header=BB71_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB71_92:                              # %cond.end211
                                        #   in Loop: Header=BB71_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB71_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_98
.LBB71_94:                              # %cond.false216
                                        #   in Loop: Header=BB71_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB71_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB71_97
.LBB71_96:                              # %cond.false221
                                        #   in Loop: Header=BB71_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB71_97:                              # %cond.end223
                                        #   in Loop: Header=BB71_88 Depth=1
.LBB71_98:                              # %cond.end225
                                        #   in Loop: Header=BB71_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB71_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_88
.LBB71_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_103
.LBB71_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB71_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB71_109
.LBB71_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_108
.LBB71_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB71_108:                             # %cond.end266
.LBB71_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB71_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB71_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB71_113
.LBB71_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB71_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB71_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB71_119
.LBB71_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB71_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB71_118
.LBB71_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB71_118:                             # %cond.end287
.LBB71_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB71_132
.LBB71_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB71_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB71_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB71_124
.LBB71_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB71_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB71_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB71_130
.LBB71_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB71_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB71_129
.LBB71_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB71_129:                             # %cond.end320
.LBB71_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB71_131:                             # %if.end331
	jmp	.LBB71_132
.LBB71_132:                             # %if.end332
	jmp	.LBB71_330
.LBB71_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB71_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB71_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB71_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB71_139
.LBB71_138:                             # %cond.false345
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB71_139:                             # %cond.end347
                                        #   in Loop: Header=BB71_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB71_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_145
.LBB71_141:                             # %cond.false352
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB71_144
.LBB71_143:                             # %cond.false357
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB71_144:                             # %cond.end359
                                        #   in Loop: Header=BB71_135 Depth=1
.LBB71_145:                             # %cond.end361
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB71_146:                             # %for.cond363
                                        #   Parent Loop BB71_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB71_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB71_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB71_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB71_150
.LBB71_149:                             # %cond.false371
                                        #   in Loop: Header=BB71_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB71_150:                             # %cond.end373
                                        #   in Loop: Header=BB71_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB71_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB71_156
.LBB71_152:                             # %cond.false378
                                        #   in Loop: Header=BB71_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB71_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB71_155
.LBB71_154:                             # %cond.false383
                                        #   in Loop: Header=BB71_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB71_155:                             # %cond.end385
                                        #   in Loop: Header=BB71_146 Depth=2
.LBB71_156:                             # %cond.end387
                                        #   in Loop: Header=BB71_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB71_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_146
.LBB71_158:                             # %for.end401
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_135
.LBB71_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB71_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB71_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB71_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB71_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_161
.LBB71_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_167
.LBB71_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB71_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB71_173
.LBB71_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_172
.LBB71_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB71_172:                             # %cond.end449
.LBB71_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB71_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB71_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_177
.LBB71_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB71_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB71_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB71_183
.LBB71_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB71_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_182
.LBB71_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB71_182:                             # %cond.end486
.LBB71_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB71_196
.LBB71_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB71_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB71_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_188
.LBB71_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB71_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB71_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB71_194
.LBB71_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB71_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_193
.LBB71_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB71_193:                             # %cond.end526
.LBB71_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB71_195:                             # %if.end532
	jmp	.LBB71_196
.LBB71_196:                             # %if.end533
	jmp	.LBB71_329
.LBB71_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB71_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB71_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB71_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB71_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB71_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB71_203
.LBB71_202:                             # %cond.false546
                                        #   in Loop: Header=BB71_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB71_203:                             # %cond.end548
                                        #   in Loop: Header=BB71_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB71_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_209
.LBB71_205:                             # %cond.false553
                                        #   in Loop: Header=BB71_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB71_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB71_208
.LBB71_207:                             # %cond.false558
                                        #   in Loop: Header=BB71_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB71_208:                             # %cond.end560
                                        #   in Loop: Header=BB71_199 Depth=1
.LBB71_209:                             # %cond.end562
                                        #   in Loop: Header=BB71_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB71_210:                             # %for.cond564
                                        #   Parent Loop BB71_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB71_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB71_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB71_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB71_214
.LBB71_213:                             # %cond.false572
                                        #   in Loop: Header=BB71_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB71_214:                             # %cond.end574
                                        #   in Loop: Header=BB71_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB71_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB71_220
.LBB71_216:                             # %cond.false579
                                        #   in Loop: Header=BB71_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB71_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB71_219
.LBB71_218:                             # %cond.false584
                                        #   in Loop: Header=BB71_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB71_219:                             # %cond.end586
                                        #   in Loop: Header=BB71_210 Depth=2
.LBB71_220:                             # %cond.end588
                                        #   in Loop: Header=BB71_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB71_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_210
.LBB71_222:                             # %for.end602
                                        #   in Loop: Header=BB71_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB71_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_199
.LBB71_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB71_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB71_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB71_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB71_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_225
.LBB71_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_231
.LBB71_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB71_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB71_237
.LBB71_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_236
.LBB71_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB71_236:                             # %cond.end650
.LBB71_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB71_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB71_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_241
.LBB71_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB71_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB71_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB71_247
.LBB71_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB71_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_246
.LBB71_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB71_246:                             # %cond.end687
.LBB71_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB71_258
.LBB71_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB71_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_251
.LBB71_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB71_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB71_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB71_257
.LBB71_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB71_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_256
.LBB71_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB71_256:                             # %cond.end724
.LBB71_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB71_258:                             # %if.end730
	jmp	.LBB71_328
.LBB71_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB71_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB71_262
.LBB71_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB71_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB71_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB71_265
.LBB71_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB71_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB71_271
.LBB71_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB71_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB71_270
.LBB71_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB71_270:                             # %cond.end753
.LBB71_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB71_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB71_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB71_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB71_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB71_276
.LBB71_275:                             # %cond.false765
                                        #   in Loop: Header=BB71_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB71_276:                             # %cond.end767
                                        #   in Loop: Header=BB71_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB71_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_282
.LBB71_278:                             # %cond.false772
                                        #   in Loop: Header=BB71_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB71_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB71_281
.LBB71_280:                             # %cond.false777
                                        #   in Loop: Header=BB71_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB71_281:                             # %cond.end779
                                        #   in Loop: Header=BB71_272 Depth=1
.LBB71_282:                             # %cond.end781
                                        #   in Loop: Header=BB71_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB71_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_272
.LBB71_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_287
.LBB71_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB71_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB71_293
.LBB71_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_292
.LBB71_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB71_292:                             # %cond.end822
.LBB71_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB71_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB71_296
.LBB71_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB71_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB71_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB71_299
.LBB71_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB71_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB71_305
.LBB71_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB71_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB71_304
.LBB71_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB71_304:                             # %cond.end847
.LBB71_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB71_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB71_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB71_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB71_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB71_310
.LBB71_309:                             # %cond.false859
                                        #   in Loop: Header=BB71_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB71_310:                             # %cond.end861
                                        #   in Loop: Header=BB71_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB71_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_316
.LBB71_312:                             # %cond.false866
                                        #   in Loop: Header=BB71_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB71_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB71_315
.LBB71_314:                             # %cond.false871
                                        #   in Loop: Header=BB71_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB71_315:                             # %cond.end873
                                        #   in Loop: Header=BB71_306 Depth=1
.LBB71_316:                             # %cond.end875
                                        #   in Loop: Header=BB71_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB71_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_306
.LBB71_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_321
.LBB71_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB71_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB71_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB71_327
.LBB71_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB71_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB71_326
.LBB71_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB71_326:                             # %cond.end916
.LBB71_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB71_328:                             # %if.end922
	jmp	.LBB71_329
.LBB71_329:                             # %if.end923
	jmp	.LBB71_330
.LBB71_330:                             # %if.end924
	jmp	.LBB71_331
.LBB71_331:                             # %if.end925
	jmp	.LBB71_332
.LBB71_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1083617461, -108(%rbp) # imm = 0x4096B0B5
	jne	.LBB71_334
.LBB71_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_333
.Lfunc_end71:
	.size	Get_Reference_Pixel.61, .Lfunc_end71-Get_Reference_Pixel.61
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.62    # -- Begin function Error_Concealment.62
	.p2align	4, 0x90
	.type	Error_Concealment.62,@function
Error_Concealment.62:                   # @Error_Concealment.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$191635832, -20(%rbp)   # imm = 0xB6C2178
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB72_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_3:                               # %for.cond2
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB72_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB72_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB72_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB72_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB72_6:                               # %if.end
                                        #   in Loop: Header=BB72_3 Depth=2
	jmp	.LBB72_7
.LBB72_7:                               # %for.inc
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_3
.LBB72_8:                               # %for.end
                                        #   in Loop: Header=BB72_1 Depth=1
	jmp	.LBB72_9
.LBB72_9:                               # %for.inc7
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_1
.LBB72_10:                              # %for.end9
	cmpl	$191635832, -20(%rbp)   # imm = 0xB6C2178
	jne	.LBB72_12
.LBB72_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_11
.Lfunc_end72:
	.size	Error_Concealment.62, .Lfunc_end72-Error_Concealment.62
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.63    # -- Begin function Error_Concealment.63
	.p2align	4, 0x90
	.type	Error_Concealment.63,@function
Error_Concealment.63:                   # @Error_Concealment.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$905861114, -20(%rbp)   # imm = 0x35FE57FA
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB73_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_3:                               # %for.cond2
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB73_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB73_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB73_6:                               # %if.end
                                        #   in Loop: Header=BB73_3 Depth=2
	jmp	.LBB73_7
.LBB73_7:                               # %for.inc
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_3
.LBB73_8:                               # %for.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_9
.LBB73_9:                               # %for.inc7
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_1
.LBB73_10:                              # %for.end9
	cmpl	$905861114, -20(%rbp)   # imm = 0x35FE57FA
	jne	.LBB73_12
.LBB73_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_11
.Lfunc_end73:
	.size	Error_Concealment.63, .Lfunc_end73-Error_Concealment.63
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.64  # -- Begin function Get_Reference_Block.64
	.p2align	4, 0x90
	.type	Get_Reference_Block.64,@function
Get_Reference_Block.64:                 # @Get_Reference_Block.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$182595075, -32(%rbp)   # imm = 0xAE22E03
	movq	%rdi, -48(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB74_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_3:                               # %for.cond5
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_3
.LBB74_6:                               # %for.end
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_7
.LBB74_7:                               # %for.inc14
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_1
.LBB74_8:                               # %for.end16
	cmpl	$182595075, -32(%rbp)   # imm = 0xAE22E03
	jne	.LBB74_10
.LBB74_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_9
.Lfunc_end74:
	.size	Get_Reference_Block.64, .Lfunc_end74-Get_Reference_Block.64
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.65  # -- Begin function Get_Reference_Block.65
	.p2align	4, 0x90
	.type	Get_Reference_Block.65,@function
Get_Reference_Block.65:                 # @Get_Reference_Block.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2004425194, -20(%rbp)  # imm = 0x777919EA
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB75_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -4(%rbp)
.LBB75_3:                               # %for.cond5
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-32(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_3
.LBB75_6:                               # %for.end
                                        #   in Loop: Header=BB75_1 Depth=1
	jmp	.LBB75_7
.LBB75_7:                               # %for.inc14
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_1
.LBB75_8:                               # %for.end16
	cmpl	$2004425194, -20(%rbp)  # imm = 0x777919EA
	jne	.LBB75_10
.LBB75_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_9
.Lfunc_end75:
	.size	Get_Reference_Block.65, .Lfunc_end75-Get_Reference_Block.65
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.66  # -- Begin function Get_Reference_Block.66
	.p2align	4, 0x90
	.type	Get_Reference_Block.66,@function
Get_Reference_Block.66:                 # @Get_Reference_Block.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$752932159, -12(%rbp)   # imm = 0x2CE0D53F
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_3:                               # %for.cond5
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB76_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_3
.LBB76_6:                               # %for.end
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_7
.LBB76_7:                               # %for.inc14
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_1
.LBB76_8:                               # %for.end16
	cmpl	$752932159, -12(%rbp)   # imm = 0x2CE0D53F
	jne	.LBB76_10
.LBB76_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_9
.Lfunc_end76:
	.size	Get_Reference_Block.66, .Lfunc_end76-Get_Reference_Block.66
	.cfi_endproc
                                        # -- End function
	.type	Get_Reference_Pixel.COEF,@object # @Get_Reference_Pixel.COEF
	.section	.rodata,"a",@progbits
	.p2align	4
Get_Reference_Pixel.COEF:
	.long	1                       # 0x1
	.long	4294967291              # 0xfffffffb
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.size	Get_Reference_Pixel.COEF, 24

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
