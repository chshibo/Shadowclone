	.text
	.file	"loopFilter.c"
	.globl	DeblockFrame            # -- Begin function DeblockFrame
	.p2align	4, 0x90
	.type	DeblockFrame,@function
DeblockFrame:                           # @DeblockFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_DeblockFrame.3
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_DeblockFrame.7
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_DeblockFrame.13
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.13
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_DeblockFrame.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_DeblockFrame.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.17
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_DeblockFrame.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_DeblockFrame.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.26
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_DeblockFrame.32
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.32
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_DeblockFrame.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_DeblockFrame.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_DeblockFrame.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_DeblockFrame.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_DeblockFrame.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_DeblockFrame.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_DeblockFrame.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_DeblockFrame.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	DeblockFrame.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	DeblockFrame, .Lfunc_end0-DeblockFrame
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb               # -- Begin function DeblockMb
	.p2align	4, 0x90
	.type	DeblockMb,@function
DeblockMb:                              # @DeblockMb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_DeblockMb.2
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.2
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_DeblockMb.5
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.5
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_DeblockMb.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.15
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_DeblockMb.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.16
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_DeblockMb.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.18
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_DeblockMb.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.20
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_DeblockMb.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.23
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_DeblockMb.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.28
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_DeblockMb.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.29
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_DeblockMb.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.31
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_DeblockMb.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.34
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_DeblockMb.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.42
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_DeblockMb.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.43
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_DeblockMb.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.45
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_DeblockMb.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.48
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_DeblockMb.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	DeblockMb.52
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	DeblockMb, .Lfunc_end1-DeblockMb
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength             # -- Begin function GetStrength
	.p2align	4, 0x90
	.type	GetStrength,@function
GetStrength:                            # @GetStrength
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_17
# %bb.1:                                # %func_GetStrength.1
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	GetStrength.1
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_GetStrength.8
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	GetStrength.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_GetStrength.9
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_GetStrength.11
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.11
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_GetStrength.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_GetStrength.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.21
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_GetStrength.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_GetStrength.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %func_GetStrength.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_10:                               # %func_GetStrength.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_11:                               # %func_GetStrength.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_12:                               # %func_GetStrength.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.50
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_13:                               # %func_GetStrength.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_14:                               # %func_GetStrength.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	GetStrength.54
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_15:                               # %func_GetStrength.63
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	GetStrength.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_16:                               # %func_GetStrength.64
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	GetStrength.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movl	%r12d, %r11d
	movl	-44(%rbp), %r10d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %r9d
	movl	%r11d, %r8d
	movl	%r13d, %r15d
	movl	%edx, %r12d
	movq	%rsi, %r14
	movq	%rdi, %rbx
	je	.LBB2_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB2_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB2_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB2_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB2_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB2_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB2_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB2_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB2_15
	jmp	.LBB2_16
.Lfunc_end2:
	.size	GetStrength, .Lfunc_end2-GetStrength
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop                # -- Begin function EdgeLoop
	.p2align	4, 0x90
	.type	EdgeLoop,@function
EdgeLoop:                               # @EdgeLoop
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movl	%ecx, %r12d
	movq	%rdx, %r13
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_EdgeLoop.4
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.4
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_EdgeLoop.6
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %r8d
	movl	%ebx, %r9d
	movl	%r13d, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.6
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_EdgeLoop.10
	.cfi_def_cfa %rbp, 16
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	%r14d, 32(%rsp)
	callq	EdgeLoop.10
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_EdgeLoop.19
	.cfi_def_cfa %rbp, 16
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.19
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_EdgeLoop.22
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.22
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_EdgeLoop.24
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.24
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_EdgeLoop.33
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.33
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_EdgeLoop.35
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.35
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_EdgeLoop.38
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.38
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_EdgeLoop.39
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.39
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_EdgeLoop.40
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.40
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_EdgeLoop.47
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.47
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_EdgeLoop.49
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	%r12d, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.49
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_EdgeLoop.56
	.cfi_def_cfa %rbp, 16
	movq	%r9, %rsi
	movl	-48(%rbp), %r8d         # 4-byte Reload
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.56
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_EdgeLoop.57
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %r8d
	movl	%ebx, %r9d
	movl	%r13d, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.57
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_EdgeLoop.62
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %r8d
	movl	%ebx, %r9d
	movl	%r13d, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	callq	EdgeLoop.62
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	movl	%r12d, %ecx
	movl	-44(%rbp), %ebx         # 4-byte Reload
	movl	16(%rbp), %r13d
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movl	48(%rbp), %r14d
	movl	40(%rbp), %r12d
	movl	24(%rbp), %r10d
	movl	%r13d, %r11d
	movl	%ebx, %r9d
	movl	%r15d, %r8d
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	movl	%r8d, -48(%rbp)         # 4-byte Spill
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	movq	%rsi, %r9
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	EdgeLoop, .Lfunc_end3-EdgeLoop
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.1           # -- Begin function GetStrength.1
	.p2align	4, 0x90
	.type	GetStrength.1,@function
GetStrength.1:                          # @GetStrength.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$763394926, -132(%rbp)  # imm = 0x2D807B6E
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB4_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB4_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB4_5
.LBB4_4:                                # %cond.false
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB4_5:                                # %cond.end
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB4_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB4_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB4_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB4_9
.LBB4_8:                                # %cond.false15
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	$1, %eax
	jmp	.LBB4_9
.LBB4_9:                                # %cond.end16
                                        #   in Loop: Header=BB4_1 Depth=1
	jmp	.LBB4_11
.LBB4_10:                               # %cond.false18
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-28(%rbp), %eax
.LBB4_11:                               # %cond.end19
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB4_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB4_25
.LBB4_13:                               # %if.then
                                        #   in Loop: Header=BB4_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB4_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB4_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB4_23
.LBB4_16:                               # %lor.lhs.false45
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB4_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB4_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB4_23
.LBB4_19:                               # %lor.rhs
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB4_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB4_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB4_22
.LBB4_21:                               # %land.rhs60
                                        #   in Loop: Header=BB4_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB4_22:                               # %land.end
                                        #   in Loop: Header=BB4_1 Depth=1
.LBB4_23:                               # %lor.end
                                        #   in Loop: Header=BB4_1 Depth=1
.LBB4_24:                               # %land.end62
                                        #   in Loop: Header=BB4_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB4_79
.LBB4_25:                               # %if.else
                                        #   in Loop: Header=BB4_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB4_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB4_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB4_35
.LBB4_28:                               # %lor.lhs.false76
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB4_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB4_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB4_35
.LBB4_31:                               # %lor.rhs85
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB4_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB4_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB4_34
.LBB4_33:                               # %land.rhs92
                                        #   in Loop: Header=BB4_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB4_34:                               # %land.end95
                                        #   in Loop: Header=BB4_1 Depth=1
.LBB4_35:                               # %lor.end96
                                        #   in Loop: Header=BB4_1 Depth=1
.LBB4_36:                               # %land.end97
                                        #   in Loop: Header=BB4_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB4_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB4_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB4_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB4_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB4_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB4_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB4_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB4_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB4_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB4_47
.LBB4_46:                               # %if.then144
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB4_77
.LBB4_47:                               # %if.else147
                                        #   in Loop: Header=BB4_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB4_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB4_76
.LBB4_49:                               # %if.else152
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB4_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB4_52
.LBB4_51:                               # %cond.false169
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB4_52:                               # %cond.end174
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB4_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB4_55
.LBB4_54:                               # %cond.false184
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB4_55:                               # %cond.end189
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB4_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB4_58
.LBB4_57:                               # %cond.false199
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB4_58:                               # %cond.end204
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB4_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB4_61
.LBB4_60:                               # %cond.false214
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB4_61:                               # %cond.end219
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB4_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-192(%rbp), %rax
	je	.LBB4_65
.LBB4_63:                               # %lor.lhs.false226
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jne	.LBB4_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB4_74
.LBB4_65:                               # %if.then232
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB4_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB4_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB4_69
.LBB4_68:                               # %if.else309
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB4_69:                               # %if.end
                                        #   in Loop: Header=BB4_1 Depth=1
	jmp	.LBB4_73
.LBB4_70:                               # %if.else380
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB4_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB4_72:                               # %land.end518
                                        #   in Loop: Header=BB4_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB4_73:                               # %if.end522
                                        #   in Loop: Header=BB4_1 Depth=1
	jmp	.LBB4_75
.LBB4_74:                               # %if.else523
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB4_75:                               # %if.end526
                                        #   in Loop: Header=BB4_1 Depth=1
	jmp	.LBB4_76
.LBB4_76:                               # %if.end527
                                        #   in Loop: Header=BB4_1 Depth=1
	jmp	.LBB4_77
.LBB4_77:                               # %if.end528
                                        #   in Loop: Header=BB4_1 Depth=1
	jmp	.LBB4_78
.LBB4_78:                               # %if.end529
                                        #   in Loop: Header=BB4_1 Depth=1
	jmp	.LBB4_79
.LBB4_79:                               # %if.end530
                                        #   in Loop: Header=BB4_1 Depth=1
	jmp	.LBB4_80
.LBB4_80:                               # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB4_1
.LBB4_81:                               # %for.end
	cmpl	$763394926, -132(%rbp)  # imm = 0x2D807B6E
	jne	.LBB4_83
.LBB4_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_83:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB4_82
.Lfunc_end4:
	.size	GetStrength.1, .Lfunc_end4-GetStrength.1
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.2             # -- Begin function DeblockMb.2
	.p2align	4, 0x90
	.type	DeblockMb.2,@function
DeblockMb.2:                            # @DeblockMb.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$2082431120, -100(%rbp) # imm = 0x7C1F6090
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB5_2
# %bb.1:                                # %if.then
	jmp	.LBB5_2
.LBB5_2:                                # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB5_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB5_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB5_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB5_6:                                # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB5_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB5_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB5_9:                                # %land.end
.LBB5_10:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB5_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB5_12:                               # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB5_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB5_61
.LBB5_14:                               # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB5_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB5_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB5_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB5_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB5_20
.LBB5_19:                               # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB5_20:                               # %if.end40
	jmp	.LBB5_21
.LBB5_21:                               # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB5_22:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_29 Depth 2
                                        #       Child Loop BB5_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB5_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB5_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB5_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB5_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB5_28
.LBB5_25:                               # %lor.rhs47
                                        #   in Loop: Header=BB5_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB5_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB5_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB5_27:                               # %land.end51
                                        #   in Loop: Header=BB5_22 Depth=1
.LBB5_28:                               # %lor.end52
                                        #   in Loop: Header=BB5_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB5_29:                               # %for.cond54
                                        #   Parent Loop BB5_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB5_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB5_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB5_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB5_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB5_56
.LBB5_32:                               # %if.then60
                                        #   in Loop: Header=BB5_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -48(%rbp)
.LBB5_33:                               # %for.cond70
                                        #   Parent Loop BB5_22 Depth=1
                                        #     Parent Loop BB5_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB5_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB5_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB5_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB5_33
.LBB5_36:                               # %for.end
                                        #   in Loop: Header=BB5_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB5_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB5_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB5_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB5_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB5_39:                               # %if.end84
                                        #   in Loop: Header=BB5_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB5_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB5_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB5_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB5_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB5_42:                               # %if.end100
                                        #   in Loop: Header=BB5_29 Depth=2
	jmp	.LBB5_43
.LBB5_43:                               # %if.end101
                                        #   in Loop: Header=BB5_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB5_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB5_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB5_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB5_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB5_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB5_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB5_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB5_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB5_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB5_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB5_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB5_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB5_50:                               # %if.end125
                                        #   in Loop: Header=BB5_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB5_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB5_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB5_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB5_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB5_53:                               # %if.end142
                                        #   in Loop: Header=BB5_29 Depth=2
	jmp	.LBB5_54
.LBB5_54:                               # %if.end143
                                        #   in Loop: Header=BB5_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB5_55:                               # %if.end145
                                        #   in Loop: Header=BB5_29 Depth=2
	jmp	.LBB5_56
.LBB5_56:                               # %if.end146
                                        #   in Loop: Header=BB5_29 Depth=2
	jmp	.LBB5_57
.LBB5_57:                               # %for.inc147
                                        #   in Loop: Header=BB5_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB5_29
.LBB5_58:                               # %for.end149
                                        #   in Loop: Header=BB5_22 Depth=1
	jmp	.LBB5_59
.LBB5_59:                               # %for.inc150
                                        #   in Loop: Header=BB5_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_22
.LBB5_60:                               # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB5_61:                               # %return
	cmpl	$2082431120, -100(%rbp) # imm = 0x7C1F6090
	jne	.LBB5_63
.LBB5_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_63:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB5_62
.Lfunc_end5:
	.size	DeblockMb.2, .Lfunc_end5-DeblockMb.2
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.3          # -- Begin function DeblockFrame.3
	.p2align	4, 0x90
	.type	DeblockFrame.3,@function
DeblockFrame.3:                         # @DeblockFrame.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1385899775, -8(%rbp)   # imm = 0x529B26FF
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB6_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB6_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB6_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB6_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_1
.LBB6_4:                                # %for.end
	cmpl	$1385899775, -8(%rbp)   # imm = 0x529B26FF
	jne	.LBB6_6
.LBB6_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB6_5
.Lfunc_end6:
	.size	DeblockFrame.3, .Lfunc_end6-DeblockFrame.3
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.4              # -- Begin function EdgeLoop.4
	.p2align	4, 0x90
	.type	EdgeLoop.4,@function
EdgeLoop.4:                             # @EdgeLoop.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$364925854, -188(%rbp)  # imm = 0x15C0539E
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -144(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -132(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB7_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB7_3
.LBB7_2:                                # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB7_3:                                # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB7_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB7_6
.LBB7_5:                                # %cond.false
	movl	$16, %eax
	jmp	.LBB7_6
.LBB7_6:                                # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB7_7:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB7_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB7_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB7_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB7_11
.LBB7_10:                               # %cond.false8
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB7_11:                               # %cond.end10
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	%eax, -152(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB7_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB7_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB7_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB7_15
.LBB7_14:                               # %cond.false17
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	$1, %eax
	jmp	.LBB7_15
.LBB7_15:                               # %cond.end18
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_17
.LBB7_16:                               # %cond.false20
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-60(%rbp), %eax
.LBB7_17:                               # %cond.end21
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-144(%rbp), %edi
	movl	-152(%rbp), %esi
	movl	-164(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-144(%rbp), %edi
	movl	-152(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-164(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-144(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB7_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB7_19:                               # %lor.end
                                        #   in Loop: Header=BB7_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB7_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB7_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB7_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB7_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB7_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB7_25
.LBB7_24:                               # %cond.false47
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB7_25:                               # %cond.end49
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_27
.LBB7_26:                               # %cond.false51
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB7_27:                               # %cond.end52
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	%ecx, -180(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB7_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB7_157
.LBB7_29:                               # %if.then57
                                        #   in Loop: Header=BB7_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB7_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB7_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB7_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB7_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB7_34
.LBB7_33:                               # %cond.false66
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	32(%rbp), %eax
.LBB7_34:                               # %cond.end67
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_36
.LBB7_35:                               # %cond.false69
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	$1, %eax
	jmp	.LBB7_36
.LBB7_36:                               # %cond.end70
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB7_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB7_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB7_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB7_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB7_41
.LBB7_40:                               # %cond.false81
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	32(%rbp), %eax
.LBB7_41:                               # %cond.end82
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_43
.LBB7_42:                               # %cond.false84
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	$1, %eax
	jmp	.LBB7_43
.LBB7_43:                               # %cond.end85
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB7_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB7_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB7_50
.LBB7_46:                               # %cond.false105
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB7_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	$51, %eax
	jmp	.LBB7_49
.LBB7_48:                               # %cond.false114
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB7_49:                               # %cond.end120
                                        #   in Loop: Header=BB7_7 Depth=1
.LBB7_50:                               # %cond.end122
                                        #   in Loop: Header=BB7_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB7_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB7_56
.LBB7_52:                               # %cond.false135
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB7_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB7_55
.LBB7_54:                               # %cond.false144
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB7_55:                               # %cond.end150
                                        #   in Loop: Header=BB7_7 Depth=1
.LBB7_56:                               # %cond.end152
                                        #   in Loop: Header=BB7_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB7_58
.LBB7_57:                               # %cond.false160
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB7_58:                               # %cond.end166
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB7_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB7_64
.LBB7_60:                               # %cond.false172
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB7_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	$51, %eax
	jmp	.LBB7_63
.LBB7_62:                               # %cond.false177
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB7_63:                               # %cond.end179
                                        #   in Loop: Header=BB7_7 Depth=1
.LBB7_64:                               # %cond.end181
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	%eax, -160(%rbp)
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB7_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB7_70
.LBB7_66:                               # %cond.false187
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB7_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB7_69
.LBB7_68:                               # %cond.false192
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-132(%rbp), %ecx
.LBB7_69:                               # %cond.end194
                                        #   in Loop: Header=BB7_7 Depth=1
.LBB7_70:                               # %cond.end196
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -192(%rbp)
	movslq	-160(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -136(%rbp)
	movslq	-192(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-160(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -184(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -196(%rbp)
	movq	-248(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -176(%rbp)
	cmpl	$0, %eax
	je	.LBB7_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -148(%rbp)
	callq	abs
	movl	%eax, -156(%rbp)
	movl	-156(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB7_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-176(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB7_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB7_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB7_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB7_75:                               # %if.end271
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -176(%rbp)
	jne	.LBB7_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB7_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB7_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB7_97
.LBB7_78:                               # %if.else292
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-156(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB7_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB7_81
.LBB7_80:                               # %cond.false307
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB7_81:                               # %cond.end313
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB7_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB7_84
.LBB7_83:                               # %cond.false325
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB7_84:                               # %cond.end331
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB7_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB7_87
.LBB7_86:                               # %cond.false342
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-12(%rbp), %eax
.LBB7_87:                               # %cond.end343
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB7_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB7_90
.LBB7_89:                               # %cond.false355
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-16(%rbp), %eax
.LBB7_90:                               # %cond.end356
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB7_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB7_93
.LBB7_92:                               # %cond.false371
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-40(%rbp), %eax
.LBB7_93:                               # %cond.end372
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB7_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB7_96
.LBB7_95:                               # %cond.false387
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-44(%rbp), %eax
.LBB7_96:                               # %cond.end388
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB7_97:                               # %if.end395
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_153
.LBB7_98:                               # %if.else396
                                        #   in Loop: Header=BB7_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB7_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB7_101
.LBB7_100:                              # %cond.false400
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB7_101:                              # %cond.end403
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB7_107
.LBB7_103:                              # %cond.false415
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB7_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB7_106
.LBB7_105:                              # %cond.false424
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB7_106:                              # %cond.end430
                                        #   in Loop: Header=BB7_7 Depth=1
.LBB7_107:                              # %cond.end432
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB7_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB7_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB7_114
.LBB7_110:                              # %cond.false440
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB7_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB7_113
.LBB7_112:                              # %cond.false446
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB7_113:                              # %cond.end448
                                        #   in Loop: Header=BB7_7 Depth=1
.LBB7_114:                              # %cond.end450
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB7_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB7_120
.LBB7_116:                              # %cond.false458
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB7_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB7_119
.LBB7_118:                              # %cond.false465
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB7_119:                              # %cond.end467
                                        #   in Loop: Header=BB7_7 Depth=1
.LBB7_120:                              # %cond.end469
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB7_134
.LBB7_121:                              # %if.else473
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB7_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB7_127
.LBB7_123:                              # %cond.false478
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB7_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB7_126
.LBB7_125:                              # %cond.false484
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB7_126:                              # %cond.end486
                                        #   in Loop: Header=BB7_7 Depth=1
.LBB7_127:                              # %cond.end488
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB7_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB7_133
.LBB7_129:                              # %cond.false496
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB7_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB7_132
.LBB7_131:                              # %cond.false503
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB7_132:                              # %cond.end505
                                        #   in Loop: Header=BB7_7 Depth=1
.LBB7_133:                              # %cond.end507
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB7_134:                              # %if.end511
                                        #   in Loop: Header=BB7_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB7_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB7_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB7_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB7_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB7_142
.LBB7_138:                              # %cond.false527
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB7_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB7_141
.LBB7_140:                              # %cond.false537
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB7_141:                              # %cond.end544
                                        #   in Loop: Header=BB7_7 Depth=1
.LBB7_142:                              # %cond.end546
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB7_143:                              # %if.end554
                                        #   in Loop: Header=BB7_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB7_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB7_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB7_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB7_150
.LBB7_146:                              # %cond.false568
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB7_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB7_149
.LBB7_148:                              # %cond.false578
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB7_149:                              # %cond.end585
                                        #   in Loop: Header=BB7_7 Depth=1
.LBB7_150:                              # %cond.end587
                                        #   in Loop: Header=BB7_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB7_151:                              # %if.end594
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_152
.LBB7_152:                              # %if.end595
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_153
.LBB7_153:                              # %if.end596
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_154
.LBB7_154:                              # %if.end597
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_155
.LBB7_155:                              # %if.end598
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_156
.LBB7_156:                              # %if.end599
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_157
.LBB7_157:                              # %if.end600
                                        #   in Loop: Header=BB7_7 Depth=1
	jmp	.LBB7_158
.LBB7_158:                              # %for.inc
                                        #   in Loop: Header=BB7_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB7_7
.LBB7_159:                              # %for.end
	cmpl	$364925854, -188(%rbp)  # imm = 0x15C0539E
	jne	.LBB7_161
.LBB7_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_161:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB7_160
.Lfunc_end7:
	.size	EdgeLoop.4, .Lfunc_end7-EdgeLoop.4
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.5             # -- Begin function DeblockMb.5
	.p2align	4, 0x90
	.type	DeblockMb.5,@function
DeblockMb.5:                            # @DeblockMb.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$61170943, -108(%rbp)   # imm = 0x3A564FF
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-112(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -112(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB8_2
# %bb.1:                                # %if.then
	jmp	.LBB8_2
.LBB8_2:                                # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB8_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB8_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB8_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB8_6:                                # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB8_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB8_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB8_9:                                # %land.end
.LBB8_10:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB8_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB8_12:                               # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB8_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB8_61
.LBB8_14:                               # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB8_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB8_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB8_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB8_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB8_20
.LBB8_19:                               # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB8_20:                               # %if.end40
	jmp	.LBB8_21
.LBB8_21:                               # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB8_22:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_29 Depth 2
                                        #       Child Loop BB8_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB8_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB8_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB8_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB8_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB8_28
.LBB8_25:                               # %lor.rhs47
                                        #   in Loop: Header=BB8_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB8_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB8_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB8_27:                               # %land.end51
                                        #   in Loop: Header=BB8_22 Depth=1
.LBB8_28:                               # %lor.end52
                                        #   in Loop: Header=BB8_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -36(%rbp)
.LBB8_29:                               # %for.cond54
                                        #   Parent Loop BB8_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB8_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB8_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB8_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB8_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB8_29 Depth=2
	cmpl	$0, -100(%rbp)
	je	.LBB8_56
.LBB8_32:                               # %if.then60
                                        #   in Loop: Header=BB8_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -48(%rbp)
.LBB8_33:                               # %for.cond70
                                        #   Parent Loop BB8_22 Depth=1
                                        #     Parent Loop BB8_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB8_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB8_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB8_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB8_33
.LBB8_36:                               # %for.end
                                        #   in Loop: Header=BB8_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB8_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB8_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB8_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB8_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB8_39:                               # %if.end84
                                        #   in Loop: Header=BB8_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB8_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB8_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB8_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB8_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB8_42:                               # %if.end100
                                        #   in Loop: Header=BB8_29 Depth=2
	jmp	.LBB8_43
.LBB8_43:                               # %if.end101
                                        #   in Loop: Header=BB8_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB8_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB8_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB8_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB8_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB8_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB8_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB8_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB8_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB8_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB8_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB8_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB8_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB8_50:                               # %if.end125
                                        #   in Loop: Header=BB8_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB8_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB8_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB8_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB8_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB8_53:                               # %if.end142
                                        #   in Loop: Header=BB8_29 Depth=2
	jmp	.LBB8_54
.LBB8_54:                               # %if.end143
                                        #   in Loop: Header=BB8_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB8_55:                               # %if.end145
                                        #   in Loop: Header=BB8_29 Depth=2
	jmp	.LBB8_56
.LBB8_56:                               # %if.end146
                                        #   in Loop: Header=BB8_29 Depth=2
	jmp	.LBB8_57
.LBB8_57:                               # %for.inc147
                                        #   in Loop: Header=BB8_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB8_29
.LBB8_58:                               # %for.end149
                                        #   in Loop: Header=BB8_22 Depth=1
	jmp	.LBB8_59
.LBB8_59:                               # %for.inc150
                                        #   in Loop: Header=BB8_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_22
.LBB8_60:                               # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB8_61:                               # %return
	cmpl	$61170943, -108(%rbp)   # imm = 0x3A564FF
	jne	.LBB8_63
.LBB8_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_63:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_62
.Lfunc_end8:
	.size	DeblockMb.5, .Lfunc_end8-DeblockMb.5
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.6              # -- Begin function EdgeLoop.6
	.p2align	4, 0x90
	.type	EdgeLoop.6,@function
EdgeLoop.6:                             # @EdgeLoop.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$38490895, -192(%rbp)   # imm = 0x24B530F
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -144(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB9_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB9_3
.LBB9_2:                                # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB9_3:                                # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB9_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB9_6
.LBB9_5:                                # %cond.false
	movl	$16, %eax
	jmp	.LBB9_6
.LBB9_6:                                # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB9_7:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB9_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB9_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB9_11
.LBB9_10:                               # %cond.false8
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB9_11:                               # %cond.end10
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB9_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB9_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB9_15
.LBB9_14:                               # %cond.false17
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	$1, %eax
	jmp	.LBB9_15
.LBB9_15:                               # %cond.end18
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_17
.LBB9_16:                               # %cond.false20
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-60(%rbp), %eax
.LBB9_17:                               # %cond.end21
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-144(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	-164(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-144(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-164(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-144(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB9_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB9_19:                               # %lor.end
                                        #   in Loop: Header=BB9_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB9_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB9_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB9_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB9_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB9_25
.LBB9_24:                               # %cond.false47
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB9_25:                               # %cond.end49
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_27
.LBB9_26:                               # %cond.false51
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB9_27:                               # %cond.end52
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	%ecx, -184(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB9_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB9_157
.LBB9_29:                               # %if.then57
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB9_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB9_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB9_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB9_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB9_34
.LBB9_33:                               # %cond.false66
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	32(%rbp), %eax
.LBB9_34:                               # %cond.end67
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_36
.LBB9_35:                               # %cond.false69
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	$1, %eax
	jmp	.LBB9_36
.LBB9_36:                               # %cond.end70
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB9_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB9_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB9_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB9_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB9_41
.LBB9_40:                               # %cond.false81
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	32(%rbp), %eax
.LBB9_41:                               # %cond.end82
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_43
.LBB9_42:                               # %cond.false84
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	$1, %eax
	jmp	.LBB9_43
.LBB9_43:                               # %cond.end85
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB9_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB9_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB9_50
.LBB9_46:                               # %cond.false105
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB9_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	$51, %eax
	jmp	.LBB9_49
.LBB9_48:                               # %cond.false114
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB9_49:                               # %cond.end120
                                        #   in Loop: Header=BB9_7 Depth=1
.LBB9_50:                               # %cond.end122
                                        #   in Loop: Header=BB9_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB9_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB9_56
.LBB9_52:                               # %cond.false135
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB9_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB9_55
.LBB9_54:                               # %cond.false144
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB9_55:                               # %cond.end150
                                        #   in Loop: Header=BB9_7 Depth=1
.LBB9_56:                               # %cond.end152
                                        #   in Loop: Header=BB9_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB9_58
.LBB9_57:                               # %cond.false160
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB9_58:                               # %cond.end166
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB9_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB9_64
.LBB9_60:                               # %cond.false172
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB9_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	$51, %eax
	jmp	.LBB9_63
.LBB9_62:                               # %cond.false177
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
.LBB9_63:                               # %cond.end179
                                        #   in Loop: Header=BB9_7 Depth=1
.LBB9_64:                               # %cond.end181
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	%eax, -152(%rbp)
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB9_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB9_70
.LBB9_66:                               # %cond.false187
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB9_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB9_69
.LBB9_68:                               # %cond.false192
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB9_69:                               # %cond.end194
                                        #   in Loop: Header=BB9_7 Depth=1
.LBB9_70:                               # %cond.end196
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -196(%rbp)
	movslq	-152(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -140(%rbp)
	movslq	-196(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-152(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -180(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -188(%rbp)
	movq	-248(%rbp), %rax
	movslq	-184(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -168(%rbp)
	cmpl	$0, %eax
	je	.LBB9_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -136(%rbp)
	callq	abs
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB9_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-168(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB9_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB9_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB9_75:                               # %if.end271
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -40(%rbp)
	cmpl	$4, -168(%rbp)
	jne	.LBB9_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB9_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB9_97
.LBB9_78:                               # %if.else292
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-160(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	movl	-156(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-156(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB9_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB9_81
.LBB9_80:                               # %cond.false307
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB9_81:                               # %cond.end313
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB9_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB9_84
.LBB9_83:                               # %cond.false325
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB9_84:                               # %cond.end331
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB9_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB9_87
.LBB9_86:                               # %cond.false342
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-16(%rbp), %eax
.LBB9_87:                               # %cond.end343
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB9_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB9_90
.LBB9_89:                               # %cond.false355
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-12(%rbp), %eax
.LBB9_90:                               # %cond.end356
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB9_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB9_93
.LBB9_92:                               # %cond.false371
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-44(%rbp), %eax
.LBB9_93:                               # %cond.end372
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB9_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB9_96
.LBB9_95:                               # %cond.false387
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-32(%rbp), %eax
.LBB9_96:                               # %cond.end388
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB9_97:                               # %if.end395
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_153
.LBB9_98:                               # %if.else396
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB9_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB9_101
.LBB9_100:                              # %cond.false400
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB9_101:                              # %cond.end403
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB9_107
.LBB9_103:                              # %cond.false415
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB9_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB9_106
.LBB9_105:                              # %cond.false424
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB9_106:                              # %cond.end430
                                        #   in Loop: Header=BB9_7 Depth=1
.LBB9_107:                              # %cond.end432
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB9_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB9_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB9_114
.LBB9_110:                              # %cond.false440
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB9_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB9_113
.LBB9_112:                              # %cond.false446
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB9_113:                              # %cond.end448
                                        #   in Loop: Header=BB9_7 Depth=1
.LBB9_114:                              # %cond.end450
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB9_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB9_120
.LBB9_116:                              # %cond.false458
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB9_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB9_119
.LBB9_118:                              # %cond.false465
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB9_119:                              # %cond.end467
                                        #   in Loop: Header=BB9_7 Depth=1
.LBB9_120:                              # %cond.end469
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB9_134
.LBB9_121:                              # %if.else473
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB9_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB9_127
.LBB9_123:                              # %cond.false478
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB9_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB9_126
.LBB9_125:                              # %cond.false484
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB9_126:                              # %cond.end486
                                        #   in Loop: Header=BB9_7 Depth=1
.LBB9_127:                              # %cond.end488
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB9_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB9_133
.LBB9_129:                              # %cond.false496
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB9_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB9_132
.LBB9_131:                              # %cond.false503
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB9_132:                              # %cond.end505
                                        #   in Loop: Header=BB9_7 Depth=1
.LBB9_133:                              # %cond.end507
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB9_134:                              # %if.end511
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB9_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB9_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB9_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB9_142
.LBB9_138:                              # %cond.false527
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB9_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB9_141
.LBB9_140:                              # %cond.false537
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB9_141:                              # %cond.end544
                                        #   in Loop: Header=BB9_7 Depth=1
.LBB9_142:                              # %cond.end546
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB9_143:                              # %if.end554
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB9_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB9_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB9_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB9_150
.LBB9_146:                              # %cond.false568
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB9_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB9_149
.LBB9_148:                              # %cond.false578
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB9_149:                              # %cond.end585
                                        #   in Loop: Header=BB9_7 Depth=1
.LBB9_150:                              # %cond.end587
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB9_151:                              # %if.end594
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_152
.LBB9_152:                              # %if.end595
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_153
.LBB9_153:                              # %if.end596
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_154
.LBB9_154:                              # %if.end597
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_155
.LBB9_155:                              # %if.end598
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_156
.LBB9_156:                              # %if.end599
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_157
.LBB9_157:                              # %if.end600
                                        #   in Loop: Header=BB9_7 Depth=1
	jmp	.LBB9_158
.LBB9_158:                              # %for.inc
                                        #   in Loop: Header=BB9_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB9_7
.LBB9_159:                              # %for.end
	cmpl	$38490895, -192(%rbp)   # imm = 0x24B530F
	jne	.LBB9_161
.LBB9_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_161:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_160
.Lfunc_end9:
	.size	EdgeLoop.6, .Lfunc_end9-EdgeLoop.6
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.7          # -- Begin function DeblockFrame.7
	.p2align	4, 0x90
	.type	DeblockFrame.7,@function
DeblockFrame.7:                         # @DeblockFrame.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1577935803, -8(%rbp)   # imm = 0x5E0D63BB
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB10_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB10_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB10_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_1
.LBB10_4:                               # %for.end
	cmpl	$1577935803, -8(%rbp)   # imm = 0x5E0D63BB
	jne	.LBB10_6
.LBB10_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_5
.Lfunc_end10:
	.size	DeblockFrame.7, .Lfunc_end10-DeblockFrame.7
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.8           # -- Begin function GetStrength.8
	.p2align	4, 0x90
	.type	GetStrength.8,@function
GetStrength.8:                          # @GetStrength.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$858625531, -152(%rbp)  # imm = 0x332D95FB
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB11_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB11_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB11_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB11_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB11_5
.LBB11_4:                               # %cond.false
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB11_5:                               # %cond.end
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB11_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB11_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB11_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB11_9
.LBB11_8:                               # %cond.false15
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	$1, %eax
	jmp	.LBB11_9
.LBB11_9:                               # %cond.end16
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_11
.LBB11_10:                              # %cond.false18
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-28(%rbp), %eax
.LBB11_11:                              # %cond.end19
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-140(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB11_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB11_25
.LBB11_13:                              # %if.then
                                        #   in Loop: Header=BB11_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB11_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB11_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB11_23
.LBB11_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB11_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB11_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB11_23
.LBB11_19:                              # %lor.rhs
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB11_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB11_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB11_22
.LBB11_21:                              # %land.rhs60
                                        #   in Loop: Header=BB11_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_22:                              # %land.end
                                        #   in Loop: Header=BB11_1 Depth=1
.LBB11_23:                              # %lor.end
                                        #   in Loop: Header=BB11_1 Depth=1
.LBB11_24:                              # %land.end62
                                        #   in Loop: Header=BB11_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB11_79
.LBB11_25:                              # %if.else
                                        #   in Loop: Header=BB11_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB11_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB11_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB11_35
.LBB11_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB11_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB11_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB11_35
.LBB11_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB11_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB11_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB11_34
.LBB11_33:                              # %land.rhs92
                                        #   in Loop: Header=BB11_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB11_34:                              # %land.end95
                                        #   in Loop: Header=BB11_1 Depth=1
.LBB11_35:                              # %lor.end96
                                        #   in Loop: Header=BB11_1 Depth=1
.LBB11_36:                              # %land.end97
                                        #   in Loop: Header=BB11_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB11_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB11_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB11_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB11_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB11_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB11_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB11_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB11_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB11_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB11_47
.LBB11_46:                              # %if.then144
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB11_77
.LBB11_47:                              # %if.else147
                                        #   in Loop: Header=BB11_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB11_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB11_76
.LBB11_49:                              # %if.else152
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-148(%rbp), %rsi
	leaq	-132(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB11_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB11_52
.LBB11_51:                              # %cond.false169
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB11_52:                              # %cond.end174
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB11_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB11_55
.LBB11_54:                              # %cond.false184
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB11_55:                              # %cond.end189
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB11_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB11_58
.LBB11_57:                              # %cond.false199
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB11_58:                              # %cond.end204
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB11_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB11_61
.LBB11_60:                              # %cond.false214
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB11_61:                              # %cond.end219
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB11_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB11_65
.LBB11_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB11_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB11_74
.LBB11_65:                              # %if.then232
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB11_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB11_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB11_69
.LBB11_68:                              # %if.else309
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB11_69:                              # %if.end
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_73
.LBB11_70:                              # %if.else380
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB11_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB11_72:                              # %land.end518
                                        #   in Loop: Header=BB11_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB11_73:                              # %if.end522
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_75
.LBB11_74:                              # %if.else523
                                        #   in Loop: Header=BB11_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB11_75:                              # %if.end526
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_76
.LBB11_76:                              # %if.end527
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_77
.LBB11_77:                              # %if.end528
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_78
.LBB11_78:                              # %if.end529
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_79
.LBB11_79:                              # %if.end530
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_80
.LBB11_80:                              # %for.inc
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB11_1
.LBB11_81:                              # %for.end
	cmpl	$858625531, -152(%rbp)  # imm = 0x332D95FB
	jne	.LBB11_83
.LBB11_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_82
.Lfunc_end11:
	.size	GetStrength.8, .Lfunc_end11-GetStrength.8
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.9           # -- Begin function GetStrength.9
	.p2align	4, 0x90
	.type	GetStrength.9,@function
GetStrength.9:                          # @GetStrength.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$526620250, -132(%rbp)  # imm = 0x1F63965A
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB12_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB12_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB12_5
.LBB12_4:                               # %cond.false
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB12_5:                               # %cond.end
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB12_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB12_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB12_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB12_9
.LBB12_8:                               # %cond.false15
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$1, %eax
	jmp	.LBB12_9
.LBB12_9:                               # %cond.end16
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_11
.LBB12_10:                              # %cond.false18
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-28(%rbp), %eax
.LBB12_11:                              # %cond.end19
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-136(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB12_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB12_25
.LBB12_13:                              # %if.then
                                        #   in Loop: Header=BB12_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB12_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB12_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB12_23
.LBB12_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB12_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB12_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB12_23
.LBB12_19:                              # %lor.rhs
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB12_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB12_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB12_22
.LBB12_21:                              # %land.rhs60
                                        #   in Loop: Header=BB12_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_22:                              # %land.end
                                        #   in Loop: Header=BB12_1 Depth=1
.LBB12_23:                              # %lor.end
                                        #   in Loop: Header=BB12_1 Depth=1
.LBB12_24:                              # %land.end62
                                        #   in Loop: Header=BB12_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB12_79
.LBB12_25:                              # %if.else
                                        #   in Loop: Header=BB12_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB12_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB12_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB12_35
.LBB12_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB12_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB12_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB12_35
.LBB12_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB12_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB12_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB12_34
.LBB12_33:                              # %land.rhs92
                                        #   in Loop: Header=BB12_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_34:                              # %land.end95
                                        #   in Loop: Header=BB12_1 Depth=1
.LBB12_35:                              # %lor.end96
                                        #   in Loop: Header=BB12_1 Depth=1
.LBB12_36:                              # %land.end97
                                        #   in Loop: Header=BB12_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB12_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB12_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB12_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB12_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB12_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB12_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB12_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB12_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB12_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-152(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB12_47
.LBB12_46:                              # %if.then144
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB12_77
.LBB12_47:                              # %if.else147
                                        #   in Loop: Header=BB12_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB12_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB12_76
.LBB12_49:                              # %if.else152
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-144(%rbp), %rsi
	leaq	-140(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB12_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB12_52
.LBB12_51:                              # %cond.false169
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB12_52:                              # %cond.end174
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB12_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB12_55
.LBB12_54:                              # %cond.false184
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB12_55:                              # %cond.end189
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB12_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB12_58
.LBB12_57:                              # %cond.false199
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB12_58:                              # %cond.end204
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB12_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB12_61
.LBB12_60:                              # %cond.false214
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB12_61:                              # %cond.end219
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	%rax, -168(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB12_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-168(%rbp), %rax
	je	.LBB12_65
.LBB12_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jne	.LBB12_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB12_74
.LBB12_65:                              # %if.then232
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB12_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB12_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB12_69
.LBB12_68:                              # %if.else309
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB12_69:                              # %if.end
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_73
.LBB12_70:                              # %if.else380
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB12_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB12_72:                              # %land.end518
                                        #   in Loop: Header=BB12_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB12_73:                              # %if.end522
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_75
.LBB12_74:                              # %if.else523
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB12_75:                              # %if.end526
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_76
.LBB12_76:                              # %if.end527
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_77
.LBB12_77:                              # %if.end528
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_78
.LBB12_78:                              # %if.end529
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_79
.LBB12_79:                              # %if.end530
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_80
.LBB12_80:                              # %for.inc
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB12_1
.LBB12_81:                              # %for.end
	cmpl	$526620250, -132(%rbp)  # imm = 0x1F63965A
	jne	.LBB12_83
.LBB12_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_82
.Lfunc_end12:
	.size	GetStrength.9, .Lfunc_end12-GetStrength.9
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.10             # -- Begin function EdgeLoop.10
	.p2align	4, 0x90
	.type	EdgeLoop.10,@function
EdgeLoop.10:                            # @EdgeLoop.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$999602803, -196(%rbp)  # imm = 0x3B94BA73
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -148(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -140(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB13_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB13_3
.LBB13_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB13_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB13_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB13_6
.LBB13_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB13_6
.LBB13_6:                               # %cond.end
	movl	%eax, -152(%rbp)
	movl	$0, -60(%rbp)
.LBB13_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-152(%rbp), %eax
	jge	.LBB13_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB13_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB13_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB13_11
.LBB13_10:                              # %cond.false8
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB13_11:                              # %cond.end10
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB13_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB13_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB13_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB13_15
.LBB13_14:                              # %cond.false17
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	$1, %eax
	jmp	.LBB13_15
.LBB13_15:                              # %cond.end18
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_17
.LBB13_16:                              # %cond.false20
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-60(%rbp), %eax
.LBB13_17:                              # %cond.end21
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-148(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	-156(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-148(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-156(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-148(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB13_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB13_19:                              # %lor.end
                                        #   in Loop: Header=BB13_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB13_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB13_7 Depth=1
	cmpl	$8, -152(%rbp)
	jne	.LBB13_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB13_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB13_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB13_25
.LBB13_24:                              # %cond.false47
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB13_25:                              # %cond.end49
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_27
.LBB13_26:                              # %cond.false51
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB13_27:                              # %cond.end52
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	%ecx, -180(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB13_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB13_157
.LBB13_29:                              # %if.then57
                                        #   in Loop: Header=BB13_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB13_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB13_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB13_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB13_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB13_34
.LBB13_33:                              # %cond.false66
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	32(%rbp), %eax
.LBB13_34:                              # %cond.end67
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_36
.LBB13_35:                              # %cond.false69
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	$1, %eax
	jmp	.LBB13_36
.LBB13_36:                              # %cond.end70
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB13_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB13_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB13_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB13_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB13_41
.LBB13_40:                              # %cond.false81
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	32(%rbp), %eax
.LBB13_41:                              # %cond.end82
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_43
.LBB13_42:                              # %cond.false84
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	$1, %eax
	jmp	.LBB13_43
.LBB13_43:                              # %cond.end85
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	%eax, -72(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB13_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB13_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_50
.LBB13_46:                              # %cond.false105
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB13_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	$51, %eax
	jmp	.LBB13_49
.LBB13_48:                              # %cond.false114
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB13_49:                              # %cond.end120
                                        #   in Loop: Header=BB13_7 Depth=1
.LBB13_50:                              # %cond.end122
                                        #   in Loop: Header=BB13_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB13_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB13_56
.LBB13_52:                              # %cond.false135
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB13_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB13_55
.LBB13_54:                              # %cond.false144
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB13_55:                              # %cond.end150
                                        #   in Loop: Header=BB13_7 Depth=1
.LBB13_56:                              # %cond.end152
                                        #   in Loop: Header=BB13_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB13_58
.LBB13_57:                              # %cond.false160
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB13_58:                              # %cond.end166
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB13_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_64
.LBB13_60:                              # %cond.false172
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB13_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	$51, %eax
	jmp	.LBB13_63
.LBB13_62:                              # %cond.false177
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
.LBB13_63:                              # %cond.end179
                                        #   in Loop: Header=BB13_7 Depth=1
.LBB13_64:                              # %cond.end181
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB13_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB13_70
.LBB13_66:                              # %cond.false187
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB13_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB13_69
.LBB13_68:                              # %cond.false192
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-140(%rbp), %ecx
.LBB13_69:                              # %cond.end194
                                        #   in Loop: Header=BB13_7 Depth=1
.LBB13_70:                              # %cond.end196
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-164(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-164(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	subl	-72(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -184(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -168(%rbp)
	cmpl	$0, %eax
	je	.LBB13_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB13_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-168(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB13_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB13_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB13_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB13_75:                              # %if.end271
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -168(%rbp)
	jne	.LBB13_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB13_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB13_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB13_97
.LBB13_78:                              # %if.else292
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-172(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-176(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB13_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB13_81
.LBB13_80:                              # %cond.false307
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB13_81:                              # %cond.end313
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB13_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB13_84
.LBB13_83:                              # %cond.false325
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB13_84:                              # %cond.end331
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB13_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB13_87
.LBB13_86:                              # %cond.false342
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-12(%rbp), %eax
.LBB13_87:                              # %cond.end343
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB13_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB13_90
.LBB13_89:                              # %cond.false355
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-16(%rbp), %eax
.LBB13_90:                              # %cond.end356
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB13_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB13_93
.LBB13_92:                              # %cond.false371
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-44(%rbp), %eax
.LBB13_93:                              # %cond.end372
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB13_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB13_96
.LBB13_95:                              # %cond.false387
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-32(%rbp), %eax
.LBB13_96:                              # %cond.end388
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-72(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB13_97:                              # %if.end395
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_153
.LBB13_98:                              # %if.else396
                                        #   in Loop: Header=BB13_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB13_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB13_101
.LBB13_100:                             # %cond.false400
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB13_101:                             # %cond.end403
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB13_107
.LBB13_103:                             # %cond.false415
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB13_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB13_106
.LBB13_105:                             # %cond.false424
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB13_106:                             # %cond.end430
                                        #   in Loop: Header=BB13_7 Depth=1
.LBB13_107:                             # %cond.end432
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB13_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB13_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_114
.LBB13_110:                             # %cond.false440
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB13_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_113
.LBB13_112:                             # %cond.false446
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB13_113:                             # %cond.end448
                                        #   in Loop: Header=BB13_7 Depth=1
.LBB13_114:                             # %cond.end450
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB13_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_120
.LBB13_116:                             # %cond.false458
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB13_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_119
.LBB13_118:                             # %cond.false465
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB13_119:                             # %cond.end467
                                        #   in Loop: Header=BB13_7 Depth=1
.LBB13_120:                             # %cond.end469
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB13_134
.LBB13_121:                             # %if.else473
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB13_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_127
.LBB13_123:                             # %cond.false478
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB13_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB13_126
.LBB13_125:                             # %cond.false484
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB13_126:                             # %cond.end486
                                        #   in Loop: Header=BB13_7 Depth=1
.LBB13_127:                             # %cond.end488
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB13_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_133
.LBB13_129:                             # %cond.false496
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB13_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB13_132
.LBB13_131:                             # %cond.false503
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB13_132:                             # %cond.end505
                                        #   in Loop: Header=BB13_7 Depth=1
.LBB13_133:                             # %cond.end507
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB13_134:                             # %if.end511
                                        #   in Loop: Header=BB13_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB13_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB13_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB13_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB13_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB13_142
.LBB13_138:                             # %cond.false527
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB13_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB13_141
.LBB13_140:                             # %cond.false537
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB13_141:                             # %cond.end544
                                        #   in Loop: Header=BB13_7 Depth=1
.LBB13_142:                             # %cond.end546
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB13_143:                             # %if.end554
                                        #   in Loop: Header=BB13_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB13_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB13_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB13_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB13_150
.LBB13_146:                             # %cond.false568
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB13_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB13_149
.LBB13_148:                             # %cond.false578
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB13_149:                             # %cond.end585
                                        #   in Loop: Header=BB13_7 Depth=1
.LBB13_150:                             # %cond.end587
                                        #   in Loop: Header=BB13_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB13_151:                             # %if.end594
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_152
.LBB13_152:                             # %if.end595
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_153
.LBB13_153:                             # %if.end596
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_154
.LBB13_154:                             # %if.end597
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_155
.LBB13_155:                             # %if.end598
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_156
.LBB13_156:                             # %if.end599
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_157
.LBB13_157:                             # %if.end600
                                        #   in Loop: Header=BB13_7 Depth=1
	jmp	.LBB13_158
.LBB13_158:                             # %for.inc
                                        #   in Loop: Header=BB13_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB13_7
.LBB13_159:                             # %for.end
	cmpl	$999602803, -196(%rbp)  # imm = 0x3B94BA73
	jne	.LBB13_161
.LBB13_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_160
.Lfunc_end13:
	.size	EdgeLoop.10, .Lfunc_end13-EdgeLoop.10
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.11          # -- Begin function GetStrength.11
	.p2align	4, 0x90
	.type	GetStrength.11,@function
GetStrength.11:                         # @GetStrength.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$589990592, -144(%rbp)  # imm = 0x232A8AC0
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB14_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB14_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB14_5
.LBB14_4:                               # %cond.false
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB14_5:                               # %cond.end
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB14_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB14_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB14_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB14_9
.LBB14_8:                               # %cond.false15
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	$1, %eax
	jmp	.LBB14_9
.LBB14_9:                               # %cond.end16
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_11
.LBB14_10:                              # %cond.false18
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-28(%rbp), %eax
.LBB14_11:                              # %cond.end19
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-152(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB14_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB14_25
.LBB14_13:                              # %if.then
                                        #   in Loop: Header=BB14_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB14_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB14_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB14_23
.LBB14_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB14_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB14_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB14_23
.LBB14_19:                              # %lor.rhs
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB14_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB14_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB14_22
.LBB14_21:                              # %land.rhs60
                                        #   in Loop: Header=BB14_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_22:                              # %land.end
                                        #   in Loop: Header=BB14_1 Depth=1
.LBB14_23:                              # %lor.end
                                        #   in Loop: Header=BB14_1 Depth=1
.LBB14_24:                              # %land.end62
                                        #   in Loop: Header=BB14_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB14_79
.LBB14_25:                              # %if.else
                                        #   in Loop: Header=BB14_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB14_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB14_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB14_35
.LBB14_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB14_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB14_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB14_35
.LBB14_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB14_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB14_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB14_34
.LBB14_33:                              # %land.rhs92
                                        #   in Loop: Header=BB14_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_34:                              # %land.end95
                                        #   in Loop: Header=BB14_1 Depth=1
.LBB14_35:                              # %lor.end96
                                        #   in Loop: Header=BB14_1 Depth=1
.LBB14_36:                              # %land.end97
                                        #   in Loop: Header=BB14_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB14_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB14_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB14_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB14_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB14_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB14_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB14_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB14_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB14_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB14_47
.LBB14_46:                              # %if.then144
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB14_77
.LBB14_47:                              # %if.else147
                                        #   in Loop: Header=BB14_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB14_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB14_76
.LBB14_49:                              # %if.else152
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-132(%rbp), %rsi
	leaq	-140(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB14_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB14_52
.LBB14_51:                              # %cond.false169
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB14_52:                              # %cond.end174
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB14_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB14_55
.LBB14_54:                              # %cond.false184
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB14_55:                              # %cond.end189
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB14_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB14_58
.LBB14_57:                              # %cond.false199
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB14_58:                              # %cond.end204
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB14_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB14_61
.LBB14_60:                              # %cond.false214
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB14_61:                              # %cond.end219
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	%rax, -168(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB14_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-168(%rbp), %rax
	je	.LBB14_65
.LBB14_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jne	.LBB14_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB14_74
.LBB14_65:                              # %if.then232
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB14_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB14_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB14_69
.LBB14_68:                              # %if.else309
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB14_69:                              # %if.end
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_73
.LBB14_70:                              # %if.else380
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB14_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB14_72:                              # %land.end518
                                        #   in Loop: Header=BB14_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB14_73:                              # %if.end522
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_75
.LBB14_74:                              # %if.else523
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB14_75:                              # %if.end526
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_76
.LBB14_76:                              # %if.end527
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_77
.LBB14_77:                              # %if.end528
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_78
.LBB14_78:                              # %if.end529
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_79
.LBB14_79:                              # %if.end530
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_80
.LBB14_80:                              # %for.inc
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB14_1
.LBB14_81:                              # %for.end
	cmpl	$589990592, -144(%rbp)  # imm = 0x232A8AC0
	jne	.LBB14_83
.LBB14_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_82
.Lfunc_end14:
	.size	GetStrength.11, .Lfunc_end14-GetStrength.11
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.12          # -- Begin function GetStrength.12
	.p2align	4, 0x90
	.type	GetStrength.12,@function
GetStrength.12:                         # @GetStrength.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1319770947, -136(%rbp) # imm = 0x4EAA1B43
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB15_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB15_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB15_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB15_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB15_5
.LBB15_4:                               # %cond.false
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB15_5:                               # %cond.end
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB15_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB15_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB15_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB15_9
.LBB15_8:                               # %cond.false15
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$1, %eax
	jmp	.LBB15_9
.LBB15_9:                               # %cond.end16
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_11
.LBB15_10:                              # %cond.false18
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-28(%rbp), %eax
.LBB15_11:                              # %cond.end19
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB15_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB15_25
.LBB15_13:                              # %if.then
                                        #   in Loop: Header=BB15_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB15_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB15_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB15_23
.LBB15_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB15_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB15_23
.LBB15_19:                              # %lor.rhs
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB15_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB15_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB15_22
.LBB15_21:                              # %land.rhs60
                                        #   in Loop: Header=BB15_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_22:                              # %land.end
                                        #   in Loop: Header=BB15_1 Depth=1
.LBB15_23:                              # %lor.end
                                        #   in Loop: Header=BB15_1 Depth=1
.LBB15_24:                              # %land.end62
                                        #   in Loop: Header=BB15_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB15_79
.LBB15_25:                              # %if.else
                                        #   in Loop: Header=BB15_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB15_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB15_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB15_35
.LBB15_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB15_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB15_35
.LBB15_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB15_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB15_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB15_34
.LBB15_33:                              # %land.rhs92
                                        #   in Loop: Header=BB15_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_34:                              # %land.end95
                                        #   in Loop: Header=BB15_1 Depth=1
.LBB15_35:                              # %lor.end96
                                        #   in Loop: Header=BB15_1 Depth=1
.LBB15_36:                              # %land.end97
                                        #   in Loop: Header=BB15_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB15_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB15_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB15_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB15_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB15_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB15_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB15_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB15_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB15_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB15_47
.LBB15_46:                              # %if.then144
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB15_77
.LBB15_47:                              # %if.else147
                                        #   in Loop: Header=BB15_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB15_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB15_76
.LBB15_49:                              # %if.else152
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB15_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB15_52
.LBB15_51:                              # %cond.false169
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB15_52:                              # %cond.end174
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB15_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB15_55
.LBB15_54:                              # %cond.false184
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB15_55:                              # %cond.end189
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB15_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB15_58
.LBB15_57:                              # %cond.false199
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB15_58:                              # %cond.end204
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB15_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB15_61
.LBB15_60:                              # %cond.false214
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB15_61:                              # %cond.end219
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB15_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB15_65
.LBB15_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB15_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB15_74
.LBB15_65:                              # %if.then232
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB15_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB15_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB15_69
.LBB15_68:                              # %if.else309
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB15_69:                              # %if.end
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_73
.LBB15_70:                              # %if.else380
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB15_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB15_72:                              # %land.end518
                                        #   in Loop: Header=BB15_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB15_73:                              # %if.end522
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_75
.LBB15_74:                              # %if.else523
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB15_75:                              # %if.end526
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_76
.LBB15_76:                              # %if.end527
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_77
.LBB15_77:                              # %if.end528
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_78
.LBB15_78:                              # %if.end529
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_79
.LBB15_79:                              # %if.end530
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_80
.LBB15_80:                              # %for.inc
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB15_1
.LBB15_81:                              # %for.end
	cmpl	$1319770947, -136(%rbp) # imm = 0x4EAA1B43
	jne	.LBB15_83
.LBB15_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_82
.Lfunc_end15:
	.size	GetStrength.12, .Lfunc_end15-GetStrength.12
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.13         # -- Begin function DeblockFrame.13
	.p2align	4, 0x90
	.type	DeblockFrame.13,@function
DeblockFrame.13:                        # @DeblockFrame.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$812222310, -8(%rbp)    # imm = 0x30698766
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB16_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_1
.LBB16_4:                               # %for.end
	cmpl	$812222310, -8(%rbp)    # imm = 0x30698766
	jne	.LBB16_6
.LBB16_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_5
.Lfunc_end16:
	.size	DeblockFrame.13, .Lfunc_end16-DeblockFrame.13
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.14         # -- Begin function DeblockFrame.14
	.p2align	4, 0x90
	.type	DeblockFrame.14,@function
DeblockFrame.14:                        # @DeblockFrame.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1436687543, -8(%rbp)   # imm = 0x55A21CB7
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB17_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_1
.LBB17_4:                               # %for.end
	cmpl	$1436687543, -8(%rbp)   # imm = 0x55A21CB7
	jne	.LBB17_6
.LBB17_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_5
.Lfunc_end17:
	.size	DeblockFrame.14, .Lfunc_end17-DeblockFrame.14
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.15            # -- Begin function DeblockMb.15
	.p2align	4, 0x90
	.type	DeblockMb.15,@function
DeblockMb.15:                           # @DeblockMb.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$2043582580, -108(%rbp) # imm = 0x79CE9874
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-112(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -112(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB18_2
# %bb.1:                                # %if.then
	jmp	.LBB18_2
.LBB18_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB18_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB18_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB18_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB18_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB18_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB18_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB18_9:                               # %land.end
.LBB18_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB18_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB18_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB18_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB18_61
.LBB18_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB18_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB18_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB18_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB18_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB18_20
.LBB18_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB18_20:                              # %if.end40
	jmp	.LBB18_21
.LBB18_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB18_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_29 Depth 2
                                        #       Child Loop BB18_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB18_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB18_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB18_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB18_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB18_28
.LBB18_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB18_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB18_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB18_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB18_27:                              # %land.end51
                                        #   in Loop: Header=BB18_22 Depth=1
.LBB18_28:                              # %lor.end52
                                        #   in Loop: Header=BB18_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB18_29:                              # %for.cond54
                                        #   Parent Loop BB18_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB18_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB18_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB18_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB18_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB18_56
.LBB18_32:                              # %if.then60
                                        #   in Loop: Header=BB18_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -40(%rbp)
.LBB18_33:                              # %for.cond70
                                        #   Parent Loop BB18_22 Depth=1
                                        #     Parent Loop BB18_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB18_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB18_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB18_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB18_33
.LBB18_36:                              # %for.end
                                        #   in Loop: Header=BB18_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB18_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB18_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB18_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB18_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB18_39:                              # %if.end84
                                        #   in Loop: Header=BB18_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB18_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB18_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB18_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB18_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB18_42:                              # %if.end100
                                        #   in Loop: Header=BB18_29 Depth=2
	jmp	.LBB18_43
.LBB18_43:                              # %if.end101
                                        #   in Loop: Header=BB18_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB18_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB18_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB18_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB18_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB18_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB18_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB18_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB18_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB18_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB18_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB18_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB18_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB18_50:                              # %if.end125
                                        #   in Loop: Header=BB18_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB18_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB18_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB18_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB18_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB18_53:                              # %if.end142
                                        #   in Loop: Header=BB18_29 Depth=2
	jmp	.LBB18_54
.LBB18_54:                              # %if.end143
                                        #   in Loop: Header=BB18_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB18_55:                              # %if.end145
                                        #   in Loop: Header=BB18_29 Depth=2
	jmp	.LBB18_56
.LBB18_56:                              # %if.end146
                                        #   in Loop: Header=BB18_29 Depth=2
	jmp	.LBB18_57
.LBB18_57:                              # %for.inc147
                                        #   in Loop: Header=BB18_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB18_29
.LBB18_58:                              # %for.end149
                                        #   in Loop: Header=BB18_22 Depth=1
	jmp	.LBB18_59
.LBB18_59:                              # %for.inc150
                                        #   in Loop: Header=BB18_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_22
.LBB18_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB18_61:                              # %return
	cmpl	$2043582580, -108(%rbp) # imm = 0x79CE9874
	jne	.LBB18_63
.LBB18_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_62
.Lfunc_end18:
	.size	DeblockMb.15, .Lfunc_end18-DeblockMb.15
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.16            # -- Begin function DeblockMb.16
	.p2align	4, 0x90
	.type	DeblockMb.16,@function
DeblockMb.16:                           # @DeblockMb.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$247795695, -100(%rbp)  # imm = 0xEC50FEF
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB19_2
# %bb.1:                                # %if.then
	jmp	.LBB19_2
.LBB19_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB19_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB19_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB19_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB19_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB19_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB19_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB19_9:                               # %land.end
.LBB19_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB19_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB19_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB19_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB19_61
.LBB19_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB19_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB19_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB19_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB19_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB19_20
.LBB19_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB19_20:                              # %if.end40
	jmp	.LBB19_21
.LBB19_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB19_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_29 Depth 2
                                        #       Child Loop BB19_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB19_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB19_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB19_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB19_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB19_28
.LBB19_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB19_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB19_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB19_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB19_27:                              # %land.end51
                                        #   in Loop: Header=BB19_22 Depth=1
.LBB19_28:                              # %lor.end52
                                        #   in Loop: Header=BB19_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB19_29:                              # %for.cond54
                                        #   Parent Loop BB19_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB19_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB19_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB19_56
.LBB19_32:                              # %if.then60
                                        #   in Loop: Header=BB19_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -48(%rbp)
.LBB19_33:                              # %for.cond70
                                        #   Parent Loop BB19_22 Depth=1
                                        #     Parent Loop BB19_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB19_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB19_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB19_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB19_33
.LBB19_36:                              # %for.end
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB19_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB19_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB19_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB19_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB19_39:                              # %if.end84
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB19_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB19_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB19_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB19_42:                              # %if.end100
                                        #   in Loop: Header=BB19_29 Depth=2
	jmp	.LBB19_43
.LBB19_43:                              # %if.end101
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB19_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB19_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB19_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB19_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB19_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB19_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB19_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB19_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB19_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB19_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB19_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB19_50:                              # %if.end125
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB19_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB19_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB19_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB19_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB19_53:                              # %if.end142
                                        #   in Loop: Header=BB19_29 Depth=2
	jmp	.LBB19_54
.LBB19_54:                              # %if.end143
                                        #   in Loop: Header=BB19_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB19_55:                              # %if.end145
                                        #   in Loop: Header=BB19_29 Depth=2
	jmp	.LBB19_56
.LBB19_56:                              # %if.end146
                                        #   in Loop: Header=BB19_29 Depth=2
	jmp	.LBB19_57
.LBB19_57:                              # %for.inc147
                                        #   in Loop: Header=BB19_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB19_29
.LBB19_58:                              # %for.end149
                                        #   in Loop: Header=BB19_22 Depth=1
	jmp	.LBB19_59
.LBB19_59:                              # %for.inc150
                                        #   in Loop: Header=BB19_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_22
.LBB19_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB19_61:                              # %return
	cmpl	$247795695, -100(%rbp)  # imm = 0xEC50FEF
	jne	.LBB19_63
.LBB19_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_62
.Lfunc_end19:
	.size	DeblockMb.16, .Lfunc_end19-DeblockMb.16
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.17         # -- Begin function DeblockFrame.17
	.p2align	4, 0x90
	.type	DeblockFrame.17,@function
DeblockFrame.17:                        # @DeblockFrame.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$415284993, -8(%rbp)    # imm = 0x18C0BF01
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB20_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_1
.LBB20_4:                               # %for.end
	cmpl	$415284993, -8(%rbp)    # imm = 0x18C0BF01
	jne	.LBB20_6
.LBB20_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_5
.Lfunc_end20:
	.size	DeblockFrame.17, .Lfunc_end20-DeblockFrame.17
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.18            # -- Begin function DeblockMb.18
	.p2align	4, 0x90
	.type	DeblockMb.18,@function
DeblockMb.18:                           # @DeblockMb.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$558513431, -100(%rbp)  # imm = 0x214A3D17
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB21_2
# %bb.1:                                # %if.then
	jmp	.LBB21_2
.LBB21_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB21_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB21_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB21_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB21_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB21_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB21_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB21_9:                               # %land.end
.LBB21_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB21_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB21_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB21_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB21_61
.LBB21_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB21_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB21_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB21_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB21_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB21_20
.LBB21_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB21_20:                              # %if.end40
	jmp	.LBB21_21
.LBB21_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB21_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_29 Depth 2
                                        #       Child Loop BB21_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB21_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB21_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB21_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB21_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB21_28
.LBB21_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB21_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB21_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB21_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB21_27:                              # %land.end51
                                        #   in Loop: Header=BB21_22 Depth=1
.LBB21_28:                              # %lor.end52
                                        #   in Loop: Header=BB21_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB21_29:                              # %for.cond54
                                        #   Parent Loop BB21_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB21_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB21_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB21_56
.LBB21_32:                              # %if.then60
                                        #   in Loop: Header=BB21_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -40(%rbp)
.LBB21_33:                              # %for.cond70
                                        #   Parent Loop BB21_22 Depth=1
                                        #     Parent Loop BB21_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB21_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB21_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB21_33
.LBB21_36:                              # %for.end
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB21_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB21_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB21_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB21_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB21_39:                              # %if.end84
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB21_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB21_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB21_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB21_42:                              # %if.end100
                                        #   in Loop: Header=BB21_29 Depth=2
	jmp	.LBB21_43
.LBB21_43:                              # %if.end101
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB21_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB21_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB21_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB21_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB21_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB21_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB21_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB21_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB21_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB21_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB21_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB21_50:                              # %if.end125
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB21_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB21_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB21_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB21_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB21_53:                              # %if.end142
                                        #   in Loop: Header=BB21_29 Depth=2
	jmp	.LBB21_54
.LBB21_54:                              # %if.end143
                                        #   in Loop: Header=BB21_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB21_55:                              # %if.end145
                                        #   in Loop: Header=BB21_29 Depth=2
	jmp	.LBB21_56
.LBB21_56:                              # %if.end146
                                        #   in Loop: Header=BB21_29 Depth=2
	jmp	.LBB21_57
.LBB21_57:                              # %for.inc147
                                        #   in Loop: Header=BB21_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB21_29
.LBB21_58:                              # %for.end149
                                        #   in Loop: Header=BB21_22 Depth=1
	jmp	.LBB21_59
.LBB21_59:                              # %for.inc150
                                        #   in Loop: Header=BB21_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_22
.LBB21_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB21_61:                              # %return
	cmpl	$558513431, -100(%rbp)  # imm = 0x214A3D17
	jne	.LBB21_63
.LBB21_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_62
.Lfunc_end21:
	.size	DeblockMb.18, .Lfunc_end21-DeblockMb.18
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.19             # -- Begin function EdgeLoop.19
	.p2align	4, 0x90
	.type	EdgeLoop.19,@function
EdgeLoop.19:                            # @EdgeLoop.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1748800014, -188(%rbp) # imm = 0x683C920E
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -144(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB22_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB22_3
.LBB22_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB22_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB22_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB22_6
.LBB22_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB22_6
.LBB22_6:                               # %cond.end
	movl	%eax, -176(%rbp)
	movl	$0, -60(%rbp)
.LBB22_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB22_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB22_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB22_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB22_11
.LBB22_10:                              # %cond.false8
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB22_11:                              # %cond.end10
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	%eax, -168(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB22_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB22_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB22_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB22_15
.LBB22_14:                              # %cond.false17
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	$1, %eax
	jmp	.LBB22_15
.LBB22_15:                              # %cond.end18
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_17
.LBB22_16:                              # %cond.false20
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-60(%rbp), %eax
.LBB22_17:                              # %cond.end21
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	%eax, -172(%rbp)
	movl	-140(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	-172(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-140(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-172(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-140(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB22_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB22_19:                              # %lor.end
                                        #   in Loop: Header=BB22_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB22_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB22_7 Depth=1
	cmpl	$8, -176(%rbp)
	jne	.LBB22_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB22_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB22_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB22_25
.LBB22_24:                              # %cond.false47
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB22_25:                              # %cond.end49
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_27
.LBB22_26:                              # %cond.false51
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB22_27:                              # %cond.end52
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	%ecx, -196(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB22_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB22_157
.LBB22_29:                              # %if.then57
                                        #   in Loop: Header=BB22_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB22_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB22_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB22_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB22_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB22_34
.LBB22_33:                              # %cond.false66
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	32(%rbp), %eax
.LBB22_34:                              # %cond.end67
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_36
.LBB22_35:                              # %cond.false69
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	$1, %eax
	jmp	.LBB22_36
.LBB22_36:                              # %cond.end70
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB22_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB22_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB22_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB22_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB22_41
.LBB22_40:                              # %cond.false81
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	32(%rbp), %eax
.LBB22_41:                              # %cond.end82
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_43
.LBB22_42:                              # %cond.false84
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	$1, %eax
	jmp	.LBB22_43
.LBB22_43:                              # %cond.end85
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB22_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB22_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_50
.LBB22_46:                              # %cond.false105
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB22_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	$51, %eax
	jmp	.LBB22_49
.LBB22_48:                              # %cond.false114
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB22_49:                              # %cond.end120
                                        #   in Loop: Header=BB22_7 Depth=1
.LBB22_50:                              # %cond.end122
                                        #   in Loop: Header=BB22_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB22_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB22_56
.LBB22_52:                              # %cond.false135
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB22_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB22_55
.LBB22_54:                              # %cond.false144
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB22_55:                              # %cond.end150
                                        #   in Loop: Header=BB22_7 Depth=1
.LBB22_56:                              # %cond.end152
                                        #   in Loop: Header=BB22_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB22_58
.LBB22_57:                              # %cond.false160
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB22_58:                              # %cond.end166
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB22_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_64
.LBB22_60:                              # %cond.false172
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB22_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	$51, %eax
	jmp	.LBB22_63
.LBB22_62:                              # %cond.false177
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
.LBB22_63:                              # %cond.end179
                                        #   in Loop: Header=BB22_7 Depth=1
.LBB22_64:                              # %cond.end181
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB22_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB22_70
.LBB22_66:                              # %cond.false187
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB22_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB22_69
.LBB22_68:                              # %cond.false192
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-144(%rbp), %ecx
.LBB22_69:                              # %cond.end194
                                        #   in Loop: Header=BB22_7 Depth=1
.LBB22_70:                              # %cond.end196
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -192(%rbp)
	movslq	-156(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-192(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-156(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -184(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, %eax
	je	.LBB22_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB22_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-160(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB22_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB22_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB22_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB22_75:                              # %if.end271
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
	cmpl	$4, -160(%rbp)
	jne	.LBB22_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB22_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB22_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB22_97
.LBB22_78:                              # %if.else292
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-164(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB22_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB22_81
.LBB22_80:                              # %cond.false307
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB22_81:                              # %cond.end313
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB22_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB22_84
.LBB22_83:                              # %cond.false325
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB22_84:                              # %cond.end331
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB22_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB22_87
.LBB22_86:                              # %cond.false342
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-16(%rbp), %eax
.LBB22_87:                              # %cond.end343
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB22_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB22_90
.LBB22_89:                              # %cond.false355
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-12(%rbp), %eax
.LBB22_90:                              # %cond.end356
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB22_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB22_93
.LBB22_92:                              # %cond.false371
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-32(%rbp), %eax
.LBB22_93:                              # %cond.end372
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB22_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB22_96
.LBB22_95:                              # %cond.false387
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-40(%rbp), %eax
.LBB22_96:                              # %cond.end388
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB22_97:                              # %if.end395
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_153
.LBB22_98:                              # %if.else396
                                        #   in Loop: Header=BB22_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB22_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB22_101
.LBB22_100:                             # %cond.false400
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB22_101:                             # %cond.end403
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB22_107
.LBB22_103:                             # %cond.false415
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB22_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB22_106
.LBB22_105:                             # %cond.false424
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB22_106:                             # %cond.end430
                                        #   in Loop: Header=BB22_7 Depth=1
.LBB22_107:                             # %cond.end432
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB22_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB22_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_114
.LBB22_110:                             # %cond.false440
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB22_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_113
.LBB22_112:                             # %cond.false446
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB22_113:                             # %cond.end448
                                        #   in Loop: Header=BB22_7 Depth=1
.LBB22_114:                             # %cond.end450
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB22_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_120
.LBB22_116:                             # %cond.false458
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB22_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_119
.LBB22_118:                             # %cond.false465
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB22_119:                             # %cond.end467
                                        #   in Loop: Header=BB22_7 Depth=1
.LBB22_120:                             # %cond.end469
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB22_134
.LBB22_121:                             # %if.else473
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB22_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_127
.LBB22_123:                             # %cond.false478
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB22_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB22_126
.LBB22_125:                             # %cond.false484
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB22_126:                             # %cond.end486
                                        #   in Loop: Header=BB22_7 Depth=1
.LBB22_127:                             # %cond.end488
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB22_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_133
.LBB22_129:                             # %cond.false496
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB22_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB22_132
.LBB22_131:                             # %cond.false503
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB22_132:                             # %cond.end505
                                        #   in Loop: Header=BB22_7 Depth=1
.LBB22_133:                             # %cond.end507
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB22_134:                             # %if.end511
                                        #   in Loop: Header=BB22_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB22_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB22_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB22_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB22_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB22_142
.LBB22_138:                             # %cond.false527
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB22_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_141
.LBB22_140:                             # %cond.false537
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB22_141:                             # %cond.end544
                                        #   in Loop: Header=BB22_7 Depth=1
.LBB22_142:                             # %cond.end546
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB22_143:                             # %if.end554
                                        #   in Loop: Header=BB22_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB22_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB22_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB22_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB22_150
.LBB22_146:                             # %cond.false568
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB22_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_149
.LBB22_148:                             # %cond.false578
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB22_149:                             # %cond.end585
                                        #   in Loop: Header=BB22_7 Depth=1
.LBB22_150:                             # %cond.end587
                                        #   in Loop: Header=BB22_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB22_151:                             # %if.end594
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_152
.LBB22_152:                             # %if.end595
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_153
.LBB22_153:                             # %if.end596
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_154
.LBB22_154:                             # %if.end597
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_155
.LBB22_155:                             # %if.end598
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_156
.LBB22_156:                             # %if.end599
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_157
.LBB22_157:                             # %if.end600
                                        #   in Loop: Header=BB22_7 Depth=1
	jmp	.LBB22_158
.LBB22_158:                             # %for.inc
                                        #   in Loop: Header=BB22_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB22_7
.LBB22_159:                             # %for.end
	cmpl	$1748800014, -188(%rbp) # imm = 0x683C920E
	jne	.LBB22_161
.LBB22_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_160
.Lfunc_end22:
	.size	EdgeLoop.19, .Lfunc_end22-EdgeLoop.19
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.20            # -- Begin function DeblockMb.20
	.p2align	4, 0x90
	.type	DeblockMb.20,@function
DeblockMb.20:                           # @DeblockMb.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1137996964, -100(%rbp) # imm = 0x43D474A4
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB23_2
# %bb.1:                                # %if.then
	jmp	.LBB23_2
.LBB23_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB23_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB23_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB23_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB23_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB23_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB23_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB23_9:                               # %land.end
.LBB23_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB23_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB23_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB23_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB23_61
.LBB23_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB23_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB23_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB23_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB23_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB23_20
.LBB23_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB23_20:                              # %if.end40
	jmp	.LBB23_21
.LBB23_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB23_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_29 Depth 2
                                        #       Child Loop BB23_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB23_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB23_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB23_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB23_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB23_28
.LBB23_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB23_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB23_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB23_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB23_27:                              # %land.end51
                                        #   in Loop: Header=BB23_22 Depth=1
.LBB23_28:                              # %lor.end52
                                        #   in Loop: Header=BB23_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB23_29:                              # %for.cond54
                                        #   Parent Loop BB23_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB23_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB23_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB23_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB23_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB23_56
.LBB23_32:                              # %if.then60
                                        #   in Loop: Header=BB23_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -40(%rbp)
.LBB23_33:                              # %for.cond70
                                        #   Parent Loop BB23_22 Depth=1
                                        #     Parent Loop BB23_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB23_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB23_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB23_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB23_33
.LBB23_36:                              # %for.end
                                        #   in Loop: Header=BB23_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB23_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB23_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB23_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB23_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB23_39:                              # %if.end84
                                        #   in Loop: Header=BB23_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB23_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB23_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB23_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB23_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB23_42:                              # %if.end100
                                        #   in Loop: Header=BB23_29 Depth=2
	jmp	.LBB23_43
.LBB23_43:                              # %if.end101
                                        #   in Loop: Header=BB23_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB23_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB23_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB23_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB23_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB23_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB23_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB23_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB23_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB23_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB23_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB23_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB23_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB23_50:                              # %if.end125
                                        #   in Loop: Header=BB23_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB23_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB23_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB23_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB23_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB23_53:                              # %if.end142
                                        #   in Loop: Header=BB23_29 Depth=2
	jmp	.LBB23_54
.LBB23_54:                              # %if.end143
                                        #   in Loop: Header=BB23_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB23_55:                              # %if.end145
                                        #   in Loop: Header=BB23_29 Depth=2
	jmp	.LBB23_56
.LBB23_56:                              # %if.end146
                                        #   in Loop: Header=BB23_29 Depth=2
	jmp	.LBB23_57
.LBB23_57:                              # %for.inc147
                                        #   in Loop: Header=BB23_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB23_29
.LBB23_58:                              # %for.end149
                                        #   in Loop: Header=BB23_22 Depth=1
	jmp	.LBB23_59
.LBB23_59:                              # %for.inc150
                                        #   in Loop: Header=BB23_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_22
.LBB23_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB23_61:                              # %return
	cmpl	$1137996964, -100(%rbp) # imm = 0x43D474A4
	jne	.LBB23_63
.LBB23_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_62
.Lfunc_end23:
	.size	DeblockMb.20, .Lfunc_end23-DeblockMb.20
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.21          # -- Begin function GetStrength.21
	.p2align	4, 0x90
	.type	GetStrength.21,@function
GetStrength.21:                         # @GetStrength.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1846744411, -148(%rbp) # imm = 0x6E13155B
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB24_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB24_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB24_5
.LBB24_4:                               # %cond.false
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB24_5:                               # %cond.end
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB24_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB24_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB24_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB24_9
.LBB24_8:                               # %cond.false15
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	$1, %eax
	jmp	.LBB24_9
.LBB24_9:                               # %cond.end16
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_11
.LBB24_10:                              # %cond.false18
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-28(%rbp), %eax
.LBB24_11:                              # %cond.end19
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-136(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB24_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB24_25
.LBB24_13:                              # %if.then
                                        #   in Loop: Header=BB24_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB24_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB24_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB24_23
.LBB24_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB24_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB24_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB24_23
.LBB24_19:                              # %lor.rhs
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB24_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB24_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB24_22
.LBB24_21:                              # %land.rhs60
                                        #   in Loop: Header=BB24_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB24_22:                              # %land.end
                                        #   in Loop: Header=BB24_1 Depth=1
.LBB24_23:                              # %lor.end
                                        #   in Loop: Header=BB24_1 Depth=1
.LBB24_24:                              # %land.end62
                                        #   in Loop: Header=BB24_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB24_79
.LBB24_25:                              # %if.else
                                        #   in Loop: Header=BB24_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB24_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB24_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB24_35
.LBB24_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB24_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB24_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB24_35
.LBB24_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB24_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB24_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB24_34
.LBB24_33:                              # %land.rhs92
                                        #   in Loop: Header=BB24_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB24_34:                              # %land.end95
                                        #   in Loop: Header=BB24_1 Depth=1
.LBB24_35:                              # %lor.end96
                                        #   in Loop: Header=BB24_1 Depth=1
.LBB24_36:                              # %land.end97
                                        #   in Loop: Header=BB24_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB24_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB24_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB24_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB24_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB24_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB24_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB24_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB24_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB24_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB24_47
.LBB24_46:                              # %if.then144
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB24_77
.LBB24_47:                              # %if.else147
                                        #   in Loop: Header=BB24_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB24_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB24_76
.LBB24_49:                              # %if.else152
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-140(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB24_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB24_52
.LBB24_51:                              # %cond.false169
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB24_52:                              # %cond.end174
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB24_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB24_55
.LBB24_54:                              # %cond.false184
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB24_55:                              # %cond.end189
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB24_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB24_58
.LBB24_57:                              # %cond.false199
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB24_58:                              # %cond.end204
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB24_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB24_61
.LBB24_60:                              # %cond.false214
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB24_61:                              # %cond.end219
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	%rax, -176(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB24_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	.LBB24_65
.LBB24_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-176(%rbp), %rax
	jne	.LBB24_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB24_74
.LBB24_65:                              # %if.then232
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB24_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB24_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB24_69
.LBB24_68:                              # %if.else309
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB24_69:                              # %if.end
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_73
.LBB24_70:                              # %if.else380
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB24_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB24_72:                              # %land.end518
                                        #   in Loop: Header=BB24_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB24_73:                              # %if.end522
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_75
.LBB24_74:                              # %if.else523
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB24_75:                              # %if.end526
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_76
.LBB24_76:                              # %if.end527
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_77
.LBB24_77:                              # %if.end528
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_78
.LBB24_78:                              # %if.end529
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_79
.LBB24_79:                              # %if.end530
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_80
.LBB24_80:                              # %for.inc
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB24_1
.LBB24_81:                              # %for.end
	cmpl	$1846744411, -148(%rbp) # imm = 0x6E13155B
	jne	.LBB24_83
.LBB24_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_82
.Lfunc_end24:
	.size	GetStrength.21, .Lfunc_end24-GetStrength.21
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.22             # -- Begin function EdgeLoop.22
	.p2align	4, 0x90
	.type	EdgeLoop.22,@function
EdgeLoop.22:                            # @EdgeLoop.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$413620611, -184(%rbp)  # imm = 0x18A75983
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -148(%rbp)
	movl	%r9d, -140(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB25_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB25_3
.LBB25_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB25_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB25_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB25_6
.LBB25_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB25_6
.LBB25_6:                               # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB25_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB25_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB25_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB25_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB25_11
.LBB25_10:                              # %cond.false8
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB25_11:                              # %cond.end10
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB25_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB25_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB25_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB25_15
.LBB25_14:                              # %cond.false17
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	$1, %eax
	jmp	.LBB25_15
.LBB25_15:                              # %cond.end18
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_17
.LBB25_16:                              # %cond.false20
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-60(%rbp), %eax
.LBB25_17:                              # %cond.end21
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-136(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	-168(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-168(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB25_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB25_19:                              # %lor.end
                                        #   in Loop: Header=BB25_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB25_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB25_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB25_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB25_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB25_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB25_25
.LBB25_24:                              # %cond.false47
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB25_25:                              # %cond.end49
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_27
.LBB25_26:                              # %cond.false51
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB25_27:                              # %cond.end52
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	%ecx, -180(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB25_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB25_157
.LBB25_29:                              # %if.then57
                                        #   in Loop: Header=BB25_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB25_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB25_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB25_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB25_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB25_34
.LBB25_33:                              # %cond.false66
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	32(%rbp), %eax
.LBB25_34:                              # %cond.end67
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_36
.LBB25_35:                              # %cond.false69
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	$1, %eax
	jmp	.LBB25_36
.LBB25_36:                              # %cond.end70
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB25_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB25_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB25_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB25_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB25_41
.LBB25_40:                              # %cond.false81
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	32(%rbp), %eax
.LBB25_41:                              # %cond.end82
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_43
.LBB25_42:                              # %cond.false84
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	$1, %eax
	jmp	.LBB25_43
.LBB25_43:                              # %cond.end85
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB25_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB25_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_50
.LBB25_46:                              # %cond.false105
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB25_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	$51, %eax
	jmp	.LBB25_49
.LBB25_48:                              # %cond.false114
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB25_49:                              # %cond.end120
                                        #   in Loop: Header=BB25_7 Depth=1
.LBB25_50:                              # %cond.end122
                                        #   in Loop: Header=BB25_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB25_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB25_56
.LBB25_52:                              # %cond.false135
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB25_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB25_55
.LBB25_54:                              # %cond.false144
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB25_55:                              # %cond.end150
                                        #   in Loop: Header=BB25_7 Depth=1
.LBB25_56:                              # %cond.end152
                                        #   in Loop: Header=BB25_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB25_58
.LBB25_57:                              # %cond.false160
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB25_58:                              # %cond.end166
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB25_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_64
.LBB25_60:                              # %cond.false172
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB25_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	$51, %eax
	jmp	.LBB25_63
.LBB25_62:                              # %cond.false177
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
.LBB25_63:                              # %cond.end179
                                        #   in Loop: Header=BB25_7 Depth=1
.LBB25_64:                              # %cond.end181
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	%eax, -152(%rbp)
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB25_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB25_70
.LBB25_66:                              # %cond.false187
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB25_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB25_69
.LBB25_68:                              # %cond.false192
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-140(%rbp), %ecx
.LBB25_69:                              # %cond.end194
                                        #   in Loop: Header=BB25_7 Depth=1
.LBB25_70:                              # %cond.end196
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-152(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -132(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-152(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, %eax
	je	.LBB25_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -144(%rbp)
	callq	abs
	movl	%eax, -156(%rbp)
	movl	-156(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB25_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-164(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB25_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB25_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB25_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB25_75:                              # %if.end271
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
	cmpl	$4, -164(%rbp)
	jne	.LBB25_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB25_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB25_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB25_97
.LBB25_78:                              # %if.else292
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-156(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-160(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB25_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB25_81
.LBB25_80:                              # %cond.false307
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB25_81:                              # %cond.end313
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB25_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB25_84
.LBB25_83:                              # %cond.false325
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB25_84:                              # %cond.end331
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB25_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB25_87
.LBB25_86:                              # %cond.false342
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-12(%rbp), %eax
.LBB25_87:                              # %cond.end343
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB25_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB25_90
.LBB25_89:                              # %cond.false355
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-16(%rbp), %eax
.LBB25_90:                              # %cond.end356
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB25_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB25_93
.LBB25_92:                              # %cond.false371
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-40(%rbp), %eax
.LBB25_93:                              # %cond.end372
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB25_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB25_96
.LBB25_95:                              # %cond.false387
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-32(%rbp), %eax
.LBB25_96:                              # %cond.end388
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB25_97:                              # %if.end395
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_153
.LBB25_98:                              # %if.else396
                                        #   in Loop: Header=BB25_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB25_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB25_101
.LBB25_100:                             # %cond.false400
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB25_101:                             # %cond.end403
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB25_107
.LBB25_103:                             # %cond.false415
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB25_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB25_106
.LBB25_105:                             # %cond.false424
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB25_106:                             # %cond.end430
                                        #   in Loop: Header=BB25_7 Depth=1
.LBB25_107:                             # %cond.end432
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB25_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB25_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_114
.LBB25_110:                             # %cond.false440
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB25_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_113
.LBB25_112:                             # %cond.false446
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB25_113:                             # %cond.end448
                                        #   in Loop: Header=BB25_7 Depth=1
.LBB25_114:                             # %cond.end450
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB25_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_120
.LBB25_116:                             # %cond.false458
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB25_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_119
.LBB25_118:                             # %cond.false465
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB25_119:                             # %cond.end467
                                        #   in Loop: Header=BB25_7 Depth=1
.LBB25_120:                             # %cond.end469
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB25_134
.LBB25_121:                             # %if.else473
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB25_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_127
.LBB25_123:                             # %cond.false478
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB25_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB25_126
.LBB25_125:                             # %cond.false484
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB25_126:                             # %cond.end486
                                        #   in Loop: Header=BB25_7 Depth=1
.LBB25_127:                             # %cond.end488
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB25_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_133
.LBB25_129:                             # %cond.false496
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB25_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB25_132
.LBB25_131:                             # %cond.false503
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB25_132:                             # %cond.end505
                                        #   in Loop: Header=BB25_7 Depth=1
.LBB25_133:                             # %cond.end507
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB25_134:                             # %if.end511
                                        #   in Loop: Header=BB25_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB25_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB25_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB25_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB25_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB25_142
.LBB25_138:                             # %cond.false527
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB25_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_141
.LBB25_140:                             # %cond.false537
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB25_141:                             # %cond.end544
                                        #   in Loop: Header=BB25_7 Depth=1
.LBB25_142:                             # %cond.end546
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB25_143:                             # %if.end554
                                        #   in Loop: Header=BB25_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB25_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB25_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB25_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB25_150
.LBB25_146:                             # %cond.false568
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB25_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_149
.LBB25_148:                             # %cond.false578
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB25_149:                             # %cond.end585
                                        #   in Loop: Header=BB25_7 Depth=1
.LBB25_150:                             # %cond.end587
                                        #   in Loop: Header=BB25_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB25_151:                             # %if.end594
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_152
.LBB25_152:                             # %if.end595
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_153
.LBB25_153:                             # %if.end596
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_154
.LBB25_154:                             # %if.end597
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_155
.LBB25_155:                             # %if.end598
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_156
.LBB25_156:                             # %if.end599
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_157
.LBB25_157:                             # %if.end600
                                        #   in Loop: Header=BB25_7 Depth=1
	jmp	.LBB25_158
.LBB25_158:                             # %for.inc
                                        #   in Loop: Header=BB25_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB25_7
.LBB25_159:                             # %for.end
	cmpl	$413620611, -184(%rbp)  # imm = 0x18A75983
	jne	.LBB25_161
.LBB25_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_160
.Lfunc_end25:
	.size	EdgeLoop.22, .Lfunc_end25-EdgeLoop.22
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.23            # -- Begin function DeblockMb.23
	.p2align	4, 0x90
	.type	DeblockMb.23,@function
DeblockMb.23:                           # @DeblockMb.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1962329834, -112(%rbp) # imm = 0x74F6C6EA
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-108(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -108(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB26_2
# %bb.1:                                # %if.then
	jmp	.LBB26_2
.LBB26_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB26_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB26_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB26_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB26_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB26_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB26_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB26_9:                               # %land.end
.LBB26_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB26_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB26_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB26_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB26_61
.LBB26_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB26_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB26_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB26_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB26_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB26_20
.LBB26_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB26_20:                              # %if.end40
	jmp	.LBB26_21
.LBB26_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB26_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_29 Depth 2
                                        #       Child Loop BB26_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB26_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB26_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB26_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB26_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB26_28
.LBB26_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB26_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB26_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB26_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB26_27:                              # %land.end51
                                        #   in Loop: Header=BB26_22 Depth=1
.LBB26_28:                              # %lor.end52
                                        #   in Loop: Header=BB26_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB26_29:                              # %for.cond54
                                        #   Parent Loop BB26_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB26_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB26_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB26_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB26_29 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB26_56
.LBB26_32:                              # %if.then60
                                        #   in Loop: Header=BB26_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -40(%rbp)
.LBB26_33:                              # %for.cond70
                                        #   Parent Loop BB26_22 Depth=1
                                        #     Parent Loop BB26_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB26_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB26_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB26_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB26_33
.LBB26_36:                              # %for.end
                                        #   in Loop: Header=BB26_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB26_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB26_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB26_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB26_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB26_39:                              # %if.end84
                                        #   in Loop: Header=BB26_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB26_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB26_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB26_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB26_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB26_42:                              # %if.end100
                                        #   in Loop: Header=BB26_29 Depth=2
	jmp	.LBB26_43
.LBB26_43:                              # %if.end101
                                        #   in Loop: Header=BB26_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB26_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB26_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB26_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB26_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB26_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB26_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB26_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB26_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB26_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB26_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB26_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB26_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB26_50:                              # %if.end125
                                        #   in Loop: Header=BB26_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB26_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB26_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB26_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB26_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB26_53:                              # %if.end142
                                        #   in Loop: Header=BB26_29 Depth=2
	jmp	.LBB26_54
.LBB26_54:                              # %if.end143
                                        #   in Loop: Header=BB26_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB26_55:                              # %if.end145
                                        #   in Loop: Header=BB26_29 Depth=2
	jmp	.LBB26_56
.LBB26_56:                              # %if.end146
                                        #   in Loop: Header=BB26_29 Depth=2
	jmp	.LBB26_57
.LBB26_57:                              # %for.inc147
                                        #   in Loop: Header=BB26_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB26_29
.LBB26_58:                              # %for.end149
                                        #   in Loop: Header=BB26_22 Depth=1
	jmp	.LBB26_59
.LBB26_59:                              # %for.inc150
                                        #   in Loop: Header=BB26_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_22
.LBB26_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB26_61:                              # %return
	cmpl	$1962329834, -112(%rbp) # imm = 0x74F6C6EA
	jne	.LBB26_63
.LBB26_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_62
.Lfunc_end26:
	.size	DeblockMb.23, .Lfunc_end26-DeblockMb.23
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.24             # -- Begin function EdgeLoop.24
	.p2align	4, 0x90
	.type	EdgeLoop.24,@function
EdgeLoop.24:                            # @EdgeLoop.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1183986015, -180(%rbp) # imm = 0x4692315F
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -148(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, -136(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB27_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB27_3
.LBB27_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB27_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB27_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB27_6
.LBB27_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB27_6
.LBB27_6:                               # %cond.end
	movl	%eax, -156(%rbp)
	movl	$0, -60(%rbp)
.LBB27_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB27_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB27_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB27_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB27_11
.LBB27_10:                              # %cond.false8
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB27_11:                              # %cond.end10
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB27_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB27_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB27_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB27_15
.LBB27_14:                              # %cond.false17
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	$1, %eax
	jmp	.LBB27_15
.LBB27_15:                              # %cond.end18
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_17
.LBB27_16:                              # %cond.false20
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-60(%rbp), %eax
.LBB27_17:                              # %cond.end21
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-148(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	-168(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-148(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-168(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-148(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB27_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB27_19:                              # %lor.end
                                        #   in Loop: Header=BB27_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB27_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB27_7 Depth=1
	cmpl	$8, -156(%rbp)
	jne	.LBB27_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB27_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB27_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB27_25
.LBB27_24:                              # %cond.false47
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB27_25:                              # %cond.end49
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_27
.LBB27_26:                              # %cond.false51
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB27_27:                              # %cond.end52
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	%ecx, -196(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB27_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB27_157
.LBB27_29:                              # %if.then57
                                        #   in Loop: Header=BB27_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB27_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB27_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB27_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB27_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB27_34
.LBB27_33:                              # %cond.false66
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	32(%rbp), %eax
.LBB27_34:                              # %cond.end67
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_36
.LBB27_35:                              # %cond.false69
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	$1, %eax
	jmp	.LBB27_36
.LBB27_36:                              # %cond.end70
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB27_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB27_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB27_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB27_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB27_41
.LBB27_40:                              # %cond.false81
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	32(%rbp), %eax
.LBB27_41:                              # %cond.end82
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_43
.LBB27_42:                              # %cond.false84
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	$1, %eax
	jmp	.LBB27_43
.LBB27_43:                              # %cond.end85
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB27_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB27_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_50
.LBB27_46:                              # %cond.false105
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB27_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	$51, %eax
	jmp	.LBB27_49
.LBB27_48:                              # %cond.false114
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB27_49:                              # %cond.end120
                                        #   in Loop: Header=BB27_7 Depth=1
.LBB27_50:                              # %cond.end122
                                        #   in Loop: Header=BB27_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB27_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB27_56
.LBB27_52:                              # %cond.false135
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB27_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB27_55
.LBB27_54:                              # %cond.false144
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB27_55:                              # %cond.end150
                                        #   in Loop: Header=BB27_7 Depth=1
.LBB27_56:                              # %cond.end152
                                        #   in Loop: Header=BB27_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB27_58
.LBB27_57:                              # %cond.false160
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB27_58:                              # %cond.end166
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB27_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_64
.LBB27_60:                              # %cond.false172
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB27_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	$51, %eax
	jmp	.LBB27_63
.LBB27_62:                              # %cond.false177
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
.LBB27_63:                              # %cond.end179
                                        #   in Loop: Header=BB27_7 Depth=1
.LBB27_64:                              # %cond.end181
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB27_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB27_70
.LBB27_66:                              # %cond.false187
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB27_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB27_69
.LBB27_68:                              # %cond.false192
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-136(%rbp), %ecx
.LBB27_69:                              # %cond.end194
                                        #   in Loop: Header=BB27_7 Depth=1
.LBB27_70:                              # %cond.end196
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -192(%rbp)
	movslq	-164(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -140(%rbp)
	movslq	-192(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-164(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-88(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-96(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -184(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -188(%rbp)
	movq	-248(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB27_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB27_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB27_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB27_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB27_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB27_75:                              # %if.end271
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -44(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB27_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB27_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB27_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB27_97
.LBB27_78:                              # %if.else292
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-160(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-172(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB27_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB27_81
.LBB27_80:                              # %cond.false307
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB27_81:                              # %cond.end313
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB27_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB27_84
.LBB27_83:                              # %cond.false325
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB27_84:                              # %cond.end331
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB27_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB27_87
.LBB27_86:                              # %cond.false342
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-16(%rbp), %eax
.LBB27_87:                              # %cond.end343
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB27_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB27_90
.LBB27_89:                              # %cond.false355
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-12(%rbp), %eax
.LBB27_90:                              # %cond.end356
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB27_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB27_93
.LBB27_92:                              # %cond.false371
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-32(%rbp), %eax
.LBB27_93:                              # %cond.end372
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB27_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB27_96
.LBB27_95:                              # %cond.false387
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-36(%rbp), %eax
.LBB27_96:                              # %cond.end388
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB27_97:                              # %if.end395
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_153
.LBB27_98:                              # %if.else396
                                        #   in Loop: Header=BB27_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB27_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB27_101
.LBB27_100:                             # %cond.false400
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB27_101:                             # %cond.end403
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB27_107
.LBB27_103:                             # %cond.false415
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB27_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB27_106
.LBB27_105:                             # %cond.false424
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB27_106:                             # %cond.end430
                                        #   in Loop: Header=BB27_7 Depth=1
.LBB27_107:                             # %cond.end432
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB27_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB27_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_114
.LBB27_110:                             # %cond.false440
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB27_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_113
.LBB27_112:                             # %cond.false446
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB27_113:                             # %cond.end448
                                        #   in Loop: Header=BB27_7 Depth=1
.LBB27_114:                             # %cond.end450
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB27_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_120
.LBB27_116:                             # %cond.false458
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB27_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_119
.LBB27_118:                             # %cond.false465
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB27_119:                             # %cond.end467
                                        #   in Loop: Header=BB27_7 Depth=1
.LBB27_120:                             # %cond.end469
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB27_134
.LBB27_121:                             # %if.else473
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB27_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_127
.LBB27_123:                             # %cond.false478
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB27_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB27_126
.LBB27_125:                             # %cond.false484
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB27_126:                             # %cond.end486
                                        #   in Loop: Header=BB27_7 Depth=1
.LBB27_127:                             # %cond.end488
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB27_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_133
.LBB27_129:                             # %cond.false496
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB27_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB27_132
.LBB27_131:                             # %cond.false503
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB27_132:                             # %cond.end505
                                        #   in Loop: Header=BB27_7 Depth=1
.LBB27_133:                             # %cond.end507
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB27_134:                             # %if.end511
                                        #   in Loop: Header=BB27_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB27_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB27_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB27_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB27_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB27_142
.LBB27_138:                             # %cond.false527
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB27_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB27_141
.LBB27_140:                             # %cond.false537
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB27_141:                             # %cond.end544
                                        #   in Loop: Header=BB27_7 Depth=1
.LBB27_142:                             # %cond.end546
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB27_143:                             # %if.end554
                                        #   in Loop: Header=BB27_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB27_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB27_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB27_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB27_150
.LBB27_146:                             # %cond.false568
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB27_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB27_149
.LBB27_148:                             # %cond.false578
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB27_149:                             # %cond.end585
                                        #   in Loop: Header=BB27_7 Depth=1
.LBB27_150:                             # %cond.end587
                                        #   in Loop: Header=BB27_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB27_151:                             # %if.end594
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_152
.LBB27_152:                             # %if.end595
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_153
.LBB27_153:                             # %if.end596
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_154
.LBB27_154:                             # %if.end597
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_155
.LBB27_155:                             # %if.end598
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_156
.LBB27_156:                             # %if.end599
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_157
.LBB27_157:                             # %if.end600
                                        #   in Loop: Header=BB27_7 Depth=1
	jmp	.LBB27_158
.LBB27_158:                             # %for.inc
                                        #   in Loop: Header=BB27_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB27_7
.LBB27_159:                             # %for.end
	cmpl	$1183986015, -180(%rbp) # imm = 0x4692315F
	jne	.LBB27_161
.LBB27_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_160
.Lfunc_end27:
	.size	EdgeLoop.24, .Lfunc_end27-EdgeLoop.24
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.25         # -- Begin function DeblockFrame.25
	.p2align	4, 0x90
	.type	DeblockFrame.25,@function
DeblockFrame.25:                        # @DeblockFrame.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1637730398, -8(%rbp)   # imm = 0x619DC85E
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB28_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB28_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB28_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_1
.LBB28_4:                               # %for.end
	cmpl	$1637730398, -8(%rbp)   # imm = 0x619DC85E
	jne	.LBB28_6
.LBB28_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_5
.Lfunc_end28:
	.size	DeblockFrame.25, .Lfunc_end28-DeblockFrame.25
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.26         # -- Begin function DeblockFrame.26
	.p2align	4, 0x90
	.type	DeblockFrame.26,@function
DeblockFrame.26:                        # @DeblockFrame.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$823111109, -8(%rbp)    # imm = 0x310FADC5
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB29_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_1
.LBB29_4:                               # %for.end
	cmpl	$823111109, -8(%rbp)    # imm = 0x310FADC5
	jne	.LBB29_6
.LBB29_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_5
.Lfunc_end29:
	.size	DeblockFrame.26, .Lfunc_end29-DeblockFrame.26
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.27          # -- Begin function GetStrength.27
	.p2align	4, 0x90
	.type	GetStrength.27,@function
GetStrength.27:                         # @GetStrength.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1431095768, -144(%rbp) # imm = 0x554CC9D8
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB30_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB30_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB30_5
.LBB30_4:                               # %cond.false
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB30_5:                               # %cond.end
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB30_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB30_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB30_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB30_9
.LBB30_8:                               # %cond.false15
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$1, %eax
	jmp	.LBB30_9
.LBB30_9:                               # %cond.end16
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_11
.LBB30_10:                              # %cond.false18
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-28(%rbp), %eax
.LBB30_11:                              # %cond.end19
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-152(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB30_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB30_25
.LBB30_13:                              # %if.then
                                        #   in Loop: Header=BB30_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB30_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB30_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB30_23
.LBB30_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB30_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB30_23
.LBB30_19:                              # %lor.rhs
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB30_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB30_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB30_22
.LBB30_21:                              # %land.rhs60
                                        #   in Loop: Header=BB30_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_22:                              # %land.end
                                        #   in Loop: Header=BB30_1 Depth=1
.LBB30_23:                              # %lor.end
                                        #   in Loop: Header=BB30_1 Depth=1
.LBB30_24:                              # %land.end62
                                        #   in Loop: Header=BB30_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB30_79
.LBB30_25:                              # %if.else
                                        #   in Loop: Header=BB30_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB30_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB30_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB30_35
.LBB30_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB30_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB30_35
.LBB30_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB30_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB30_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB30_34
.LBB30_33:                              # %land.rhs92
                                        #   in Loop: Header=BB30_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_34:                              # %land.end95
                                        #   in Loop: Header=BB30_1 Depth=1
.LBB30_35:                              # %lor.end96
                                        #   in Loop: Header=BB30_1 Depth=1
.LBB30_36:                              # %land.end97
                                        #   in Loop: Header=BB30_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB30_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB30_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB30_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB30_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB30_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB30_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB30_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB30_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB30_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB30_47
.LBB30_46:                              # %if.then144
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB30_77
.LBB30_47:                              # %if.else147
                                        #   in Loop: Header=BB30_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB30_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB30_76
.LBB30_49:                              # %if.else152
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-148(%rbp), %rsi
	leaq	-136(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB30_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB30_52
.LBB30_51:                              # %cond.false169
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB30_52:                              # %cond.end174
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB30_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB30_55
.LBB30_54:                              # %cond.false184
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB30_55:                              # %cond.end189
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB30_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB30_58
.LBB30_57:                              # %cond.false199
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB30_58:                              # %cond.end204
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB30_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB30_61
.LBB30_60:                              # %cond.false214
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB30_61:                              # %cond.end219
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, -168(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB30_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-168(%rbp), %rax
	je	.LBB30_65
.LBB30_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jne	.LBB30_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB30_74
.LBB30_65:                              # %if.then232
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB30_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB30_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB30_69
.LBB30_68:                              # %if.else309
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB30_69:                              # %if.end
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_73
.LBB30_70:                              # %if.else380
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB30_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB30_72:                              # %land.end518
                                        #   in Loop: Header=BB30_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB30_73:                              # %if.end522
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_75
.LBB30_74:                              # %if.else523
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB30_75:                              # %if.end526
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_76
.LBB30_76:                              # %if.end527
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_77
.LBB30_77:                              # %if.end528
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_78
.LBB30_78:                              # %if.end529
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_79
.LBB30_79:                              # %if.end530
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_80
.LBB30_80:                              # %for.inc
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_1
.LBB30_81:                              # %for.end
	cmpl	$1431095768, -144(%rbp) # imm = 0x554CC9D8
	jne	.LBB30_83
.LBB30_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_82
.Lfunc_end30:
	.size	GetStrength.27, .Lfunc_end30-GetStrength.27
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.28            # -- Begin function DeblockMb.28
	.p2align	4, 0x90
	.type	DeblockMb.28,@function
DeblockMb.28:                           # @DeblockMb.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$797743945, -108(%rbp)  # imm = 0x2F8C9B49
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-100(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -100(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB31_2
# %bb.1:                                # %if.then
	jmp	.LBB31_2
.LBB31_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB31_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB31_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB31_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB31_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB31_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB31_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB31_9:                               # %land.end
.LBB31_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB31_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB31_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB31_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB31_61
.LBB31_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB31_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB31_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB31_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB31_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB31_20
.LBB31_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB31_20:                              # %if.end40
	jmp	.LBB31_21
.LBB31_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB31_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_29 Depth 2
                                        #       Child Loop BB31_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB31_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB31_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB31_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB31_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB31_28
.LBB31_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB31_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB31_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB31_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB31_27:                              # %land.end51
                                        #   in Loop: Header=BB31_22 Depth=1
.LBB31_28:                              # %lor.end52
                                        #   in Loop: Header=BB31_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB31_29:                              # %for.cond54
                                        #   Parent Loop BB31_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB31_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB31_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB31_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB31_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB31_56
.LBB31_32:                              # %if.then60
                                        #   in Loop: Header=BB31_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB31_33:                              # %for.cond70
                                        #   Parent Loop BB31_22 Depth=1
                                        #     Parent Loop BB31_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB31_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB31_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB31_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB31_33
.LBB31_36:                              # %for.end
                                        #   in Loop: Header=BB31_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB31_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB31_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB31_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB31_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB31_39:                              # %if.end84
                                        #   in Loop: Header=BB31_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB31_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB31_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB31_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB31_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB31_42:                              # %if.end100
                                        #   in Loop: Header=BB31_29 Depth=2
	jmp	.LBB31_43
.LBB31_43:                              # %if.end101
                                        #   in Loop: Header=BB31_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB31_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB31_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB31_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB31_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB31_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB31_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB31_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB31_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB31_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB31_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB31_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB31_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB31_50:                              # %if.end125
                                        #   in Loop: Header=BB31_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB31_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB31_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB31_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB31_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB31_53:                              # %if.end142
                                        #   in Loop: Header=BB31_29 Depth=2
	jmp	.LBB31_54
.LBB31_54:                              # %if.end143
                                        #   in Loop: Header=BB31_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB31_55:                              # %if.end145
                                        #   in Loop: Header=BB31_29 Depth=2
	jmp	.LBB31_56
.LBB31_56:                              # %if.end146
                                        #   in Loop: Header=BB31_29 Depth=2
	jmp	.LBB31_57
.LBB31_57:                              # %for.inc147
                                        #   in Loop: Header=BB31_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB31_29
.LBB31_58:                              # %for.end149
                                        #   in Loop: Header=BB31_22 Depth=1
	jmp	.LBB31_59
.LBB31_59:                              # %for.inc150
                                        #   in Loop: Header=BB31_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_22
.LBB31_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB31_61:                              # %return
	cmpl	$797743945, -108(%rbp)  # imm = 0x2F8C9B49
	jne	.LBB31_63
.LBB31_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_62
.Lfunc_end31:
	.size	DeblockMb.28, .Lfunc_end31-DeblockMb.28
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.29            # -- Begin function DeblockMb.29
	.p2align	4, 0x90
	.type	DeblockMb.29,@function
DeblockMb.29:                           # @DeblockMb.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1705958300, -104(%rbp) # imm = 0x65AEDB9C
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-112(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -112(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB32_2
# %bb.1:                                # %if.then
	jmp	.LBB32_2
.LBB32_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB32_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB32_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB32_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB32_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB32_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB32_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB32_9:                               # %land.end
.LBB32_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB32_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB32_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB32_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB32_61
.LBB32_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB32_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB32_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB32_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB32_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB32_20
.LBB32_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB32_20:                              # %if.end40
	jmp	.LBB32_21
.LBB32_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB32_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_29 Depth 2
                                        #       Child Loop BB32_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB32_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB32_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB32_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB32_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB32_28
.LBB32_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB32_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB32_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB32_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB32_27:                              # %land.end51
                                        #   in Loop: Header=BB32_22 Depth=1
.LBB32_28:                              # %lor.end52
                                        #   in Loop: Header=BB32_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB32_29:                              # %for.cond54
                                        #   Parent Loop BB32_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB32_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB32_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB32_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB32_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB32_56
.LBB32_32:                              # %if.then60
                                        #   in Loop: Header=BB32_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB32_33:                              # %for.cond70
                                        #   Parent Loop BB32_22 Depth=1
                                        #     Parent Loop BB32_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB32_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB32_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB32_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB32_33
.LBB32_36:                              # %for.end
                                        #   in Loop: Header=BB32_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB32_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB32_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB32_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB32_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB32_39:                              # %if.end84
                                        #   in Loop: Header=BB32_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB32_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB32_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB32_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB32_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB32_42:                              # %if.end100
                                        #   in Loop: Header=BB32_29 Depth=2
	jmp	.LBB32_43
.LBB32_43:                              # %if.end101
                                        #   in Loop: Header=BB32_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB32_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB32_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB32_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB32_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB32_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB32_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB32_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB32_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB32_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB32_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB32_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB32_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB32_50:                              # %if.end125
                                        #   in Loop: Header=BB32_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB32_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB32_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB32_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB32_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB32_53:                              # %if.end142
                                        #   in Loop: Header=BB32_29 Depth=2
	jmp	.LBB32_54
.LBB32_54:                              # %if.end143
                                        #   in Loop: Header=BB32_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB32_55:                              # %if.end145
                                        #   in Loop: Header=BB32_29 Depth=2
	jmp	.LBB32_56
.LBB32_56:                              # %if.end146
                                        #   in Loop: Header=BB32_29 Depth=2
	jmp	.LBB32_57
.LBB32_57:                              # %for.inc147
                                        #   in Loop: Header=BB32_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB32_29
.LBB32_58:                              # %for.end149
                                        #   in Loop: Header=BB32_22 Depth=1
	jmp	.LBB32_59
.LBB32_59:                              # %for.inc150
                                        #   in Loop: Header=BB32_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_22
.LBB32_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB32_61:                              # %return
	cmpl	$1705958300, -104(%rbp) # imm = 0x65AEDB9C
	jne	.LBB32_63
.LBB32_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_62
.Lfunc_end32:
	.size	DeblockMb.29, .Lfunc_end32-DeblockMb.29
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.30          # -- Begin function GetStrength.30
	.p2align	4, 0x90
	.type	GetStrength.30,@function
GetStrength.30:                         # @GetStrength.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$657628631, -136(%rbp)  # imm = 0x27329DD7
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB33_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB33_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB33_5
.LBB33_4:                               # %cond.false
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB33_5:                               # %cond.end
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB33_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB33_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB33_9
.LBB33_8:                               # %cond.false15
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$1, %eax
	jmp	.LBB33_9
.LBB33_9:                               # %cond.end16
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_11
.LBB33_10:                              # %cond.false18
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-28(%rbp), %eax
.LBB33_11:                              # %cond.end19
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB33_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB33_25
.LBB33_13:                              # %if.then
                                        #   in Loop: Header=BB33_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB33_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB33_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB33_23
.LBB33_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB33_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB33_23
.LBB33_19:                              # %lor.rhs
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB33_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB33_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB33_22
.LBB33_21:                              # %land.rhs60
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB33_22:                              # %land.end
                                        #   in Loop: Header=BB33_1 Depth=1
.LBB33_23:                              # %lor.end
                                        #   in Loop: Header=BB33_1 Depth=1
.LBB33_24:                              # %land.end62
                                        #   in Loop: Header=BB33_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB33_79
.LBB33_25:                              # %if.else
                                        #   in Loop: Header=BB33_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB33_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB33_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB33_35
.LBB33_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB33_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB33_35
.LBB33_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB33_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB33_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB33_34
.LBB33_33:                              # %land.rhs92
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB33_34:                              # %land.end95
                                        #   in Loop: Header=BB33_1 Depth=1
.LBB33_35:                              # %lor.end96
                                        #   in Loop: Header=BB33_1 Depth=1
.LBB33_36:                              # %land.end97
                                        #   in Loop: Header=BB33_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB33_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB33_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB33_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB33_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB33_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB33_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB33_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB33_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB33_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB33_47
.LBB33_46:                              # %if.then144
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB33_77
.LBB33_47:                              # %if.else147
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB33_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB33_76
.LBB33_49:                              # %if.else152
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-132(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB33_52
.LBB33_51:                              # %cond.false169
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB33_52:                              # %cond.end174
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB33_55
.LBB33_54:                              # %cond.false184
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB33_55:                              # %cond.end189
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB33_58
.LBB33_57:                              # %cond.false199
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB33_58:                              # %cond.end204
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB33_61
.LBB33_60:                              # %cond.false214
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB33_61:                              # %cond.end219
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rax, -160(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB33_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-160(%rbp), %rax
	je	.LBB33_65
.LBB33_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-160(%rbp), %rax
	jne	.LBB33_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB33_74
.LBB33_65:                              # %if.then232
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB33_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB33_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB33_69
.LBB33_68:                              # %if.else309
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB33_69:                              # %if.end
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_73
.LBB33_70:                              # %if.else380
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB33_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB33_72:                              # %land.end518
                                        #   in Loop: Header=BB33_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB33_73:                              # %if.end522
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_75
.LBB33_74:                              # %if.else523
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB33_75:                              # %if.end526
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_76
.LBB33_76:                              # %if.end527
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_77
.LBB33_77:                              # %if.end528
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_78
.LBB33_78:                              # %if.end529
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_79
.LBB33_79:                              # %if.end530
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_80
.LBB33_80:                              # %for.inc
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB33_1
.LBB33_81:                              # %for.end
	cmpl	$657628631, -136(%rbp)  # imm = 0x27329DD7
	jne	.LBB33_83
.LBB33_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_82
.Lfunc_end33:
	.size	GetStrength.30, .Lfunc_end33-GetStrength.30
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.31            # -- Begin function DeblockMb.31
	.p2align	4, 0x90
	.type	DeblockMb.31,@function
DeblockMb.31:                           # @DeblockMb.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$971698736, -108(%rbp)  # imm = 0x39EAF230
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB34_2
# %bb.1:                                # %if.then
	jmp	.LBB34_2
.LBB34_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB34_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB34_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB34_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB34_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB34_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB34_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB34_9:                               # %land.end
.LBB34_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB34_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB34_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB34_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB34_61
.LBB34_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB34_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB34_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB34_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB34_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB34_20
.LBB34_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB34_20:                              # %if.end40
	jmp	.LBB34_21
.LBB34_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB34_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_29 Depth 2
                                        #       Child Loop BB34_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB34_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB34_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB34_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB34_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB34_28
.LBB34_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB34_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB34_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB34_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB34_27:                              # %land.end51
                                        #   in Loop: Header=BB34_22 Depth=1
.LBB34_28:                              # %lor.end52
                                        #   in Loop: Header=BB34_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB34_29:                              # %for.cond54
                                        #   Parent Loop BB34_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB34_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB34_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB34_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB34_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB34_56
.LBB34_32:                              # %if.then60
                                        #   in Loop: Header=BB34_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -40(%rbp)
.LBB34_33:                              # %for.cond70
                                        #   Parent Loop BB34_22 Depth=1
                                        #     Parent Loop BB34_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB34_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB34_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB34_33
.LBB34_36:                              # %for.end
                                        #   in Loop: Header=BB34_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB34_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB34_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB34_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB34_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB34_39:                              # %if.end84
                                        #   in Loop: Header=BB34_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB34_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB34_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB34_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB34_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB34_42:                              # %if.end100
                                        #   in Loop: Header=BB34_29 Depth=2
	jmp	.LBB34_43
.LBB34_43:                              # %if.end101
                                        #   in Loop: Header=BB34_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB34_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB34_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB34_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB34_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB34_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB34_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB34_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB34_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB34_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB34_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB34_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB34_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB34_50:                              # %if.end125
                                        #   in Loop: Header=BB34_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB34_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB34_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB34_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB34_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB34_53:                              # %if.end142
                                        #   in Loop: Header=BB34_29 Depth=2
	jmp	.LBB34_54
.LBB34_54:                              # %if.end143
                                        #   in Loop: Header=BB34_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB34_55:                              # %if.end145
                                        #   in Loop: Header=BB34_29 Depth=2
	jmp	.LBB34_56
.LBB34_56:                              # %if.end146
                                        #   in Loop: Header=BB34_29 Depth=2
	jmp	.LBB34_57
.LBB34_57:                              # %for.inc147
                                        #   in Loop: Header=BB34_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB34_29
.LBB34_58:                              # %for.end149
                                        #   in Loop: Header=BB34_22 Depth=1
	jmp	.LBB34_59
.LBB34_59:                              # %for.inc150
                                        #   in Loop: Header=BB34_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_22
.LBB34_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB34_61:                              # %return
	cmpl	$971698736, -108(%rbp)  # imm = 0x39EAF230
	jne	.LBB34_63
.LBB34_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_62
.Lfunc_end34:
	.size	DeblockMb.31, .Lfunc_end34-DeblockMb.31
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.32         # -- Begin function DeblockFrame.32
	.p2align	4, 0x90
	.type	DeblockFrame.32,@function
DeblockFrame.32:                        # @DeblockFrame.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1608149574, -8(%rbp)   # imm = 0x5FDA6A46
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB35_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_1
.LBB35_4:                               # %for.end
	cmpl	$1608149574, -8(%rbp)   # imm = 0x5FDA6A46
	jne	.LBB35_6
.LBB35_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_5
.Lfunc_end35:
	.size	DeblockFrame.32, .Lfunc_end35-DeblockFrame.32
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.33             # -- Begin function EdgeLoop.33
	.p2align	4, 0x90
	.type	EdgeLoop.33,@function
EdgeLoop.33:                            # @EdgeLoop.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$2051014477, -184(%rbp) # imm = 0x7A3FFF4D
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -148(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -140(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB36_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB36_3
.LBB36_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB36_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB36_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB36_6
.LBB36_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB36_6
.LBB36_6:                               # %cond.end
	movl	%eax, -176(%rbp)
	movl	$0, -60(%rbp)
.LBB36_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB36_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB36_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB36_11
.LBB36_10:                              # %cond.false8
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB36_11:                              # %cond.end10
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB36_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB36_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB36_15
.LBB36_14:                              # %cond.false17
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$1, %eax
	jmp	.LBB36_15
.LBB36_15:                              # %cond.end18
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_17
.LBB36_16:                              # %cond.false20
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %eax
.LBB36_17:                              # %cond.end21
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-148(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	-164(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-148(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-164(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-148(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB36_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB36_19:                              # %lor.end
                                        #   in Loop: Header=BB36_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB36_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$8, -176(%rbp)
	jne	.LBB36_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB36_25
.LBB36_24:                              # %cond.false47
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB36_25:                              # %cond.end49
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_27
.LBB36_26:                              # %cond.false51
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB36_27:                              # %cond.end52
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%ecx, -188(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB36_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB36_157
.LBB36_29:                              # %if.then57
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB36_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB36_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB36_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB36_34
.LBB36_33:                              # %cond.false66
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	32(%rbp), %eax
.LBB36_34:                              # %cond.end67
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_36
.LBB36_35:                              # %cond.false69
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$1, %eax
	jmp	.LBB36_36
.LBB36_36:                              # %cond.end70
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB36_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB36_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB36_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB36_41
.LBB36_40:                              # %cond.false81
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	32(%rbp), %eax
.LBB36_41:                              # %cond.end82
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_43
.LBB36_42:                              # %cond.false84
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$1, %eax
	jmp	.LBB36_43
.LBB36_43:                              # %cond.end85
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB36_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB36_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_50
.LBB36_46:                              # %cond.false105
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB36_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$51, %eax
	jmp	.LBB36_49
.LBB36_48:                              # %cond.false114
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB36_49:                              # %cond.end120
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_50:                              # %cond.end122
                                        #   in Loop: Header=BB36_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB36_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB36_56
.LBB36_52:                              # %cond.false135
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB36_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB36_55
.LBB36_54:                              # %cond.false144
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB36_55:                              # %cond.end150
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_56:                              # %cond.end152
                                        #   in Loop: Header=BB36_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB36_58
.LBB36_57:                              # %cond.false160
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB36_58:                              # %cond.end166
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_64
.LBB36_60:                              # %cond.false172
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB36_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$51, %eax
	jmp	.LBB36_63
.LBB36_62:                              # %cond.false177
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
.LBB36_63:                              # %cond.end179
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_64:                              # %cond.end181
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB36_70
.LBB36_66:                              # %cond.false187
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB36_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB36_69
.LBB36_68:                              # %cond.false192
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-140(%rbp), %ecx
.LBB36_69:                              # %cond.end194
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_70:                              # %cond.end196
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -196(%rbp)
	movslq	-168(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-196(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-168(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -180(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB36_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -156(%rbp)
	movl	-156(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB36_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB36_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB36_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB36_75:                              # %if.end271
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB36_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB36_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB36_97
.LBB36_78:                              # %if.else292
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-156(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-172(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB36_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB36_81
.LBB36_80:                              # %cond.false307
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB36_81:                              # %cond.end313
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB36_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB36_84
.LBB36_83:                              # %cond.false325
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB36_84:                              # %cond.end331
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB36_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB36_87
.LBB36_86:                              # %cond.false342
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-16(%rbp), %eax
.LBB36_87:                              # %cond.end343
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB36_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB36_90
.LBB36_89:                              # %cond.false355
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-12(%rbp), %eax
.LBB36_90:                              # %cond.end356
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB36_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB36_93
.LBB36_92:                              # %cond.false371
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-32(%rbp), %eax
.LBB36_93:                              # %cond.end372
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB36_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB36_96
.LBB36_95:                              # %cond.false387
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-36(%rbp), %eax
.LBB36_96:                              # %cond.end388
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB36_97:                              # %if.end395
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_153
.LBB36_98:                              # %if.else396
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB36_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB36_101
.LBB36_100:                             # %cond.false400
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB36_101:                             # %cond.end403
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB36_107
.LBB36_103:                             # %cond.false415
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB36_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB36_106
.LBB36_105:                             # %cond.false424
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB36_106:                             # %cond.end430
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_107:                             # %cond.end432
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB36_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_114
.LBB36_110:                             # %cond.false440
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB36_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB36_113
.LBB36_112:                             # %cond.false446
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB36_113:                             # %cond.end448
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_114:                             # %cond.end450
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_120
.LBB36_116:                             # %cond.false458
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB36_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB36_119
.LBB36_118:                             # %cond.false465
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB36_119:                             # %cond.end467
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_120:                             # %cond.end469
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB36_134
.LBB36_121:                             # %if.else473
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_127
.LBB36_123:                             # %cond.false478
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB36_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB36_126
.LBB36_125:                             # %cond.false484
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB36_126:                             # %cond.end486
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_127:                             # %cond.end488
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_133
.LBB36_129:                             # %cond.false496
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB36_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB36_132
.LBB36_131:                             # %cond.false503
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB36_132:                             # %cond.end505
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_133:                             # %cond.end507
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB36_134:                             # %if.end511
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB36_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB36_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB36_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB36_142
.LBB36_138:                             # %cond.false527
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB36_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB36_141
.LBB36_140:                             # %cond.false537
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB36_141:                             # %cond.end544
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_142:                             # %cond.end546
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB36_143:                             # %if.end554
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB36_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-40(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB36_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB36_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB36_150
.LBB36_146:                             # %cond.false568
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB36_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB36_149
.LBB36_148:                             # %cond.false578
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB36_149:                             # %cond.end585
                                        #   in Loop: Header=BB36_7 Depth=1
.LBB36_150:                             # %cond.end587
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB36_151:                             # %if.end594
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_152
.LBB36_152:                             # %if.end595
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_153
.LBB36_153:                             # %if.end596
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_154
.LBB36_154:                             # %if.end597
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_155
.LBB36_155:                             # %if.end598
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_156
.LBB36_156:                             # %if.end599
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_157
.LBB36_157:                             # %if.end600
                                        #   in Loop: Header=BB36_7 Depth=1
	jmp	.LBB36_158
.LBB36_158:                             # %for.inc
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB36_7
.LBB36_159:                             # %for.end
	cmpl	$2051014477, -184(%rbp) # imm = 0x7A3FFF4D
	jne	.LBB36_161
.LBB36_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_160
.Lfunc_end36:
	.size	EdgeLoop.33, .Lfunc_end36-EdgeLoop.33
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.34            # -- Begin function DeblockMb.34
	.p2align	4, 0x90
	.type	DeblockMb.34,@function
DeblockMb.34:                           # @DeblockMb.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1460882831, -112(%rbp) # imm = 0x57134D8F
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB37_2
# %bb.1:                                # %if.then
	jmp	.LBB37_2
.LBB37_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB37_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB37_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB37_6
# %bb.5:                                # %if.then12
	movl	$0, -40(%rbp)
.LBB37_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB37_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB37_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB37_9:                               # %land.end
.LBB37_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB37_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB37_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB37_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB37_61
.LBB37_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB37_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB37_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB37_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB37_19
# %bb.18:                               # %if.then39
	movl	$1, -40(%rbp)
	jmp	.LBB37_20
.LBB37_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB37_20:                              # %if.end40
	jmp	.LBB37_21
.LBB37_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB37_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_29 Depth 2
                                        #       Child Loop BB37_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB37_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB37_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB37_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB37_22 Depth=1
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB37_28
.LBB37_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB37_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB37_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB37_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB37_27:                              # %land.end51
                                        #   in Loop: Header=BB37_22 Depth=1
.LBB37_28:                              # %lor.end52
                                        #   in Loop: Header=BB37_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB37_29:                              # %for.cond54
                                        #   Parent Loop BB37_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB37_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB37_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB37_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB37_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB37_56
.LBB37_32:                              # %if.then60
                                        #   in Loop: Header=BB37_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -44(%rbp)
.LBB37_33:                              # %for.cond70
                                        #   Parent Loop BB37_22 Depth=1
                                        #     Parent Loop BB37_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -44(%rbp)
	jge	.LBB37_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB37_33 Depth=3
	movslq	-44(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB37_33 Depth=3
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB37_33
.LBB37_36:                              # %for.end
                                        #   in Loop: Header=BB37_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB37_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB37_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB37_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB37_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB37_39:                              # %if.end84
                                        #   in Loop: Header=BB37_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB37_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB37_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB37_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB37_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB37_42:                              # %if.end100
                                        #   in Loop: Header=BB37_29 Depth=2
	jmp	.LBB37_43
.LBB37_43:                              # %if.end101
                                        #   in Loop: Header=BB37_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB37_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB37_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB37_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB37_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB37_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB37_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB37_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB37_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB37_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB37_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB37_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB37_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB37_50:                              # %if.end125
                                        #   in Loop: Header=BB37_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB37_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB37_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB37_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB37_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB37_53:                              # %if.end142
                                        #   in Loop: Header=BB37_29 Depth=2
	jmp	.LBB37_54
.LBB37_54:                              # %if.end143
                                        #   in Loop: Header=BB37_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB37_55:                              # %if.end145
                                        #   in Loop: Header=BB37_29 Depth=2
	jmp	.LBB37_56
.LBB37_56:                              # %if.end146
                                        #   in Loop: Header=BB37_29 Depth=2
	jmp	.LBB37_57
.LBB37_57:                              # %for.inc147
                                        #   in Loop: Header=BB37_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB37_29
.LBB37_58:                              # %for.end149
                                        #   in Loop: Header=BB37_22 Depth=1
	jmp	.LBB37_59
.LBB37_59:                              # %for.inc150
                                        #   in Loop: Header=BB37_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_22
.LBB37_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB37_61:                              # %return
	cmpl	$1460882831, -112(%rbp) # imm = 0x57134D8F
	jne	.LBB37_63
.LBB37_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_62
.Lfunc_end37:
	.size	DeblockMb.34, .Lfunc_end37-DeblockMb.34
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.35             # -- Begin function EdgeLoop.35
	.p2align	4, 0x90
	.type	EdgeLoop.35,@function
EdgeLoop.35:                            # @EdgeLoop.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1936927767, -196(%rbp) # imm = 0x73732C17
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -132(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB38_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB38_3
.LBB38_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB38_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB38_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB38_6
.LBB38_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB38_6
.LBB38_6:                               # %cond.end
	movl	%eax, -176(%rbp)
	movl	$0, -60(%rbp)
.LBB38_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB38_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB38_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB38_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB38_11
.LBB38_10:                              # %cond.false8
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB38_11:                              # %cond.end10
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	%eax, -172(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB38_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB38_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB38_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB38_15
.LBB38_14:                              # %cond.false17
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	$1, %eax
	jmp	.LBB38_15
.LBB38_15:                              # %cond.end18
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_17
.LBB38_16:                              # %cond.false20
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-60(%rbp), %eax
.LBB38_17:                              # %cond.end21
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-136(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	-164(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-172(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-164(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB38_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB38_19:                              # %lor.end
                                        #   in Loop: Header=BB38_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB38_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB38_7 Depth=1
	cmpl	$8, -176(%rbp)
	jne	.LBB38_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB38_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB38_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB38_25
.LBB38_24:                              # %cond.false47
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB38_25:                              # %cond.end49
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_27
.LBB38_26:                              # %cond.false51
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB38_27:                              # %cond.end52
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	%ecx, -184(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB38_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB38_157
.LBB38_29:                              # %if.then57
                                        #   in Loop: Header=BB38_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB38_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB38_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB38_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB38_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB38_34
.LBB38_33:                              # %cond.false66
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	32(%rbp), %eax
.LBB38_34:                              # %cond.end67
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_36
.LBB38_35:                              # %cond.false69
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	$1, %eax
	jmp	.LBB38_36
.LBB38_36:                              # %cond.end70
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB38_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB38_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB38_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB38_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB38_41
.LBB38_40:                              # %cond.false81
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	32(%rbp), %eax
.LBB38_41:                              # %cond.end82
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_43
.LBB38_42:                              # %cond.false84
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	$1, %eax
	jmp	.LBB38_43
.LBB38_43:                              # %cond.end85
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB38_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB38_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB38_50
.LBB38_46:                              # %cond.false105
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB38_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	$51, %eax
	jmp	.LBB38_49
.LBB38_48:                              # %cond.false114
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB38_49:                              # %cond.end120
                                        #   in Loop: Header=BB38_7 Depth=1
.LBB38_50:                              # %cond.end122
                                        #   in Loop: Header=BB38_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB38_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB38_56
.LBB38_52:                              # %cond.false135
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB38_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB38_55
.LBB38_54:                              # %cond.false144
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB38_55:                              # %cond.end150
                                        #   in Loop: Header=BB38_7 Depth=1
.LBB38_56:                              # %cond.end152
                                        #   in Loop: Header=BB38_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB38_58
.LBB38_57:                              # %cond.false160
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB38_58:                              # %cond.end166
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB38_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB38_64
.LBB38_60:                              # %cond.false172
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB38_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	$51, %eax
	jmp	.LBB38_63
.LBB38_62:                              # %cond.false177
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
.LBB38_63:                              # %cond.end179
                                        #   in Loop: Header=BB38_7 Depth=1
.LBB38_64:                              # %cond.end181
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-80(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB38_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB38_70
.LBB38_66:                              # %cond.false187
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB38_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB38_69
.LBB38_68:                              # %cond.false192
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-132(%rbp), %ecx
.LBB38_69:                              # %cond.end194
                                        #   in Loop: Header=BB38_7 Depth=1
.LBB38_70:                              # %cond.end196
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -180(%rbp)
	movslq	-156(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-180(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-156(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-88(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -188(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-184(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB38_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -148(%rbp)
	callq	abs
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB38_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB38_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB38_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB38_75:                              # %if.end271
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB38_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB38_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB38_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB38_97
.LBB38_78:                              # %if.else292
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-160(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-168(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB38_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB38_81
.LBB38_80:                              # %cond.false307
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB38_81:                              # %cond.end313
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB38_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB38_84
.LBB38_83:                              # %cond.false325
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB38_84:                              # %cond.end331
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB38_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB38_87
.LBB38_86:                              # %cond.false342
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-12(%rbp), %eax
.LBB38_87:                              # %cond.end343
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB38_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB38_90
.LBB38_89:                              # %cond.false355
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-16(%rbp), %eax
.LBB38_90:                              # %cond.end356
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB38_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB38_93
.LBB38_92:                              # %cond.false371
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-36(%rbp), %eax
.LBB38_93:                              # %cond.end372
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB38_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB38_96
.LBB38_95:                              # %cond.false387
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-44(%rbp), %eax
.LBB38_96:                              # %cond.end388
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB38_97:                              # %if.end395
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_153
.LBB38_98:                              # %if.else396
                                        #   in Loop: Header=BB38_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB38_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB38_101
.LBB38_100:                             # %cond.false400
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB38_101:                             # %cond.end403
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB38_107
.LBB38_103:                             # %cond.false415
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB38_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB38_106
.LBB38_105:                             # %cond.false424
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB38_106:                             # %cond.end430
                                        #   in Loop: Header=BB38_7 Depth=1
.LBB38_107:                             # %cond.end432
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB38_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB38_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB38_114
.LBB38_110:                             # %cond.false440
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB38_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB38_113
.LBB38_112:                             # %cond.false446
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB38_113:                             # %cond.end448
                                        #   in Loop: Header=BB38_7 Depth=1
.LBB38_114:                             # %cond.end450
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB38_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB38_120
.LBB38_116:                             # %cond.false458
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB38_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB38_119
.LBB38_118:                             # %cond.false465
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB38_119:                             # %cond.end467
                                        #   in Loop: Header=BB38_7 Depth=1
.LBB38_120:                             # %cond.end469
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB38_134
.LBB38_121:                             # %if.else473
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB38_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB38_127
.LBB38_123:                             # %cond.false478
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB38_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB38_126
.LBB38_125:                             # %cond.false484
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB38_126:                             # %cond.end486
                                        #   in Loop: Header=BB38_7 Depth=1
.LBB38_127:                             # %cond.end488
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB38_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB38_133
.LBB38_129:                             # %cond.false496
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB38_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB38_132
.LBB38_131:                             # %cond.false503
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB38_132:                             # %cond.end505
                                        #   in Loop: Header=BB38_7 Depth=1
.LBB38_133:                             # %cond.end507
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB38_134:                             # %if.end511
                                        #   in Loop: Header=BB38_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB38_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB38_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB38_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB38_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB38_142
.LBB38_138:                             # %cond.false527
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB38_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB38_141
.LBB38_140:                             # %cond.false537
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB38_141:                             # %cond.end544
                                        #   in Loop: Header=BB38_7 Depth=1
.LBB38_142:                             # %cond.end546
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB38_143:                             # %if.end554
                                        #   in Loop: Header=BB38_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB38_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB38_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB38_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB38_150
.LBB38_146:                             # %cond.false568
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB38_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB38_149
.LBB38_148:                             # %cond.false578
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB38_149:                             # %cond.end585
                                        #   in Loop: Header=BB38_7 Depth=1
.LBB38_150:                             # %cond.end587
                                        #   in Loop: Header=BB38_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB38_151:                             # %if.end594
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_152
.LBB38_152:                             # %if.end595
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_153
.LBB38_153:                             # %if.end596
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_154
.LBB38_154:                             # %if.end597
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_155
.LBB38_155:                             # %if.end598
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_156
.LBB38_156:                             # %if.end599
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_157
.LBB38_157:                             # %if.end600
                                        #   in Loop: Header=BB38_7 Depth=1
	jmp	.LBB38_158
.LBB38_158:                             # %for.inc
                                        #   in Loop: Header=BB38_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB38_7
.LBB38_159:                             # %for.end
	cmpl	$1936927767, -196(%rbp) # imm = 0x73732C17
	jne	.LBB38_161
.LBB38_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_160
.Lfunc_end38:
	.size	EdgeLoop.35, .Lfunc_end38-EdgeLoop.35
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.36         # -- Begin function DeblockFrame.36
	.p2align	4, 0x90
	.type	DeblockFrame.36,@function
DeblockFrame.36:                        # @DeblockFrame.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$944890410, -8(%rbp)    # imm = 0x3851E22A
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB39_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_1
.LBB39_4:                               # %for.end
	cmpl	$944890410, -8(%rbp)    # imm = 0x3851E22A
	jne	.LBB39_6
.LBB39_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_5
.Lfunc_end39:
	.size	DeblockFrame.36, .Lfunc_end39-DeblockFrame.36
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.37         # -- Begin function DeblockFrame.37
	.p2align	4, 0x90
	.type	DeblockFrame.37,@function
DeblockFrame.37:                        # @DeblockFrame.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$983653202, -8(%rbp)    # imm = 0x3AA15B52
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB40_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_1
.LBB40_4:                               # %for.end
	cmpl	$983653202, -8(%rbp)    # imm = 0x3AA15B52
	jne	.LBB40_6
.LBB40_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_5
.Lfunc_end40:
	.size	DeblockFrame.37, .Lfunc_end40-DeblockFrame.37
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.38             # -- Begin function EdgeLoop.38
	.p2align	4, 0x90
	.type	EdgeLoop.38,@function
EdgeLoop.38:                            # @EdgeLoop.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$228145696, -184(%rbp)  # imm = 0xD993A20
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -136(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB41_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB41_3
.LBB41_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB41_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB41_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB41_6
.LBB41_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB41_6
.LBB41_6:                               # %cond.end
	movl	%eax, -168(%rbp)
	movl	$0, -60(%rbp)
.LBB41_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-168(%rbp), %eax
	jge	.LBB41_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB41_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB41_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB41_11
.LBB41_10:                              # %cond.false8
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB41_11:                              # %cond.end10
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB41_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB41_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB41_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB41_15
.LBB41_14:                              # %cond.false17
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	$1, %eax
	jmp	.LBB41_15
.LBB41_15:                              # %cond.end18
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_17
.LBB41_16:                              # %cond.false20
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-60(%rbp), %eax
.LBB41_17:                              # %cond.end21
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-140(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	-156(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-140(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-156(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-140(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB41_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB41_19:                              # %lor.end
                                        #   in Loop: Header=BB41_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB41_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB41_7 Depth=1
	cmpl	$8, -168(%rbp)
	jne	.LBB41_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB41_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB41_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB41_25
.LBB41_24:                              # %cond.false47
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB41_25:                              # %cond.end49
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_27
.LBB41_26:                              # %cond.false51
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB41_27:                              # %cond.end52
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB41_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB41_157
.LBB41_29:                              # %if.then57
                                        #   in Loop: Header=BB41_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB41_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB41_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB41_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB41_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB41_34
.LBB41_33:                              # %cond.false66
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	32(%rbp), %eax
.LBB41_34:                              # %cond.end67
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_36
.LBB41_35:                              # %cond.false69
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	$1, %eax
	jmp	.LBB41_36
.LBB41_36:                              # %cond.end70
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	%eax, -80(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB41_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB41_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB41_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB41_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB41_41
.LBB41_40:                              # %cond.false81
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	32(%rbp), %eax
.LBB41_41:                              # %cond.end82
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_43
.LBB41_42:                              # %cond.false84
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	$1, %eax
	jmp	.LBB41_43
.LBB41_43:                              # %cond.end85
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	%eax, -76(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB41_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB41_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_50
.LBB41_46:                              # %cond.false105
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB41_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	$51, %eax
	jmp	.LBB41_49
.LBB41_48:                              # %cond.false114
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB41_49:                              # %cond.end120
                                        #   in Loop: Header=BB41_7 Depth=1
.LBB41_50:                              # %cond.end122
                                        #   in Loop: Header=BB41_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB41_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB41_56
.LBB41_52:                              # %cond.false135
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB41_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB41_55
.LBB41_54:                              # %cond.false144
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB41_55:                              # %cond.end150
                                        #   in Loop: Header=BB41_7 Depth=1
.LBB41_56:                              # %cond.end152
                                        #   in Loop: Header=BB41_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB41_58
.LBB41_57:                              # %cond.false160
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB41_58:                              # %cond.end166
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB41_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_64
.LBB41_60:                              # %cond.false172
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB41_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	$51, %eax
	jmp	.LBB41_63
.LBB41_62:                              # %cond.false177
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
.LBB41_63:                              # %cond.end179
                                        #   in Loop: Header=BB41_7 Depth=1
.LBB41_64:                              # %cond.end181
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB41_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB41_70
.LBB41_66:                              # %cond.false187
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB41_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB41_69
.LBB41_68:                              # %cond.false192
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-136(%rbp), %ecx
.LBB41_69:                              # %cond.end194
                                        #   in Loop: Header=BB41_7 Depth=1
.LBB41_70:                              # %cond.end196
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -180(%rbp)
	movslq	-164(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-180(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-164(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	subl	-76(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -188(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -196(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -176(%rbp)
	cmpl	$0, %eax
	je	.LBB41_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -148(%rbp)
	callq	abs
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB41_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-176(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB41_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB41_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB41_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB41_75:                              # %if.end271
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -44(%rbp)
	cmpl	$4, -176(%rbp)
	jne	.LBB41_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB41_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB41_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB41_97
.LBB41_78:                              # %if.else292
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-152(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-172(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB41_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB41_81
.LBB41_80:                              # %cond.false307
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB41_81:                              # %cond.end313
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB41_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB41_84
.LBB41_83:                              # %cond.false325
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB41_84:                              # %cond.end331
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB41_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB41_87
.LBB41_86:                              # %cond.false342
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-16(%rbp), %eax
.LBB41_87:                              # %cond.end343
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB41_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB41_90
.LBB41_89:                              # %cond.false355
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-12(%rbp), %eax
.LBB41_90:                              # %cond.end356
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB41_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB41_93
.LBB41_92:                              # %cond.false371
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-32(%rbp), %eax
.LBB41_93:                              # %cond.end372
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB41_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB41_96
.LBB41_95:                              # %cond.false387
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-36(%rbp), %eax
.LBB41_96:                              # %cond.end388
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB41_97:                              # %if.end395
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_153
.LBB41_98:                              # %if.else396
                                        #   in Loop: Header=BB41_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB41_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB41_101
.LBB41_100:                             # %cond.false400
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB41_101:                             # %cond.end403
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB41_107
.LBB41_103:                             # %cond.false415
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB41_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB41_106
.LBB41_105:                             # %cond.false424
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB41_106:                             # %cond.end430
                                        #   in Loop: Header=BB41_7 Depth=1
.LBB41_107:                             # %cond.end432
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB41_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB41_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_114
.LBB41_110:                             # %cond.false440
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB41_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_113
.LBB41_112:                             # %cond.false446
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB41_113:                             # %cond.end448
                                        #   in Loop: Header=BB41_7 Depth=1
.LBB41_114:                             # %cond.end450
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB41_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_120
.LBB41_116:                             # %cond.false458
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB41_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_119
.LBB41_118:                             # %cond.false465
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB41_119:                             # %cond.end467
                                        #   in Loop: Header=BB41_7 Depth=1
.LBB41_120:                             # %cond.end469
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB41_134
.LBB41_121:                             # %if.else473
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB41_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_127
.LBB41_123:                             # %cond.false478
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB41_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_126
.LBB41_125:                             # %cond.false484
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB41_126:                             # %cond.end486
                                        #   in Loop: Header=BB41_7 Depth=1
.LBB41_127:                             # %cond.end488
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB41_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_133
.LBB41_129:                             # %cond.false496
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB41_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_132
.LBB41_131:                             # %cond.false503
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB41_132:                             # %cond.end505
                                        #   in Loop: Header=BB41_7 Depth=1
.LBB41_133:                             # %cond.end507
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB41_134:                             # %if.end511
                                        #   in Loop: Header=BB41_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB41_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB41_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB41_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB41_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB41_142
.LBB41_138:                             # %cond.false527
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB41_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB41_141
.LBB41_140:                             # %cond.false537
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB41_141:                             # %cond.end544
                                        #   in Loop: Header=BB41_7 Depth=1
.LBB41_142:                             # %cond.end546
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB41_143:                             # %if.end554
                                        #   in Loop: Header=BB41_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB41_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB41_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB41_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB41_150
.LBB41_146:                             # %cond.false568
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB41_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB41_149
.LBB41_148:                             # %cond.false578
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB41_149:                             # %cond.end585
                                        #   in Loop: Header=BB41_7 Depth=1
.LBB41_150:                             # %cond.end587
                                        #   in Loop: Header=BB41_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB41_151:                             # %if.end594
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_152
.LBB41_152:                             # %if.end595
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_153
.LBB41_153:                             # %if.end596
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_154
.LBB41_154:                             # %if.end597
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_155
.LBB41_155:                             # %if.end598
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_156
.LBB41_156:                             # %if.end599
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_157
.LBB41_157:                             # %if.end600
                                        #   in Loop: Header=BB41_7 Depth=1
	jmp	.LBB41_158
.LBB41_158:                             # %for.inc
                                        #   in Loop: Header=BB41_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB41_7
.LBB41_159:                             # %for.end
	cmpl	$228145696, -184(%rbp)  # imm = 0xD993A20
	jne	.LBB41_161
.LBB41_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_160
.Lfunc_end41:
	.size	EdgeLoop.38, .Lfunc_end41-EdgeLoop.38
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.39             # -- Begin function EdgeLoop.39
	.p2align	4, 0x90
	.type	EdgeLoop.39,@function
EdgeLoop.39:                            # @EdgeLoop.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1112369634, -184(%rbp) # imm = 0x424D69E2
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -140(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB42_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB42_3
.LBB42_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB42_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB42_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB42_6
.LBB42_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB42_6
.LBB42_6:                               # %cond.end
	movl	%eax, -164(%rbp)
	movl	$0, -60(%rbp)
.LBB42_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-164(%rbp), %eax
	jge	.LBB42_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB42_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB42_11
.LBB42_10:                              # %cond.false8
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB42_11:                              # %cond.end10
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB42_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB42_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB42_15
.LBB42_14:                              # %cond.false17
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$1, %eax
	jmp	.LBB42_15
.LBB42_15:                              # %cond.end18
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_17
.LBB42_16:                              # %cond.false20
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %eax
.LBB42_17:                              # %cond.end21
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -172(%rbp)
	movl	-136(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	-172(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-160(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-172(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB42_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB42_19:                              # %lor.end
                                        #   in Loop: Header=BB42_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB42_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$8, -164(%rbp)
	jne	.LBB42_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB42_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB42_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB42_25
.LBB42_24:                              # %cond.false47
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB42_25:                              # %cond.end49
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_27
.LBB42_26:                              # %cond.false51
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB42_27:                              # %cond.end52
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%ecx, -188(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB42_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB42_157
.LBB42_29:                              # %if.then57
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB42_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB42_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB42_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB42_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB42_34
.LBB42_33:                              # %cond.false66
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	32(%rbp), %eax
.LBB42_34:                              # %cond.end67
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_36
.LBB42_35:                              # %cond.false69
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$1, %eax
	jmp	.LBB42_36
.LBB42_36:                              # %cond.end70
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB42_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB42_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB42_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB42_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB42_41
.LBB42_40:                              # %cond.false81
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	32(%rbp), %eax
.LBB42_41:                              # %cond.end82
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_43
.LBB42_42:                              # %cond.false84
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$1, %eax
	jmp	.LBB42_43
.LBB42_43:                              # %cond.end85
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -72(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB42_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB42_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_50
.LBB42_46:                              # %cond.false105
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB42_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$51, %eax
	jmp	.LBB42_49
.LBB42_48:                              # %cond.false114
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB42_49:                              # %cond.end120
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_50:                              # %cond.end122
                                        #   in Loop: Header=BB42_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB42_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB42_56
.LBB42_52:                              # %cond.false135
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB42_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB42_55
.LBB42_54:                              # %cond.false144
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB42_55:                              # %cond.end150
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_56:                              # %cond.end152
                                        #   in Loop: Header=BB42_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB42_58
.LBB42_57:                              # %cond.false160
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB42_58:                              # %cond.end166
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_64
.LBB42_60:                              # %cond.false172
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB42_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$51, %eax
	jmp	.LBB42_63
.LBB42_62:                              # %cond.false177
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-132(%rbp), %eax
.LBB42_63:                              # %cond.end179
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_64:                              # %cond.end181
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB42_70
.LBB42_66:                              # %cond.false187
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB42_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB42_69
.LBB42_68:                              # %cond.false192
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-140(%rbp), %ecx
.LBB42_69:                              # %cond.end194
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_70:                              # %cond.end196
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -180(%rbp)
	movslq	-168(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-180(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-168(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	subl	-72(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -192(%rbp)
	movq	-248(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -176(%rbp)
	cmpl	$0, %eax
	je	.LBB42_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -144(%rbp)
	callq	abs
	movl	%eax, -156(%rbp)
	movl	-156(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB42_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-176(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB42_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB42_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB42_75:                              # %if.end271
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -44(%rbp)
	cmpl	$4, -176(%rbp)
	jne	.LBB42_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB42_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB42_97
.LBB42_78:                              # %if.else292
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-156(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB42_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB42_81
.LBB42_80:                              # %cond.false307
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB42_81:                              # %cond.end313
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB42_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB42_84
.LBB42_83:                              # %cond.false325
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB42_84:                              # %cond.end331
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB42_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB42_87
.LBB42_86:                              # %cond.false342
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-16(%rbp), %eax
.LBB42_87:                              # %cond.end343
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB42_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB42_90
.LBB42_89:                              # %cond.false355
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-12(%rbp), %eax
.LBB42_90:                              # %cond.end356
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB42_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB42_93
.LBB42_92:                              # %cond.false371
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-36(%rbp), %eax
.LBB42_93:                              # %cond.end372
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB42_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB42_96
.LBB42_95:                              # %cond.false387
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-40(%rbp), %eax
.LBB42_96:                              # %cond.end388
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-72(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB42_97:                              # %if.end395
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_153
.LBB42_98:                              # %if.else396
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB42_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB42_101
.LBB42_100:                             # %cond.false400
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB42_101:                             # %cond.end403
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB42_107
.LBB42_103:                             # %cond.false415
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB42_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB42_106
.LBB42_105:                             # %cond.false424
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB42_106:                             # %cond.end430
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_107:                             # %cond.end432
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB42_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_114
.LBB42_110:                             # %cond.false440
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB42_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_113
.LBB42_112:                             # %cond.false446
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB42_113:                             # %cond.end448
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_114:                             # %cond.end450
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_120
.LBB42_116:                             # %cond.false458
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB42_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_119
.LBB42_118:                             # %cond.false465
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB42_119:                             # %cond.end467
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_120:                             # %cond.end469
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB42_134
.LBB42_121:                             # %if.else473
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_127
.LBB42_123:                             # %cond.false478
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB42_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB42_126
.LBB42_125:                             # %cond.false484
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB42_126:                             # %cond.end486
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_127:                             # %cond.end488
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB42_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB42_133
.LBB42_129:                             # %cond.false496
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB42_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB42_132
.LBB42_131:                             # %cond.false503
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB42_132:                             # %cond.end505
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_133:                             # %cond.end507
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB42_134:                             # %if.end511
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB42_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB42_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB42_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB42_142
.LBB42_138:                             # %cond.false527
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB42_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB42_141
.LBB42_140:                             # %cond.false537
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB42_141:                             # %cond.end544
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_142:                             # %cond.end546
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB42_143:                             # %if.end554
                                        #   in Loop: Header=BB42_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB42_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB42_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB42_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB42_150
.LBB42_146:                             # %cond.false568
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB42_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB42_149
.LBB42_148:                             # %cond.false578
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB42_149:                             # %cond.end585
                                        #   in Loop: Header=BB42_7 Depth=1
.LBB42_150:                             # %cond.end587
                                        #   in Loop: Header=BB42_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB42_151:                             # %if.end594
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_152
.LBB42_152:                             # %if.end595
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_153
.LBB42_153:                             # %if.end596
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_154
.LBB42_154:                             # %if.end597
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_155
.LBB42_155:                             # %if.end598
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_156
.LBB42_156:                             # %if.end599
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_157
.LBB42_157:                             # %if.end600
                                        #   in Loop: Header=BB42_7 Depth=1
	jmp	.LBB42_158
.LBB42_158:                             # %for.inc
                                        #   in Loop: Header=BB42_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB42_7
.LBB42_159:                             # %for.end
	cmpl	$1112369634, -184(%rbp) # imm = 0x424D69E2
	jne	.LBB42_161
.LBB42_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_160
.Lfunc_end42:
	.size	EdgeLoop.39, .Lfunc_end42-EdgeLoop.39
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.40             # -- Begin function EdgeLoop.40
	.p2align	4, 0x90
	.type	EdgeLoop.40,@function
EdgeLoop.40:                            # @EdgeLoop.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1384248602, -184(%rbp) # imm = 0x5281F51A
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, -132(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB43_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB43_3
.LBB43_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB43_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB43_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB43_6
.LBB43_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB43_6
.LBB43_6:                               # %cond.end
	movl	%eax, -160(%rbp)
	movl	$0, -60(%rbp)
.LBB43_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB43_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB43_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB43_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB43_11
.LBB43_10:                              # %cond.false8
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB43_11:                              # %cond.end10
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB43_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB43_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB43_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB43_15
.LBB43_14:                              # %cond.false17
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	$1, %eax
	jmp	.LBB43_15
.LBB43_15:                              # %cond.end18
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_17
.LBB43_16:                              # %cond.false20
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-60(%rbp), %eax
.LBB43_17:                              # %cond.end21
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-140(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	-168(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-140(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-168(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-140(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB43_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB43_19:                              # %lor.end
                                        #   in Loop: Header=BB43_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB43_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB43_7 Depth=1
	cmpl	$8, -160(%rbp)
	jne	.LBB43_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB43_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB43_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB43_25
.LBB43_24:                              # %cond.false47
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB43_25:                              # %cond.end49
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_27
.LBB43_26:                              # %cond.false51
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB43_27:                              # %cond.end52
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	%ecx, -196(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB43_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB43_157
.LBB43_29:                              # %if.then57
                                        #   in Loop: Header=BB43_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB43_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB43_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB43_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB43_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB43_34
.LBB43_33:                              # %cond.false66
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	32(%rbp), %eax
.LBB43_34:                              # %cond.end67
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_36
.LBB43_35:                              # %cond.false69
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	$1, %eax
	jmp	.LBB43_36
.LBB43_36:                              # %cond.end70
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB43_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB43_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB43_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB43_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB43_41
.LBB43_40:                              # %cond.false81
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	32(%rbp), %eax
.LBB43_41:                              # %cond.end82
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_43
.LBB43_42:                              # %cond.false84
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	$1, %eax
	jmp	.LBB43_43
.LBB43_43:                              # %cond.end85
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB43_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB43_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_50
.LBB43_46:                              # %cond.false105
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB43_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	$51, %eax
	jmp	.LBB43_49
.LBB43_48:                              # %cond.false114
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB43_49:                              # %cond.end120
                                        #   in Loop: Header=BB43_7 Depth=1
.LBB43_50:                              # %cond.end122
                                        #   in Loop: Header=BB43_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB43_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB43_56
.LBB43_52:                              # %cond.false135
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB43_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB43_55
.LBB43_54:                              # %cond.false144
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB43_55:                              # %cond.end150
                                        #   in Loop: Header=BB43_7 Depth=1
.LBB43_56:                              # %cond.end152
                                        #   in Loop: Header=BB43_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB43_58
.LBB43_57:                              # %cond.false160
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB43_58:                              # %cond.end166
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB43_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_64
.LBB43_60:                              # %cond.false172
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB43_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	$51, %eax
	jmp	.LBB43_63
.LBB43_62:                              # %cond.false177
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
.LBB43_63:                              # %cond.end179
                                        #   in Loop: Header=BB43_7 Depth=1
.LBB43_64:                              # %cond.end181
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB43_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB43_70
.LBB43_66:                              # %cond.false187
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB43_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB43_69
.LBB43_68:                              # %cond.false192
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-132(%rbp), %ecx
.LBB43_69:                              # %cond.end194
                                        #   in Loop: Header=BB43_7 Depth=1
.LBB43_70:                              # %cond.end196
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -192(%rbp)
	movslq	-156(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -136(%rbp)
	movslq	-192(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-156(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -188(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB43_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -148(%rbp)
	callq	abs
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB43_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB43_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB43_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB43_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB43_75:                              # %if.end271
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB43_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB43_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB43_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB43_97
.LBB43_78:                              # %if.else292
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-172(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-164(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB43_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB43_81
.LBB43_80:                              # %cond.false307
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB43_81:                              # %cond.end313
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB43_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB43_84
.LBB43_83:                              # %cond.false325
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB43_84:                              # %cond.end331
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB43_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB43_87
.LBB43_86:                              # %cond.false342
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-16(%rbp), %eax
.LBB43_87:                              # %cond.end343
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB43_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB43_90
.LBB43_89:                              # %cond.false355
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-12(%rbp), %eax
.LBB43_90:                              # %cond.end356
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB43_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB43_93
.LBB43_92:                              # %cond.false371
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-36(%rbp), %eax
.LBB43_93:                              # %cond.end372
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB43_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB43_96
.LBB43_95:                              # %cond.false387
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-44(%rbp), %eax
.LBB43_96:                              # %cond.end388
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB43_97:                              # %if.end395
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_153
.LBB43_98:                              # %if.else396
                                        #   in Loop: Header=BB43_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB43_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB43_101
.LBB43_100:                             # %cond.false400
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB43_101:                             # %cond.end403
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB43_107
.LBB43_103:                             # %cond.false415
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB43_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB43_106
.LBB43_105:                             # %cond.false424
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB43_106:                             # %cond.end430
                                        #   in Loop: Header=BB43_7 Depth=1
.LBB43_107:                             # %cond.end432
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB43_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB43_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_114
.LBB43_110:                             # %cond.false440
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB43_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_113
.LBB43_112:                             # %cond.false446
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB43_113:                             # %cond.end448
                                        #   in Loop: Header=BB43_7 Depth=1
.LBB43_114:                             # %cond.end450
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB43_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_120
.LBB43_116:                             # %cond.false458
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB43_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_119
.LBB43_118:                             # %cond.false465
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB43_119:                             # %cond.end467
                                        #   in Loop: Header=BB43_7 Depth=1
.LBB43_120:                             # %cond.end469
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB43_134
.LBB43_121:                             # %if.else473
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB43_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_127
.LBB43_123:                             # %cond.false478
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB43_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB43_126
.LBB43_125:                             # %cond.false484
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB43_126:                             # %cond.end486
                                        #   in Loop: Header=BB43_7 Depth=1
.LBB43_127:                             # %cond.end488
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB43_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_133
.LBB43_129:                             # %cond.false496
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB43_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB43_132
.LBB43_131:                             # %cond.false503
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB43_132:                             # %cond.end505
                                        #   in Loop: Header=BB43_7 Depth=1
.LBB43_133:                             # %cond.end507
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB43_134:                             # %if.end511
                                        #   in Loop: Header=BB43_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB43_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB43_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB43_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB43_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB43_142
.LBB43_138:                             # %cond.false527
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB43_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB43_141
.LBB43_140:                             # %cond.false537
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB43_141:                             # %cond.end544
                                        #   in Loop: Header=BB43_7 Depth=1
.LBB43_142:                             # %cond.end546
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB43_143:                             # %if.end554
                                        #   in Loop: Header=BB43_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB43_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB43_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB43_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB43_150
.LBB43_146:                             # %cond.false568
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB43_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB43_149
.LBB43_148:                             # %cond.false578
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB43_149:                             # %cond.end585
                                        #   in Loop: Header=BB43_7 Depth=1
.LBB43_150:                             # %cond.end587
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB43_151:                             # %if.end594
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_152
.LBB43_152:                             # %if.end595
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_153
.LBB43_153:                             # %if.end596
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_154
.LBB43_154:                             # %if.end597
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_155
.LBB43_155:                             # %if.end598
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_156
.LBB43_156:                             # %if.end599
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_157
.LBB43_157:                             # %if.end600
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_158
.LBB43_158:                             # %for.inc
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB43_7
.LBB43_159:                             # %for.end
	cmpl	$1384248602, -184(%rbp) # imm = 0x5281F51A
	jne	.LBB43_161
.LBB43_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_160
.Lfunc_end43:
	.size	EdgeLoop.40, .Lfunc_end43-EdgeLoop.40
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.41          # -- Begin function GetStrength.41
	.p2align	4, 0x90
	.type	GetStrength.41,@function
GetStrength.41:                         # @GetStrength.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$510485915, -136(%rbp)  # imm = 0x1E6D659B
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB44_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB44_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB44_5
.LBB44_4:                               # %cond.false
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB44_5:                               # %cond.end
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB44_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB44_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB44_9
.LBB44_8:                               # %cond.false15
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$1, %eax
	jmp	.LBB44_9
.LBB44_9:                               # %cond.end16
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_11
.LBB44_10:                              # %cond.false18
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-28(%rbp), %eax
.LBB44_11:                              # %cond.end19
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-152(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB44_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB44_25
.LBB44_13:                              # %if.then
                                        #   in Loop: Header=BB44_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB44_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB44_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB44_23
.LBB44_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB44_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB44_23
.LBB44_19:                              # %lor.rhs
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB44_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB44_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB44_22
.LBB44_21:                              # %land.rhs60
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB44_22:                              # %land.end
                                        #   in Loop: Header=BB44_1 Depth=1
.LBB44_23:                              # %lor.end
                                        #   in Loop: Header=BB44_1 Depth=1
.LBB44_24:                              # %land.end62
                                        #   in Loop: Header=BB44_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB44_79
.LBB44_25:                              # %if.else
                                        #   in Loop: Header=BB44_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB44_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB44_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB44_35
.LBB44_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB44_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB44_35
.LBB44_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB44_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB44_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB44_34
.LBB44_33:                              # %land.rhs92
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB44_34:                              # %land.end95
                                        #   in Loop: Header=BB44_1 Depth=1
.LBB44_35:                              # %lor.end96
                                        #   in Loop: Header=BB44_1 Depth=1
.LBB44_36:                              # %land.end97
                                        #   in Loop: Header=BB44_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB44_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB44_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB44_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB44_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB44_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB44_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB44_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB44_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB44_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB44_47
.LBB44_46:                              # %if.then144
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB44_77
.LBB44_47:                              # %if.else147
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB44_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB44_76
.LBB44_49:                              # %if.else152
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-140(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB44_52
.LBB44_51:                              # %cond.false169
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB44_52:                              # %cond.end174
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB44_55
.LBB44_54:                              # %cond.false184
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB44_55:                              # %cond.end189
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB44_58
.LBB44_57:                              # %cond.false199
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB44_58:                              # %cond.end204
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB44_61
.LBB44_60:                              # %cond.false214
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB44_61:                              # %cond.end219
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB44_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB44_65
.LBB44_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB44_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB44_74
.LBB44_65:                              # %if.then232
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB44_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB44_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB44_69
.LBB44_68:                              # %if.else309
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB44_69:                              # %if.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_73
.LBB44_70:                              # %if.else380
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB44_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB44_72:                              # %land.end518
                                        #   in Loop: Header=BB44_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB44_73:                              # %if.end522
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_75
.LBB44_74:                              # %if.else523
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB44_75:                              # %if.end526
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_76
.LBB44_76:                              # %if.end527
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_77
.LBB44_77:                              # %if.end528
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_78
.LBB44_78:                              # %if.end529
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_79
.LBB44_79:                              # %if.end530
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_80
.LBB44_80:                              # %for.inc
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_1
.LBB44_81:                              # %for.end
	cmpl	$510485915, -136(%rbp)  # imm = 0x1E6D659B
	jne	.LBB44_83
.LBB44_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_82
.Lfunc_end44:
	.size	GetStrength.41, .Lfunc_end44-GetStrength.41
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.42            # -- Begin function DeblockMb.42
	.p2align	4, 0x90
	.type	DeblockMb.42,@function
DeblockMb.42:                           # @DeblockMb.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$988008998, -100(%rbp)  # imm = 0x3AE3D226
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB45_2
# %bb.1:                                # %if.then
	jmp	.LBB45_2
.LBB45_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB45_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB45_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB45_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB45_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB45_9:                               # %land.end
.LBB45_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB45_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB45_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB45_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB45_61
.LBB45_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB45_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB45_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB45_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB45_20
.LBB45_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB45_20:                              # %if.end40
	jmp	.LBB45_21
.LBB45_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB45_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_29 Depth 2
                                        #       Child Loop BB45_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB45_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB45_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB45_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB45_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB45_28
.LBB45_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB45_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB45_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB45_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB45_27:                              # %land.end51
                                        #   in Loop: Header=BB45_22 Depth=1
.LBB45_28:                              # %lor.end52
                                        #   in Loop: Header=BB45_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB45_29:                              # %for.cond54
                                        #   Parent Loop BB45_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB45_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB45_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB45_56
.LBB45_32:                              # %if.then60
                                        #   in Loop: Header=BB45_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -40(%rbp)
.LBB45_33:                              # %for.cond70
                                        #   Parent Loop BB45_22 Depth=1
                                        #     Parent Loop BB45_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB45_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB45_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB45_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB45_33
.LBB45_36:                              # %for.end
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB45_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB45_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB45_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB45_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB45_39:                              # %if.end84
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB45_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB45_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB45_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB45_42:                              # %if.end100
                                        #   in Loop: Header=BB45_29 Depth=2
	jmp	.LBB45_43
.LBB45_43:                              # %if.end101
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB45_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB45_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB45_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB45_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB45_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB45_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB45_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB45_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB45_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB45_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB45_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB45_50:                              # %if.end125
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB45_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB45_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB45_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB45_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB45_53:                              # %if.end142
                                        #   in Loop: Header=BB45_29 Depth=2
	jmp	.LBB45_54
.LBB45_54:                              # %if.end143
                                        #   in Loop: Header=BB45_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB45_55:                              # %if.end145
                                        #   in Loop: Header=BB45_29 Depth=2
	jmp	.LBB45_56
.LBB45_56:                              # %if.end146
                                        #   in Loop: Header=BB45_29 Depth=2
	jmp	.LBB45_57
.LBB45_57:                              # %for.inc147
                                        #   in Loop: Header=BB45_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_29
.LBB45_58:                              # %for.end149
                                        #   in Loop: Header=BB45_22 Depth=1
	jmp	.LBB45_59
.LBB45_59:                              # %for.inc150
                                        #   in Loop: Header=BB45_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_22
.LBB45_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB45_61:                              # %return
	cmpl	$988008998, -100(%rbp)  # imm = 0x3AE3D226
	jne	.LBB45_63
.LBB45_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_62
.Lfunc_end45:
	.size	DeblockMb.42, .Lfunc_end45-DeblockMb.42
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.43            # -- Begin function DeblockMb.43
	.p2align	4, 0x90
	.type	DeblockMb.43,@function
DeblockMb.43:                           # @DeblockMb.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1732752853, -104(%rbp) # imm = 0x6747B5D5
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-112(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -112(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB46_2
# %bb.1:                                # %if.then
	jmp	.LBB46_2
.LBB46_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB46_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB46_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB46_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB46_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB46_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB46_9:                               # %land.end
.LBB46_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB46_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB46_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB46_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB46_61
.LBB46_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB46_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB46_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB46_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB46_20
.LBB46_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB46_20:                              # %if.end40
	jmp	.LBB46_21
.LBB46_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB46_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_29 Depth 2
                                        #       Child Loop BB46_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB46_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB46_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB46_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB46_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB46_28
.LBB46_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB46_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB46_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB46_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB46_27:                              # %land.end51
                                        #   in Loop: Header=BB46_22 Depth=1
.LBB46_28:                              # %lor.end52
                                        #   in Loop: Header=BB46_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -36(%rbp)
.LBB46_29:                              # %for.cond54
                                        #   Parent Loop BB46_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB46_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB46_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB46_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB46_29 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB46_56
.LBB46_32:                              # %if.then60
                                        #   in Loop: Header=BB46_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -40(%rbp)
.LBB46_33:                              # %for.cond70
                                        #   Parent Loop BB46_22 Depth=1
                                        #     Parent Loop BB46_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB46_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB46_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB46_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB46_33
.LBB46_36:                              # %for.end
                                        #   in Loop: Header=BB46_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB46_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB46_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB46_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB46_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB46_39:                              # %if.end84
                                        #   in Loop: Header=BB46_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB46_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB46_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB46_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB46_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-48(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB46_42:                              # %if.end100
                                        #   in Loop: Header=BB46_29 Depth=2
	jmp	.LBB46_43
.LBB46_43:                              # %if.end101
                                        #   in Loop: Header=BB46_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB46_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB46_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB46_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB46_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB46_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB46_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB46_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB46_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB46_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB46_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB46_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB46_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB46_50:                              # %if.end125
                                        #   in Loop: Header=BB46_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB46_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB46_29 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB46_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB46_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB46_53:                              # %if.end142
                                        #   in Loop: Header=BB46_29 Depth=2
	jmp	.LBB46_54
.LBB46_54:                              # %if.end143
                                        #   in Loop: Header=BB46_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB46_55:                              # %if.end145
                                        #   in Loop: Header=BB46_29 Depth=2
	jmp	.LBB46_56
.LBB46_56:                              # %if.end146
                                        #   in Loop: Header=BB46_29 Depth=2
	jmp	.LBB46_57
.LBB46_57:                              # %for.inc147
                                        #   in Loop: Header=BB46_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB46_29
.LBB46_58:                              # %for.end149
                                        #   in Loop: Header=BB46_22 Depth=1
	jmp	.LBB46_59
.LBB46_59:                              # %for.inc150
                                        #   in Loop: Header=BB46_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_22
.LBB46_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB46_61:                              # %return
	cmpl	$1732752853, -104(%rbp) # imm = 0x6747B5D5
	jne	.LBB46_63
.LBB46_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_62
.Lfunc_end46:
	.size	DeblockMb.43, .Lfunc_end46-DeblockMb.43
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.44          # -- Begin function GetStrength.44
	.p2align	4, 0x90
	.type	GetStrength.44,@function
GetStrength.44:                         # @GetStrength.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1913275956, -132(%rbp) # imm = 0x720A4634
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB47_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB47_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB47_5
.LBB47_4:                               # %cond.false
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB47_5:                               # %cond.end
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB47_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB47_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB47_9
.LBB47_8:                               # %cond.false15
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$1, %eax
	jmp	.LBB47_9
.LBB47_9:                               # %cond.end16
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_11
.LBB47_10:                              # %cond.false18
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-28(%rbp), %eax
.LBB47_11:                              # %cond.end19
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-148(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-152(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB47_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB47_25
.LBB47_13:                              # %if.then
                                        #   in Loop: Header=BB47_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB47_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB47_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB47_23
.LBB47_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB47_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB47_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB47_23
.LBB47_19:                              # %lor.rhs
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB47_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB47_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB47_22
.LBB47_21:                              # %land.rhs60
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_22:                              # %land.end
                                        #   in Loop: Header=BB47_1 Depth=1
.LBB47_23:                              # %lor.end
                                        #   in Loop: Header=BB47_1 Depth=1
.LBB47_24:                              # %land.end62
                                        #   in Loop: Header=BB47_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB47_79
.LBB47_25:                              # %if.else
                                        #   in Loop: Header=BB47_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB47_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB47_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB47_35
.LBB47_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB47_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB47_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB47_35
.LBB47_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB47_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB47_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB47_34
.LBB47_33:                              # %land.rhs92
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_34:                              # %land.end95
                                        #   in Loop: Header=BB47_1 Depth=1
.LBB47_35:                              # %lor.end96
                                        #   in Loop: Header=BB47_1 Depth=1
.LBB47_36:                              # %land.end97
                                        #   in Loop: Header=BB47_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB47_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB47_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB47_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB47_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB47_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB47_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB47_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB47_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB47_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB47_47
.LBB47_46:                              # %if.then144
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB47_77
.LBB47_47:                              # %if.else147
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB47_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB47_76
.LBB47_49:                              # %if.else152
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-136(%rbp), %rsi
	leaq	-144(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB47_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB47_52
.LBB47_51:                              # %cond.false169
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB47_52:                              # %cond.end174
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB47_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB47_55
.LBB47_54:                              # %cond.false184
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB47_55:                              # %cond.end189
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB47_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB47_58
.LBB47_57:                              # %cond.false199
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB47_58:                              # %cond.end204
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB47_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB47_61
.LBB47_60:                              # %cond.false214
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB47_61:                              # %cond.end219
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB47_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB47_65
.LBB47_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB47_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB47_74
.LBB47_65:                              # %if.then232
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB47_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB47_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB47_69
.LBB47_68:                              # %if.else309
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB47_69:                              # %if.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_73
.LBB47_70:                              # %if.else380
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB47_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB47_72:                              # %land.end518
                                        #   in Loop: Header=BB47_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB47_73:                              # %if.end522
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_75
.LBB47_74:                              # %if.else523
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB47_75:                              # %if.end526
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_76
.LBB47_76:                              # %if.end527
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_77
.LBB47_77:                              # %if.end528
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_78
.LBB47_78:                              # %if.end529
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_79
.LBB47_79:                              # %if.end530
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_80
.LBB47_80:                              # %for.inc
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB47_1
.LBB47_81:                              # %for.end
	cmpl	$1913275956, -132(%rbp) # imm = 0x720A4634
	jne	.LBB47_83
.LBB47_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_82
.Lfunc_end47:
	.size	GetStrength.44, .Lfunc_end47-GetStrength.44
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.45            # -- Begin function DeblockMb.45
	.p2align	4, 0x90
	.type	DeblockMb.45,@function
DeblockMb.45:                           # @DeblockMb.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$742249313, -100(%rbp)  # imm = 0x2C3DD361
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -68(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB48_2
# %bb.1:                                # %if.then
	jmp	.LBB48_2
.LBB48_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -68(%rbp)
	jne	.LBB48_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_6
# %bb.5:                                # %if.then12
	movl	$0, -48(%rbp)
.LBB48_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB48_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB48_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB48_9:                               # %land.end
.LBB48_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB48_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB48_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB48_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB48_61
.LBB48_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB48_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB48_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB48_19
# %bb.18:                               # %if.then39
	movl	$1, -48(%rbp)
	jmp	.LBB48_20
.LBB48_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -48(%rbp)
.LBB48_20:                              # %if.end40
	jmp	.LBB48_21
.LBB48_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB48_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_29 Depth 2
                                        #       Child Loop BB48_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB48_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB48_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB48_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB48_22 Depth=1
	cmpl	$0, -48(%rbp)
	movb	$1, %al
	jne	.LBB48_28
.LBB48_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB48_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB48_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB48_22 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
.LBB48_27:                              # %land.end51
                                        #   in Loop: Header=BB48_22 Depth=1
.LBB48_28:                              # %lor.end52
                                        #   in Loop: Header=BB48_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB48_29:                              # %for.cond54
                                        #   Parent Loop BB48_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB48_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB48_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB48_56
.LBB48_32:                              # %if.then60
                                        #   in Loop: Header=BB48_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -40(%rbp)
.LBB48_33:                              # %for.cond70
                                        #   Parent Loop BB48_22 Depth=1
                                        #     Parent Loop BB48_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -40(%rbp)
	jge	.LBB48_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB48_33 Depth=3
	movslq	-40(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB48_33 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB48_33
.LBB48_36:                              # %for.end
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB48_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB48_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB48_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB48_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB48_39:                              # %if.end84
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB48_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB48_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB48_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-44(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB48_42:                              # %if.end100
                                        #   in Loop: Header=BB48_29 Depth=2
	jmp	.LBB48_43
.LBB48_43:                              # %if.end101
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB48_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB48_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB48_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB48_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB48_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB48_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB48_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB48_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB48_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB48_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB48_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB48_50:                              # %if.end125
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB48_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB48_29 Depth=2
	cmpl	$0, -44(%rbp)
	jl	.LBB48_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB48_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB48_53:                              # %if.end142
                                        #   in Loop: Header=BB48_29 Depth=2
	jmp	.LBB48_54
.LBB48_54:                              # %if.end143
                                        #   in Loop: Header=BB48_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB48_55:                              # %if.end145
                                        #   in Loop: Header=BB48_29 Depth=2
	jmp	.LBB48_56
.LBB48_56:                              # %if.end146
                                        #   in Loop: Header=BB48_29 Depth=2
	jmp	.LBB48_57
.LBB48_57:                              # %for.inc147
                                        #   in Loop: Header=BB48_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_29
.LBB48_58:                              # %for.end149
                                        #   in Loop: Header=BB48_22 Depth=1
	jmp	.LBB48_59
.LBB48_59:                              # %for.inc150
                                        #   in Loop: Header=BB48_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_22
.LBB48_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB48_61:                              # %return
	cmpl	$742249313, -100(%rbp)  # imm = 0x2C3DD361
	jne	.LBB48_63
.LBB48_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_62
.Lfunc_end48:
	.size	DeblockMb.45, .Lfunc_end48-DeblockMb.45
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.46          # -- Begin function GetStrength.46
	.p2align	4, 0x90
	.type	GetStrength.46,@function
GetStrength.46:                         # @GetStrength.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1890627942, -136(%rbp) # imm = 0x70B0B166
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB49_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB49_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB49_5
.LBB49_4:                               # %cond.false
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB49_5:                               # %cond.end
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB49_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB49_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB49_9
.LBB49_8:                               # %cond.false15
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$1, %eax
	jmp	.LBB49_9
.LBB49_9:                               # %cond.end16
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_11
.LBB49_10:                              # %cond.false18
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-28(%rbp), %eax
.LBB49_11:                              # %cond.end19
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-148(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB49_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB49_25
.LBB49_13:                              # %if.then
                                        #   in Loop: Header=BB49_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB49_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB49_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB49_23
.LBB49_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB49_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB49_23
.LBB49_19:                              # %lor.rhs
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB49_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB49_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB49_22
.LBB49_21:                              # %land.rhs60
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_22:                              # %land.end
                                        #   in Loop: Header=BB49_1 Depth=1
.LBB49_23:                              # %lor.end
                                        #   in Loop: Header=BB49_1 Depth=1
.LBB49_24:                              # %land.end62
                                        #   in Loop: Header=BB49_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB49_79
.LBB49_25:                              # %if.else
                                        #   in Loop: Header=BB49_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB49_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB49_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB49_35
.LBB49_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB49_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB49_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB49_35
.LBB49_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB49_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB49_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB49_34
.LBB49_33:                              # %land.rhs92
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_34:                              # %land.end95
                                        #   in Loop: Header=BB49_1 Depth=1
.LBB49_35:                              # %lor.end96
                                        #   in Loop: Header=BB49_1 Depth=1
.LBB49_36:                              # %land.end97
                                        #   in Loop: Header=BB49_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB49_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB49_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB49_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB49_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB49_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB49_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB49_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB49_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB49_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB49_47
.LBB49_46:                              # %if.then144
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB49_77
.LBB49_47:                              # %if.else147
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB49_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB49_76
.LBB49_49:                              # %if.else152
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-132(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB49_52
.LBB49_51:                              # %cond.false169
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB49_52:                              # %cond.end174
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB49_55
.LBB49_54:                              # %cond.false184
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB49_55:                              # %cond.end189
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB49_58
.LBB49_57:                              # %cond.false199
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB49_58:                              # %cond.end204
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB49_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB49_61
.LBB49_60:                              # %cond.false214
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB49_61:                              # %cond.end219
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	%rax, -160(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB49_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-160(%rbp), %rax
	je	.LBB49_65
.LBB49_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-160(%rbp), %rax
	jne	.LBB49_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB49_74
.LBB49_65:                              # %if.then232
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB49_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB49_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB49_69
.LBB49_68:                              # %if.else309
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB49_69:                              # %if.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_73
.LBB49_70:                              # %if.else380
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB49_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB49_72:                              # %land.end518
                                        #   in Loop: Header=BB49_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB49_73:                              # %if.end522
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_75
.LBB49_74:                              # %if.else523
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB49_75:                              # %if.end526
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_76
.LBB49_76:                              # %if.end527
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_77
.LBB49_77:                              # %if.end528
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_78
.LBB49_78:                              # %if.end529
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_79
.LBB49_79:                              # %if.end530
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_80
.LBB49_80:                              # %for.inc
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_1
.LBB49_81:                              # %for.end
	cmpl	$1890627942, -136(%rbp) # imm = 0x70B0B166
	jne	.LBB49_83
.LBB49_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_82
.Lfunc_end49:
	.size	GetStrength.46, .Lfunc_end49-GetStrength.46
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.47             # -- Begin function EdgeLoop.47
	.p2align	4, 0x90
	.type	EdgeLoop.47,@function
EdgeLoop.47:                            # @EdgeLoop.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$158046230, -192(%rbp)  # imm = 0x96B9816
	movq	%rdi, -216(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -148(%rbp)
	movl	%r9d, -132(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -208(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB50_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB50_3
.LBB50_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB50_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB50_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB50_6
.LBB50_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB50_6
.LBB50_6:                               # %cond.end
	movl	%eax, -156(%rbp)
	movl	$0, -60(%rbp)
.LBB50_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB50_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB50_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB50_11
.LBB50_10:                              # %cond.false8
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB50_11:                              # %cond.end10
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -164(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB50_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB50_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB50_15
.LBB50_14:                              # %cond.false17
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$1, %eax
	jmp	.LBB50_15
.LBB50_15:                              # %cond.end18
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_17
.LBB50_16:                              # %cond.false20
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %eax
.LBB50_17:                              # %cond.end21
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-140(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	-176(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-140(%rbp), %edi
	movl	-164(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-176(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-140(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB50_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB50_19:                              # %lor.end
                                        #   in Loop: Header=BB50_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB50_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$8, -156(%rbp)
	jne	.LBB50_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB50_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB50_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB50_25
.LBB50_24:                              # %cond.false47
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB50_25:                              # %cond.end49
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_27
.LBB50_26:                              # %cond.false51
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB50_27:                              # %cond.end52
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%ecx, -196(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB50_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB50_157
.LBB50_29:                              # %if.then57
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB50_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB50_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB50_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB50_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB50_34
.LBB50_33:                              # %cond.false66
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	32(%rbp), %eax
.LBB50_34:                              # %cond.end67
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_36
.LBB50_35:                              # %cond.false69
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$1, %eax
	jmp	.LBB50_36
.LBB50_36:                              # %cond.end70
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB50_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB50_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB50_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB50_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB50_41
.LBB50_40:                              # %cond.false81
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	32(%rbp), %eax
.LBB50_41:                              # %cond.end82
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_43
.LBB50_42:                              # %cond.false84
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$1, %eax
	jmp	.LBB50_43
.LBB50_43:                              # %cond.end85
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-216(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-216(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB50_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB50_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_50
.LBB50_46:                              # %cond.false105
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB50_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$51, %eax
	jmp	.LBB50_49
.LBB50_48:                              # %cond.false114
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB50_49:                              # %cond.end120
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_50:                              # %cond.end122
                                        #   in Loop: Header=BB50_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB50_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB50_56
.LBB50_52:                              # %cond.false135
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB50_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB50_55
.LBB50_54:                              # %cond.false144
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB50_55:                              # %cond.end150
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_56:                              # %cond.end152
                                        #   in Loop: Header=BB50_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB50_58
.LBB50_57:                              # %cond.false160
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB50_58:                              # %cond.end166
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_64
.LBB50_60:                              # %cond.false172
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB50_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$51, %eax
	jmp	.LBB50_63
.LBB50_62:                              # %cond.false177
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-148(%rbp), %eax
.LBB50_63:                              # %cond.end179
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_64:                              # %cond.end181
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -172(%rbp)
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB50_70
.LBB50_66:                              # %cond.false187
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB50_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB50_69
.LBB50_68:                              # %cond.false192
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-132(%rbp), %ecx
.LBB50_69:                              # %cond.end194
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_70:                              # %cond.end196
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -180(%rbp)
	movslq	-172(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-180(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-172(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -188(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -184(%rbp)
	movq	-248(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
	cmpl	$0, %eax
	je	.LBB50_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -136(%rbp)
	callq	abs
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB50_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-208(%rbp), %rax
	movslq	-152(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB50_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB50_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB50_75:                              # %if.end271
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -152(%rbp)
	jne	.LBB50_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB50_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB50_97
.LBB50_78:                              # %if.else292
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-168(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-160(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB50_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB50_81
.LBB50_80:                              # %cond.false307
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB50_81:                              # %cond.end313
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB50_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB50_84
.LBB50_83:                              # %cond.false325
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB50_84:                              # %cond.end331
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB50_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB50_87
.LBB50_86:                              # %cond.false342
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-16(%rbp), %eax
.LBB50_87:                              # %cond.end343
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB50_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB50_90
.LBB50_89:                              # %cond.false355
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-12(%rbp), %eax
.LBB50_90:                              # %cond.end356
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB50_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB50_93
.LBB50_92:                              # %cond.false371
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-40(%rbp), %eax
.LBB50_93:                              # %cond.end372
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB50_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-188(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB50_96
.LBB50_95:                              # %cond.false387
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-32(%rbp), %eax
.LBB50_96:                              # %cond.end388
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB50_97:                              # %if.end395
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_153
.LBB50_98:                              # %if.else396
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB50_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB50_101
.LBB50_100:                             # %cond.false400
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
.LBB50_101:                             # %cond.end403
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB50_107
.LBB50_103:                             # %cond.false415
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB50_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB50_106
.LBB50_105:                             # %cond.false424
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB50_106:                             # %cond.end430
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_107:                             # %cond.end432
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB50_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_114
.LBB50_110:                             # %cond.false440
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB50_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_113
.LBB50_112:                             # %cond.false446
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB50_113:                             # %cond.end448
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_114:                             # %cond.end450
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_120
.LBB50_116:                             # %cond.false458
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB50_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_119
.LBB50_118:                             # %cond.false465
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB50_119:                             # %cond.end467
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_120:                             # %cond.end469
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB50_134
.LBB50_121:                             # %if.else473
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_127
.LBB50_123:                             # %cond.false478
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB50_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB50_126
.LBB50_125:                             # %cond.false484
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB50_126:                             # %cond.end486
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_127:                             # %cond.end488
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB50_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_133
.LBB50_129:                             # %cond.false496
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB50_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB50_132
.LBB50_131:                             # %cond.false503
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB50_132:                             # %cond.end505
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_133:                             # %cond.end507
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB50_134:                             # %if.end511
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB50_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB50_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB50_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB50_142
.LBB50_138:                             # %cond.false527
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB50_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB50_141
.LBB50_140:                             # %cond.false537
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB50_141:                             # %cond.end544
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_142:                             # %cond.end546
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB50_143:                             # %if.end554
                                        #   in Loop: Header=BB50_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB50_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB50_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB50_7 Depth=1
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	jmp	.LBB50_150
.LBB50_146:                             # %cond.false568
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB50_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB50_149
.LBB50_148:                             # %cond.false578
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB50_149:                             # %cond.end585
                                        #   in Loop: Header=BB50_7 Depth=1
.LBB50_150:                             # %cond.end587
                                        #   in Loop: Header=BB50_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB50_151:                             # %if.end594
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_152
.LBB50_152:                             # %if.end595
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_153
.LBB50_153:                             # %if.end596
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_154
.LBB50_154:                             # %if.end597
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_155
.LBB50_155:                             # %if.end598
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_156
.LBB50_156:                             # %if.end599
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_157
.LBB50_157:                             # %if.end600
                                        #   in Loop: Header=BB50_7 Depth=1
	jmp	.LBB50_158
.LBB50_158:                             # %for.inc
                                        #   in Loop: Header=BB50_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB50_7
.LBB50_159:                             # %for.end
	cmpl	$158046230, -192(%rbp)  # imm = 0x96B9816
	jne	.LBB50_161
.LBB50_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_160
.Lfunc_end50:
	.size	EdgeLoop.47, .Lfunc_end50-EdgeLoop.47
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.48            # -- Begin function DeblockMb.48
	.p2align	4, 0x90
	.type	DeblockMb.48,@function
DeblockMb.48:                           # @DeblockMb.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$697784974, -108(%rbp)  # imm = 0x29975A8E
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-104(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -104(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB51_2
# %bb.1:                                # %if.then
	jmp	.LBB51_2
.LBB51_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB51_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB51_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB51_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB51_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB51_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB51_9:                               # %land.end
.LBB51_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB51_12
# %bb.11:                               # %if.then21
	movl	$2, -56(%rbp)
.LBB51_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB51_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB51_61
.LBB51_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB51_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB51_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB51_20
.LBB51_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB51_20:                              # %if.end40
	jmp	.LBB51_21
.LBB51_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB51_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_29 Depth 2
                                        #       Child Loop BB51_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB51_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB51_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB51_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB51_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB51_28
.LBB51_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB51_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB51_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB51_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB51_27:                              # %land.end51
                                        #   in Loop: Header=BB51_22 Depth=1
.LBB51_28:                              # %lor.end52
                                        #   in Loop: Header=BB51_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -36(%rbp)
.LBB51_29:                              # %for.cond54
                                        #   Parent Loop BB51_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB51_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB51_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB51_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB51_29 Depth=2
	cmpl	$0, -112(%rbp)
	je	.LBB51_56
.LBB51_32:                              # %if.then60
                                        #   in Loop: Header=BB51_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-56(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$1, -48(%rbp)
.LBB51_33:                              # %for.cond70
                                        #   Parent Loop BB51_22 Depth=1
                                        #     Parent Loop BB51_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB51_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB51_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB51_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB51_33
.LBB51_36:                              # %for.end
                                        #   in Loop: Header=BB51_29 Depth=2
	cmpl	$0, -52(%rbp)
	je	.LBB51_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB51_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB51_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB51_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB51_39:                              # %if.end84
                                        #   in Loop: Header=BB51_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB51_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB51_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB51_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB51_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB51_42:                              # %if.end100
                                        #   in Loop: Header=BB51_29 Depth=2
	jmp	.LBB51_43
.LBB51_43:                              # %if.end101
                                        #   in Loop: Header=BB51_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB51_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB51_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB51_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB51_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB51_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB51_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB51_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB51_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB51_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB51_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB51_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB51_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB51_50:                              # %if.end125
                                        #   in Loop: Header=BB51_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB51_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB51_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB51_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB51_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB51_53:                              # %if.end142
                                        #   in Loop: Header=BB51_29 Depth=2
	jmp	.LBB51_54
.LBB51_54:                              # %if.end143
                                        #   in Loop: Header=BB51_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB51_55:                              # %if.end145
                                        #   in Loop: Header=BB51_29 Depth=2
	jmp	.LBB51_56
.LBB51_56:                              # %if.end146
                                        #   in Loop: Header=BB51_29 Depth=2
	jmp	.LBB51_57
.LBB51_57:                              # %for.inc147
                                        #   in Loop: Header=BB51_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB51_29
.LBB51_58:                              # %for.end149
                                        #   in Loop: Header=BB51_22 Depth=1
	jmp	.LBB51_59
.LBB51_59:                              # %for.inc150
                                        #   in Loop: Header=BB51_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_22
.LBB51_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB51_61:                              # %return
	cmpl	$697784974, -108(%rbp)  # imm = 0x29975A8E
	jne	.LBB51_63
.LBB51_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_62
.Lfunc_end51:
	.size	DeblockMb.48, .Lfunc_end51-DeblockMb.48
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.49             # -- Begin function EdgeLoop.49
	.p2align	4, 0x90
	.type	EdgeLoop.49,@function
EdgeLoop.49:                            # @EdgeLoop.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$172110268, -196(%rbp)  # imm = 0xA4231BC
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, -140(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB52_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB52_3
.LBB52_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB52_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB52_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB52_6
.LBB52_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB52_6
.LBB52_6:                               # %cond.end
	movl	%eax, -172(%rbp)
	movl	$0, -60(%rbp)
.LBB52_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB52_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB52_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB52_11
.LBB52_10:                              # %cond.false8
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB52_11:                              # %cond.end10
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -156(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB52_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB52_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB52_15
.LBB52_14:                              # %cond.false17
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$1, %eax
	jmp	.LBB52_15
.LBB52_15:                              # %cond.end18
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_17
.LBB52_16:                              # %cond.false20
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %eax
.LBB52_17:                              # %cond.end21
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-136(%rbp), %edi
	movl	-156(%rbp), %esi
	movl	-176(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-136(%rbp), %edi
	movl	-156(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-176(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-136(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB52_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB52_19:                              # %lor.end
                                        #   in Loop: Header=BB52_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB52_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$8, -172(%rbp)
	jne	.LBB52_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB52_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB52_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB52_25
.LBB52_24:                              # %cond.false47
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB52_25:                              # %cond.end49
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_27
.LBB52_26:                              # %cond.false51
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB52_27:                              # %cond.end52
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%ecx, -184(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB52_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB52_157
.LBB52_29:                              # %if.then57
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB52_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB52_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB52_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB52_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB52_34
.LBB52_33:                              # %cond.false66
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	32(%rbp), %eax
.LBB52_34:                              # %cond.end67
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_36
.LBB52_35:                              # %cond.false69
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$1, %eax
	jmp	.LBB52_36
.LBB52_36:                              # %cond.end70
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB52_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB52_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB52_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB52_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB52_41
.LBB52_40:                              # %cond.false81
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	32(%rbp), %eax
.LBB52_41:                              # %cond.end82
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_43
.LBB52_42:                              # %cond.false84
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$1, %eax
	jmp	.LBB52_43
.LBB52_43:                              # %cond.end85
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB52_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB52_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_50
.LBB52_46:                              # %cond.false105
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB52_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$51, %eax
	jmp	.LBB52_49
.LBB52_48:                              # %cond.false114
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB52_49:                              # %cond.end120
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_50:                              # %cond.end122
                                        #   in Loop: Header=BB52_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB52_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB52_56
.LBB52_52:                              # %cond.false135
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB52_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB52_55
.LBB52_54:                              # %cond.false144
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB52_55:                              # %cond.end150
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_56:                              # %cond.end152
                                        #   in Loop: Header=BB52_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB52_58
.LBB52_57:                              # %cond.false160
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB52_58:                              # %cond.end166
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_64
.LBB52_60:                              # %cond.false172
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB52_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$51, %eax
	jmp	.LBB52_63
.LBB52_62:                              # %cond.false177
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
.LBB52_63:                              # %cond.end179
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_64:                              # %cond.end181
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB52_70
.LBB52_66:                              # %cond.false187
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-140(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB52_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB52_69
.LBB52_68:                              # %cond.false192
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-140(%rbp), %ecx
.LBB52_69:                              # %cond.end194
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_70:                              # %cond.end196
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -188(%rbp)
	movslq	-168(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -132(%rbp)
	movslq	-188(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-168(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -32(%rbp)
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -192(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-184(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, %eax
	je	.LBB52_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -148(%rbp)
	callq	abs
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB52_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-164(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB52_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB52_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %edi
	subl	-32(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB52_75:                              # %if.end271
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -44(%rbp)
	cmpl	$4, -164(%rbp)
	jne	.LBB52_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB52_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB52_97
.LBB52_78:                              # %if.else292
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-160(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB52_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB52_81
.LBB52_80:                              # %cond.false307
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB52_81:                              # %cond.end313
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB52_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB52_84
.LBB52_83:                              # %cond.false325
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB52_84:                              # %cond.end331
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB52_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB52_87
.LBB52_86:                              # %cond.false342
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-12(%rbp), %eax
.LBB52_87:                              # %cond.end343
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB52_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB52_90
.LBB52_89:                              # %cond.false355
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-16(%rbp), %eax
.LBB52_90:                              # %cond.end356
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB52_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB52_93
.LBB52_92:                              # %cond.false371
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-40(%rbp), %eax
.LBB52_93:                              # %cond.end372
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB52_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-192(%rbp), %eax
	addl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB52_96
.LBB52_95:                              # %cond.false387
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-32(%rbp), %eax
.LBB52_96:                              # %cond.end388
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB52_97:                              # %if.end395
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_153
.LBB52_98:                              # %if.else396
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB52_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB52_101
.LBB52_100:                             # %cond.false400
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB52_101:                             # %cond.end403
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB52_107
.LBB52_103:                             # %cond.false415
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB52_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB52_106
.LBB52_105:                             # %cond.false424
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB52_106:                             # %cond.end430
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_107:                             # %cond.end432
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB52_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_114
.LBB52_110:                             # %cond.false440
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB52_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_113
.LBB52_112:                             # %cond.false446
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB52_113:                             # %cond.end448
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_114:                             # %cond.end450
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_120
.LBB52_116:                             # %cond.false458
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB52_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_119
.LBB52_118:                             # %cond.false465
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB52_119:                             # %cond.end467
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_120:                             # %cond.end469
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB52_134
.LBB52_121:                             # %if.else473
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_127
.LBB52_123:                             # %cond.false478
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB52_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_126
.LBB52_125:                             # %cond.false484
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB52_126:                             # %cond.end486
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_127:                             # %cond.end488
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB52_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_133
.LBB52_129:                             # %cond.false496
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB52_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_132
.LBB52_131:                             # %cond.false503
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB52_132:                             # %cond.end505
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_133:                             # %cond.end507
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB52_134:                             # %if.end511
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB52_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB52_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB52_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB52_142
.LBB52_138:                             # %cond.false527
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB52_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_141
.LBB52_140:                             # %cond.false537
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-32(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB52_141:                             # %cond.end544
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_142:                             # %cond.end546
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB52_143:                             # %if.end554
                                        #   in Loop: Header=BB52_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB52_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-44(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-36(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB52_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB52_7 Depth=1
	xorl	%eax, %eax
	subl	-36(%rbp), %eax
	jmp	.LBB52_150
.LBB52_146:                             # %cond.false568
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-36(%rbp), %eax
	jle	.LBB52_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_149
.LBB52_148:                             # %cond.false578
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB52_149:                             # %cond.end585
                                        #   in Loop: Header=BB52_7 Depth=1
.LBB52_150:                             # %cond.end587
                                        #   in Loop: Header=BB52_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB52_151:                             # %if.end594
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_152
.LBB52_152:                             # %if.end595
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_153
.LBB52_153:                             # %if.end596
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_154
.LBB52_154:                             # %if.end597
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_155
.LBB52_155:                             # %if.end598
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_156
.LBB52_156:                             # %if.end599
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_157
.LBB52_157:                             # %if.end600
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_158
.LBB52_158:                             # %for.inc
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB52_7
.LBB52_159:                             # %for.end
	cmpl	$172110268, -196(%rbp)  # imm = 0xA4231BC
	jne	.LBB52_161
.LBB52_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_160
.Lfunc_end52:
	.size	EdgeLoop.49, .Lfunc_end52-EdgeLoop.49
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.50          # -- Begin function GetStrength.50
	.p2align	4, 0x90
	.type	GetStrength.50,@function
GetStrength.50:                         # @GetStrength.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$1143059983, -140(%rbp) # imm = 0x4421B60F
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB53_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB53_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB53_5
.LBB53_4:                               # %cond.false
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB53_5:                               # %cond.end
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB53_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB53_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB53_9
.LBB53_8:                               # %cond.false15
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$1, %eax
	jmp	.LBB53_9
.LBB53_9:                               # %cond.end16
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_11
.LBB53_10:                              # %cond.false18
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-28(%rbp), %eax
.LBB53_11:                              # %cond.end19
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-136(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-152(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB53_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB53_25
.LBB53_13:                              # %if.then
                                        #   in Loop: Header=BB53_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB53_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB53_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB53_23
.LBB53_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB53_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB53_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB53_23
.LBB53_19:                              # %lor.rhs
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB53_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB53_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB53_22
.LBB53_21:                              # %land.rhs60
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB53_22:                              # %land.end
                                        #   in Loop: Header=BB53_1 Depth=1
.LBB53_23:                              # %lor.end
                                        #   in Loop: Header=BB53_1 Depth=1
.LBB53_24:                              # %land.end62
                                        #   in Loop: Header=BB53_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB53_79
.LBB53_25:                              # %if.else
                                        #   in Loop: Header=BB53_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB53_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB53_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB53_35
.LBB53_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB53_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB53_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB53_35
.LBB53_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB53_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB53_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB53_34
.LBB53_33:                              # %land.rhs92
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB53_34:                              # %land.end95
                                        #   in Loop: Header=BB53_1 Depth=1
.LBB53_35:                              # %lor.end96
                                        #   in Loop: Header=BB53_1 Depth=1
.LBB53_36:                              # %land.end97
                                        #   in Loop: Header=BB53_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB53_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB53_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB53_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB53_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB53_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB53_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB53_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB53_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB53_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB53_47
.LBB53_46:                              # %if.then144
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB53_77
.LBB53_47:                              # %if.else147
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB53_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB53_76
.LBB53_49:                              # %if.else152
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-144(%rbp), %rsi
	leaq	-132(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB53_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB53_52
.LBB53_51:                              # %cond.false169
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB53_52:                              # %cond.end174
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB53_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB53_55
.LBB53_54:                              # %cond.false184
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB53_55:                              # %cond.end189
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-192(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB53_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB53_58
.LBB53_57:                              # %cond.false199
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB53_58:                              # %cond.end204
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB53_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB53_61
.LBB53_60:                              # %cond.false214
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB53_61:                              # %cond.end219
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB53_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB53_65
.LBB53_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB53_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB53_74
.LBB53_65:                              # %if.then232
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB53_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB53_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB53_69
.LBB53_68:                              # %if.else309
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB53_69:                              # %if.end
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_73
.LBB53_70:                              # %if.else380
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB53_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB53_72:                              # %land.end518
                                        #   in Loop: Header=BB53_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB53_73:                              # %if.end522
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_75
.LBB53_74:                              # %if.else523
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB53_75:                              # %if.end526
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_76
.LBB53_76:                              # %if.end527
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_77
.LBB53_77:                              # %if.end528
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_78
.LBB53_78:                              # %if.end529
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_79
.LBB53_79:                              # %if.end530
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_80
.LBB53_80:                              # %for.inc
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB53_1
.LBB53_81:                              # %for.end
	cmpl	$1143059983, -140(%rbp) # imm = 0x4421B60F
	jne	.LBB53_83
.LBB53_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_82
.Lfunc_end53:
	.size	GetStrength.50, .Lfunc_end53-GetStrength.50
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.51          # -- Begin function GetStrength.51
	.p2align	4, 0x90
	.type	GetStrength.51,@function
GetStrength.51:                         # @GetStrength.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$851085356, -140(%rbp)  # imm = 0x32BA882C
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB54_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB54_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB54_5
.LBB54_4:                               # %cond.false
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB54_5:                               # %cond.end
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	%eax, -100(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB54_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB54_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB54_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB54_9
.LBB54_8:                               # %cond.false15
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$1, %eax
	jmp	.LBB54_9
.LBB54_9:                               # %cond.end16
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_11
.LBB54_10:                              # %cond.false18
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-28(%rbp), %eax
.LBB54_11:                              # %cond.end19
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-104(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-100(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB54_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB54_25
.LBB54_13:                              # %if.then
                                        #   in Loop: Header=BB54_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB54_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB54_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB54_23
.LBB54_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB54_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB54_23
.LBB54_19:                              # %lor.rhs
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB54_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB54_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB54_22
.LBB54_21:                              # %land.rhs60
                                        #   in Loop: Header=BB54_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_22:                              # %land.end
                                        #   in Loop: Header=BB54_1 Depth=1
.LBB54_23:                              # %lor.end
                                        #   in Loop: Header=BB54_1 Depth=1
.LBB54_24:                              # %land.end62
                                        #   in Loop: Header=BB54_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB54_79
.LBB54_25:                              # %if.else
                                        #   in Loop: Header=BB54_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB54_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB54_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB54_35
.LBB54_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB54_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB54_35
.LBB54_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB54_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB54_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB54_34
.LBB54_33:                              # %land.rhs92
                                        #   in Loop: Header=BB54_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB54_34:                              # %land.end95
                                        #   in Loop: Header=BB54_1 Depth=1
.LBB54_35:                              # %lor.end96
                                        #   in Loop: Header=BB54_1 Depth=1
.LBB54_36:                              # %land.end97
                                        #   in Loop: Header=BB54_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB54_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB54_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB54_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB54_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB54_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB54_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB54_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB54_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB54_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-136(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB54_47
.LBB54_46:                              # %if.then144
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB54_77
.LBB54_47:                              # %if.else147
                                        #   in Loop: Header=BB54_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB54_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB54_76
.LBB54_49:                              # %if.else152
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -24(%rbp)
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB54_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB54_52
.LBB54_51:                              # %cond.false169
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB54_52:                              # %cond.end174
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB54_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB54_55
.LBB54_54:                              # %cond.false184
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB54_55:                              # %cond.end189
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB54_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB54_58
.LBB54_57:                              # %cond.false199
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB54_58:                              # %cond.end204
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB54_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB54_61
.LBB54_60:                              # %cond.false214
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB54_61:                              # %cond.end219
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	%rax, -168(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB54_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-168(%rbp), %rax
	je	.LBB54_65
.LBB54_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jne	.LBB54_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB54_74
.LBB54_65:                              # %if.then232
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB54_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB54_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB54_69
.LBB54_68:                              # %if.else309
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB54_69:                              # %if.end
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_73
.LBB54_70:                              # %if.else380
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB54_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB54_72:                              # %land.end518
                                        #   in Loop: Header=BB54_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB54_73:                              # %if.end522
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_75
.LBB54_74:                              # %if.else523
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB54_75:                              # %if.end526
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_76
.LBB54_76:                              # %if.end527
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_77
.LBB54_77:                              # %if.end528
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_78
.LBB54_78:                              # %if.end529
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_79
.LBB54_79:                              # %if.end530
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_80
.LBB54_80:                              # %for.inc
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB54_1
.LBB54_81:                              # %for.end
	cmpl	$851085356, -140(%rbp)  # imm = 0x32BA882C
	jne	.LBB54_83
.LBB54_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_82
.Lfunc_end54:
	.size	GetStrength.51, .Lfunc_end54-GetStrength.51
	.cfi_endproc
                                        # -- End function
	.globl	DeblockMb.52            # -- Begin function DeblockMb.52
	.p2align	4, 0x90
	.type	DeblockMb.52,@function
DeblockMb.52:                           # @DeblockMb.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1955668954, -104(%rbp) # imm = 0x749123DA
	movq	%rdi, -16(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, %rax
	movq	%rax, -128(%rbp)
	movq	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag+8, %rax
	movq	%rax, -120(%rbp)
	movl	$4, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
	movl	-20(%rbp), %edi
	leaq	-112(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	callq	get_mb_pos
	cmpl	$0, -112(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -72(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB55_2
# %bb.1:                                # %if.then
	jmp	.LBB55_2
.LBB55_2:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 572(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB55_6
# %bb.3:                                # %land.lhs.true
	cmpl	$16, -72(%rbp)
	jne	.LBB55_6
# %bb.4:                                # %land.lhs.true10
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB55_6
# %bb.5:                                # %if.then12
	movl	$0, -44(%rbp)
.LBB55_6:                               # %if.end13
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	jne	.LBB55_10
# %bb.7:                                # %lor.rhs
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB55_9
# %bb.8:                                # %land.rhs
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB55_9:                               # %land.end
.LBB55_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB55_12
# %bb.11:                               # %if.then21
	movl	$2, -52(%rbp)
.LBB55_12:                              # %if.end22
	movq	-32(%rbp), %rax
	cmpl	$1, 612(%rax)
	jne	.LBB55_14
# %bb.13:                               # %if.then25
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
	jmp	.LBB55_61
.LBB55_14:                              # %if.end27
	movq	-32(%rbp), %rax
	cmpl	$2, 612(%rax)
	jne	.LBB55_21
# %bb.15:                               # %if.then31
	movq	-32(%rbp), %rax
	movl	552(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB55_19
# %bb.16:                               # %land.lhs.true34
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB55_19
# %bb.17:                               # %land.lhs.true37
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB55_19
# %bb.18:                               # %if.then39
	movl	$1, -44(%rbp)
	jmp	.LBB55_20
.LBB55_19:                              # %if.else
	movq	-32(%rbp), %rax
	movl	556(%rax), %eax
	movl	%eax, -44(%rbp)
.LBB55_20:                              # %if.end40
	jmp	.LBB55_21
.LBB55_21:                              # %if.end41
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movl	$0, -4(%rbp)
.LBB55_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_29 Depth 2
                                        #       Child Loop BB55_33 Depth 3
	cmpl	$2, -4(%rbp)
	jge	.LBB55_60
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB55_22 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB55_25
# %bb.24:                               # %land.lhs.true45
                                        #   in Loop: Header=BB55_22 Depth=1
	cmpl	$0, -44(%rbp)
	movb	$1, %al
	jne	.LBB55_28
.LBB55_25:                              # %lor.rhs47
                                        #   in Loop: Header=BB55_22 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -4(%rbp)
	jne	.LBB55_27
# %bb.26:                               # %land.rhs49
                                        #   in Loop: Header=BB55_22 Depth=1
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB55_27:                              # %land.end51
                                        #   in Loop: Header=BB55_22 Depth=1
.LBB55_28:                              # %lor.end52
                                        #   in Loop: Header=BB55_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -36(%rbp)
.LBB55_29:                              # %for.cond54
                                        #   Parent Loop BB55_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_33 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB55_58
# %bb.30:                               # %for.body57
                                        #   in Loop: Header=BB55_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB55_32
# %bb.31:                               # %lor.lhs.false
                                        #   in Loop: Header=BB55_29 Depth=2
	cmpl	$0, -100(%rbp)
	je	.LBB55_56
.LBB55_32:                              # %if.then60
                                        #   in Loop: Header=BB55_29 Depth=2
	leaq	-96(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$chroma_edge, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rax
	movslq	72700(%rax), %rax
	movsbl	(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	callq	GetStrength
	movzbl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$1, -48(%rbp)
.LBB55_33:                              # %for.cond70
                                        #   Parent Loop BB55_22 Depth=1
                                        #     Parent Loop BB55_29 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -48(%rbp)
	jge	.LBB55_36
# %bb.34:                               # %for.body73
                                        #   in Loop: Header=BB55_33 Depth=3
	movslq	-48(%rbp), %rax
	movzbl	-96(%rbp,%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB55_33 Depth=3
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB55_33
.LBB55_36:                              # %for.end
                                        #   in Loop: Header=BB55_29 Depth=2
	cmpl	$0, -56(%rbp)
	je	.LBB55_43
# %bb.37:                               # %if.then78
                                        #   in Loop: Header=BB55_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB55_39
# %bb.38:                               # %if.then82
                                        #   in Loop: Header=BB55_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-36(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB55_39:                              # %if.end84
                                        #   in Loop: Header=BB55_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB55_42
# %bb.40:                               # %land.lhs.true87
                                        #   in Loop: Header=BB55_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB55_42
# %bb.41:                               # %if.then90
                                        #   in Loop: Header=BB55_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r11d
	movl	-40(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB55_42:                              # %if.end100
                                        #   in Loop: Header=BB55_29 Depth=2
	jmp	.LBB55_43
.LBB55_43:                              # %if.end101
                                        #   in Loop: Header=BB55_29 Depth=2
	cmpl	$0, -4(%rbp)
	je	.LBB55_55
# %bb.44:                               # %land.lhs.true103
                                        #   in Loop: Header=BB55_29 Depth=2
	cmpl	$0, -36(%rbp)
	jne	.LBB55_55
# %bb.45:                               # %land.lhs.true105
                                        #   in Loop: Header=BB55_29 Depth=2
	movq	-32(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB55_55
# %bb.46:                               # %land.lhs.true108
                                        #   in Loop: Header=BB55_29 Depth=2
	movzbl	mixedModeEdgeFlag, %eax
	cmpl	$0, %eax
	je	.LBB55_55
# %bb.47:                               # %if.then111
                                        #   in Loop: Header=BB55_29 Depth=2
	leaq	-96(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	$2, 72636(%rax)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-52(%rbp), %r9d
	movl	$4, %r8d
	callq	GetStrength
	cmpl	$0, -96(%rbp)
	je	.LBB55_54
# %bb.48:                               # %if.then116
                                        #   in Loop: Header=BB55_29 Depth=2
	movslq	-36(%rbp), %rax
	cmpl	$0, -128(%rbp,%rax,4)
	je	.LBB55_50
# %bb.49:                               # %if.then120
                                        #   in Loop: Header=BB55_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-136(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
.LBB55_50:                              # %if.end125
                                        #   in Loop: Header=BB55_29 Depth=2
	cmpq	$0, -64(%rbp)
	je	.LBB55_53
# %bb.51:                               # %land.lhs.true128
                                        #   in Loop: Header=BB55_29 Depth=2
	cmpl	$0, -40(%rbp)
	jl	.LBB55_53
# %bb.52:                               # %if.then131
                                        #   in Loop: Header=BB55_29 Depth=2
	xorl	%eax, %eax
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$0, 32(%rsp)
	callq	EdgeLoop
	leaq	-96(%rbp), %rsi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	616(%rax), %r8d
	movq	-32(%rbp), %rax
	movl	620(%rax), %r9d
	movl	-4(%rbp), %r10d
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%r10d, (%rsp)
	movl	$4, 8(%rsp)
	movl	%eax, 16(%rsp)
	movl	$1, 24(%rsp)
	movl	$1, 32(%rsp)
	callq	EdgeLoop
.LBB55_53:                              # %if.end142
                                        #   in Loop: Header=BB55_29 Depth=2
	jmp	.LBB55_54
.LBB55_54:                              # %if.end143
                                        #   in Loop: Header=BB55_29 Depth=2
	movq	-16(%rbp), %rax
	movl	$1, 72636(%rax)
.LBB55_55:                              # %if.end145
                                        #   in Loop: Header=BB55_29 Depth=2
	jmp	.LBB55_56
.LBB55_56:                              # %if.end146
                                        #   in Loop: Header=BB55_29 Depth=2
	jmp	.LBB55_57
.LBB55_57:                              # %for.inc147
                                        #   in Loop: Header=BB55_29 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB55_29
.LBB55_58:                              # %for.end149
                                        #   in Loop: Header=BB55_22 Depth=1
	jmp	.LBB55_59
.LBB55_59:                              # %for.inc150
                                        #   in Loop: Header=BB55_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_22
.LBB55_60:                              # %for.end152
	movq	-16(%rbp), %rax
	movl	$0, 72636(%rax)
.LBB55_61:                              # %return
	cmpl	$1955668954, -104(%rbp) # imm = 0x749123DA
	jne	.LBB55_63
.LBB55_62:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_62
.Lfunc_end55:
	.size	DeblockMb.52, .Lfunc_end55-DeblockMb.52
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.53         # -- Begin function DeblockFrame.53
	.p2align	4, 0x90
	.type	DeblockFrame.53,@function
DeblockFrame.53:                        # @DeblockFrame.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$544645094, -8(%rbp)    # imm = 0x20769FE6
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB56_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_1
.LBB56_4:                               # %for.end
	cmpl	$544645094, -8(%rbp)    # imm = 0x20769FE6
	jne	.LBB56_6
.LBB56_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_5
.Lfunc_end56:
	.size	DeblockFrame.53, .Lfunc_end56-DeblockFrame.53
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.54          # -- Begin function GetStrength.54
	.p2align	4, 0x90
	.type	GetStrength.54,@function
GetStrength.54:                         # @GetStrength.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$817281103, -144(%rbp)  # imm = 0x30B6B84F
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-96(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB57_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB57_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB57_5
.LBB57_4:                               # %cond.false
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB57_5:                               # %cond.end
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB57_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB57_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB57_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB57_9
.LBB57_8:                               # %cond.false15
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	$1, %eax
	jmp	.LBB57_9
.LBB57_9:                               # %cond.end16
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_11
.LBB57_10:                              # %cond.false18
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-28(%rbp), %eax
.LBB57_11:                              # %cond.end19
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	532(%rax), %eax
	movq	-88(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-148(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB57_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB57_25
.LBB57_13:                              # %if.then
                                        #   in Loop: Header=BB57_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB57_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB57_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB57_23
.LBB57_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB57_23
.LBB57_19:                              # %lor.rhs
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB57_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB57_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB57_22
.LBB57_21:                              # %land.rhs60
                                        #   in Loop: Header=BB57_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB57_22:                              # %land.end
                                        #   in Loop: Header=BB57_1 Depth=1
.LBB57_23:                              # %lor.end
                                        #   in Loop: Header=BB57_1 Depth=1
.LBB57_24:                              # %land.end62
                                        #   in Loop: Header=BB57_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB57_79
.LBB57_25:                              # %if.else
                                        #   in Loop: Header=BB57_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB57_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB57_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB57_35
.LBB57_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB57_35
.LBB57_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB57_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB57_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB57_34
.LBB57_33:                              # %land.rhs92
                                        #   in Loop: Header=BB57_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB57_34:                              # %land.end95
                                        #   in Loop: Header=BB57_1 Depth=1
.LBB57_35:                              # %lor.end96
                                        #   in Loop: Header=BB57_1 Depth=1
.LBB57_36:                              # %land.end97
                                        #   in Loop: Header=BB57_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB57_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB57_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB57_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB57_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB57_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB57_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB57_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB57_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB57_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB57_47
.LBB57_46:                              # %if.then144
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB57_77
.LBB57_47:                              # %if.else147
                                        #   in Loop: Header=BB57_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB57_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB57_76
.LBB57_49:                              # %if.else152
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-96(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-132(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-92(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -20(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB57_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB57_52
.LBB57_51:                              # %cond.false169
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB57_52:                              # %cond.end174
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-184(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB57_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB57_55
.LBB57_54:                              # %cond.false184
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-168(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB57_55:                              # %cond.end189
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB57_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB57_58
.LBB57_57:                              # %cond.false199
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB57_58:                              # %cond.end204
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-176(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB57_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB57_61
.LBB57_60:                              # %cond.false214
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB57_61:                              # %cond.end219
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB57_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-192(%rbp), %rax
	je	.LBB57_65
.LBB57_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jne	.LBB57_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB57_74
.LBB57_65:                              # %if.then232
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB57_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB57_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB57_69
.LBB57_68:                              # %if.else309
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB57_69:                              # %if.end
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_73
.LBB57_70:                              # %if.else380
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB57_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB57_72:                              # %land.end518
                                        #   in Loop: Header=BB57_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB57_73:                              # %if.end522
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_75
.LBB57_74:                              # %if.else523
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB57_75:                              # %if.end526
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_76
.LBB57_76:                              # %if.end527
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_77
.LBB57_77:                              # %if.end528
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_78
.LBB57_78:                              # %if.end529
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_79
.LBB57_79:                              # %if.end530
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_80
.LBB57_80:                              # %for.inc
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB57_1
.LBB57_81:                              # %for.end
	cmpl	$817281103, -144(%rbp)  # imm = 0x30B6B84F
	jne	.LBB57_83
.LBB57_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_82
.Lfunc_end57:
	.size	GetStrength.54, .Lfunc_end57-GetStrength.54
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.55         # -- Begin function DeblockFrame.55
	.p2align	4, 0x90
	.type	DeblockFrame.55,@function
DeblockFrame.55:                        # @DeblockFrame.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$782615730, -8(%rbp)    # imm = 0x2EA5C4B2
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB58_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_4:                               # %for.end
	cmpl	$782615730, -8(%rbp)    # imm = 0x2EA5C4B2
	jne	.LBB58_6
.LBB58_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_5
.Lfunc_end58:
	.size	DeblockFrame.55, .Lfunc_end58-DeblockFrame.55
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.56             # -- Begin function EdgeLoop.56
	.p2align	4, 0x90
	.type	EdgeLoop.56,@function
EdgeLoop.56:                            # @EdgeLoop.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1051433618, -184(%rbp) # imm = 0x3EAB9A92
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -144(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -148(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB59_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB59_3
.LBB59_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB59_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB59_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB59_6
.LBB59_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB59_6
.LBB59_6:                               # %cond.end
	movl	%eax, -152(%rbp)
	movl	$0, -60(%rbp)
.LBB59_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-152(%rbp), %eax
	jge	.LBB59_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB59_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB59_11
.LBB59_10:                              # %cond.false8
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB59_11:                              # %cond.end10
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB59_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB59_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB59_15
.LBB59_14:                              # %cond.false17
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$1, %eax
	jmp	.LBB59_15
.LBB59_15:                              # %cond.end18
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_17
.LBB59_16:                              # %cond.false20
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %eax
.LBB59_17:                              # %cond.end21
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -168(%rbp)
	movl	-144(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	-168(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-144(%rbp), %edi
	movl	-176(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-168(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -252(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-144(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB59_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB59_19:                              # %lor.end
                                        #   in Loop: Header=BB59_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB59_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$8, -152(%rbp)
	jne	.LBB59_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB59_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB59_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB59_25
.LBB59_24:                              # %cond.false47
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB59_25:                              # %cond.end49
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_27
.LBB59_26:                              # %cond.false51
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB59_27:                              # %cond.end52
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%ecx, -188(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB59_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB59_157
.LBB59_29:                              # %if.then57
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB59_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB59_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB59_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB59_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB59_34
.LBB59_33:                              # %cond.false66
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	32(%rbp), %eax
.LBB59_34:                              # %cond.end67
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_36
.LBB59_35:                              # %cond.false69
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$1, %eax
	jmp	.LBB59_36
.LBB59_36:                              # %cond.end70
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB59_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB59_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB59_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB59_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB59_41
.LBB59_40:                              # %cond.false81
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	32(%rbp), %eax
.LBB59_41:                              # %cond.end82
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_43
.LBB59_42:                              # %cond.false84
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$1, %eax
	jmp	.LBB59_43
.LBB59_43:                              # %cond.end85
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -72(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB59_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB59_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_50
.LBB59_46:                              # %cond.false105
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB59_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$51, %eax
	jmp	.LBB59_49
.LBB59_48:                              # %cond.false114
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB59_49:                              # %cond.end120
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_50:                              # %cond.end122
                                        #   in Loop: Header=BB59_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB59_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB59_56
.LBB59_52:                              # %cond.false135
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB59_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB59_55
.LBB59_54:                              # %cond.false144
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB59_55:                              # %cond.end150
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_56:                              # %cond.end152
                                        #   in Loop: Header=BB59_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB59_58
.LBB59_57:                              # %cond.false160
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB59_58:                              # %cond.end166
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_64
.LBB59_60:                              # %cond.false172
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB59_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$51, %eax
	jmp	.LBB59_63
.LBB59_62:                              # %cond.false177
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-136(%rbp), %eax
.LBB59_63:                              # %cond.end179
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_64:                              # %cond.end181
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -156(%rbp)
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB59_70
.LBB59_66:                              # %cond.false187
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-80(%rbp), %eax
	addl	-148(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB59_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB59_69
.LBB59_68:                              # %cond.false192
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-80(%rbp), %ecx
	addl	-148(%rbp), %ecx
.LBB59_69:                              # %cond.end194
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_70:                              # %cond.end196
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -192(%rbp)
	movslq	-156(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -140(%rbp)
	movslq	-192(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-156(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	xorl	%edx, %edx
	subl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	subl	-72(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-96(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, %eax
	je	.LBB59_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-20(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB59_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-160(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB59_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB59_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB59_75:                              # %if.end271
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -160(%rbp)
	jne	.LBB59_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB59_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB59_97
.LBB59_78:                              # %if.else292
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-164(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-172(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB59_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB59_81
.LBB59_80:                              # %cond.false307
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB59_81:                              # %cond.end313
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB59_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB59_84
.LBB59_83:                              # %cond.false325
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB59_84:                              # %cond.end331
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB59_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB59_87
.LBB59_86:                              # %cond.false342
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-16(%rbp), %eax
.LBB59_87:                              # %cond.end343
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB59_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB59_90
.LBB59_89:                              # %cond.false355
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-12(%rbp), %eax
.LBB59_90:                              # %cond.end356
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB59_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB59_93
.LBB59_92:                              # %cond.false371
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-40(%rbp), %eax
.LBB59_93:                              # %cond.end372
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB59_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB59_96
.LBB59_95:                              # %cond.false387
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-44(%rbp), %eax
.LBB59_96:                              # %cond.end388
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB59_97:                              # %if.end395
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_153
.LBB59_98:                              # %if.else396
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB59_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB59_101
.LBB59_100:                             # %cond.false400
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB59_101:                             # %cond.end403
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB59_107
.LBB59_103:                             # %cond.false415
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB59_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB59_106
.LBB59_105:                             # %cond.false424
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-12(%rbp), %ecx
	subl	-16(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB59_106:                             # %cond.end430
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_107:                             # %cond.end432
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB59_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_114
.LBB59_110:                             # %cond.false440
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB59_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_113
.LBB59_112:                             # %cond.false446
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB59_113:                             # %cond.end448
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_114:                             # %cond.end450
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_120
.LBB59_116:                             # %cond.false458
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB59_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_119
.LBB59_118:                             # %cond.false465
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB59_119:                             # %cond.end467
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_120:                             # %cond.end469
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB59_134
.LBB59_121:                             # %if.else473
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_127
.LBB59_123:                             # %cond.false478
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB59_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB59_126
.LBB59_125:                             # %cond.false484
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB59_126:                             # %cond.end486
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_127:                             # %cond.end488
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB59_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_133
.LBB59_129:                             # %cond.false496
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB59_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB59_132
.LBB59_131:                             # %cond.false503
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-24(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB59_132:                             # %cond.end505
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_133:                             # %cond.end507
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB59_134:                             # %if.end511
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB59_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB59_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB59_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB59_142
.LBB59_138:                             # %cond.false527
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB59_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB59_141
.LBB59_140:                             # %cond.false537
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB59_141:                             # %cond.end544
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_142:                             # %cond.end546
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%ecx, %ecx
	movq	-88(%rbp), %rdx
	subl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB59_143:                             # %if.end554
                                        #   in Loop: Header=BB59_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB59_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB59_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB59_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB59_150
.LBB59_146:                             # %cond.false568
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB59_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB59_149
.LBB59_148:                             # %cond.false578
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB59_149:                             # %cond.end585
                                        #   in Loop: Header=BB59_7 Depth=1
.LBB59_150:                             # %cond.end587
                                        #   in Loop: Header=BB59_7 Depth=1
	movq	-96(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB59_151:                             # %if.end594
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_152
.LBB59_152:                             # %if.end595
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_153
.LBB59_153:                             # %if.end596
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_154
.LBB59_154:                             # %if.end597
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_155
.LBB59_155:                             # %if.end598
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_156
.LBB59_156:                             # %if.end599
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_157
.LBB59_157:                             # %if.end600
                                        #   in Loop: Header=BB59_7 Depth=1
	jmp	.LBB59_158
.LBB59_158:                             # %for.inc
                                        #   in Loop: Header=BB59_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB59_7
.LBB59_159:                             # %for.end
	cmpl	$1051433618, -184(%rbp) # imm = 0x3EAB9A92
	jne	.LBB59_161
.LBB59_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_160
.Lfunc_end59:
	.size	EdgeLoop.56, .Lfunc_end59-EdgeLoop.56
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.57             # -- Begin function EdgeLoop.57
	.p2align	4, 0x90
	.type	EdgeLoop.57,@function
EdgeLoop.57:                            # @EdgeLoop.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1619800465, -188(%rbp) # imm = 0x608C3191
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -144(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB60_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB60_3
.LBB60_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -108(%rbp)
.LBB60_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB60_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB60_6
.LBB60_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB60_6
.LBB60_6:                               # %cond.end
	movl	%eax, -156(%rbp)
	movl	$0, -60(%rbp)
.LBB60_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB60_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB60_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB60_11
.LBB60_10:                              # %cond.false8
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB60_11:                              # %cond.end10
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -152(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB60_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB60_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB60_15
.LBB60_14:                              # %cond.false17
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$1, %eax
	jmp	.LBB60_15
.LBB60_15:                              # %cond.end18
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_17
.LBB60_16:                              # %cond.false20
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %eax
.LBB60_17:                              # %cond.end21
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-140(%rbp), %edi
	movl	-152(%rbp), %esi
	movl	-176(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-140(%rbp), %edi
	movl	-152(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-176(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-140(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB60_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB60_19:                              # %lor.end
                                        #   in Loop: Header=BB60_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB60_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$8, -156(%rbp)
	jne	.LBB60_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB60_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB60_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB60_25
.LBB60_24:                              # %cond.false47
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB60_25:                              # %cond.end49
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_27
.LBB60_26:                              # %cond.false51
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB60_27:                              # %cond.end52
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%ecx, -192(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB60_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB60_157
.LBB60_29:                              # %if.then57
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB60_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB60_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB60_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB60_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB60_34
.LBB60_33:                              # %cond.false66
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	32(%rbp), %eax
.LBB60_34:                              # %cond.end67
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_36
.LBB60_35:                              # %cond.false69
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$1, %eax
	jmp	.LBB60_36
.LBB60_36:                              # %cond.end70
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -76(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB60_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB60_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB60_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB60_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB60_41
.LBB60_40:                              # %cond.false81
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	32(%rbp), %eax
.LBB60_41:                              # %cond.end82
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_43
.LBB60_42:                              # %cond.false84
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$1, %eax
	jmp	.LBB60_43
.LBB60_43:                              # %cond.end85
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB60_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB60_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_50
.LBB60_46:                              # %cond.false105
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB60_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$51, %eax
	jmp	.LBB60_49
.LBB60_48:                              # %cond.false114
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB60_49:                              # %cond.end120
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_50:                              # %cond.end122
                                        #   in Loop: Header=BB60_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB60_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB60_56
.LBB60_52:                              # %cond.false135
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB60_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB60_55
.LBB60_54:                              # %cond.false144
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB60_55:                              # %cond.end150
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_56:                              # %cond.end152
                                        #   in Loop: Header=BB60_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB60_58
.LBB60_57:                              # %cond.false160
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB60_58:                              # %cond.end166
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_64
.LBB60_60:                              # %cond.false172
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB60_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$51, %eax
	jmp	.LBB60_63
.LBB60_62:                              # %cond.false177
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-136(%rbp), %eax
.LBB60_63:                              # %cond.end179
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_64:                              # %cond.end181
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB60_70
.LBB60_66:                              # %cond.false187
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-72(%rbp), %eax
	addl	-144(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB60_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB60_69
.LBB60_68:                              # %cond.false192
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-72(%rbp), %ecx
	addl	-144(%rbp), %ecx
.LBB60_69:                              # %cond.end194
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_70:                              # %cond.end196
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -180(%rbp)
	movslq	-164(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -148(%rbp)
	movslq	-180(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-108(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-164(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -36(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -184(%rbp)
	movq	-248(%rbp), %rax
	movslq	-192(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -168(%rbp)
	cmpl	$0, %eax
	je	.LBB60_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -132(%rbp)
	callq	abs
	movl	%eax, -160(%rbp)
	movl	-160(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB60_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-168(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB60_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB60_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-36(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB60_75:                              # %if.end271
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -168(%rbp)
	jne	.LBB60_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB60_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB60_97
.LBB60_78:                              # %if.else292
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-160(%rbp), %eax
	movl	-148(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-172(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB60_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB60_81
.LBB60_80:                              # %cond.false307
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB60_81:                              # %cond.end313
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB60_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB60_84
.LBB60_83:                              # %cond.false325
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB60_84:                              # %cond.end331
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB60_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB60_87
.LBB60_86:                              # %cond.false342
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-12(%rbp), %eax
.LBB60_87:                              # %cond.end343
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB60_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB60_90
.LBB60_89:                              # %cond.false355
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-16(%rbp), %eax
.LBB60_90:                              # %cond.end356
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB60_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-184(%rbp), %eax
	addl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB60_93
.LBB60_92:                              # %cond.false371
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-36(%rbp), %eax
.LBB60_93:                              # %cond.end372
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-76(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB60_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB60_96
.LBB60_95:                              # %cond.false387
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-44(%rbp), %eax
.LBB60_96:                              # %cond.end388
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB60_97:                              # %if.end395
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_153
.LBB60_98:                              # %if.else396
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB60_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB60_101
.LBB60_100:                             # %cond.false400
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB60_101:                             # %cond.end403
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -104(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB60_107
.LBB60_103:                             # %cond.false415
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-104(%rbp), %eax
	jle	.LBB60_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB60_106
.LBB60_105:                             # %cond.false424
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB60_106:                             # %cond.end430
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_107:                             # %cond.end432
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB60_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_114
.LBB60_110:                             # %cond.false440
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB60_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_113
.LBB60_112:                             # %cond.false446
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB60_113:                             # %cond.end448
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_114:                             # %cond.end450
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_120
.LBB60_116:                             # %cond.false458
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB60_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_119
.LBB60_118:                             # %cond.false465
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB60_119:                             # %cond.end467
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_120:                             # %cond.end469
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB60_134
.LBB60_121:                             # %if.else473
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_127
.LBB60_123:                             # %cond.false478
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB60_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB60_126
.LBB60_125:                             # %cond.false484
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB60_126:                             # %cond.end486
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_127:                             # %cond.end488
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB60_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_133
.LBB60_129:                             # %cond.false496
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB60_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB60_132
.LBB60_131:                             # %cond.false503
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB60_132:                             # %cond.end505
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_133:                             # %cond.end507
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB60_134:                             # %if.end511
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB60_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB60_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB60_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB60_142
.LBB60_138:                             # %cond.false527
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB60_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB60_141
.LBB60_140:                             # %cond.false537
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB60_141:                             # %cond.end544
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_142:                             # %cond.end546
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB60_143:                             # %if.end554
                                        #   in Loop: Header=BB60_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB60_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB60_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB60_7 Depth=1
	xorl	%eax, %eax
	subl	-40(%rbp), %eax
	jmp	.LBB60_150
.LBB60_146:                             # %cond.false568
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB60_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB60_149
.LBB60_148:                             # %cond.false578
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB60_149:                             # %cond.end585
                                        #   in Loop: Header=BB60_7 Depth=1
.LBB60_150:                             # %cond.end587
                                        #   in Loop: Header=BB60_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB60_151:                             # %if.end594
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_152
.LBB60_152:                             # %if.end595
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_153
.LBB60_153:                             # %if.end596
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_154
.LBB60_154:                             # %if.end597
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_155
.LBB60_155:                             # %if.end598
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_156
.LBB60_156:                             # %if.end599
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_157
.LBB60_157:                             # %if.end600
                                        #   in Loop: Header=BB60_7 Depth=1
	jmp	.LBB60_158
.LBB60_158:                             # %for.inc
                                        #   in Loop: Header=BB60_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB60_7
.LBB60_159:                             # %for.end
	cmpl	$1619800465, -188(%rbp) # imm = 0x608C3191
	jne	.LBB60_161
.LBB60_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_160
.Lfunc_end60:
	.size	EdgeLoop.57, .Lfunc_end60-EdgeLoop.57
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.58         # -- Begin function DeblockFrame.58
	.p2align	4, 0x90
	.type	DeblockFrame.58,@function
DeblockFrame.58:                        # @DeblockFrame.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$550982476, -8(%rbp)    # imm = 0x20D7534C
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB61_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_1
.LBB61_4:                               # %for.end
	cmpl	$550982476, -8(%rbp)    # imm = 0x20D7534C
	jne	.LBB61_6
.LBB61_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_5
.Lfunc_end61:
	.size	DeblockFrame.58, .Lfunc_end61-DeblockFrame.58
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.59         # -- Begin function DeblockFrame.59
	.p2align	4, 0x90
	.type	DeblockFrame.59,@function
DeblockFrame.59:                        # @DeblockFrame.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1813390572, -8(%rbp)   # imm = 0x6C1624EC
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB62_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_1
.LBB62_4:                               # %for.end
	cmpl	$1813390572, -8(%rbp)   # imm = 0x6C1624EC
	jne	.LBB62_6
.LBB62_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_5
.Lfunc_end62:
	.size	DeblockFrame.59, .Lfunc_end62-DeblockFrame.59
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.60         # -- Begin function DeblockFrame.60
	.p2align	4, 0x90
	.type	DeblockFrame.60,@function
DeblockFrame.60:                        # @DeblockFrame.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$505316933, -8(%rbp)    # imm = 0x1E1E8645
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB63_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_1
.LBB63_4:                               # %for.end
	cmpl	$505316933, -8(%rbp)    # imm = 0x1E1E8645
	jne	.LBB63_6
.LBB63_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_5
.Lfunc_end63:
	.size	DeblockFrame.60, .Lfunc_end63-DeblockFrame.60
	.cfi_endproc
                                        # -- End function
	.globl	DeblockFrame.61         # -- Begin function DeblockFrame.61
	.p2align	4, 0x90
	.type	DeblockFrame.61,@function
DeblockFrame.61:                        # @DeblockFrame.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$58166881, -8(%rbp)     # imm = 0x3778E61
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	72484(%rcx), %eax
	jae	.LBB64_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-4(%rbp), %ecx
	callq	DeblockMb
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_1
.LBB64_4:                               # %for.end
	cmpl	$58166881, -8(%rbp)     # imm = 0x3778E61
	jne	.LBB64_6
.LBB64_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_5
.Lfunc_end64:
	.size	DeblockFrame.61, .Lfunc_end64-DeblockFrame.61
	.cfi_endproc
                                        # -- End function
	.globl	EdgeLoop.62             # -- Begin function EdgeLoop.62
	.p2align	4, 0x90
	.type	EdgeLoop.62,@function
EdgeLoop.62:                            # @EdgeLoop.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	movl	48(%rbp), %eax
	movl	40(%rbp), %eax
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1518668602, -184(%rbp) # imm = 0x5A850B3A
	movq	%rdi, -208(%rbp)
	movq	%rsi, -248(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -136(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -100(%rbp)
	movq	$0, -216(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr, %rax
	movq	%rax, -288(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+8, %rax
	movq	%rax, -280(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+16, %rax
	movq	%rax, -272(%rbp)
	movq	.L__const.EdgeLoop.pelnum_cr+24, %rax
	movq	%rax, -264(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB65_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movl	72660(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB65_3
.LBB65_2:                               # %if.else
	movq	-56(%rbp), %rax
	movl	72664(%rax), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -104(%rbp)
.LBB65_3:                               # %if.end
	cmpl	$0, 40(%rbp)
	je	.LBB65_5
# %bb.4:                                # %cond.true
	movslq	16(%rbp), %rax
	shlq	$4, %rax
	leaq	-288(%rbp), %rcx
	addq	%rax, %rcx
	movq	-56(%rbp), %rax
	movslq	72700(%rax), %rax
	movl	(%rcx,%rax,4), %eax
	jmp	.LBB65_6
.LBB65_5:                               # %cond.false
	movl	$16, %eax
	jmp	.LBB65_6
.LBB65_6:                               # %cond.end
	movl	%eax, -160(%rbp)
	movl	$0, -60(%rbp)
.LBB65_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB65_159
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB65_10
# %bb.9:                                # %cond.true7
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %eax
	jmp	.LBB65_11
.LBB65_10:                              # %cond.false8
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
.LBB65_11:                              # %cond.end10
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -168(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB65_16
# %bb.12:                               # %cond.true13
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$4, 24(%rbp)
	jge	.LBB65_14
# %bb.13:                               # %cond.true15
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	24(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB65_15
.LBB65_14:                              # %cond.false17
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$1, %eax
	jmp	.LBB65_15
.LBB65_15:                              # %cond.end18
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_17
.LBB65_16:                              # %cond.false20
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %eax
.LBB65_17:                              # %cond.end21
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -164(%rbp)
	movl	-140(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	movl	$1, %ecx
	subl	40(%rbp), %ecx
	leaq	-312(%rbp), %r8
	callq	getNeighbour
	movl	-140(%rbp), %edi
	movl	-168(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %eax
	subl	16(%rbp), %eax
	subl	%eax, %esi
	movl	-164(%rbp), %edx
	subl	16(%rbp), %edx
	subl	40(%rbp), %ecx
	leaq	-240(%rbp), %r8
	callq	getNeighbour
	movl	-232(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-140(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-236(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	jne	.LBB65_19
# %bb.18:                               # %lor.rhs
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB65_19:                              # %lor.end
                                        #   in Loop: Header=BB65_7 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, fieldModeFilteringFlag
	cmpl	$0, 40(%rbp)
	je	.LBB65_26
# %bb.20:                               # %land.lhs.true
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$8, -160(%rbp)
	jne	.LBB65_26
# %bb.21:                               # %cond.true39
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB65_24
# %bb.22:                               # %land.lhs.true42
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB65_24
# %bb.23:                               # %cond.true45
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %ecx
	shll	$1, %ecx
	jmp	.LBB65_25
.LBB65_24:                              # %cond.false47
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %ecx
	sarl	$1, %ecx
	shll	$2, %ecx
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%edx, %ecx
.LBB65_25:                              # %cond.end49
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_27
.LBB65_26:                              # %cond.false51
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %ecx
.LBB65_27:                              # %cond.end52
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%ecx, -188(%rbp)
	cmpl	$0, -240(%rbp)
	jne	.LBB65_29
# %bb.28:                               # %lor.lhs.false
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 612(%rax)
	jne	.LBB65_157
.LBB65_29:                              # %if.then57
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 16(%rbp)
	je	.LBB65_35
# %bb.30:                               # %cond.true59
                                        #   in Loop: Header=BB65_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB65_33
# %bb.31:                               # %land.lhs.true62
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-120(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB65_33
# %bb.32:                               # %cond.true65
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB65_34
.LBB65_33:                              # %cond.false66
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	32(%rbp), %eax
.LBB65_34:                              # %cond.end67
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_36
.LBB65_35:                              # %cond.false69
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$1, %eax
	jmp	.LBB65_36
.LBB65_36:                              # %cond.end70
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -72(%rbp)
	cmpl	$0, 16(%rbp)
	je	.LBB65_42
# %bb.37:                               # %cond.true73
                                        #   in Loop: Header=BB65_7 Depth=1
	movzbl	fieldModeFilteringFlag, %eax
	cmpl	$0, %eax
	je	.LBB65_40
# %bb.38:                               # %land.lhs.true76
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB65_40
# %bb.39:                               # %cond.true79
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	32(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB65_41
.LBB65_40:                              # %cond.false81
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	32(%rbp), %eax
.LBB65_41:                              # %cond.end82
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_43
.LBB65_42:                              # %cond.false84
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$1, %eax
	jmp	.LBB65_43
.LBB65_43:                              # %cond.end85
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-296(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-208(%rbp), %rax
	movslq	-220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-224(%rbp), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	cmpl	$0, 40(%rbp)
	je	.LBB65_57
# %bb.44:                               # %cond.true98
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jge	.LBB65_46
# %bb.45:                               # %cond.true104
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_50
.LBB65_46:                              # %cond.false105
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	cmpl	$51, %eax
	jle	.LBB65_48
# %bb.47:                               # %cond.true113
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$51, %eax
	jmp	.LBB65_49
.LBB65_48:                              # %cond.false114
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movslq	48(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
.LBB65_49:                              # %cond.end120
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_50:                              # %cond.end122
                                        #   in Loop: Header=BB65_7 Depth=1
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$0, %ecx
	jge	.LBB65_52
# %bb.51:                               # %cond.true134
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB65_56
.LBB65_52:                              # %cond.false135
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	cmpl	$51, %ecx
	jle	.LBB65_54
# %bb.53:                               # %cond.true143
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB65_55
.LBB65_54:                              # %cond.false144
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-120(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movslq	48(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
.LBB65_55:                              # %cond.end150
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_56:                              # %cond.end152
                                        #   in Loop: Header=BB65_7 Depth=1
	movslq	%ecx, %rcx
	movzbl	QP_SCALE_CR(,%rcx), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	jmp	.LBB65_58
.LBB65_57:                              # %cond.false160
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	-120(%rbp), %rcx
	addl	12(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
.LBB65_58:                              # %cond.end166
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_60
# %bb.59:                               # %cond.true171
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_64
.LBB65_60:                              # %cond.false172
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB65_62
# %bb.61:                               # %cond.true176
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$51, %eax
	jmp	.LBB65_63
.LBB65_62:                              # %cond.false177
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-132(%rbp), %eax
.LBB65_63:                              # %cond.end179
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_64:                              # %cond.end181
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -176(%rbp)
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_66
# %bb.65:                               # %cond.true186
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB65_70
.LBB65_66:                              # %cond.false187
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-76(%rbp), %eax
	addl	-136(%rbp), %eax
	cmpl	$51, %eax
	jle	.LBB65_68
# %bb.67:                               # %cond.true191
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	$51, %ecx
	jmp	.LBB65_69
.LBB65_68:                              # %cond.false192
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-76(%rbp), %ecx
	addl	-136(%rbp), %ecx
.LBB65_69:                              # %cond.end194
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_70:                              # %cond.end196
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	movl	%ecx, -192(%rbp)
	movslq	-176(%rbp), %rcx
	movzbl	ALPHA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movslq	-192(%rbp), %rcx
	movzbl	BETA_TABLE(,%rcx), %ecx
	imull	-104(%rbp), %ecx
	movl	%ecx, -100(%rbp)
	movslq	-176(%rbp), %rcx
	imulq	$5, %rcx, %rcx
	movabsq	$CLIP_TAB, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -216(%rbp)
	movq	-96(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -24(%rbp)
	movq	-88(%rbp), %rcx
	movzwl	(%rcx), %ecx
	movl	%ecx, -20(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -16(%rbp)
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rcx
	xorl	%edx, %edx
	subl	-80(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -40(%rbp)
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	%ecx, -44(%rbp)
	movq	-96(%rbp), %rcx
	subl	-80(%rbp), %eax
	imull	$3, %eax, %eax
	cltq
	movzwl	(%rcx,%rax,2), %eax
	movl	%eax, -196(%rbp)
	movq	-88(%rbp), %rax
	imull	$3, -72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -180(%rbp)
	movq	-248(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -156(%rbp)
	cmpl	$0, %eax
	je	.LBB65_156
# %bb.71:                               # %if.then241
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-24(%rbp), %edi
	movl	%edi, -148(%rbp)
	callq	abs
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB65_155
# %bb.72:                               # %if.then245
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-216(%rbp), %rax
	movslq	-156(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	imull	-104(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %edi
	subl	-12(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	subl	-100(%rbp), %ebx
	movl	-24(%rbp), %edi
	subl	-16(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	andl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB65_154
# %bb.73:                               # %if.then258
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB65_75
# %bb.74:                               # %if.then260
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %edi
	subl	-44(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %edi
	subl	-40(%rbp), %edi
	callq	abs
	subl	-100(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB65_75:                              # %if.end271
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$4, -156(%rbp)
	jne	.LBB65_98
# %bb.76:                               # %if.then275
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB65_78
# %bb.77:                               # %if.then277
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB65_97
.LBB65_78:                              # %if.else292
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-172(%rbp), %eax
	movl	-144(%rbp), %ecx
	sarl	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -152(%rbp)
	movl	-152(%rbp), %eax
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-152(%rbp), %eax
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB65_80
# %bb.79:                               # %cond.true300
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-44(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB65_81
.LBB65_80:                              # %cond.false307
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB65_81:                              # %cond.end313
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -68(%rbp)
	je	.LBB65_83
# %bb.82:                               # %cond.true318
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-40(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB65_84
.LBB65_83:                              # %cond.false325
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
.LBB65_84:                              # %cond.end331
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	cmpl	$0, -64(%rbp)
	je	.LBB65_86
# %bb.85:                               # %cond.true336
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-44(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB65_87
.LBB65_86:                              # %cond.false342
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-12(%rbp), %eax
.LBB65_87:                              # %cond.end343
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB65_89
# %bb.88:                               # %cond.true349
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	jmp	.LBB65_90
.LBB65_89:                              # %cond.false355
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-16(%rbp), %eax
.LBB65_90:                              # %cond.end356
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -64(%rbp)
	je	.LBB65_92
# %bb.91:                               # %cond.true363
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-180(%rbp), %eax
	addl	-44(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB65_93
.LBB65_92:                              # %cond.false371
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-44(%rbp), %eax
.LBB65_93:                              # %cond.end372
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	cmpl	$0, -68(%rbp)
	je	.LBB65_95
# %bb.94:                               # %cond.true379
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-196(%rbp), %eax
	addl	-40(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	jmp	.LBB65_96
.LBB65_95:                              # %cond.false387
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-40(%rbp), %eax
.LBB65_96:                              # %cond.end388
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB65_97:                              # %if.end395
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_153
.LBB65_98:                              # %if.else396
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 40(%rbp)
	je	.LBB65_100
# %bb.99:                               # %cond.true398
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB65_101
.LBB65_100:                             # %cond.false400
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-32(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
.LBB65_101:                             # %cond.end403
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	movl	%eax, -108(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %edx
	subl	-12(%rbp), %edx
	addl	%edx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_103
# %bb.102:                              # %cond.true413
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	subl	-108(%rbp), %eax
	jmp	.LBB65_107
.LBB65_103:                             # %cond.false415
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
	cmpl	-108(%rbp), %eax
	jle	.LBB65_105
# %bb.104:                              # %cond.true423
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB65_106
.LBB65_105:                             # %cond.false424
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-16(%rbp), %ecx
	subl	-12(%rbp), %ecx
	addl	%ecx, %eax
	addl	$4, %eax
	sarl	$3, %eax
.LBB65_106:                             # %cond.end430
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_107:                             # %cond.end432
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	%eax, -28(%rbp)
	cmpl	$0, 40(%rbp)
	jne	.LBB65_121
# %bb.108:                              # %if.then435
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_110
# %bb.109:                              # %cond.true439
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_114
.LBB65_110:                             # %cond.false440
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB65_112
# %bb.111:                              # %cond.true444
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_113
.LBB65_112:                             # %cond.false446
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB65_113:                             # %cond.end448
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_114:                             # %cond.end450
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_116
# %bb.115:                              # %cond.true457
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_120
.LBB65_116:                             # %cond.false458
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB65_118
# %bb.117:                              # %cond.true463
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_119
.LBB65_118:                             # %cond.false465
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB65_119:                             # %cond.end467
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_120:                             # %cond.end469
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
	jmp	.LBB65_134
.LBB65_121:                             # %if.else473
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_123
# %bb.122:                              # %cond.true477
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_127
.LBB65_123:                             # %cond.false478
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB65_125
# %bb.124:                              # %cond.true482
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB65_126
.LBB65_125:                             # %cond.false484
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB65_126:                             # %cond.end486
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_127:                             # %cond.end488
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-96(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB65_129
# %bb.128:                              # %cond.true495
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_133
.LBB65_129:                             # %cond.false496
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB65_131
# %bb.130:                              # %cond.true501
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-56(%rbp), %rax
	movl	72688(%rax), %eax
	jmp	.LBB65_132
.LBB65_131:                             # %cond.false503
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-20(%rbp), %eax
	subl	-28(%rbp), %eax
.LBB65_132:                             # %cond.end505
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_133:                             # %cond.end507
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movw	%ax, (%rcx)
.LBB65_134:                             # %if.end511
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, 40(%rbp)
	jne	.LBB65_152
# %bb.135:                              # %if.then513
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB65_143
# %bb.136:                              # %if.then515
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-16(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB65_138
# %bb.137:                              # %cond.true525
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB65_142
.LBB65_138:                             # %cond.false527
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB65_140
# %bb.139:                              # %cond.true536
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_141
.LBB65_140:                             # %cond.false537
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB65_141:                             # %cond.end544
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_142:                             # %cond.end546
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%ecx, %ecx
	movq	-96(%rbp), %rdx
	subl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rdx,%rcx,2)
.LBB65_143:                             # %if.end554
                                        #   in Loop: Header=BB65_7 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB65_151
# %bb.144:                              # %if.then556
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %edx
	addl	$1, %edx
	sarl	$1, %edx
	addl	%edx, %ecx
	movl	-12(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	sarl	$1, %ecx
	subl	-32(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB65_146
# %bb.145:                              # %cond.true566
                                        #   in Loop: Header=BB65_7 Depth=1
	xorl	%eax, %eax
	subl	-32(%rbp), %eax
	jmp	.LBB65_150
.LBB65_146:                             # %cond.false568
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB65_148
# %bb.147:                              # %cond.true577
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_149
.LBB65_148:                             # %cond.false578
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	sarl	$1, %eax
.LBB65_149:                             # %cond.end585
                                        #   in Loop: Header=BB65_7 Depth=1
.LBB65_150:                             # %cond.end587
                                        #   in Loop: Header=BB65_7 Depth=1
	movq	-88(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %esi
	addl	%eax, %esi
	movw	%si, (%rcx,%rdx,2)
.LBB65_151:                             # %if.end594
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_152
.LBB65_152:                             # %if.end595
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_153
.LBB65_153:                             # %if.end596
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_154
.LBB65_154:                             # %if.end597
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_155
.LBB65_155:                             # %if.end598
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_156
.LBB65_156:                             # %if.end599
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_157
.LBB65_157:                             # %if.end600
                                        #   in Loop: Header=BB65_7 Depth=1
	jmp	.LBB65_158
.LBB65_158:                             # %for.inc
                                        #   in Loop: Header=BB65_7 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB65_7
.LBB65_159:                             # %for.end
	cmpl	$1518668602, -184(%rbp) # imm = 0x5A850B3A
	jne	.LBB65_161
.LBB65_160:
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_161:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_160
.Lfunc_end65:
	.size	EdgeLoop.62, .Lfunc_end65-EdgeLoop.62
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.63          # -- Begin function GetStrength.63
	.p2align	4, 0x90
	.type	GetStrength.63,@function
GetStrength.63:                         # @GetStrength.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$314501730, -132(%rbp)  # imm = 0x12BEEA62
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB66_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB66_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB66_5
.LBB66_4:                               # %cond.false
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB66_5:                               # %cond.end
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB66_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB66_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB66_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB66_9
.LBB66_8:                               # %cond.false15
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$1, %eax
	jmp	.LBB66_9
.LBB66_9:                               # %cond.end16
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_11
.LBB66_10:                              # %cond.false18
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-28(%rbp), %eax
.LBB66_11:                              # %cond.end19
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-144(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB66_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB66_25
.LBB66_13:                              # %if.then
                                        #   in Loop: Header=BB66_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB66_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB66_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB66_23
.LBB66_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB66_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB66_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB66_23
.LBB66_19:                              # %lor.rhs
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB66_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB66_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB66_22
.LBB66_21:                              # %land.rhs60
                                        #   in Loop: Header=BB66_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB66_22:                              # %land.end
                                        #   in Loop: Header=BB66_1 Depth=1
.LBB66_23:                              # %lor.end
                                        #   in Loop: Header=BB66_1 Depth=1
.LBB66_24:                              # %land.end62
                                        #   in Loop: Header=BB66_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB66_79
.LBB66_25:                              # %if.else
                                        #   in Loop: Header=BB66_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB66_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB66_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB66_35
.LBB66_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB66_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB66_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB66_35
.LBB66_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB66_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB66_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB66_34
.LBB66_33:                              # %land.rhs92
                                        #   in Loop: Header=BB66_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB66_34:                              # %land.end95
                                        #   in Loop: Header=BB66_1 Depth=1
.LBB66_35:                              # %lor.end96
                                        #   in Loop: Header=BB66_1 Depth=1
.LBB66_36:                              # %land.end97
                                        #   in Loop: Header=BB66_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB66_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB66_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB66_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB66_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB66_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB66_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB66_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB66_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB66_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB66_47
.LBB66_46:                              # %if.then144
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB66_77
.LBB66_47:                              # %if.else147
                                        #   in Loop: Header=BB66_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB66_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB66_76
.LBB66_49:                              # %if.else152
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-152(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movq	-176(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB66_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB66_52
.LBB66_51:                              # %cond.false169
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB66_52:                              # %cond.end174
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB66_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB66_55
.LBB66_54:                              # %cond.false184
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB66_55:                              # %cond.end189
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-168(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB66_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB66_58
.LBB66_57:                              # %cond.false199
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB66_58:                              # %cond.end204
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB66_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB66_61
.LBB66_60:                              # %cond.false214
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-192(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB66_61:                              # %cond.end219
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB66_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-184(%rbp), %rax
	je	.LBB66_65
.LBB66_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jne	.LBB66_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-120(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB66_74
.LBB66_65:                              # %if.then232
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB66_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB66_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB66_69
.LBB66_68:                              # %if.else309
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB66_69:                              # %if.end
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_73
.LBB66_70:                              # %if.else380
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB66_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-40(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB66_72:                              # %land.end518
                                        #   in Loop: Header=BB66_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB66_73:                              # %if.end522
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_75
.LBB66_74:                              # %if.else523
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB66_75:                              # %if.end526
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_76
.LBB66_76:                              # %if.end527
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_77
.LBB66_77:                              # %if.end528
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_78
.LBB66_78:                              # %if.end529
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_79
.LBB66_79:                              # %if.end530
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_80
.LBB66_80:                              # %for.inc
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB66_1
.LBB66_81:                              # %for.end
	cmpl	$314501730, -132(%rbp)  # imm = 0x12BEEA62
	jne	.LBB66_83
.LBB66_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_82
.Lfunc_end66:
	.size	GetStrength.63, .Lfunc_end66-GetStrength.63
	.cfi_endproc
                                        # -- End function
	.globl	GetStrength.64          # -- Begin function GetStrength.64
	.p2align	4, 0x90
	.type	GetStrength.64,@function
GetStrength.64:                         # @GetStrength.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	$125774388, -144(%rbp)  # imm = 0x77F2A34
	movq	%rdi, -72(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -32(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-92(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movl	$0, -28(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -28(%rbp)
	jge	.LBB67_81
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB67_4
# %bb.3:                                # %cond.true
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB67_5
.LBB67_4:                               # %cond.false
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
.LBB67_5:                               # %cond.end
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	%eax, -104(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB67_10
# %bb.6:                                # %cond.true11
                                        #   in Loop: Header=BB67_1 Depth=1
	cmpl	$4, -64(%rbp)
	jge	.LBB67_8
# %bb.7:                                # %cond.true13
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-64(%rbp), %eax
	shll	$2, %eax
	jmp	.LBB67_9
.LBB67_8:                               # %cond.false15
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$1, %eax
	jmp	.LBB67_9
.LBB67_9:                               # %cond.end16
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_11
.LBB67_10:                              # %cond.false18
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-28(%rbp), %eax
.LBB67_11:                              # %cond.end19
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-104(%rbp), %esi
	movl	$1, %eax
	subl	-60(%rbp), %eax
	subl	%eax, %esi
	movl	-100(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	movl	-208(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -152(%rbp)
	movq	-56(%rbp), %rax
	movq	14168(%rax), %rax
	movslq	-212(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	532(%rax), %eax
	movq	-80(%rbp), %rcx
	cmpl	532(%rcx), %eax
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, mixedModeEdgeFlag
	movl	-100(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-104(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-152(%rbp), %eax
	sarl	$2, %eax
	shll	$2, %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -140(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$3, 24(%rax)
	je	.LBB67_13
# %bb.12:                               # %lor.lhs.false
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB67_25
.LBB67_13:                              # %if.then
                                        #   in Loop: Header=BB67_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB67_24
# %bb.14:                               # %land.rhs
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB67_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB67_23
.LBB67_16:                              # %lor.lhs.false45
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_19
# %bb.17:                               # %land.lhs.true48
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB67_19
# %bb.18:                               # %land.lhs.true51
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB67_23
.LBB67_19:                              # %lor.rhs
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB67_21
# %bb.20:                               # %lor.lhs.false56
                                        #   in Loop: Header=BB67_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB67_22
.LBB67_21:                              # %land.rhs60
                                        #   in Loop: Header=BB67_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB67_22:                              # %land.end
                                        #   in Loop: Header=BB67_1 Depth=1
.LBB67_23:                              # %lor.end
                                        #   in Loop: Header=BB67_1 Depth=1
.LBB67_24:                              # %land.end62
                                        #   in Loop: Header=BB67_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	jmp	.LBB67_79
.LBB67_25:                              # %if.else
                                        #   in Loop: Header=BB67_1 Depth=1
	xorl	%eax, %eax
	cmpl	$0, -64(%rbp)
	jne	.LBB67_36
# %bb.26:                               # %land.rhs69
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB67_28
# %bb.27:                               # %land.lhs.true72
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 28(%rax)
	movb	$1, %al
	je	.LBB67_35
.LBB67_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_31
# %bb.29:                               # %land.lhs.true79
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB67_31
# %bb.30:                               # %land.lhs.true82
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	movb	$1, %al
	je	.LBB67_35
.LBB67_31:                              # %lor.rhs85
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB67_33
# %bb.32:                               # %lor.lhs.false88
                                        #   in Loop: Header=BB67_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	cmpl	$0, 28(%rcx)
	je	.LBB67_34
.LBB67_33:                              # %land.rhs92
                                        #   in Loop: Header=BB67_1 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB67_34:                              # %land.end95
                                        #   in Loop: Header=BB67_1 Depth=1
.LBB67_35:                              # %lor.end96
                                        #   in Loop: Header=BB67_1 Depth=1
.LBB67_36:                              # %land.end97
                                        #   in Loop: Header=BB67_1 Depth=1
	testb	$1, %al
	movl	$4, %eax
	movl	$3, %ecx
	cmovnel	%eax, %ecx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movq	-80(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_78
# %bb.37:                               # %lor.lhs.false104
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_78
# %bb.38:                               # %lor.lhs.false108
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB67_78
# %bb.39:                               # %lor.lhs.false112
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-80(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB67_78
# %bb.40:                               # %land.lhs.true116
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_78
# %bb.41:                               # %lor.lhs.false120
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_78
# %bb.42:                               # %lor.lhs.false124
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$14, 72(%rax)
	je	.LBB67_78
# %bb.43:                               # %lor.lhs.false128
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-88(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB67_78
# %bb.44:                               # %if.then132
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	jne	.LBB67_46
# %bb.45:                               # %lor.lhs.false137
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-80(%rbp), %rax
	movq	464(%rax), %rax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movslq	%edx, %rcx
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	.LBB67_47
.LBB67_46:                              # %if.then144
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$2, (%rax,%rcx)
	jmp	.LBB67_77
.LBB67_47:                              # %if.else147
                                        #   in Loop: Header=BB67_1 Depth=1
	cmpb	$0, mixedModeEdgeFlag
	je	.LBB67_49
# %bb.48:                               # %if.then149
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	jmp	.LBB67_76
.LBB67_49:                              # %if.else152
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-92(%rbp), %edi
	leaq	-136(%rbp), %rsi
	leaq	-148(%rbp), %rdx
	callq	get_mb_block_pos
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	-96(%rbp), %ecx
	andl	$3, %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -12(%rbp)
	movl	-200(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -16(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB67_51
# %bb.50:                               # %cond.true168
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB67_52
.LBB67_51:                              # %cond.false169
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB67_52:                              # %cond.end174
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	%rax, -112(%rbp)
	movq	-168(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB67_54
# %bb.53:                               # %cond.true183
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB67_55
.LBB67_54:                              # %cond.false184
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-176(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB67_55:                              # %cond.end189
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	%rax, -120(%rbp)
	movq	-160(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB67_57
# %bb.56:                               # %cond.true198
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB67_58
.LBB67_57:                              # %cond.false199
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB67_58:                              # %cond.end204
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	%rax, -128(%rbp)
	movq	-160(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB67_60
# %bb.59:                               # %cond.true213
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	$-1, %rax
	jmp	.LBB67_61
.LBB67_60:                              # %cond.false214
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-184(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
.LBB67_61:                              # %cond.end219
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB67_63
# %bb.62:                               # %land.lhs.true223
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-192(%rbp), %rax
	je	.LBB67_65
.LBB67_63:                              # %lor.lhs.false226
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jne	.LBB67_74
# %bb.64:                               # %land.lhs.true229
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB67_74
.LBB67_65:                              # %if.then232
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	je	.LBB67_70
# %bb.66:                               # %if.then237
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB67_68
# %bb.67:                               # %if.then240
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
	jmp	.LBB67_69
.LBB67_68:                              # %if.else309
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	%bl, (%rax,%rcx)
.LBB67_69:                              # %if.end
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_73
.LBB67_70:                              # %if.else380
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	xorl	%ecx, %ecx
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	je	.LBB67_72
# %bb.71:                               # %land.rhs449
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %ebx
	movq	-48(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	$4, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	subl	%eax, %edi
	callq	abs
	cmpl	-32(%rbp), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	orl	%eax, %ebx
	cmpl	$0, %ebx
	setne	%cl
.LBB67_72:                              # %land.end518
                                        #   in Loop: Header=BB67_1 Depth=1
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-72(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB67_73:                              # %if.end522
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_75
.LBB67_74:                              # %if.else523
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-72(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB67_75:                              # %if.end526
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_76
.LBB67_76:                              # %if.end527
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_77
.LBB67_77:                              # %if.end528
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_78
.LBB67_78:                              # %if.end529
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_79
.LBB67_79:                              # %if.end530
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_80
.LBB67_80:                              # %for.inc
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_1
.LBB67_81:                              # %for.end
	cmpl	$125774388, -144(%rbp)  # imm = 0x77F2A34
	jne	.LBB67_83
.LBB67_82:
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_83:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_82
.Lfunc_end67:
	.size	GetStrength.64, .Lfunc_end67-GetStrength.64
	.cfi_endproc
                                        # -- End function
	.type	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag,@object # @__const.DeblockMb.filterNon8x8LumaEdgesFlag
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.L__const.DeblockMb.filterNon8x8LumaEdgesFlag:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.size	.L__const.DeblockMb.filterNon8x8LumaEdgesFlag, 16

	.type	chroma_edge,@object     # @chroma_edge
	.data
	.globl	chroma_edge
	.p2align	4
chroma_edge:
	.asciz	"\377\000\000"
	.ascii	"\377\377\377\001"
	.ascii	"\377\001\001\002"
	.ascii	"\377\377\377\003"
	.asciz	"\377\000\000"
	.ascii	"\377\377\001\001"
	.ascii	"\377\001\002\002"
	.ascii	"\377\377\003\003"
	.size	chroma_edge, 32

	.type	mixedModeEdgeFlag,@object # @mixedModeEdgeFlag
	.comm	mixedModeEdgeFlag,1,1
	.type	.L__const.EdgeLoop.pelnum_cr,@object # @__const.EdgeLoop.pelnum_cr
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	4
.L__const.EdgeLoop.pelnum_cr:
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	0                       # 0x0
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	16                      # 0x10
	.size	.L__const.EdgeLoop.pelnum_cr, 32

	.type	fieldModeFilteringFlag,@object # @fieldModeFilteringFlag
	.comm	fieldModeFilteringFlag,1,1
	.type	ALPHA_TABLE,@object     # @ALPHA_TABLE
	.data
	.globl	ALPHA_TABLE
	.p2align	4
ALPHA_TABLE:
	.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\005\006\007\b\t\n\f\r\017\021\024\026\031\034 $(-28?GPZeq\177\220\242\266\313\342\377\377"
	.size	ALPHA_TABLE, 52

	.type	BETA_TABLE,@object      # @BETA_TABLE
	.globl	BETA_TABLE
	.p2align	4
BETA_TABLE:
	.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\002\002\003\003\003\003\004\004\004\006\006\007\007\b\b\t\t\n\n\013\013\f\f\r\r\016\016\017\017\020\020\021\021\022\022"
	.size	BETA_TABLE, 52

	.type	CLIP_TAB,@object        # @CLIP_TAB
	.globl	CLIP_TAB
	.p2align	4
CLIP_TAB:
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.zero	5
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\000\001\001"
	.ascii	"\000\000\001\001\001"
	.ascii	"\000\000\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\001\001"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\001\002\002"
	.ascii	"\000\001\002\003\003"
	.ascii	"\000\001\002\003\003"
	.ascii	"\000\002\002\003\003"
	.ascii	"\000\002\002\004\004"
	.ascii	"\000\002\003\004\004"
	.ascii	"\000\002\003\004\004"
	.ascii	"\000\003\003\005\005"
	.ascii	"\000\003\004\006\006"
	.ascii	"\000\003\004\006\006"
	.ascii	"\000\004\005\007\007"
	.ascii	"\000\004\005\b\b"
	.ascii	"\000\004\006\t\t"
	.ascii	"\000\005\007\n\n"
	.ascii	"\000\006\b\013\013"
	.ascii	"\000\006\b\r\r"
	.ascii	"\000\007\n\016\016"
	.ascii	"\000\b\013\020\020"
	.ascii	"\000\t\f\022\022"
	.ascii	"\000\n\r\024\024"
	.ascii	"\000\013\017\027\027"
	.ascii	"\000\r\021\031\031"
	.size	CLIP_TAB, 260

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	ININT_STRENGTH,@object  # @ININT_STRENGTH
	.globl	ININT_STRENGTH
	.p2align	4
ININT_STRENGTH:
	.long	67372036                # 0x4040404
	.long	50529027                # 0x3030303
	.long	50529027                # 0x3030303
	.long	50529027                # 0x3030303
	.size	ININT_STRENGTH, 16

	.type	BLK_NUM,@object         # @BLK_NUM
	.globl	BLK_NUM
	.p2align	4
BLK_NUM:
	.ascii	"\000\004\b\f"
	.ascii	"\001\005\t\r"
	.ascii	"\002\006\n\016"
	.ascii	"\003\007\013\017"
	.ascii	"\000\001\002\003"
	.ascii	"\004\005\006\007"
	.ascii	"\b\t\n\013"
	.ascii	"\f\r\016\017"
	.size	BLK_NUM, 32

	.type	BLK_4_TO_8,@object      # @BLK_4_TO_8
	.globl	BLK_4_TO_8
	.p2align	4
BLK_4_TO_8:
	.ascii	"\000\000\001\001\000\000\001\001\002\002\003\003\002\002\003\003"
	.size	BLK_4_TO_8, 16


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
