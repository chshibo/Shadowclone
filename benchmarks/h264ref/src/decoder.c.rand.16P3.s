	.text
	.file	"decoder.c"
	.globl	decode_one_b8block      # -- Begin function decode_one_b8block
	.p2align	4, 0x90
	.type	decode_one_b8block,@function
decode_one_b8block:                     # @decode_one_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_decode_one_b8block.3
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_decode_one_b8block.7
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_decode_one_b8block.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_decode_one_b8block.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.32
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_decode_one_b8block.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.43
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_decode_one_b8block.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_decode_one_b8block.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_decode_one_b8block.58
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_decode_one_b8block.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_decode_one_b8block.92
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.92
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_decode_one_b8block.95
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.95
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_decode_one_b8block.99
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.99
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_decode_one_b8block.106
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.106
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_decode_one_b8block.112
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.112
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_decode_one_b8block.114
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.114
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_decode_one_b8block.117
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.117
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	decode_one_b8block, .Lfunc_end0-decode_one_b8block
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block     # -- Begin function Get_Reference_Block
	.p2align	4, 0x90
	.type	Get_Reference_Block,@function
Get_Reference_Block:                    # @Get_Reference_Block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_Get_Reference_Block.22
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	Get_Reference_Block.22
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_Get_Reference_Block.37
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_Get_Reference_Block.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_Get_Reference_Block.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_Get_Reference_Block.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.50
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_Get_Reference_Block.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_Get_Reference_Block.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.74
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_Get_Reference_Block.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.82
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_Get_Reference_Block.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.90
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_Get_Reference_Block.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.94
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_Get_Reference_Block.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.105
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_Get_Reference_Block.109
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.109
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_Get_Reference_Block.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.111
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_Get_Reference_Block.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.116
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_Get_Reference_Block.118
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.118
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_Get_Reference_Block.121
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.121
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %r11d
	movq	-48(%rbp), %r10         # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movq	%r10, %r9
	movl	%r11d, %r8d
	movl	%r13d, %r15d
	movl	%edx, %r12d
	movl	%esi, %r14d
	movq	%rdi, %rbx
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	Get_Reference_Block, .Lfunc_end1-Get_Reference_Block
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb           # -- Begin function decode_one_mb
	.p2align	4, 0x90
	.type	decode_one_mb,@function
decode_one_mb:                          # @decode_one_mb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_decode_one_mb.23
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_decode_one_mb.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	decode_one_mb, .Lfunc_end2-decode_one_mb
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel     # -- Begin function Get_Reference_Pixel
	.p2align	4, 0x90
	.type	Get_Reference_Pixel,@function
Get_Reference_Pixel:                    # @Get_Reference_Pixel
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_Get_Reference_Pixel.1
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.1
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_Get_Reference_Pixel.11
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.11
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_Get_Reference_Pixel.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.15
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_Get_Reference_Pixel.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.39
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_Get_Reference_Pixel.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.41
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_Get_Reference_Pixel.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.64
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_Get_Reference_Pixel.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.65
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_Get_Reference_Pixel.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.66
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_Get_Reference_Pixel.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.68
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_Get_Reference_Pixel.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.69
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_Get_Reference_Pixel.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.77
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_Get_Reference_Pixel.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.85
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_Get_Reference_Pixel.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.97
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_Get_Reference_Pixel.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.108
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_Get_Reference_Pixel.115
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.115
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_Get_Reference_Pixel.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.127
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	Get_Reference_Pixel, .Lfunc_end3-Get_Reference_Pixel
	.cfi_endproc
                                        # -- End function
	.globl	UpdateDecoders          # -- Begin function UpdateDecoders
	.p2align	4, 0x90
	.type	UpdateDecoders,@function
UpdateDecoders:                         # @UpdateDecoders
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB4_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	decs, %rax
	movq	40(%rax), %rdi
	callq	Build_Status_Map
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	40(%rax), %rsi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	Error_Concealment
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	DecOneForthPix
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	UpdateDecoders, .Lfunc_end4-UpdateDecoders
	.cfi_endproc
                                        # -- End function
	.globl	Build_Status_Map        # -- Begin function Build_Status_Map
	.p2align	4, 0x90
	.type	Build_Status_Map,@function
Build_Status_Map:                       # @Build_Status_Map
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_Build_Status_Map.2
	movq	%rbx, %rdi
	callq	Build_Status_Map.2
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_Build_Status_Map.4
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_Build_Status_Map.6
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_Build_Status_Map.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_Build_Status_Map.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_Build_Status_Map.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.29
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_Build_Status_Map.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_Build_Status_Map.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.42
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_Build_Status_Map.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.48
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_Build_Status_Map.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.51
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_Build_Status_Map.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.54
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_Build_Status_Map.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.59
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_Build_Status_Map.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.60
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_Build_Status_Map.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.62
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_Build_Status_Map.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_Build_Status_Map.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.84
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	Build_Status_Map, .Lfunc_end5-Build_Status_Map
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment       # -- Begin function Error_Concealment
	.p2align	4, 0x90
	.type	Error_Concealment,@function
Error_Concealment:                      # @Error_Concealment
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_17
# %bb.1:                                # %func_Error_Concealment.8
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Error_Concealment.10
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.10
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Error_Concealment.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Error_Concealment.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_Error_Concealment.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_Error_Concealment.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_Error_Concealment.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.72
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_Error_Concealment.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.73
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %func_Error_Concealment.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.86
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_10:                               # %func_Error_Concealment.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.88
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_11:                               # %func_Error_Concealment.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.101
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_12:                               # %func_Error_Concealment.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.107
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_13:                               # %func_Error_Concealment.110
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.110
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_14:                               # %func_Error_Concealment.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.119
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_15:                               # %func_Error_Concealment.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.122
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_16:                               # %func_Error_Concealment.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.124
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB6_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB6_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB6_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB6_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB6_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB6_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB6_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB6_15
	jmp	.LBB6_16
.Lfunc_end6:
	.size	Error_Concealment, .Lfunc_end6-Error_Concealment
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix          # -- Begin function DecOneForthPix
	.p2align	4, 0x90
	.type	DecOneForthPix,@function
DecOneForthPix:                         # @DecOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_17
# %bb.1:                                # %func_DecOneForthPix.5
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_DecOneForthPix.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_DecOneForthPix.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.46
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_DecOneForthPix.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.57
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_DecOneForthPix.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.78
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_DecOneForthPix.83
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.83
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_DecOneForthPix.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.87
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_DecOneForthPix.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.96
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %func_DecOneForthPix.98
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.98
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_10:                               # %func_DecOneForthPix.104
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.104
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_11:                               # %func_DecOneForthPix.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.113
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_12:                               # %func_DecOneForthPix.123
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.123
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_13:                               # %func_DecOneForthPix.126
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.126
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_14:                               # %func_DecOneForthPix.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.128
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_15:                               # %func_DecOneForthPix.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.129
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_16:                               # %func_DecOneForthPix.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.130
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB7_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB7_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB7_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB7_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB7_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB7_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB7_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB7_15
	jmp	.LBB7_16
.Lfunc_end7:
	.size	DecOneForthPix, .Lfunc_end7-DecOneForthPix
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block # -- Begin function compute_residue_b8block
	.p2align	4, 0x90
	.type	compute_residue_b8block,@function
compute_residue_b8block:                # @compute_residue_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_17
# %bb.1:                                # %func_compute_residue_b8block.17
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_compute_residue_b8block.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_compute_residue_b8block.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_compute_residue_b8block.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.31
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_compute_residue_b8block.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.33
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_compute_residue_b8block.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.35
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_compute_residue_b8block.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.38
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_compute_residue_b8block.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.56
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %func_compute_residue_b8block.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_10:                               # %func_compute_residue_b8block.76
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_11:                               # %func_compute_residue_b8block.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.80
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_12:                               # %func_compute_residue_b8block.89
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.89
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_13:                               # %func_compute_residue_b8block.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.93
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_14:                               # %func_compute_residue_b8block.103
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.103
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_15:                               # %func_compute_residue_b8block.120
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.120
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_16:                               # %func_compute_residue_b8block.125
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.125
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB8_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB8_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB8_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB8_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB8_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB8_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB8_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB8_15
	jmp	.LBB8_16
.Lfunc_end8:
	.size	compute_residue_b8block, .Lfunc_end8-compute_residue_b8block
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_mb      # -- Begin function compute_residue_mb
	.p2align	4, 0x90
	.type	compute_residue_mb,@function
compute_residue_mb:                     # @compute_residue_mb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %esi
	xorl	%edi, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$1, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$2, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$3, %edi
	callq	compute_residue_b8block
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	compute_residue_mb, .Lfunc_end9-compute_residue_mb
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error           # -- Begin function Conceal_Error
	.p2align	4, 0x90
	.type	Conceal_Error,@function
Conceal_Error:                          # @Conceal_Error
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_17
# %bb.1:                                # %func_Conceal_Error.9
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_Conceal_Error.13
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.13
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_Conceal_Error.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.16
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_Conceal_Error.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_Conceal_Error.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_Conceal_Error.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_Conceal_Error.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_Conceal_Error.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.47
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %func_Conceal_Error.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_10:                              # %func_Conceal_Error.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_11:                              # %func_Conceal_Error.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_12:                              # %func_Conceal_Error.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.79
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_13:                              # %func_Conceal_Error.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.81
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_14:                              # %func_Conceal_Error.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.91
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_15:                              # %func_Conceal_Error.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.100
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_16:                              # %func_Conceal_Error.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.102
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB10_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB10_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB10_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB10_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB10_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB10_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB10_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB10_15
	jmp	.LBB10_16
.Lfunc_end10:
	.size	Conceal_Error, .Lfunc_end10-Conceal_Error
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.1   # -- Begin function Get_Reference_Pixel.1
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.1,@function
Get_Reference_Pixel.1:                  # @Get_Reference_Pixel.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1468804848, -100(%rbp) # imm = 0x578C2EF0
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB11_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB11_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB11_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB11_5
.LBB11_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB11_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB11_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB11_11
.LBB11_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB11_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB11_10
.LBB11_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB11_10:                              # %cond.end14
.LBB11_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB11_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB11_14
.LBB11_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB11_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB11_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB11_20
.LBB11_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB11_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB11_19
.LBB11_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB11_19:                              # %cond.end29
.LBB11_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_332
.LBB11_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB11_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB11_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB11_25
.LBB11_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB11_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB11_31
.LBB11_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB11_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB11_30
.LBB11_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB11_30:                              # %cond.end52
.LBB11_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB11_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB11_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_36
.LBB11_35:                              # %cond.false61
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_36:                              # %cond.end63
                                        #   in Loop: Header=BB11_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB11_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_42
.LBB11_38:                              # %cond.false68
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_41
.LBB11_40:                              # %cond.false73
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_41:                              # %cond.end75
                                        #   in Loop: Header=BB11_32 Depth=1
.LBB11_42:                              # %cond.end77
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_32
.LBB11_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_47
.LBB11_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB11_53
.LBB11_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_52
.LBB11_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_52:                              # %cond.end113
.LBB11_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB11_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB11_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB11_57
.LBB11_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB11_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB11_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB11_63
.LBB11_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB11_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB11_62
.LBB11_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB11_62:                              # %cond.end136
.LBB11_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB11_76
.LBB11_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB11_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB11_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB11_68
.LBB11_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB11_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB11_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB11_74
.LBB11_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB11_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB11_73
.LBB11_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB11_73:                              # %cond.end169
.LBB11_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB11_75:                              # %if.end
	jmp	.LBB11_76
.LBB11_76:                              # %if.end178
	jmp	.LBB11_331
.LBB11_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB11_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB11_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB11_81
.LBB11_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB11_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB11_87
.LBB11_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB11_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB11_86
.LBB11_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB11_86:                              # %cond.end197
.LBB11_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB11_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB11_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_92
.LBB11_91:                              # %cond.false209
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_92:                              # %cond.end211
                                        #   in Loop: Header=BB11_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB11_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_98
.LBB11_94:                              # %cond.false216
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_97
.LBB11_96:                              # %cond.false221
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_97:                              # %cond.end223
                                        #   in Loop: Header=BB11_88 Depth=1
.LBB11_98:                              # %cond.end225
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_88
.LBB11_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_103
.LBB11_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB11_109
.LBB11_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_108
.LBB11_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_108:                             # %cond.end266
.LBB11_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB11_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB11_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB11_113
.LBB11_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB11_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB11_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB11_119
.LBB11_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB11_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB11_118
.LBB11_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB11_118:                             # %cond.end287
.LBB11_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB11_132
.LBB11_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB11_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB11_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB11_124
.LBB11_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB11_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB11_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB11_130
.LBB11_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB11_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB11_129
.LBB11_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB11_129:                             # %cond.end320
.LBB11_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB11_131:                             # %if.end331
	jmp	.LBB11_132
.LBB11_132:                             # %if.end332
	jmp	.LBB11_330
.LBB11_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB11_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB11_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB11_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_139
.LBB11_138:                             # %cond.false345
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_139:                             # %cond.end347
                                        #   in Loop: Header=BB11_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB11_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_145
.LBB11_141:                             # %cond.false352
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_144
.LBB11_143:                             # %cond.false357
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_144:                             # %cond.end359
                                        #   in Loop: Header=BB11_135 Depth=1
.LBB11_145:                             # %cond.end361
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB11_146:                             # %for.cond363
                                        #   Parent Loop BB11_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB11_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB11_150
.LBB11_149:                             # %cond.false371
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_150:                             # %cond.end373
                                        #   in Loop: Header=BB11_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB11_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB11_156
.LBB11_152:                             # %cond.false378
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB11_155
.LBB11_154:                             # %cond.false383
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_155:                             # %cond.end385
                                        #   in Loop: Header=BB11_146 Depth=2
.LBB11_156:                             # %cond.end387
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_146
.LBB11_158:                             # %for.end401
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_135
.LBB11_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB11_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB11_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB11_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB11_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_161
.LBB11_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_167
.LBB11_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB11_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB11_173
.LBB11_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_172
.LBB11_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB11_172:                             # %cond.end449
.LBB11_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB11_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_177
.LBB11_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB11_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB11_183
.LBB11_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_182
.LBB11_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_182:                             # %cond.end486
.LBB11_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB11_196
.LBB11_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB11_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_188
.LBB11_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB11_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB11_194
.LBB11_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_193
.LBB11_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_193:                             # %cond.end526
.LBB11_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB11_195:                             # %if.end532
	jmp	.LBB11_196
.LBB11_196:                             # %if.end533
	jmp	.LBB11_329
.LBB11_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB11_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB11_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB11_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_203
.LBB11_202:                             # %cond.false546
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_203:                             # %cond.end548
                                        #   in Loop: Header=BB11_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB11_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_209
.LBB11_205:                             # %cond.false553
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_208
.LBB11_207:                             # %cond.false558
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_208:                             # %cond.end560
                                        #   in Loop: Header=BB11_199 Depth=1
.LBB11_209:                             # %cond.end562
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB11_210:                             # %for.cond564
                                        #   Parent Loop BB11_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB11_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB11_214
.LBB11_213:                             # %cond.false572
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_214:                             # %cond.end574
                                        #   in Loop: Header=BB11_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB11_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB11_220
.LBB11_216:                             # %cond.false579
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB11_219
.LBB11_218:                             # %cond.false584
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_219:                             # %cond.end586
                                        #   in Loop: Header=BB11_210 Depth=2
.LBB11_220:                             # %cond.end588
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_210
.LBB11_222:                             # %for.end602
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_199
.LBB11_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB11_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB11_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB11_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB11_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_225
.LBB11_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_231
.LBB11_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB11_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB11_237
.LBB11_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_236
.LBB11_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB11_236:                             # %cond.end650
.LBB11_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB11_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_241
.LBB11_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB11_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB11_247
.LBB11_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_246
.LBB11_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_246:                             # %cond.end687
.LBB11_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB11_258
.LBB11_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_251
.LBB11_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB11_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB11_257
.LBB11_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_256
.LBB11_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_256:                             # %cond.end724
.LBB11_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB11_258:                             # %if.end730
	jmp	.LBB11_328
.LBB11_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB11_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB11_262
.LBB11_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB11_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB11_265
.LBB11_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB11_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB11_271
.LBB11_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB11_270
.LBB11_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB11_270:                             # %cond.end753
.LBB11_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB11_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB11_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_276
.LBB11_275:                             # %cond.false765
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_276:                             # %cond.end767
                                        #   in Loop: Header=BB11_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB11_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_282
.LBB11_278:                             # %cond.false772
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_281
.LBB11_280:                             # %cond.false777
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_281:                             # %cond.end779
                                        #   in Loop: Header=BB11_272 Depth=1
.LBB11_282:                             # %cond.end781
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_272
.LBB11_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_287
.LBB11_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB11_293
.LBB11_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_292
.LBB11_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_292:                             # %cond.end822
.LBB11_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB11_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB11_296
.LBB11_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB11_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB11_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB11_299
.LBB11_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB11_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB11_305
.LBB11_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB11_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB11_304
.LBB11_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB11_304:                             # %cond.end847
.LBB11_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB11_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB11_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_310
.LBB11_309:                             # %cond.false859
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_310:                             # %cond.end861
                                        #   in Loop: Header=BB11_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB11_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_316
.LBB11_312:                             # %cond.false866
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_315
.LBB11_314:                             # %cond.false871
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_315:                             # %cond.end873
                                        #   in Loop: Header=BB11_306 Depth=1
.LBB11_316:                             # %cond.end875
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_306
.LBB11_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_321
.LBB11_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB11_327
.LBB11_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_326
.LBB11_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_326:                             # %cond.end916
.LBB11_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB11_328:                             # %if.end922
	jmp	.LBB11_329
.LBB11_329:                             # %if.end923
	jmp	.LBB11_330
.LBB11_330:                             # %if.end924
	jmp	.LBB11_331
.LBB11_331:                             # %if.end925
	jmp	.LBB11_332
.LBB11_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1468804848, -100(%rbp) # imm = 0x578C2EF0
	jne	.LBB11_334
.LBB11_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_333
.Lfunc_end11:
	.size	Get_Reference_Pixel.1, .Lfunc_end11-Get_Reference_Pixel.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.2
.LCPI12_0:
	.quad	4636737291354636288     # double 100
.LCPI12_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.2
	.p2align	4, 0x90
	.type	Build_Status_Map.2,@function
Build_Status_Map.2:                     # @Build_Status_Map.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1111925597, -40(%rbp)  # imm = 0x4246A35D
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -12(%rbp)
.LBB12_3:                               # %for.cond2
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB12_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB12_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB12_13
.LBB12_6:                               # %if.then
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI12_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB12_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB12_8:                               # %if.end
                                        #   in Loop: Header=BB12_3 Depth=2
	callq	rand
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI12_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB12_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB12_10:                              # %if.end20
                                        #   in Loop: Header=BB12_3 Depth=2
	callq	rand
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI12_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB12_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	$1, -4(%rbp)
.LBB12_12:                              # %if.end29
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB12_13:                              # %if.end30
                                        #   in Loop: Header=BB12_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB12_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB12_18
.LBB12_15:                              # %if.else
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB12_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB12_17:                              # %if.end49
                                        #   in Loop: Header=BB12_3 Depth=2
	jmp	.LBB12_18
.LBB12_18:                              # %if.end50
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_3
.LBB12_20:                              # %for.end
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_21
.LBB12_21:                              # %for.inc53
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_1
.LBB12_22:                              # %for.end55
	cmpl	$1111925597, -40(%rbp)  # imm = 0x4246A35D
	jne	.LBB12_24
.LBB12_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_23
.Lfunc_end12:
	.size	Build_Status_Map.2, .Lfunc_end12-Build_Status_Map.2
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.3    # -- Begin function decode_one_b8block.3
	.p2align	4, 0x90
	.type	decode_one_b8block.3,@function
decode_one_b8block.3:                   # @decode_one_b8block.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2107415742, -84(%rbp)  # imm = 0x7D9C9CBE
	movl	%edi, -44(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB13_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB13_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB13_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB13_4:                               # %for.cond9
                                        #   Parent Loop BB13_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB13_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB13_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB13_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_4
.LBB13_7:                               # %for.end
                                        #   in Loop: Header=BB13_2 Depth=1
	jmp	.LBB13_8
.LBB13_8:                               # %for.inc26
                                        #   in Loop: Header=BB13_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_2
.LBB13_9:                               # %for.end28
	jmp	.LBB13_96
.LBB13_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB13_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB13_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB13_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB13_31
.LBB13_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB13_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB13_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB13_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB13_17:                              # %for.cond40
                                        #   Parent Loop BB13_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB13_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB13_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB13_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_17
.LBB13_20:                              # %for.end49
                                        #   in Loop: Header=BB13_15 Depth=1
	jmp	.LBB13_21
.LBB13_21:                              # %for.inc50
                                        #   in Loop: Header=BB13_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_15
.LBB13_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB13_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB13_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB13_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB13_25:                              # %for.cond56
                                        #   Parent Loop BB13_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB13_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB13_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB13_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_25
.LBB13_28:                              # %for.end71
                                        #   in Loop: Header=BB13_23 Depth=1
	jmp	.LBB13_29
.LBB13_29:                              # %for.inc72
                                        #   in Loop: Header=BB13_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_23
.LBB13_30:                              # %for.end74
	jmp	.LBB13_60
.LBB13_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB13_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB13_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB13_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB13_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB13_36:                              # %for.cond83
                                        #   Parent Loop BB13_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB13_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB13_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB13_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_36
.LBB13_39:                              # %for.end120
                                        #   in Loop: Header=BB13_34 Depth=1
	jmp	.LBB13_40
.LBB13_40:                              # %for.inc121
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_34
.LBB13_41:                              # %for.end123
	jmp	.LBB13_51
.LBB13_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB13_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB13_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB13_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB13_45:                              # %for.cond129
                                        #   Parent Loop BB13_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB13_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB13_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB13_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_45
.LBB13_48:                              # %for.end145
                                        #   in Loop: Header=BB13_43 Depth=1
	jmp	.LBB13_49
.LBB13_49:                              # %for.inc146
                                        #   in Loop: Header=BB13_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_43
.LBB13_50:                              # %for.end148
	jmp	.LBB13_51
.LBB13_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB13_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB13_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB13_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB13_54:                              # %for.cond153
                                        #   Parent Loop BB13_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB13_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB13_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB13_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_54
.LBB13_57:                              # %for.end167
                                        #   in Loop: Header=BB13_52 Depth=1
	jmp	.LBB13_58
.LBB13_58:                              # %for.inc168
                                        #   in Loop: Header=BB13_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_52
.LBB13_59:                              # %for.end170
	jmp	.LBB13_60
.LBB13_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB13_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB13_66
.LBB13_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB13_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB13_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB13_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB13_86
.LBB13_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB13_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_69 Depth 2
                                        #       Child Loop BB13_74 Depth 3
                                        #         Child Loop BB13_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB13_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB13_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB13_69:                              # %for.cond197
                                        #   Parent Loop BB13_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_74 Depth 3
                                        #         Child Loop BB13_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB13_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB13_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB13_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB13_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB13_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB13_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB13_73:                              # %if.end218
                                        #   in Loop: Header=BB13_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB13_74:                              # %for.cond233
                                        #   Parent Loop BB13_67 Depth=1
                                        #     Parent Loop BB13_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB13_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB13_74 Depth=3
	movl	$0, -4(%rbp)
.LBB13_76:                              # %for.cond237
                                        #   Parent Loop BB13_67 Depth=1
                                        #     Parent Loop BB13_69 Depth=2
                                        #       Parent Loop BB13_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB13_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB13_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB13_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_76
.LBB13_79:                              # %for.end269
                                        #   in Loop: Header=BB13_74 Depth=3
	jmp	.LBB13_80
.LBB13_80:                              # %for.inc270
                                        #   in Loop: Header=BB13_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_74
.LBB13_81:                              # %for.end272
                                        #   in Loop: Header=BB13_69 Depth=2
	jmp	.LBB13_82
.LBB13_82:                              # %for.inc273
                                        #   in Loop: Header=BB13_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_69
.LBB13_83:                              # %for.end275
                                        #   in Loop: Header=BB13_67 Depth=1
	jmp	.LBB13_84
.LBB13_84:                              # %for.inc276
                                        #   in Loop: Header=BB13_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_67
.LBB13_85:                              # %for.end278
	jmp	.LBB13_95
.LBB13_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB13_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB13_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB13_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB13_89:                              # %for.cond284
                                        #   Parent Loop BB13_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB13_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB13_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB13_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_89
.LBB13_92:                              # %for.end310
                                        #   in Loop: Header=BB13_87 Depth=1
	jmp	.LBB13_93
.LBB13_93:                              # %for.inc311
                                        #   in Loop: Header=BB13_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_87
.LBB13_94:                              # %for.end313
	jmp	.LBB13_95
.LBB13_95:                              # %if.end314
	jmp	.LBB13_96
.LBB13_96:                              # %if.end315
	cmpl	$2107415742, -84(%rbp)  # imm = 0x7D9C9CBE
	jne	.LBB13_98
.LBB13_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_97
.Lfunc_end13:
	.size	decode_one_b8block.3, .Lfunc_end13-decode_one_b8block.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.4
.LCPI14_0:
	.quad	4636737291354636288     # double 100
.LCPI14_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.4
	.p2align	4, 0x90
	.type	Build_Status_Map.4,@function
Build_Status_Map.4:                     # @Build_Status_Map.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1070913295, -44(%rbp)  # imm = 0x3FD4D70F
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	$0, -8(%rbp)
.LBB14_3:                               # %for.cond2
                                        #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB14_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB14_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB14_13
.LBB14_6:                               # %if.then
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI14_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB14_8:                               # %if.end
                                        #   in Loop: Header=BB14_3 Depth=2
	callq	rand
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI14_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB14_10:                              # %if.end20
                                        #   in Loop: Header=BB14_3 Depth=2
	callq	rand
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI14_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	$1, -4(%rbp)
.LBB14_12:                              # %if.end29
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB14_13:                              # %if.end30
                                        #   in Loop: Header=BB14_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB14_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB14_18
.LBB14_15:                              # %if.else
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB14_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB14_17:                              # %if.end49
                                        #   in Loop: Header=BB14_3 Depth=2
	jmp	.LBB14_18
.LBB14_18:                              # %if.end50
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_3
.LBB14_20:                              # %for.end
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_21
.LBB14_21:                              # %for.inc53
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_1
.LBB14_22:                              # %for.end55
	cmpl	$1070913295, -44(%rbp)  # imm = 0x3FD4D70F
	jne	.LBB14_24
.LBB14_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_23
.Lfunc_end14:
	.size	Build_Status_Map.4, .Lfunc_end14-Build_Status_Map.4
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.5        # -- Begin function DecOneForthPix.5
	.p2align	4, 0x90
	.type	DecOneForthPix.5,@function
DecOneForthPix.5:                       # @DecOneForthPix.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2109076963, -12(%rbp)  # imm = 0x7DB5F5E3
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB15_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB15_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_1
.LBB15_4:                               # %for.end
	cmpl	$2109076963, -12(%rbp)  # imm = 0x7DB5F5E3
	jne	.LBB15_6
.LBB15_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_5
.Lfunc_end15:
	.size	DecOneForthPix.5, .Lfunc_end15-DecOneForthPix.5
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.6
.LCPI16_0:
	.quad	4636737291354636288     # double 100
.LCPI16_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.6
	.p2align	4, 0x90
	.type	Build_Status_Map.6,@function
Build_Status_Map.6:                     # @Build_Status_Map.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1763070578, -40(%rbp)  # imm = 0x69165272
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB16_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -12(%rbp)
.LBB16_3:                               # %for.cond2
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB16_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB16_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB16_13
.LBB16_6:                               # %if.then
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI16_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI16_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB16_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB16_8:                               # %if.end
                                        #   in Loop: Header=BB16_3 Depth=2
	callq	rand
	vmovsd	.LCPI16_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI16_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB16_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB16_10:                              # %if.end20
                                        #   in Loop: Header=BB16_3 Depth=2
	callq	rand
	vmovsd	.LCPI16_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI16_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB16_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	$1, -4(%rbp)
.LBB16_12:                              # %if.end29
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB16_13:                              # %if.end30
                                        #   in Loop: Header=BB16_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB16_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB16_18
.LBB16_15:                              # %if.else
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB16_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB16_17:                              # %if.end49
                                        #   in Loop: Header=BB16_3 Depth=2
	jmp	.LBB16_18
.LBB16_18:                              # %if.end50
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_3
.LBB16_20:                              # %for.end
                                        #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_21
.LBB16_21:                              # %for.inc53
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_1
.LBB16_22:                              # %for.end55
	cmpl	$1763070578, -40(%rbp)  # imm = 0x69165272
	jne	.LBB16_24
.LBB16_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_23
.Lfunc_end16:
	.size	Build_Status_Map.6, .Lfunc_end16-Build_Status_Map.6
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.7    # -- Begin function decode_one_b8block.7
	.p2align	4, 0x90
	.type	decode_one_b8block.7,@function
decode_one_b8block.7:                   # @decode_one_b8block.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$168667194, -84(%rbp)   # imm = 0xA0DA83A
	movl	%edi, -52(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB17_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB17_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB17_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB17_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB17_4:                               # %for.cond9
                                        #   Parent Loop BB17_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB17_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB17_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB17_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_4
.LBB17_7:                               # %for.end
                                        #   in Loop: Header=BB17_2 Depth=1
	jmp	.LBB17_8
.LBB17_8:                               # %for.inc26
                                        #   in Loop: Header=BB17_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_2
.LBB17_9:                               # %for.end28
	jmp	.LBB17_96
.LBB17_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB17_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB17_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB17_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB17_31
.LBB17_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB17_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB17_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB17_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB17_17:                              # %for.cond40
                                        #   Parent Loop BB17_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB17_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB17_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB17_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_17
.LBB17_20:                              # %for.end49
                                        #   in Loop: Header=BB17_15 Depth=1
	jmp	.LBB17_21
.LBB17_21:                              # %for.inc50
                                        #   in Loop: Header=BB17_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_15
.LBB17_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB17_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB17_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB17_25:                              # %for.cond56
                                        #   Parent Loop BB17_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB17_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB17_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB17_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_25
.LBB17_28:                              # %for.end71
                                        #   in Loop: Header=BB17_23 Depth=1
	jmp	.LBB17_29
.LBB17_29:                              # %for.inc72
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_23
.LBB17_30:                              # %for.end74
	jmp	.LBB17_60
.LBB17_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB17_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB17_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB17_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB17_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB17_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB17_36:                              # %for.cond83
                                        #   Parent Loop BB17_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB17_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB17_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB17_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_36
.LBB17_39:                              # %for.end120
                                        #   in Loop: Header=BB17_34 Depth=1
	jmp	.LBB17_40
.LBB17_40:                              # %for.inc121
                                        #   in Loop: Header=BB17_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_34
.LBB17_41:                              # %for.end123
	jmp	.LBB17_51
.LBB17_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB17_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB17_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB17_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB17_45:                              # %for.cond129
                                        #   Parent Loop BB17_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB17_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB17_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB17_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_45
.LBB17_48:                              # %for.end145
                                        #   in Loop: Header=BB17_43 Depth=1
	jmp	.LBB17_49
.LBB17_49:                              # %for.inc146
                                        #   in Loop: Header=BB17_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_43
.LBB17_50:                              # %for.end148
	jmp	.LBB17_51
.LBB17_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB17_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB17_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB17_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB17_54:                              # %for.cond153
                                        #   Parent Loop BB17_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB17_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB17_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB17_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_54
.LBB17_57:                              # %for.end167
                                        #   in Loop: Header=BB17_52 Depth=1
	jmp	.LBB17_58
.LBB17_58:                              # %for.inc168
                                        #   in Loop: Header=BB17_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_52
.LBB17_59:                              # %for.end170
	jmp	.LBB17_60
.LBB17_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB17_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB17_66
.LBB17_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB17_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB17_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB17_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB17_86
.LBB17_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB17_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_69 Depth 2
                                        #       Child Loop BB17_74 Depth 3
                                        #         Child Loop BB17_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB17_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB17_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB17_69:                              # %for.cond197
                                        #   Parent Loop BB17_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_74 Depth 3
                                        #         Child Loop BB17_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB17_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB17_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB17_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB17_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB17_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB17_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB17_73:                              # %if.end218
                                        #   in Loop: Header=BB17_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB17_74:                              # %for.cond233
                                        #   Parent Loop BB17_67 Depth=1
                                        #     Parent Loop BB17_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB17_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB17_74 Depth=3
	movl	$0, -8(%rbp)
.LBB17_76:                              # %for.cond237
                                        #   Parent Loop BB17_67 Depth=1
                                        #     Parent Loop BB17_69 Depth=2
                                        #       Parent Loop BB17_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB17_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB17_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB17_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_76
.LBB17_79:                              # %for.end269
                                        #   in Loop: Header=BB17_74 Depth=3
	jmp	.LBB17_80
.LBB17_80:                              # %for.inc270
                                        #   in Loop: Header=BB17_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_74
.LBB17_81:                              # %for.end272
                                        #   in Loop: Header=BB17_69 Depth=2
	jmp	.LBB17_82
.LBB17_82:                              # %for.inc273
                                        #   in Loop: Header=BB17_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_69
.LBB17_83:                              # %for.end275
                                        #   in Loop: Header=BB17_67 Depth=1
	jmp	.LBB17_84
.LBB17_84:                              # %for.inc276
                                        #   in Loop: Header=BB17_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_67
.LBB17_85:                              # %for.end278
	jmp	.LBB17_95
.LBB17_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB17_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB17_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB17_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB17_89:                              # %for.cond284
                                        #   Parent Loop BB17_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB17_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB17_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB17_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_89
.LBB17_92:                              # %for.end310
                                        #   in Loop: Header=BB17_87 Depth=1
	jmp	.LBB17_93
.LBB17_93:                              # %for.inc311
                                        #   in Loop: Header=BB17_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_87
.LBB17_94:                              # %for.end313
	jmp	.LBB17_95
.LBB17_95:                              # %if.end314
	jmp	.LBB17_96
.LBB17_96:                              # %if.end315
	cmpl	$168667194, -84(%rbp)   # imm = 0xA0DA83A
	jne	.LBB17_98
.LBB17_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_97
.Lfunc_end17:
	.size	decode_one_b8block.7, .Lfunc_end17-decode_one_b8block.7
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.8     # -- Begin function Error_Concealment.8
	.p2align	4, 0x90
	.type	Error_Concealment.8,@function
Error_Concealment.8:                    # @Error_Concealment.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$439740164, -20(%rbp)   # imm = 0x1A35E704
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB18_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -4(%rbp)
.LBB18_3:                               # %for.cond2
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB18_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB18_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB18_6:                               # %if.end
                                        #   in Loop: Header=BB18_3 Depth=2
	jmp	.LBB18_7
.LBB18_7:                               # %for.inc
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_3
.LBB18_8:                               # %for.end
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_9
.LBB18_9:                               # %for.inc7
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_1
.LBB18_10:                              # %for.end9
	cmpl	$439740164, -20(%rbp)   # imm = 0x1A35E704
	jne	.LBB18_12
.LBB18_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_11
.Lfunc_end18:
	.size	Error_Concealment.8, .Lfunc_end18-Error_Concealment.8
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.9         # -- Begin function Conceal_Error.9
	.p2align	4, 0x90
	.type	Conceal_Error.9,@function
Conceal_Error.9:                        # @Conceal_Error.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1866755576, -68(%rbp)  # imm = 0x6F446DF8
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB19_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB19_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB19_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB19_4:                               # %land.end
.LBB19_5:                               # %lor.end
.LBB19_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB19_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB19_9
.LBB19_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB19_14
.LBB19_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB19_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB19_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB19_12:                              # %land.end51
.LBB19_13:                              # %lor.end53
.LBB19_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB19_180
# %bb.15:                               # %land.end54
	movq	.LJTI19_0(,%rax,8), %rax
	jmpq	*%rax
.LBB19_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB19_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB19_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB19_18 Depth=1
	movl	$0, -4(%rbp)
.LBB19_20:                              # %for.cond68
                                        #   Parent Loop BB19_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB19_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB19_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_20
.LBB19_23:                              # %for.end
                                        #   in Loop: Header=BB19_18 Depth=1
	jmp	.LBB19_24
.LBB19_24:                              # %for.inc85
                                        #   in Loop: Header=BB19_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_18
.LBB19_25:                              # %for.end87
	jmp	.LBB19_35
.LBB19_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB19_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB19_27 Depth=1
	movl	$0, -4(%rbp)
.LBB19_29:                              # %for.cond92
                                        #   Parent Loop BB19_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB19_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB19_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_29
.LBB19_32:                              # %for.end104
                                        #   in Loop: Header=BB19_27 Depth=1
	jmp	.LBB19_33
.LBB19_33:                              # %for.inc105
                                        #   in Loop: Header=BB19_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_27
.LBB19_34:                              # %for.end107
	jmp	.LBB19_35
.LBB19_35:                              # %if.end
	jmp	.LBB19_180
.LBB19_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB19_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_39 Depth 2
                                        #       Child Loop BB19_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB19_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB19_37 Depth=1
	movl	$0, -16(%rbp)
.LBB19_39:                              # %for.cond113
                                        #   Parent Loop BB19_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB19_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB19_39 Depth=2
	movl	$0, -4(%rbp)
.LBB19_41:                              # %for.cond117
                                        #   Parent Loop BB19_37 Depth=1
                                        #     Parent Loop BB19_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB19_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB19_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB19_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_41
.LBB19_44:                              # %for.end141
                                        #   in Loop: Header=BB19_39 Depth=2
	jmp	.LBB19_45
.LBB19_45:                              # %for.inc142
                                        #   in Loop: Header=BB19_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_39
.LBB19_46:                              # %for.end144
                                        #   in Loop: Header=BB19_37 Depth=1
	jmp	.LBB19_47
.LBB19_47:                              # %for.inc145
                                        #   in Loop: Header=BB19_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_37
.LBB19_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB19_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB19_49 Depth=1
	movl	$0, -8(%rbp)
.LBB19_51:                              # %for.cond152
                                        #   Parent Loop BB19_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB19_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB19_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_51
.LBB19_54:                              # %for.end162
                                        #   in Loop: Header=BB19_49 Depth=1
	jmp	.LBB19_55
.LBB19_55:                              # %for.inc163
                                        #   in Loop: Header=BB19_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_49
.LBB19_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB19_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB19_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB19_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB19_59 Depth=1
	movl	$0, -4(%rbp)
.LBB19_61:                              # %for.cond175
                                        #   Parent Loop BB19_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB19_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB19_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_61
.LBB19_64:                              # %for.end195
                                        #   in Loop: Header=BB19_59 Depth=1
	jmp	.LBB19_65
.LBB19_65:                              # %for.inc196
                                        #   in Loop: Header=BB19_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_59
.LBB19_66:                              # %for.end198
	jmp	.LBB19_95
.LBB19_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB19_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB19_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_71 Depth 2
                                        #       Child Loop BB19_73 Depth 3
                                        #         Child Loop BB19_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB19_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB19_71:                              # %for.cond210
                                        #   Parent Loop BB19_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_73 Depth 3
                                        #         Child Loop BB19_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB19_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB19_73:                              # %for.cond236
                                        #   Parent Loop BB19_69 Depth=1
                                        #     Parent Loop BB19_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB19_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB19_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB19_73 Depth=3
	movl	$0, -4(%rbp)
.LBB19_75:                              # %for.cond240
                                        #   Parent Loop BB19_69 Depth=1
                                        #     Parent Loop BB19_71 Depth=2
                                        #       Parent Loop BB19_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB19_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB19_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB19_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_75
.LBB19_78:                              # %for.end259
                                        #   in Loop: Header=BB19_73 Depth=3
	jmp	.LBB19_79
.LBB19_79:                              # %for.inc260
                                        #   in Loop: Header=BB19_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_73
.LBB19_80:                              # %for.end262
                                        #   in Loop: Header=BB19_71 Depth=2
	jmp	.LBB19_81
.LBB19_81:                              # %for.inc263
                                        #   in Loop: Header=BB19_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_71
.LBB19_82:                              # %for.end265
                                        #   in Loop: Header=BB19_69 Depth=1
	jmp	.LBB19_83
.LBB19_83:                              # %for.inc266
                                        #   in Loop: Header=BB19_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_69
.LBB19_84:                              # %for.end268
	jmp	.LBB19_94
.LBB19_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB19_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB19_86 Depth=1
	movl	$0, -4(%rbp)
.LBB19_88:                              # %for.cond274
                                        #   Parent Loop BB19_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB19_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB19_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_88
.LBB19_91:                              # %for.end294
                                        #   in Loop: Header=BB19_86 Depth=1
	jmp	.LBB19_92
.LBB19_92:                              # %for.inc295
                                        #   in Loop: Header=BB19_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_86
.LBB19_93:                              # %for.end297
	jmp	.LBB19_94
.LBB19_94:                              # %if.end298
	jmp	.LBB19_95
.LBB19_95:                              # %if.end299
	jmp	.LBB19_105
.LBB19_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB19_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB19_97 Depth=1
	movl	$0, -4(%rbp)
.LBB19_99:                              # %for.cond305
                                        #   Parent Loop BB19_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB19_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB19_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_99
.LBB19_102:                             # %for.end317
                                        #   in Loop: Header=BB19_97 Depth=1
	jmp	.LBB19_103
.LBB19_103:                             # %for.inc318
                                        #   in Loop: Header=BB19_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_97
.LBB19_104:                             # %for.end320
	jmp	.LBB19_105
.LBB19_105:                             # %if.end321
	jmp	.LBB19_180
.LBB19_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB19_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB19_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_110 Depth 2
                                        #       Child Loop BB19_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB19_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB19_108 Depth=1
	movl	$0, -16(%rbp)
.LBB19_110:                             # %for.cond331
                                        #   Parent Loop BB19_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB19_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB19_110 Depth=2
	movl	$0, -4(%rbp)
.LBB19_112:                             # %for.cond335
                                        #   Parent Loop BB19_108 Depth=1
                                        #     Parent Loop BB19_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB19_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB19_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB19_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_112
.LBB19_115:                             # %for.end359
                                        #   in Loop: Header=BB19_110 Depth=2
	jmp	.LBB19_116
.LBB19_116:                             # %for.inc360
                                        #   in Loop: Header=BB19_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_110
.LBB19_117:                             # %for.end362
                                        #   in Loop: Header=BB19_108 Depth=1
	jmp	.LBB19_118
.LBB19_118:                             # %for.inc363
                                        #   in Loop: Header=BB19_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_108
.LBB19_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB19_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB19_120 Depth=1
	movl	$0, -8(%rbp)
.LBB19_122:                             # %for.cond370
                                        #   Parent Loop BB19_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB19_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB19_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_122
.LBB19_125:                             # %for.end380
                                        #   in Loop: Header=BB19_120 Depth=1
	jmp	.LBB19_126
.LBB19_126:                             # %for.inc381
                                        #   in Loop: Header=BB19_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_120
.LBB19_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB19_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB19_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB19_129 Depth=1
	movl	$0, -4(%rbp)
.LBB19_131:                             # %for.cond390
                                        #   Parent Loop BB19_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB19_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB19_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_131
.LBB19_134:                             # %for.end410
                                        #   in Loop: Header=BB19_129 Depth=1
	jmp	.LBB19_135
.LBB19_135:                             # %for.inc411
                                        #   in Loop: Header=BB19_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_129
.LBB19_136:                             # %for.end413
	jmp	.LBB19_156
.LBB19_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB19_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB19_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_141 Depth 2
                                        #       Child Loop BB19_143 Depth 3
                                        #         Child Loop BB19_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB19_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB19_141:                             # %for.cond425
                                        #   Parent Loop BB19_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_143 Depth 3
                                        #         Child Loop BB19_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB19_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB19_143:                             # %for.cond452
                                        #   Parent Loop BB19_139 Depth=1
                                        #     Parent Loop BB19_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB19_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB19_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB19_143 Depth=3
	movl	$0, -4(%rbp)
.LBB19_145:                             # %for.cond456
                                        #   Parent Loop BB19_139 Depth=1
                                        #     Parent Loop BB19_141 Depth=2
                                        #       Parent Loop BB19_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB19_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB19_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB19_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_145
.LBB19_148:                             # %for.end475
                                        #   in Loop: Header=BB19_143 Depth=3
	jmp	.LBB19_149
.LBB19_149:                             # %for.inc476
                                        #   in Loop: Header=BB19_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_143
.LBB19_150:                             # %for.end478
                                        #   in Loop: Header=BB19_141 Depth=2
	jmp	.LBB19_151
.LBB19_151:                             # %for.inc479
                                        #   in Loop: Header=BB19_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_141
.LBB19_152:                             # %for.end481
                                        #   in Loop: Header=BB19_139 Depth=1
	jmp	.LBB19_153
.LBB19_153:                             # %for.inc482
                                        #   in Loop: Header=BB19_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_139
.LBB19_154:                             # %for.end484
	jmp	.LBB19_155
.LBB19_155:                             # %if.end485
	jmp	.LBB19_156
.LBB19_156:                             # %if.end486
	jmp	.LBB19_157
.LBB19_157:                             # %if.end487
	jmp	.LBB19_180
.LBB19_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB19_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB19_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB19_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB19_161 Depth=1
	movl	$0, -4(%rbp)
.LBB19_163:                             # %for.cond499
                                        #   Parent Loop BB19_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB19_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB19_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_163
.LBB19_166:                             # %for.end519
                                        #   in Loop: Header=BB19_161 Depth=1
	jmp	.LBB19_167
.LBB19_167:                             # %for.inc520
                                        #   in Loop: Header=BB19_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_161
.LBB19_168:                             # %for.end522
	jmp	.LBB19_169
.LBB19_169:                             # %if.end523
	jmp	.LBB19_179
.LBB19_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB19_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB19_171 Depth=1
	movl	$0, -4(%rbp)
.LBB19_173:                             # %for.cond529
                                        #   Parent Loop BB19_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB19_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB19_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_173
.LBB19_176:                             # %for.end541
                                        #   in Loop: Header=BB19_171 Depth=1
	jmp	.LBB19_177
.LBB19_177:                             # %for.inc542
                                        #   in Loop: Header=BB19_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_171
.LBB19_178:                             # %for.end544
	jmp	.LBB19_179
.LBB19_179:                             # %if.end545
	jmp	.LBB19_180
.LBB19_180:                             # %sw.epilog
	cmpl	$1866755576, -68(%rbp)  # imm = 0x6F446DF8
	jne	.LBB19_182
.LBB19_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_181
.Lfunc_end19:
	.size	Conceal_Error.9, .Lfunc_end19-Conceal_Error.9
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI19_0:
	.quad	.LBB19_16
	.quad	.LBB19_158
	.quad	.LBB19_106
	.quad	.LBB19_180
	.quad	.LBB19_36
                                        # -- End function
	.text
	.globl	Error_Concealment.10    # -- Begin function Error_Concealment.10
	.p2align	4, 0x90
	.type	Error_Concealment.10,@function
Error_Concealment.10:                   # @Error_Concealment.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$770585088, -20(%rbp)   # imm = 0x2DEE3200
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB20_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	$0, -8(%rbp)
.LBB20_3:                               # %for.cond2
                                        #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB20_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB20_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB20_6:                               # %if.end
                                        #   in Loop: Header=BB20_3 Depth=2
	jmp	.LBB20_7
.LBB20_7:                               # %for.inc
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_3
.LBB20_8:                               # %for.end
                                        #   in Loop: Header=BB20_1 Depth=1
	jmp	.LBB20_9
.LBB20_9:                               # %for.inc7
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_1
.LBB20_10:                              # %for.end9
	cmpl	$770585088, -20(%rbp)   # imm = 0x2DEE3200
	jne	.LBB20_12
.LBB20_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_11
.Lfunc_end20:
	.size	Error_Concealment.10, .Lfunc_end20-Error_Concealment.10
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.11  # -- Begin function Get_Reference_Pixel.11
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.11,@function
Get_Reference_Pixel.11:                 # @Get_Reference_Pixel.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$17293439, -100(%rbp)   # imm = 0x107E07F
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB21_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB21_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB21_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB21_5
.LBB21_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB21_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB21_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB21_11
.LBB21_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB21_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB21_10
.LBB21_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB21_10:                              # %cond.end14
.LBB21_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB21_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB21_14
.LBB21_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB21_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB21_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB21_20
.LBB21_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB21_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB21_19
.LBB21_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB21_19:                              # %cond.end29
.LBB21_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_332
.LBB21_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB21_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB21_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB21_25
.LBB21_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB21_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB21_31
.LBB21_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB21_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB21_30
.LBB21_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB21_30:                              # %cond.end52
.LBB21_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_36
.LBB21_35:                              # %cond.false61
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_36:                              # %cond.end63
                                        #   in Loop: Header=BB21_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB21_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_42
.LBB21_38:                              # %cond.false68
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_41
.LBB21_40:                              # %cond.false73
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_41:                              # %cond.end75
                                        #   in Loop: Header=BB21_32 Depth=1
.LBB21_42:                              # %cond.end77
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_32
.LBB21_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_47
.LBB21_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB21_53
.LBB21_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_52
.LBB21_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_52:                              # %cond.end113
.LBB21_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB21_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB21_57
.LBB21_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB21_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB21_63
.LBB21_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB21_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB21_62
.LBB21_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB21_62:                              # %cond.end136
.LBB21_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_76
.LBB21_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB21_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB21_68
.LBB21_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB21_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB21_74
.LBB21_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB21_73
.LBB21_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB21_73:                              # %cond.end169
.LBB21_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_75:                              # %if.end
	jmp	.LBB21_76
.LBB21_76:                              # %if.end178
	jmp	.LBB21_331
.LBB21_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB21_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB21_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB21_81
.LBB21_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB21_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB21_87
.LBB21_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB21_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB21_86
.LBB21_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB21_86:                              # %cond.end197
.LBB21_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_92
.LBB21_91:                              # %cond.false209
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_92:                              # %cond.end211
                                        #   in Loop: Header=BB21_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB21_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_98
.LBB21_94:                              # %cond.false216
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_97
.LBB21_96:                              # %cond.false221
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_97:                              # %cond.end223
                                        #   in Loop: Header=BB21_88 Depth=1
.LBB21_98:                              # %cond.end225
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_88
.LBB21_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_103
.LBB21_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB21_109
.LBB21_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_108
.LBB21_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_108:                             # %cond.end266
.LBB21_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB21_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB21_113
.LBB21_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB21_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB21_119
.LBB21_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB21_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB21_118
.LBB21_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB21_118:                             # %cond.end287
.LBB21_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_132
.LBB21_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB21_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB21_124
.LBB21_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB21_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB21_130
.LBB21_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB21_129
.LBB21_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB21_129:                             # %cond.end320
.LBB21_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_131:                             # %if.end331
	jmp	.LBB21_132
.LBB21_132:                             # %if.end332
	jmp	.LBB21_330
.LBB21_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB21_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB21_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_139
.LBB21_138:                             # %cond.false345
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_139:                             # %cond.end347
                                        #   in Loop: Header=BB21_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB21_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_145
.LBB21_141:                             # %cond.false352
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_144
.LBB21_143:                             # %cond.false357
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_144:                             # %cond.end359
                                        #   in Loop: Header=BB21_135 Depth=1
.LBB21_145:                             # %cond.end361
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_146:                             # %for.cond363
                                        #   Parent Loop BB21_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB21_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB21_150
.LBB21_149:                             # %cond.false371
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_150:                             # %cond.end373
                                        #   in Loop: Header=BB21_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB21_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_156
.LBB21_152:                             # %cond.false378
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB21_155
.LBB21_154:                             # %cond.false383
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_155:                             # %cond.end385
                                        #   in Loop: Header=BB21_146 Depth=2
.LBB21_156:                             # %cond.end387
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_146
.LBB21_158:                             # %for.end401
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_135
.LBB21_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB21_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB21_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_161
.LBB21_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_167
.LBB21_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB21_173
.LBB21_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_172
.LBB21_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_172:                             # %cond.end449
.LBB21_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_177
.LBB21_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB21_183
.LBB21_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_182
.LBB21_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_182:                             # %cond.end486
.LBB21_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_196
.LBB21_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB21_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_188
.LBB21_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB21_194
.LBB21_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_193
.LBB21_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_193:                             # %cond.end526
.LBB21_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_195:                             # %if.end532
	jmp	.LBB21_196
.LBB21_196:                             # %if.end533
	jmp	.LBB21_329
.LBB21_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB21_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB21_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB21_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_203
.LBB21_202:                             # %cond.false546
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_203:                             # %cond.end548
                                        #   in Loop: Header=BB21_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB21_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_209
.LBB21_205:                             # %cond.false553
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_208
.LBB21_207:                             # %cond.false558
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_208:                             # %cond.end560
                                        #   in Loop: Header=BB21_199 Depth=1
.LBB21_209:                             # %cond.end562
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_210:                             # %for.cond564
                                        #   Parent Loop BB21_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB21_214
.LBB21_213:                             # %cond.false572
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_214:                             # %cond.end574
                                        #   in Loop: Header=BB21_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB21_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_220
.LBB21_216:                             # %cond.false579
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB21_219
.LBB21_218:                             # %cond.false584
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_219:                             # %cond.end586
                                        #   in Loop: Header=BB21_210 Depth=2
.LBB21_220:                             # %cond.end588
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_210
.LBB21_222:                             # %for.end602
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_199
.LBB21_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB21_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB21_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_225
.LBB21_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_231
.LBB21_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB21_237
.LBB21_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_236
.LBB21_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_236:                             # %cond.end650
.LBB21_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_241
.LBB21_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB21_247
.LBB21_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_246
.LBB21_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_246:                             # %cond.end687
.LBB21_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_258
.LBB21_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_251
.LBB21_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB21_257
.LBB21_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_256
.LBB21_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_256:                             # %cond.end724
.LBB21_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_258:                             # %if.end730
	jmp	.LBB21_328
.LBB21_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB21_262
.LBB21_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB21_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB21_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB21_265
.LBB21_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB21_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB21_271
.LBB21_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB21_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB21_270
.LBB21_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB21_270:                             # %cond.end753
.LBB21_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_276
.LBB21_275:                             # %cond.false765
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_276:                             # %cond.end767
                                        #   in Loop: Header=BB21_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB21_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_282
.LBB21_278:                             # %cond.false772
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_281
.LBB21_280:                             # %cond.false777
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_281:                             # %cond.end779
                                        #   in Loop: Header=BB21_272 Depth=1
.LBB21_282:                             # %cond.end781
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_272
.LBB21_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_287
.LBB21_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB21_293
.LBB21_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_292
.LBB21_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_292:                             # %cond.end822
.LBB21_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB21_296
.LBB21_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB21_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB21_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB21_299
.LBB21_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB21_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB21_305
.LBB21_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB21_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB21_304
.LBB21_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB21_304:                             # %cond.end847
.LBB21_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_310
.LBB21_309:                             # %cond.false859
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_310:                             # %cond.end861
                                        #   in Loop: Header=BB21_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB21_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_316
.LBB21_312:                             # %cond.false866
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_315
.LBB21_314:                             # %cond.false871
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_315:                             # %cond.end873
                                        #   in Loop: Header=BB21_306 Depth=1
.LBB21_316:                             # %cond.end875
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_306
.LBB21_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_321
.LBB21_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB21_327
.LBB21_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_326
.LBB21_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_326:                             # %cond.end916
.LBB21_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_328:                             # %if.end922
	jmp	.LBB21_329
.LBB21_329:                             # %if.end923
	jmp	.LBB21_330
.LBB21_330:                             # %if.end924
	jmp	.LBB21_331
.LBB21_331:                             # %if.end925
	jmp	.LBB21_332
.LBB21_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$17293439, -100(%rbp)   # imm = 0x107E07F
	jne	.LBB21_334
.LBB21_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_333
.Lfunc_end21:
	.size	Get_Reference_Pixel.11, .Lfunc_end21-Get_Reference_Pixel.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.12
.LCPI22_0:
	.quad	4636737291354636288     # double 100
.LCPI22_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.12
	.p2align	4, 0x90
	.type	Build_Status_Map.12,@function
Build_Status_Map.12:                    # @Build_Status_Map.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$941215401, -40(%rbp)   # imm = 0x3819CEA9
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB22_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -12(%rbp)
.LBB22_3:                               # %for.cond2
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB22_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB22_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB22_13
.LBB22_6:                               # %if.then
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI22_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB22_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB22_8:                               # %if.end
                                        #   in Loop: Header=BB22_3 Depth=2
	callq	rand
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI22_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB22_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB22_10:                              # %if.end20
                                        #   in Loop: Header=BB22_3 Depth=2
	callq	rand
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI22_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB22_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	$1, -4(%rbp)
.LBB22_12:                              # %if.end29
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB22_13:                              # %if.end30
                                        #   in Loop: Header=BB22_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB22_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB22_18
.LBB22_15:                              # %if.else
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB22_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB22_17:                              # %if.end49
                                        #   in Loop: Header=BB22_3 Depth=2
	jmp	.LBB22_18
.LBB22_18:                              # %if.end50
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_3
.LBB22_20:                              # %for.end
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_21
.LBB22_21:                              # %for.inc53
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_1
.LBB22_22:                              # %for.end55
	cmpl	$941215401, -40(%rbp)   # imm = 0x3819CEA9
	jne	.LBB22_24
.LBB22_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_23
.Lfunc_end22:
	.size	Build_Status_Map.12, .Lfunc_end22-Build_Status_Map.12
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.13        # -- Begin function Conceal_Error.13
	.p2align	4, 0x90
	.type	Conceal_Error.13,@function
Conceal_Error.13:                       # @Conceal_Error.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$452095677, -68(%rbp)   # imm = 0x1AF26EBD
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB23_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB23_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB23_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB23_4:                               # %land.end
.LBB23_5:                               # %lor.end
.LBB23_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB23_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB23_9
.LBB23_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB23_14
.LBB23_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB23_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB23_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB23_12:                              # %land.end51
.LBB23_13:                              # %lor.end53
.LBB23_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB23_180
# %bb.15:                               # %land.end54
	movq	.LJTI23_0(,%rax,8), %rax
	jmpq	*%rax
.LBB23_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB23_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB23_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB23_18 Depth=1
	movl	$0, -4(%rbp)
.LBB23_20:                              # %for.cond68
                                        #   Parent Loop BB23_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB23_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB23_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_20
.LBB23_23:                              # %for.end
                                        #   in Loop: Header=BB23_18 Depth=1
	jmp	.LBB23_24
.LBB23_24:                              # %for.inc85
                                        #   in Loop: Header=BB23_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_18
.LBB23_25:                              # %for.end87
	jmp	.LBB23_35
.LBB23_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB23_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB23_27 Depth=1
	movl	$0, -4(%rbp)
.LBB23_29:                              # %for.cond92
                                        #   Parent Loop BB23_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB23_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB23_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_29
.LBB23_32:                              # %for.end104
                                        #   in Loop: Header=BB23_27 Depth=1
	jmp	.LBB23_33
.LBB23_33:                              # %for.inc105
                                        #   in Loop: Header=BB23_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_27
.LBB23_34:                              # %for.end107
	jmp	.LBB23_35
.LBB23_35:                              # %if.end
	jmp	.LBB23_180
.LBB23_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB23_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_39 Depth 2
                                        #       Child Loop BB23_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB23_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB23_37 Depth=1
	movl	$0, -12(%rbp)
.LBB23_39:                              # %for.cond113
                                        #   Parent Loop BB23_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB23_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB23_39 Depth=2
	movl	$0, -4(%rbp)
.LBB23_41:                              # %for.cond117
                                        #   Parent Loop BB23_37 Depth=1
                                        #     Parent Loop BB23_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB23_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB23_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB23_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_41
.LBB23_44:                              # %for.end141
                                        #   in Loop: Header=BB23_39 Depth=2
	jmp	.LBB23_45
.LBB23_45:                              # %for.inc142
                                        #   in Loop: Header=BB23_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_39
.LBB23_46:                              # %for.end144
                                        #   in Loop: Header=BB23_37 Depth=1
	jmp	.LBB23_47
.LBB23_47:                              # %for.inc145
                                        #   in Loop: Header=BB23_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_37
.LBB23_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB23_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB23_49 Depth=1
	movl	$0, -8(%rbp)
.LBB23_51:                              # %for.cond152
                                        #   Parent Loop BB23_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB23_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB23_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_51
.LBB23_54:                              # %for.end162
                                        #   in Loop: Header=BB23_49 Depth=1
	jmp	.LBB23_55
.LBB23_55:                              # %for.inc163
                                        #   in Loop: Header=BB23_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_49
.LBB23_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB23_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB23_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB23_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB23_59 Depth=1
	movl	$0, -4(%rbp)
.LBB23_61:                              # %for.cond175
                                        #   Parent Loop BB23_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB23_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB23_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_61
.LBB23_64:                              # %for.end195
                                        #   in Loop: Header=BB23_59 Depth=1
	jmp	.LBB23_65
.LBB23_65:                              # %for.inc196
                                        #   in Loop: Header=BB23_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_59
.LBB23_66:                              # %for.end198
	jmp	.LBB23_95
.LBB23_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB23_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB23_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_71 Depth 2
                                        #       Child Loop BB23_73 Depth 3
                                        #         Child Loop BB23_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB23_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB23_71:                              # %for.cond210
                                        #   Parent Loop BB23_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_73 Depth 3
                                        #         Child Loop BB23_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB23_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB23_73:                              # %for.cond236
                                        #   Parent Loop BB23_69 Depth=1
                                        #     Parent Loop BB23_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB23_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB23_73 Depth=3
	movl	$0, -4(%rbp)
.LBB23_75:                              # %for.cond240
                                        #   Parent Loop BB23_69 Depth=1
                                        #     Parent Loop BB23_71 Depth=2
                                        #       Parent Loop BB23_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB23_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB23_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB23_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_75
.LBB23_78:                              # %for.end259
                                        #   in Loop: Header=BB23_73 Depth=3
	jmp	.LBB23_79
.LBB23_79:                              # %for.inc260
                                        #   in Loop: Header=BB23_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_73
.LBB23_80:                              # %for.end262
                                        #   in Loop: Header=BB23_71 Depth=2
	jmp	.LBB23_81
.LBB23_81:                              # %for.inc263
                                        #   in Loop: Header=BB23_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_71
.LBB23_82:                              # %for.end265
                                        #   in Loop: Header=BB23_69 Depth=1
	jmp	.LBB23_83
.LBB23_83:                              # %for.inc266
                                        #   in Loop: Header=BB23_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_69
.LBB23_84:                              # %for.end268
	jmp	.LBB23_94
.LBB23_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB23_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB23_86 Depth=1
	movl	$0, -4(%rbp)
.LBB23_88:                              # %for.cond274
                                        #   Parent Loop BB23_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB23_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB23_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_88
.LBB23_91:                              # %for.end294
                                        #   in Loop: Header=BB23_86 Depth=1
	jmp	.LBB23_92
.LBB23_92:                              # %for.inc295
                                        #   in Loop: Header=BB23_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_86
.LBB23_93:                              # %for.end297
	jmp	.LBB23_94
.LBB23_94:                              # %if.end298
	jmp	.LBB23_95
.LBB23_95:                              # %if.end299
	jmp	.LBB23_105
.LBB23_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB23_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB23_97 Depth=1
	movl	$0, -4(%rbp)
.LBB23_99:                              # %for.cond305
                                        #   Parent Loop BB23_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB23_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB23_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_99
.LBB23_102:                             # %for.end317
                                        #   in Loop: Header=BB23_97 Depth=1
	jmp	.LBB23_103
.LBB23_103:                             # %for.inc318
                                        #   in Loop: Header=BB23_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_97
.LBB23_104:                             # %for.end320
	jmp	.LBB23_105
.LBB23_105:                             # %if.end321
	jmp	.LBB23_180
.LBB23_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB23_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB23_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_110 Depth 2
                                        #       Child Loop BB23_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB23_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB23_108 Depth=1
	movl	$0, -12(%rbp)
.LBB23_110:                             # %for.cond331
                                        #   Parent Loop BB23_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB23_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB23_110 Depth=2
	movl	$0, -4(%rbp)
.LBB23_112:                             # %for.cond335
                                        #   Parent Loop BB23_108 Depth=1
                                        #     Parent Loop BB23_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB23_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB23_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB23_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_112
.LBB23_115:                             # %for.end359
                                        #   in Loop: Header=BB23_110 Depth=2
	jmp	.LBB23_116
.LBB23_116:                             # %for.inc360
                                        #   in Loop: Header=BB23_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_110
.LBB23_117:                             # %for.end362
                                        #   in Loop: Header=BB23_108 Depth=1
	jmp	.LBB23_118
.LBB23_118:                             # %for.inc363
                                        #   in Loop: Header=BB23_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_108
.LBB23_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB23_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB23_120 Depth=1
	movl	$0, -8(%rbp)
.LBB23_122:                             # %for.cond370
                                        #   Parent Loop BB23_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB23_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB23_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_122
.LBB23_125:                             # %for.end380
                                        #   in Loop: Header=BB23_120 Depth=1
	jmp	.LBB23_126
.LBB23_126:                             # %for.inc381
                                        #   in Loop: Header=BB23_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_120
.LBB23_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB23_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB23_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB23_129 Depth=1
	movl	$0, -4(%rbp)
.LBB23_131:                             # %for.cond390
                                        #   Parent Loop BB23_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB23_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB23_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_131
.LBB23_134:                             # %for.end410
                                        #   in Loop: Header=BB23_129 Depth=1
	jmp	.LBB23_135
.LBB23_135:                             # %for.inc411
                                        #   in Loop: Header=BB23_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_129
.LBB23_136:                             # %for.end413
	jmp	.LBB23_156
.LBB23_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB23_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB23_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_141 Depth 2
                                        #       Child Loop BB23_143 Depth 3
                                        #         Child Loop BB23_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB23_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB23_141:                             # %for.cond425
                                        #   Parent Loop BB23_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_143 Depth 3
                                        #         Child Loop BB23_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB23_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB23_143:                             # %for.cond452
                                        #   Parent Loop BB23_139 Depth=1
                                        #     Parent Loop BB23_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB23_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB23_143 Depth=3
	movl	$0, -4(%rbp)
.LBB23_145:                             # %for.cond456
                                        #   Parent Loop BB23_139 Depth=1
                                        #     Parent Loop BB23_141 Depth=2
                                        #       Parent Loop BB23_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB23_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB23_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB23_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_145
.LBB23_148:                             # %for.end475
                                        #   in Loop: Header=BB23_143 Depth=3
	jmp	.LBB23_149
.LBB23_149:                             # %for.inc476
                                        #   in Loop: Header=BB23_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_143
.LBB23_150:                             # %for.end478
                                        #   in Loop: Header=BB23_141 Depth=2
	jmp	.LBB23_151
.LBB23_151:                             # %for.inc479
                                        #   in Loop: Header=BB23_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_141
.LBB23_152:                             # %for.end481
                                        #   in Loop: Header=BB23_139 Depth=1
	jmp	.LBB23_153
.LBB23_153:                             # %for.inc482
                                        #   in Loop: Header=BB23_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_139
.LBB23_154:                             # %for.end484
	jmp	.LBB23_155
.LBB23_155:                             # %if.end485
	jmp	.LBB23_156
.LBB23_156:                             # %if.end486
	jmp	.LBB23_157
.LBB23_157:                             # %if.end487
	jmp	.LBB23_180
.LBB23_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB23_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB23_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB23_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB23_161 Depth=1
	movl	$0, -4(%rbp)
.LBB23_163:                             # %for.cond499
                                        #   Parent Loop BB23_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB23_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB23_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_163
.LBB23_166:                             # %for.end519
                                        #   in Loop: Header=BB23_161 Depth=1
	jmp	.LBB23_167
.LBB23_167:                             # %for.inc520
                                        #   in Loop: Header=BB23_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_161
.LBB23_168:                             # %for.end522
	jmp	.LBB23_169
.LBB23_169:                             # %if.end523
	jmp	.LBB23_179
.LBB23_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB23_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB23_171 Depth=1
	movl	$0, -4(%rbp)
.LBB23_173:                             # %for.cond529
                                        #   Parent Loop BB23_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB23_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB23_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_173
.LBB23_176:                             # %for.end541
                                        #   in Loop: Header=BB23_171 Depth=1
	jmp	.LBB23_177
.LBB23_177:                             # %for.inc542
                                        #   in Loop: Header=BB23_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_171
.LBB23_178:                             # %for.end544
	jmp	.LBB23_179
.LBB23_179:                             # %if.end545
	jmp	.LBB23_180
.LBB23_180:                             # %sw.epilog
	cmpl	$452095677, -68(%rbp)   # imm = 0x1AF26EBD
	jne	.LBB23_182
.LBB23_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_181
.Lfunc_end23:
	.size	Conceal_Error.13, .Lfunc_end23-Conceal_Error.13
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI23_0:
	.quad	.LBB23_16
	.quad	.LBB23_158
	.quad	.LBB23_106
	.quad	.LBB23_180
	.quad	.LBB23_36
                                        # -- End function
	.text
	.globl	Error_Concealment.14    # -- Begin function Error_Concealment.14
	.p2align	4, 0x90
	.type	Error_Concealment.14,@function
Error_Concealment.14:                   # @Error_Concealment.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$909449441, -20(%rbp)   # imm = 0x363518E1
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB24_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	$0, -4(%rbp)
.LBB24_3:                               # %for.cond2
                                        #   Parent Loop BB24_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB24_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB24_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB24_6:                               # %if.end
                                        #   in Loop: Header=BB24_3 Depth=2
	jmp	.LBB24_7
.LBB24_7:                               # %for.inc
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_3
.LBB24_8:                               # %for.end
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_9
.LBB24_9:                               # %for.inc7
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_1
.LBB24_10:                              # %for.end9
	cmpl	$909449441, -20(%rbp)   # imm = 0x363518E1
	jne	.LBB24_12
.LBB24_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_11
.Lfunc_end24:
	.size	Error_Concealment.14, .Lfunc_end24-Error_Concealment.14
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.15  # -- Begin function Get_Reference_Pixel.15
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.15,@function
Get_Reference_Pixel.15:                 # @Get_Reference_Pixel.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1639463325, -108(%rbp) # imm = 0x61B8399D
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB25_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB25_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB25_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB25_5
.LBB25_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB25_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB25_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB25_11
.LBB25_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB25_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB25_10
.LBB25_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB25_10:                              # %cond.end14
.LBB25_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB25_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB25_14
.LBB25_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB25_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB25_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB25_20
.LBB25_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB25_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB25_19
.LBB25_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB25_19:                              # %cond.end29
.LBB25_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_332
.LBB25_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB25_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB25_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB25_25
.LBB25_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB25_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB25_31
.LBB25_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB25_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB25_30
.LBB25_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB25_30:                              # %cond.end52
.LBB25_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB25_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB25_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_36
.LBB25_35:                              # %cond.false61
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_36:                              # %cond.end63
                                        #   in Loop: Header=BB25_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB25_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_42
.LBB25_38:                              # %cond.false68
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_41
.LBB25_40:                              # %cond.false73
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_41:                              # %cond.end75
                                        #   in Loop: Header=BB25_32 Depth=1
.LBB25_42:                              # %cond.end77
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB25_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_32
.LBB25_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_47
.LBB25_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB25_53
.LBB25_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_52
.LBB25_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_52:                              # %cond.end113
.LBB25_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB25_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB25_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB25_57
.LBB25_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB25_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB25_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB25_63
.LBB25_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB25_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB25_62
.LBB25_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB25_62:                              # %cond.end136
.LBB25_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB25_76
.LBB25_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB25_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB25_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB25_68
.LBB25_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB25_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB25_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB25_74
.LBB25_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB25_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB25_73
.LBB25_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB25_73:                              # %cond.end169
.LBB25_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB25_75:                              # %if.end
	jmp	.LBB25_76
.LBB25_76:                              # %if.end178
	jmp	.LBB25_331
.LBB25_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB25_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB25_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB25_81
.LBB25_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB25_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB25_87
.LBB25_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB25_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB25_86
.LBB25_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB25_86:                              # %cond.end197
.LBB25_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB25_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB25_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_92
.LBB25_91:                              # %cond.false209
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_92:                              # %cond.end211
                                        #   in Loop: Header=BB25_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB25_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_98
.LBB25_94:                              # %cond.false216
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_97
.LBB25_96:                              # %cond.false221
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_97:                              # %cond.end223
                                        #   in Loop: Header=BB25_88 Depth=1
.LBB25_98:                              # %cond.end225
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB25_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_88
.LBB25_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_103
.LBB25_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB25_109
.LBB25_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_108
.LBB25_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_108:                             # %cond.end266
.LBB25_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB25_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB25_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB25_113
.LBB25_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB25_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB25_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB25_119
.LBB25_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB25_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB25_118
.LBB25_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB25_118:                             # %cond.end287
.LBB25_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB25_132
.LBB25_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB25_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB25_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB25_124
.LBB25_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB25_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB25_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB25_130
.LBB25_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB25_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB25_129
.LBB25_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB25_129:                             # %cond.end320
.LBB25_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB25_131:                             # %if.end331
	jmp	.LBB25_132
.LBB25_132:                             # %if.end332
	jmp	.LBB25_330
.LBB25_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB25_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB25_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB25_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_139
.LBB25_138:                             # %cond.false345
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_139:                             # %cond.end347
                                        #   in Loop: Header=BB25_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB25_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_145
.LBB25_141:                             # %cond.false352
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_144
.LBB25_143:                             # %cond.false357
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_144:                             # %cond.end359
                                        #   in Loop: Header=BB25_135 Depth=1
.LBB25_145:                             # %cond.end361
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB25_146:                             # %for.cond363
                                        #   Parent Loop BB25_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB25_150
.LBB25_149:                             # %cond.false371
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_150:                             # %cond.end373
                                        #   in Loop: Header=BB25_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB25_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB25_156
.LBB25_152:                             # %cond.false378
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB25_155
.LBB25_154:                             # %cond.false383
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_155:                             # %cond.end385
                                        #   in Loop: Header=BB25_146 Depth=2
.LBB25_156:                             # %cond.end387
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB25_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_146
.LBB25_158:                             # %for.end401
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB25_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_135
.LBB25_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB25_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB25_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB25_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB25_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_161
.LBB25_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_167
.LBB25_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB25_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB25_173
.LBB25_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_172
.LBB25_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB25_172:                             # %cond.end449
.LBB25_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB25_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_177
.LBB25_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB25_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB25_183
.LBB25_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_182
.LBB25_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_182:                             # %cond.end486
.LBB25_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB25_196
.LBB25_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB25_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_188
.LBB25_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB25_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB25_194
.LBB25_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_193
.LBB25_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_193:                             # %cond.end526
.LBB25_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB25_195:                             # %if.end532
	jmp	.LBB25_196
.LBB25_196:                             # %if.end533
	jmp	.LBB25_329
.LBB25_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB25_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB25_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_203
.LBB25_202:                             # %cond.false546
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_203:                             # %cond.end548
                                        #   in Loop: Header=BB25_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB25_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_209
.LBB25_205:                             # %cond.false553
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_208
.LBB25_207:                             # %cond.false558
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_208:                             # %cond.end560
                                        #   in Loop: Header=BB25_199 Depth=1
.LBB25_209:                             # %cond.end562
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB25_210:                             # %for.cond564
                                        #   Parent Loop BB25_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB25_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB25_214
.LBB25_213:                             # %cond.false572
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_214:                             # %cond.end574
                                        #   in Loop: Header=BB25_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB25_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB25_220
.LBB25_216:                             # %cond.false579
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB25_219
.LBB25_218:                             # %cond.false584
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_219:                             # %cond.end586
                                        #   in Loop: Header=BB25_210 Depth=2
.LBB25_220:                             # %cond.end588
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB25_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_210
.LBB25_222:                             # %for.end602
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB25_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_199
.LBB25_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB25_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB25_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB25_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB25_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_225
.LBB25_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_231
.LBB25_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB25_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB25_237
.LBB25_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_236
.LBB25_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB25_236:                             # %cond.end650
.LBB25_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB25_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_241
.LBB25_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB25_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB25_247
.LBB25_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_246
.LBB25_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_246:                             # %cond.end687
.LBB25_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB25_258
.LBB25_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_251
.LBB25_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB25_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB25_257
.LBB25_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB25_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_256
.LBB25_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB25_256:                             # %cond.end724
.LBB25_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB25_258:                             # %if.end730
	jmp	.LBB25_328
.LBB25_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB25_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB25_262
.LBB25_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB25_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB25_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB25_265
.LBB25_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB25_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB25_271
.LBB25_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB25_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB25_270
.LBB25_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB25_270:                             # %cond.end753
.LBB25_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB25_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB25_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_276
.LBB25_275:                             # %cond.false765
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_276:                             # %cond.end767
                                        #   in Loop: Header=BB25_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB25_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_282
.LBB25_278:                             # %cond.false772
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB25_281
.LBB25_280:                             # %cond.false777
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB25_281:                             # %cond.end779
                                        #   in Loop: Header=BB25_272 Depth=1
.LBB25_282:                             # %cond.end781
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB25_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_272
.LBB25_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_287
.LBB25_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB25_293
.LBB25_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_292
.LBB25_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_292:                             # %cond.end822
.LBB25_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB25_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB25_296
.LBB25_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB25_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB25_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB25_299
.LBB25_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB25_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB25_305
.LBB25_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB25_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB25_304
.LBB25_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB25_304:                             # %cond.end847
.LBB25_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB25_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB25_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_310
.LBB25_309:                             # %cond.false859
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_310:                             # %cond.end861
                                        #   in Loop: Header=BB25_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB25_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_316
.LBB25_312:                             # %cond.false866
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB25_315
.LBB25_314:                             # %cond.false871
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB25_315:                             # %cond.end873
                                        #   in Loop: Header=BB25_306 Depth=1
.LBB25_316:                             # %cond.end875
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB25_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_306
.LBB25_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_321
.LBB25_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB25_327
.LBB25_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_326
.LBB25_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_326:                             # %cond.end916
.LBB25_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB25_328:                             # %if.end922
	jmp	.LBB25_329
.LBB25_329:                             # %if.end923
	jmp	.LBB25_330
.LBB25_330:                             # %if.end924
	jmp	.LBB25_331
.LBB25_331:                             # %if.end925
	jmp	.LBB25_332
.LBB25_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1639463325, -108(%rbp) # imm = 0x61B8399D
	jne	.LBB25_334
.LBB25_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_333
.Lfunc_end25:
	.size	Get_Reference_Pixel.15, .Lfunc_end25-Get_Reference_Pixel.15
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.16        # -- Begin function Conceal_Error.16
	.p2align	4, 0x90
	.type	Conceal_Error.16,@function
Conceal_Error.16:                       # @Conceal_Error.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$666672887, -68(%rbp)   # imm = 0x27BC9EF7
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB26_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB26_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB26_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB26_4:                               # %land.end
.LBB26_5:                               # %lor.end
.LBB26_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB26_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB26_9
.LBB26_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB26_14
.LBB26_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB26_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB26_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB26_12:                              # %land.end51
.LBB26_13:                              # %lor.end53
.LBB26_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB26_180
# %bb.15:                               # %land.end54
	movq	.LJTI26_0(,%rax,8), %rax
	jmpq	*%rax
.LBB26_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB26_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB26_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB26_18 Depth=1
	movl	$0, -4(%rbp)
.LBB26_20:                              # %for.cond68
                                        #   Parent Loop BB26_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB26_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB26_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_20
.LBB26_23:                              # %for.end
                                        #   in Loop: Header=BB26_18 Depth=1
	jmp	.LBB26_24
.LBB26_24:                              # %for.inc85
                                        #   in Loop: Header=BB26_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_18
.LBB26_25:                              # %for.end87
	jmp	.LBB26_35
.LBB26_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB26_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB26_27 Depth=1
	movl	$0, -4(%rbp)
.LBB26_29:                              # %for.cond92
                                        #   Parent Loop BB26_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB26_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB26_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_29
.LBB26_32:                              # %for.end104
                                        #   in Loop: Header=BB26_27 Depth=1
	jmp	.LBB26_33
.LBB26_33:                              # %for.inc105
                                        #   in Loop: Header=BB26_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_27
.LBB26_34:                              # %for.end107
	jmp	.LBB26_35
.LBB26_35:                              # %if.end
	jmp	.LBB26_180
.LBB26_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB26_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_39 Depth 2
                                        #       Child Loop BB26_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB26_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB26_37 Depth=1
	movl	$0, -12(%rbp)
.LBB26_39:                              # %for.cond113
                                        #   Parent Loop BB26_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB26_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB26_39 Depth=2
	movl	$0, -4(%rbp)
.LBB26_41:                              # %for.cond117
                                        #   Parent Loop BB26_37 Depth=1
                                        #     Parent Loop BB26_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB26_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB26_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB26_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_41
.LBB26_44:                              # %for.end141
                                        #   in Loop: Header=BB26_39 Depth=2
	jmp	.LBB26_45
.LBB26_45:                              # %for.inc142
                                        #   in Loop: Header=BB26_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_39
.LBB26_46:                              # %for.end144
                                        #   in Loop: Header=BB26_37 Depth=1
	jmp	.LBB26_47
.LBB26_47:                              # %for.inc145
                                        #   in Loop: Header=BB26_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_37
.LBB26_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB26_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB26_49 Depth=1
	movl	$0, -8(%rbp)
.LBB26_51:                              # %for.cond152
                                        #   Parent Loop BB26_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB26_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB26_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_51
.LBB26_54:                              # %for.end162
                                        #   in Loop: Header=BB26_49 Depth=1
	jmp	.LBB26_55
.LBB26_55:                              # %for.inc163
                                        #   in Loop: Header=BB26_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_49
.LBB26_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB26_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB26_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB26_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB26_59 Depth=1
	movl	$0, -4(%rbp)
.LBB26_61:                              # %for.cond175
                                        #   Parent Loop BB26_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB26_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB26_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_61
.LBB26_64:                              # %for.end195
                                        #   in Loop: Header=BB26_59 Depth=1
	jmp	.LBB26_65
.LBB26_65:                              # %for.inc196
                                        #   in Loop: Header=BB26_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_59
.LBB26_66:                              # %for.end198
	jmp	.LBB26_95
.LBB26_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB26_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB26_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_71 Depth 2
                                        #       Child Loop BB26_73 Depth 3
                                        #         Child Loop BB26_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB26_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB26_71:                              # %for.cond210
                                        #   Parent Loop BB26_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_73 Depth 3
                                        #         Child Loop BB26_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB26_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB26_73:                              # %for.cond236
                                        #   Parent Loop BB26_69 Depth=1
                                        #     Parent Loop BB26_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB26_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB26_73 Depth=3
	movl	$0, -4(%rbp)
.LBB26_75:                              # %for.cond240
                                        #   Parent Loop BB26_69 Depth=1
                                        #     Parent Loop BB26_71 Depth=2
                                        #       Parent Loop BB26_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB26_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB26_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB26_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_75
.LBB26_78:                              # %for.end259
                                        #   in Loop: Header=BB26_73 Depth=3
	jmp	.LBB26_79
.LBB26_79:                              # %for.inc260
                                        #   in Loop: Header=BB26_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_73
.LBB26_80:                              # %for.end262
                                        #   in Loop: Header=BB26_71 Depth=2
	jmp	.LBB26_81
.LBB26_81:                              # %for.inc263
                                        #   in Loop: Header=BB26_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_71
.LBB26_82:                              # %for.end265
                                        #   in Loop: Header=BB26_69 Depth=1
	jmp	.LBB26_83
.LBB26_83:                              # %for.inc266
                                        #   in Loop: Header=BB26_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_69
.LBB26_84:                              # %for.end268
	jmp	.LBB26_94
.LBB26_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB26_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB26_86 Depth=1
	movl	$0, -4(%rbp)
.LBB26_88:                              # %for.cond274
                                        #   Parent Loop BB26_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB26_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB26_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_88
.LBB26_91:                              # %for.end294
                                        #   in Loop: Header=BB26_86 Depth=1
	jmp	.LBB26_92
.LBB26_92:                              # %for.inc295
                                        #   in Loop: Header=BB26_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_86
.LBB26_93:                              # %for.end297
	jmp	.LBB26_94
.LBB26_94:                              # %if.end298
	jmp	.LBB26_95
.LBB26_95:                              # %if.end299
	jmp	.LBB26_105
.LBB26_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB26_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB26_97 Depth=1
	movl	$0, -4(%rbp)
.LBB26_99:                              # %for.cond305
                                        #   Parent Loop BB26_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB26_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB26_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_99
.LBB26_102:                             # %for.end317
                                        #   in Loop: Header=BB26_97 Depth=1
	jmp	.LBB26_103
.LBB26_103:                             # %for.inc318
                                        #   in Loop: Header=BB26_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_97
.LBB26_104:                             # %for.end320
	jmp	.LBB26_105
.LBB26_105:                             # %if.end321
	jmp	.LBB26_180
.LBB26_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB26_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB26_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_110 Depth 2
                                        #       Child Loop BB26_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB26_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB26_108 Depth=1
	movl	$0, -12(%rbp)
.LBB26_110:                             # %for.cond331
                                        #   Parent Loop BB26_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB26_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB26_110 Depth=2
	movl	$0, -4(%rbp)
.LBB26_112:                             # %for.cond335
                                        #   Parent Loop BB26_108 Depth=1
                                        #     Parent Loop BB26_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB26_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB26_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB26_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_112
.LBB26_115:                             # %for.end359
                                        #   in Loop: Header=BB26_110 Depth=2
	jmp	.LBB26_116
.LBB26_116:                             # %for.inc360
                                        #   in Loop: Header=BB26_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_110
.LBB26_117:                             # %for.end362
                                        #   in Loop: Header=BB26_108 Depth=1
	jmp	.LBB26_118
.LBB26_118:                             # %for.inc363
                                        #   in Loop: Header=BB26_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_108
.LBB26_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB26_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB26_120 Depth=1
	movl	$0, -8(%rbp)
.LBB26_122:                             # %for.cond370
                                        #   Parent Loop BB26_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB26_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB26_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_122
.LBB26_125:                             # %for.end380
                                        #   in Loop: Header=BB26_120 Depth=1
	jmp	.LBB26_126
.LBB26_126:                             # %for.inc381
                                        #   in Loop: Header=BB26_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_120
.LBB26_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB26_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB26_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB26_129 Depth=1
	movl	$0, -4(%rbp)
.LBB26_131:                             # %for.cond390
                                        #   Parent Loop BB26_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB26_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB26_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_131
.LBB26_134:                             # %for.end410
                                        #   in Loop: Header=BB26_129 Depth=1
	jmp	.LBB26_135
.LBB26_135:                             # %for.inc411
                                        #   in Loop: Header=BB26_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_129
.LBB26_136:                             # %for.end413
	jmp	.LBB26_156
.LBB26_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB26_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB26_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_141 Depth 2
                                        #       Child Loop BB26_143 Depth 3
                                        #         Child Loop BB26_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB26_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB26_141:                             # %for.cond425
                                        #   Parent Loop BB26_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_143 Depth 3
                                        #         Child Loop BB26_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB26_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB26_143:                             # %for.cond452
                                        #   Parent Loop BB26_139 Depth=1
                                        #     Parent Loop BB26_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB26_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB26_143 Depth=3
	movl	$0, -4(%rbp)
.LBB26_145:                             # %for.cond456
                                        #   Parent Loop BB26_139 Depth=1
                                        #     Parent Loop BB26_141 Depth=2
                                        #       Parent Loop BB26_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB26_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB26_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB26_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_145
.LBB26_148:                             # %for.end475
                                        #   in Loop: Header=BB26_143 Depth=3
	jmp	.LBB26_149
.LBB26_149:                             # %for.inc476
                                        #   in Loop: Header=BB26_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_143
.LBB26_150:                             # %for.end478
                                        #   in Loop: Header=BB26_141 Depth=2
	jmp	.LBB26_151
.LBB26_151:                             # %for.inc479
                                        #   in Loop: Header=BB26_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_141
.LBB26_152:                             # %for.end481
                                        #   in Loop: Header=BB26_139 Depth=1
	jmp	.LBB26_153
.LBB26_153:                             # %for.inc482
                                        #   in Loop: Header=BB26_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_139
.LBB26_154:                             # %for.end484
	jmp	.LBB26_155
.LBB26_155:                             # %if.end485
	jmp	.LBB26_156
.LBB26_156:                             # %if.end486
	jmp	.LBB26_157
.LBB26_157:                             # %if.end487
	jmp	.LBB26_180
.LBB26_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB26_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB26_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB26_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB26_161 Depth=1
	movl	$0, -4(%rbp)
.LBB26_163:                             # %for.cond499
                                        #   Parent Loop BB26_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB26_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB26_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_163
.LBB26_166:                             # %for.end519
                                        #   in Loop: Header=BB26_161 Depth=1
	jmp	.LBB26_167
.LBB26_167:                             # %for.inc520
                                        #   in Loop: Header=BB26_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_161
.LBB26_168:                             # %for.end522
	jmp	.LBB26_169
.LBB26_169:                             # %if.end523
	jmp	.LBB26_179
.LBB26_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB26_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB26_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB26_171 Depth=1
	movl	$0, -4(%rbp)
.LBB26_173:                             # %for.cond529
                                        #   Parent Loop BB26_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB26_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB26_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB26_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_173
.LBB26_176:                             # %for.end541
                                        #   in Loop: Header=BB26_171 Depth=1
	jmp	.LBB26_177
.LBB26_177:                             # %for.inc542
                                        #   in Loop: Header=BB26_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_171
.LBB26_178:                             # %for.end544
	jmp	.LBB26_179
.LBB26_179:                             # %if.end545
	jmp	.LBB26_180
.LBB26_180:                             # %sw.epilog
	cmpl	$666672887, -68(%rbp)   # imm = 0x27BC9EF7
	jne	.LBB26_182
.LBB26_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_181
.Lfunc_end26:
	.size	Conceal_Error.16, .Lfunc_end26-Conceal_Error.16
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI26_0:
	.quad	.LBB26_16
	.quad	.LBB26_158
	.quad	.LBB26_106
	.quad	.LBB26_180
	.quad	.LBB26_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.17 # -- Begin function compute_residue_b8block.17
	.p2align	4, 0x90
	.type	compute_residue_b8block.17,@function
compute_residue_b8block.17:             # @compute_residue_b8block.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1824857495, -36(%rbp)  # imm = 0x6CC51D97
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB27_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB27_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_4:                               # %for.cond4
                                        #   Parent Loop BB27_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB27_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB27_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB27_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_4
.LBB27_7:                               # %for.end
                                        #   in Loop: Header=BB27_2 Depth=1
	jmp	.LBB27_8
.LBB27_8:                               # %for.inc22
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_2
.LBB27_9:                               # %for.end24
	jmp	.LBB27_19
.LBB27_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB27_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB27_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_13:                              # %for.cond29
                                        #   Parent Loop BB27_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB27_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB27_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB27_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_13
.LBB27_16:                              # %for.end56
                                        #   in Loop: Header=BB27_11 Depth=1
	jmp	.LBB27_17
.LBB27_17:                              # %for.inc57
                                        #   in Loop: Header=BB27_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_11
.LBB27_18:                              # %for.end59
	jmp	.LBB27_19
.LBB27_19:                              # %if.end
	cmpl	$1824857495, -36(%rbp)  # imm = 0x6CC51D97
	jne	.LBB27_21
.LBB27_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_20
.Lfunc_end27:
	.size	compute_residue_b8block.17, .Lfunc_end27-compute_residue_b8block.17
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.18       # -- Begin function DecOneForthPix.18
	.p2align	4, 0x90
	.type	DecOneForthPix.18,@function
DecOneForthPix.18:                      # @DecOneForthPix.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2021088564, -8(%rbp)   # imm = 0x78775D34
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB28_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB28_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB28_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_1
.LBB28_4:                               # %for.end
	cmpl	$2021088564, -8(%rbp)   # imm = 0x78775D34
	jne	.LBB28_6
.LBB28_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_5
.Lfunc_end28:
	.size	DecOneForthPix.18, .Lfunc_end28-DecOneForthPix.18
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.19        # -- Begin function Conceal_Error.19
	.p2align	4, 0x90
	.type	Conceal_Error.19,@function
Conceal_Error.19:                       # @Conceal_Error.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1818276310, -68(%rbp)  # imm = 0x6C60B1D6
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB29_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB29_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB29_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB29_4:                               # %land.end
.LBB29_5:                               # %lor.end
.LBB29_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB29_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB29_9
.LBB29_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB29_14
.LBB29_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB29_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB29_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB29_12:                              # %land.end51
.LBB29_13:                              # %lor.end53
.LBB29_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB29_180
# %bb.15:                               # %land.end54
	movq	.LJTI29_0(,%rax,8), %rax
	jmpq	*%rax
.LBB29_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB29_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB29_18 Depth=1
	movl	$0, -4(%rbp)
.LBB29_20:                              # %for.cond68
                                        #   Parent Loop BB29_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB29_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB29_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_20
.LBB29_23:                              # %for.end
                                        #   in Loop: Header=BB29_18 Depth=1
	jmp	.LBB29_24
.LBB29_24:                              # %for.inc85
                                        #   in Loop: Header=BB29_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_18
.LBB29_25:                              # %for.end87
	jmp	.LBB29_35
.LBB29_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB29_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB29_27 Depth=1
	movl	$0, -4(%rbp)
.LBB29_29:                              # %for.cond92
                                        #   Parent Loop BB29_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB29_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB29_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_29
.LBB29_32:                              # %for.end104
                                        #   in Loop: Header=BB29_27 Depth=1
	jmp	.LBB29_33
.LBB29_33:                              # %for.inc105
                                        #   in Loop: Header=BB29_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_27
.LBB29_34:                              # %for.end107
	jmp	.LBB29_35
.LBB29_35:                              # %if.end
	jmp	.LBB29_180
.LBB29_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB29_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_39 Depth 2
                                        #       Child Loop BB29_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB29_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB29_37 Depth=1
	movl	$0, -12(%rbp)
.LBB29_39:                              # %for.cond113
                                        #   Parent Loop BB29_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB29_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB29_39 Depth=2
	movl	$0, -4(%rbp)
.LBB29_41:                              # %for.cond117
                                        #   Parent Loop BB29_37 Depth=1
                                        #     Parent Loop BB29_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB29_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB29_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB29_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_41
.LBB29_44:                              # %for.end141
                                        #   in Loop: Header=BB29_39 Depth=2
	jmp	.LBB29_45
.LBB29_45:                              # %for.inc142
                                        #   in Loop: Header=BB29_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_39
.LBB29_46:                              # %for.end144
                                        #   in Loop: Header=BB29_37 Depth=1
	jmp	.LBB29_47
.LBB29_47:                              # %for.inc145
                                        #   in Loop: Header=BB29_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_37
.LBB29_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB29_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB29_49 Depth=1
	movl	$0, -8(%rbp)
.LBB29_51:                              # %for.cond152
                                        #   Parent Loop BB29_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB29_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB29_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_51
.LBB29_54:                              # %for.end162
                                        #   in Loop: Header=BB29_49 Depth=1
	jmp	.LBB29_55
.LBB29_55:                              # %for.inc163
                                        #   in Loop: Header=BB29_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_49
.LBB29_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB29_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB29_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB29_59 Depth=1
	movl	$0, -4(%rbp)
.LBB29_61:                              # %for.cond175
                                        #   Parent Loop BB29_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB29_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB29_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_61
.LBB29_64:                              # %for.end195
                                        #   in Loop: Header=BB29_59 Depth=1
	jmp	.LBB29_65
.LBB29_65:                              # %for.inc196
                                        #   in Loop: Header=BB29_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_59
.LBB29_66:                              # %for.end198
	jmp	.LBB29_95
.LBB29_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB29_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB29_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_71 Depth 2
                                        #       Child Loop BB29_73 Depth 3
                                        #         Child Loop BB29_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB29_71:                              # %for.cond210
                                        #   Parent Loop BB29_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_73 Depth 3
                                        #         Child Loop BB29_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB29_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB29_73:                              # %for.cond236
                                        #   Parent Loop BB29_69 Depth=1
                                        #     Parent Loop BB29_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB29_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB29_73 Depth=3
	movl	$0, -4(%rbp)
.LBB29_75:                              # %for.cond240
                                        #   Parent Loop BB29_69 Depth=1
                                        #     Parent Loop BB29_71 Depth=2
                                        #       Parent Loop BB29_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB29_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB29_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB29_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_75
.LBB29_78:                              # %for.end259
                                        #   in Loop: Header=BB29_73 Depth=3
	jmp	.LBB29_79
.LBB29_79:                              # %for.inc260
                                        #   in Loop: Header=BB29_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_73
.LBB29_80:                              # %for.end262
                                        #   in Loop: Header=BB29_71 Depth=2
	jmp	.LBB29_81
.LBB29_81:                              # %for.inc263
                                        #   in Loop: Header=BB29_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_71
.LBB29_82:                              # %for.end265
                                        #   in Loop: Header=BB29_69 Depth=1
	jmp	.LBB29_83
.LBB29_83:                              # %for.inc266
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_69
.LBB29_84:                              # %for.end268
	jmp	.LBB29_94
.LBB29_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB29_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	$0, -4(%rbp)
.LBB29_88:                              # %for.cond274
                                        #   Parent Loop BB29_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB29_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_88
.LBB29_91:                              # %for.end294
                                        #   in Loop: Header=BB29_86 Depth=1
	jmp	.LBB29_92
.LBB29_92:                              # %for.inc295
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_86
.LBB29_93:                              # %for.end297
	jmp	.LBB29_94
.LBB29_94:                              # %if.end298
	jmp	.LBB29_95
.LBB29_95:                              # %if.end299
	jmp	.LBB29_105
.LBB29_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB29_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB29_97 Depth=1
	movl	$0, -4(%rbp)
.LBB29_99:                              # %for.cond305
                                        #   Parent Loop BB29_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB29_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB29_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_99
.LBB29_102:                             # %for.end317
                                        #   in Loop: Header=BB29_97 Depth=1
	jmp	.LBB29_103
.LBB29_103:                             # %for.inc318
                                        #   in Loop: Header=BB29_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_97
.LBB29_104:                             # %for.end320
	jmp	.LBB29_105
.LBB29_105:                             # %if.end321
	jmp	.LBB29_180
.LBB29_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB29_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_110 Depth 2
                                        #       Child Loop BB29_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB29_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB29_108 Depth=1
	movl	$0, -12(%rbp)
.LBB29_110:                             # %for.cond331
                                        #   Parent Loop BB29_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB29_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB29_110 Depth=2
	movl	$0, -4(%rbp)
.LBB29_112:                             # %for.cond335
                                        #   Parent Loop BB29_108 Depth=1
                                        #     Parent Loop BB29_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB29_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB29_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB29_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_112
.LBB29_115:                             # %for.end359
                                        #   in Loop: Header=BB29_110 Depth=2
	jmp	.LBB29_116
.LBB29_116:                             # %for.inc360
                                        #   in Loop: Header=BB29_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_110
.LBB29_117:                             # %for.end362
                                        #   in Loop: Header=BB29_108 Depth=1
	jmp	.LBB29_118
.LBB29_118:                             # %for.inc363
                                        #   in Loop: Header=BB29_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_108
.LBB29_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB29_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB29_120 Depth=1
	movl	$0, -8(%rbp)
.LBB29_122:                             # %for.cond370
                                        #   Parent Loop BB29_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB29_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB29_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_122
.LBB29_125:                             # %for.end380
                                        #   in Loop: Header=BB29_120 Depth=1
	jmp	.LBB29_126
.LBB29_126:                             # %for.inc381
                                        #   in Loop: Header=BB29_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_120
.LBB29_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB29_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB29_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB29_129 Depth=1
	movl	$0, -4(%rbp)
.LBB29_131:                             # %for.cond390
                                        #   Parent Loop BB29_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB29_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB29_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_131
.LBB29_134:                             # %for.end410
                                        #   in Loop: Header=BB29_129 Depth=1
	jmp	.LBB29_135
.LBB29_135:                             # %for.inc411
                                        #   in Loop: Header=BB29_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_129
.LBB29_136:                             # %for.end413
	jmp	.LBB29_156
.LBB29_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB29_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB29_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_141 Depth 2
                                        #       Child Loop BB29_143 Depth 3
                                        #         Child Loop BB29_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB29_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB29_141:                             # %for.cond425
                                        #   Parent Loop BB29_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_143 Depth 3
                                        #         Child Loop BB29_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB29_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB29_143:                             # %for.cond452
                                        #   Parent Loop BB29_139 Depth=1
                                        #     Parent Loop BB29_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB29_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB29_143 Depth=3
	movl	$0, -4(%rbp)
.LBB29_145:                             # %for.cond456
                                        #   Parent Loop BB29_139 Depth=1
                                        #     Parent Loop BB29_141 Depth=2
                                        #       Parent Loop BB29_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB29_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB29_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB29_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_145
.LBB29_148:                             # %for.end475
                                        #   in Loop: Header=BB29_143 Depth=3
	jmp	.LBB29_149
.LBB29_149:                             # %for.inc476
                                        #   in Loop: Header=BB29_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_143
.LBB29_150:                             # %for.end478
                                        #   in Loop: Header=BB29_141 Depth=2
	jmp	.LBB29_151
.LBB29_151:                             # %for.inc479
                                        #   in Loop: Header=BB29_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_141
.LBB29_152:                             # %for.end481
                                        #   in Loop: Header=BB29_139 Depth=1
	jmp	.LBB29_153
.LBB29_153:                             # %for.inc482
                                        #   in Loop: Header=BB29_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_139
.LBB29_154:                             # %for.end484
	jmp	.LBB29_155
.LBB29_155:                             # %if.end485
	jmp	.LBB29_156
.LBB29_156:                             # %if.end486
	jmp	.LBB29_157
.LBB29_157:                             # %if.end487
	jmp	.LBB29_180
.LBB29_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB29_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB29_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB29_161 Depth=1
	movl	$0, -4(%rbp)
.LBB29_163:                             # %for.cond499
                                        #   Parent Loop BB29_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB29_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB29_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_163
.LBB29_166:                             # %for.end519
                                        #   in Loop: Header=BB29_161 Depth=1
	jmp	.LBB29_167
.LBB29_167:                             # %for.inc520
                                        #   in Loop: Header=BB29_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_161
.LBB29_168:                             # %for.end522
	jmp	.LBB29_169
.LBB29_169:                             # %if.end523
	jmp	.LBB29_179
.LBB29_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB29_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB29_171 Depth=1
	movl	$0, -4(%rbp)
.LBB29_173:                             # %for.cond529
                                        #   Parent Loop BB29_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB29_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB29_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_173
.LBB29_176:                             # %for.end541
                                        #   in Loop: Header=BB29_171 Depth=1
	jmp	.LBB29_177
.LBB29_177:                             # %for.inc542
                                        #   in Loop: Header=BB29_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_171
.LBB29_178:                             # %for.end544
	jmp	.LBB29_179
.LBB29_179:                             # %if.end545
	jmp	.LBB29_180
.LBB29_180:                             # %sw.epilog
	cmpl	$1818276310, -68(%rbp)  # imm = 0x6C60B1D6
	jne	.LBB29_182
.LBB29_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_181
.Lfunc_end29:
	.size	Conceal_Error.19, .Lfunc_end29-Conceal_Error.19
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI29_0:
	.quad	.LBB29_16
	.quad	.LBB29_158
	.quad	.LBB29_106
	.quad	.LBB29_180
	.quad	.LBB29_36
                                        # -- End function
	.text
	.globl	Conceal_Error.20        # -- Begin function Conceal_Error.20
	.p2align	4, 0x90
	.type	Conceal_Error.20,@function
Conceal_Error.20:                       # @Conceal_Error.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$647725543, -68(%rbp)   # imm = 0x269B81E7
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB30_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB30_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB30_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB30_4:                               # %land.end
.LBB30_5:                               # %lor.end
.LBB30_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB30_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB30_9
.LBB30_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB30_14
.LBB30_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB30_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB30_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB30_12:                              # %land.end51
.LBB30_13:                              # %lor.end53
.LBB30_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB30_180
# %bb.15:                               # %land.end54
	movq	.LJTI30_0(,%rax,8), %rax
	jmpq	*%rax
.LBB30_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB30_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB30_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB30_18 Depth=1
	movl	$0, -4(%rbp)
.LBB30_20:                              # %for.cond68
                                        #   Parent Loop BB30_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB30_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB30_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_20
.LBB30_23:                              # %for.end
                                        #   in Loop: Header=BB30_18 Depth=1
	jmp	.LBB30_24
.LBB30_24:                              # %for.inc85
                                        #   in Loop: Header=BB30_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_18
.LBB30_25:                              # %for.end87
	jmp	.LBB30_35
.LBB30_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB30_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB30_27 Depth=1
	movl	$0, -4(%rbp)
.LBB30_29:                              # %for.cond92
                                        #   Parent Loop BB30_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB30_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB30_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_29
.LBB30_32:                              # %for.end104
                                        #   in Loop: Header=BB30_27 Depth=1
	jmp	.LBB30_33
.LBB30_33:                              # %for.inc105
                                        #   in Loop: Header=BB30_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_27
.LBB30_34:                              # %for.end107
	jmp	.LBB30_35
.LBB30_35:                              # %if.end
	jmp	.LBB30_180
.LBB30_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB30_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_39 Depth 2
                                        #       Child Loop BB30_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB30_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB30_37 Depth=1
	movl	$0, -16(%rbp)
.LBB30_39:                              # %for.cond113
                                        #   Parent Loop BB30_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB30_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB30_39 Depth=2
	movl	$0, -4(%rbp)
.LBB30_41:                              # %for.cond117
                                        #   Parent Loop BB30_37 Depth=1
                                        #     Parent Loop BB30_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB30_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB30_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB30_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_41
.LBB30_44:                              # %for.end141
                                        #   in Loop: Header=BB30_39 Depth=2
	jmp	.LBB30_45
.LBB30_45:                              # %for.inc142
                                        #   in Loop: Header=BB30_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_39
.LBB30_46:                              # %for.end144
                                        #   in Loop: Header=BB30_37 Depth=1
	jmp	.LBB30_47
.LBB30_47:                              # %for.inc145
                                        #   in Loop: Header=BB30_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_37
.LBB30_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB30_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB30_49 Depth=1
	movl	$0, -8(%rbp)
.LBB30_51:                              # %for.cond152
                                        #   Parent Loop BB30_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB30_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB30_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_51
.LBB30_54:                              # %for.end162
                                        #   in Loop: Header=BB30_49 Depth=1
	jmp	.LBB30_55
.LBB30_55:                              # %for.inc163
                                        #   in Loop: Header=BB30_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_49
.LBB30_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB30_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB30_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB30_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB30_59 Depth=1
	movl	$0, -4(%rbp)
.LBB30_61:                              # %for.cond175
                                        #   Parent Loop BB30_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB30_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB30_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_61
.LBB30_64:                              # %for.end195
                                        #   in Loop: Header=BB30_59 Depth=1
	jmp	.LBB30_65
.LBB30_65:                              # %for.inc196
                                        #   in Loop: Header=BB30_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_59
.LBB30_66:                              # %for.end198
	jmp	.LBB30_95
.LBB30_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB30_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB30_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_71 Depth 2
                                        #       Child Loop BB30_73 Depth 3
                                        #         Child Loop BB30_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB30_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB30_71:                              # %for.cond210
                                        #   Parent Loop BB30_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_73 Depth 3
                                        #         Child Loop BB30_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB30_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB30_73:                              # %for.cond236
                                        #   Parent Loop BB30_69 Depth=1
                                        #     Parent Loop BB30_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB30_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB30_73 Depth=3
	movl	$0, -4(%rbp)
.LBB30_75:                              # %for.cond240
                                        #   Parent Loop BB30_69 Depth=1
                                        #     Parent Loop BB30_71 Depth=2
                                        #       Parent Loop BB30_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB30_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB30_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB30_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_75
.LBB30_78:                              # %for.end259
                                        #   in Loop: Header=BB30_73 Depth=3
	jmp	.LBB30_79
.LBB30_79:                              # %for.inc260
                                        #   in Loop: Header=BB30_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_73
.LBB30_80:                              # %for.end262
                                        #   in Loop: Header=BB30_71 Depth=2
	jmp	.LBB30_81
.LBB30_81:                              # %for.inc263
                                        #   in Loop: Header=BB30_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_71
.LBB30_82:                              # %for.end265
                                        #   in Loop: Header=BB30_69 Depth=1
	jmp	.LBB30_83
.LBB30_83:                              # %for.inc266
                                        #   in Loop: Header=BB30_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_69
.LBB30_84:                              # %for.end268
	jmp	.LBB30_94
.LBB30_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB30_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB30_86 Depth=1
	movl	$0, -4(%rbp)
.LBB30_88:                              # %for.cond274
                                        #   Parent Loop BB30_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB30_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB30_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_88
.LBB30_91:                              # %for.end294
                                        #   in Loop: Header=BB30_86 Depth=1
	jmp	.LBB30_92
.LBB30_92:                              # %for.inc295
                                        #   in Loop: Header=BB30_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_86
.LBB30_93:                              # %for.end297
	jmp	.LBB30_94
.LBB30_94:                              # %if.end298
	jmp	.LBB30_95
.LBB30_95:                              # %if.end299
	jmp	.LBB30_105
.LBB30_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB30_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB30_97 Depth=1
	movl	$0, -4(%rbp)
.LBB30_99:                              # %for.cond305
                                        #   Parent Loop BB30_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB30_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB30_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_99
.LBB30_102:                             # %for.end317
                                        #   in Loop: Header=BB30_97 Depth=1
	jmp	.LBB30_103
.LBB30_103:                             # %for.inc318
                                        #   in Loop: Header=BB30_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_97
.LBB30_104:                             # %for.end320
	jmp	.LBB30_105
.LBB30_105:                             # %if.end321
	jmp	.LBB30_180
.LBB30_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB30_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB30_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_110 Depth 2
                                        #       Child Loop BB30_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB30_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB30_108 Depth=1
	movl	$0, -16(%rbp)
.LBB30_110:                             # %for.cond331
                                        #   Parent Loop BB30_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB30_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB30_110 Depth=2
	movl	$0, -4(%rbp)
.LBB30_112:                             # %for.cond335
                                        #   Parent Loop BB30_108 Depth=1
                                        #     Parent Loop BB30_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB30_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB30_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB30_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_112
.LBB30_115:                             # %for.end359
                                        #   in Loop: Header=BB30_110 Depth=2
	jmp	.LBB30_116
.LBB30_116:                             # %for.inc360
                                        #   in Loop: Header=BB30_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_110
.LBB30_117:                             # %for.end362
                                        #   in Loop: Header=BB30_108 Depth=1
	jmp	.LBB30_118
.LBB30_118:                             # %for.inc363
                                        #   in Loop: Header=BB30_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_108
.LBB30_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB30_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB30_120 Depth=1
	movl	$0, -8(%rbp)
.LBB30_122:                             # %for.cond370
                                        #   Parent Loop BB30_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB30_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB30_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_122
.LBB30_125:                             # %for.end380
                                        #   in Loop: Header=BB30_120 Depth=1
	jmp	.LBB30_126
.LBB30_126:                             # %for.inc381
                                        #   in Loop: Header=BB30_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_120
.LBB30_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB30_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB30_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB30_129 Depth=1
	movl	$0, -4(%rbp)
.LBB30_131:                             # %for.cond390
                                        #   Parent Loop BB30_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB30_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB30_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_131
.LBB30_134:                             # %for.end410
                                        #   in Loop: Header=BB30_129 Depth=1
	jmp	.LBB30_135
.LBB30_135:                             # %for.inc411
                                        #   in Loop: Header=BB30_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_129
.LBB30_136:                             # %for.end413
	jmp	.LBB30_156
.LBB30_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB30_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB30_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_141 Depth 2
                                        #       Child Loop BB30_143 Depth 3
                                        #         Child Loop BB30_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB30_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB30_141:                             # %for.cond425
                                        #   Parent Loop BB30_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_143 Depth 3
                                        #         Child Loop BB30_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB30_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB30_143:                             # %for.cond452
                                        #   Parent Loop BB30_139 Depth=1
                                        #     Parent Loop BB30_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB30_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB30_143 Depth=3
	movl	$0, -4(%rbp)
.LBB30_145:                             # %for.cond456
                                        #   Parent Loop BB30_139 Depth=1
                                        #     Parent Loop BB30_141 Depth=2
                                        #       Parent Loop BB30_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB30_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB30_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB30_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_145
.LBB30_148:                             # %for.end475
                                        #   in Loop: Header=BB30_143 Depth=3
	jmp	.LBB30_149
.LBB30_149:                             # %for.inc476
                                        #   in Loop: Header=BB30_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_143
.LBB30_150:                             # %for.end478
                                        #   in Loop: Header=BB30_141 Depth=2
	jmp	.LBB30_151
.LBB30_151:                             # %for.inc479
                                        #   in Loop: Header=BB30_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_141
.LBB30_152:                             # %for.end481
                                        #   in Loop: Header=BB30_139 Depth=1
	jmp	.LBB30_153
.LBB30_153:                             # %for.inc482
                                        #   in Loop: Header=BB30_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_139
.LBB30_154:                             # %for.end484
	jmp	.LBB30_155
.LBB30_155:                             # %if.end485
	jmp	.LBB30_156
.LBB30_156:                             # %if.end486
	jmp	.LBB30_157
.LBB30_157:                             # %if.end487
	jmp	.LBB30_180
.LBB30_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB30_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB30_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB30_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB30_161 Depth=1
	movl	$0, -4(%rbp)
.LBB30_163:                             # %for.cond499
                                        #   Parent Loop BB30_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB30_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB30_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_163
.LBB30_166:                             # %for.end519
                                        #   in Loop: Header=BB30_161 Depth=1
	jmp	.LBB30_167
.LBB30_167:                             # %for.inc520
                                        #   in Loop: Header=BB30_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_161
.LBB30_168:                             # %for.end522
	jmp	.LBB30_169
.LBB30_169:                             # %if.end523
	jmp	.LBB30_179
.LBB30_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB30_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB30_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB30_171 Depth=1
	movl	$0, -4(%rbp)
.LBB30_173:                             # %for.cond529
                                        #   Parent Loop BB30_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB30_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB30_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB30_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_173
.LBB30_176:                             # %for.end541
                                        #   in Loop: Header=BB30_171 Depth=1
	jmp	.LBB30_177
.LBB30_177:                             # %for.inc542
                                        #   in Loop: Header=BB30_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_171
.LBB30_178:                             # %for.end544
	jmp	.LBB30_179
.LBB30_179:                             # %if.end545
	jmp	.LBB30_180
.LBB30_180:                             # %sw.epilog
	cmpl	$647725543, -68(%rbp)   # imm = 0x269B81E7
	jne	.LBB30_182
.LBB30_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_181
.Lfunc_end30:
	.size	Conceal_Error.20, .Lfunc_end30-Conceal_Error.20
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI30_0:
	.quad	.LBB30_16
	.quad	.LBB30_158
	.quad	.LBB30_106
	.quad	.LBB30_180
	.quad	.LBB30_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.21
.LCPI31_0:
	.quad	4636737291354636288     # double 100
.LCPI31_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.21
	.p2align	4, 0x90
	.type	Build_Status_Map.21,@function
Build_Status_Map.21:                    # @Build_Status_Map.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1328409737, -44(%rbp)  # imm = 0x4F2DEC89
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_3:                               # %for.cond2
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB31_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB31_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB31_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB31_13
.LBB31_6:                               # %if.then
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI31_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB31_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB31_8:                               # %if.end
                                        #   in Loop: Header=BB31_3 Depth=2
	callq	rand
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI31_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB31_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB31_10:                              # %if.end20
                                        #   in Loop: Header=BB31_3 Depth=2
	callq	rand
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI31_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB31_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	$1, -4(%rbp)
.LBB31_12:                              # %if.end29
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB31_13:                              # %if.end30
                                        #   in Loop: Header=BB31_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB31_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB31_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB31_18
.LBB31_15:                              # %if.else
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB31_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB31_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB31_17:                              # %if.end49
                                        #   in Loop: Header=BB31_3 Depth=2
	jmp	.LBB31_18
.LBB31_18:                              # %if.end50
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_3
.LBB31_20:                              # %for.end
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_21
.LBB31_21:                              # %for.inc53
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_1
.LBB31_22:                              # %for.end55
	cmpl	$1328409737, -44(%rbp)  # imm = 0x4F2DEC89
	jne	.LBB31_24
.LBB31_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_23
.Lfunc_end31:
	.size	Build_Status_Map.21, .Lfunc_end31-Build_Status_Map.21
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.22  # -- Begin function Get_Reference_Block.22
	.p2align	4, 0x90
	.type	Get_Reference_Block.22,@function
Get_Reference_Block.22:                 # @Get_Reference_Block.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$615813, -24(%rbp)      # imm = 0x96585
	movq	%rdi, -56(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB32_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_3:                               # %for.cond5
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB32_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_3
.LBB32_6:                               # %for.end
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_7
.LBB32_7:                               # %for.inc14
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_1
.LBB32_8:                               # %for.end16
	cmpl	$615813, -24(%rbp)      # imm = 0x96585
	jne	.LBB32_10
.LBB32_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_9
.Lfunc_end32:
	.size	Get_Reference_Block.22, .Lfunc_end32-Get_Reference_Block.22
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.23        # -- Begin function decode_one_mb.23
	.p2align	4, 0x90
	.type	decode_one_mb.23,@function
decode_one_mb.23:                       # @decode_one_mb.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1998423812, -4(%rbp)   # imm = 0x771D8704
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$1998423812, -4(%rbp)   # imm = 0x771D8704
	jne	.LBB33_2
.LBB33_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_1
.Lfunc_end33:
	.size	decode_one_mb.23, .Lfunc_end33-decode_one_mb.23
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.24   # -- Begin function decode_one_b8block.24
	.p2align	4, 0x90
	.type	decode_one_b8block.24,@function
decode_one_b8block.24:                  # @decode_one_b8block.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1234614395, -84(%rbp)  # imm = 0x4996B87B
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB34_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_4:                               # %for.cond9
                                        #   Parent Loop BB34_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB34_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB34_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB34_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_4
.LBB34_7:                               # %for.end
                                        #   in Loop: Header=BB34_2 Depth=1
	jmp	.LBB34_8
.LBB34_8:                               # %for.inc26
                                        #   in Loop: Header=BB34_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_2
.LBB34_9:                               # %for.end28
	jmp	.LBB34_96
.LBB34_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB34_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB34_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB34_31
.LBB34_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB34_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_17:                              # %for.cond40
                                        #   Parent Loop BB34_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB34_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB34_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB34_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_17
.LBB34_20:                              # %for.end49
                                        #   in Loop: Header=BB34_15 Depth=1
	jmp	.LBB34_21
.LBB34_21:                              # %for.inc50
                                        #   in Loop: Header=BB34_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_15
.LBB34_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_25:                              # %for.cond56
                                        #   Parent Loop BB34_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB34_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB34_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_25
.LBB34_28:                              # %for.end71
                                        #   in Loop: Header=BB34_23 Depth=1
	jmp	.LBB34_29
.LBB34_29:                              # %for.inc72
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_23
.LBB34_30:                              # %for.end74
	jmp	.LBB34_60
.LBB34_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB34_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB34_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB34_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_36:                              # %for.cond83
                                        #   Parent Loop BB34_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB34_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB34_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_36
.LBB34_39:                              # %for.end120
                                        #   in Loop: Header=BB34_34 Depth=1
	jmp	.LBB34_40
.LBB34_40:                              # %for.inc121
                                        #   in Loop: Header=BB34_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_34
.LBB34_41:                              # %for.end123
	jmp	.LBB34_51
.LBB34_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB34_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_45:                              # %for.cond129
                                        #   Parent Loop BB34_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB34_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB34_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_45
.LBB34_48:                              # %for.end145
                                        #   in Loop: Header=BB34_43 Depth=1
	jmp	.LBB34_49
.LBB34_49:                              # %for.inc146
                                        #   in Loop: Header=BB34_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_43
.LBB34_50:                              # %for.end148
	jmp	.LBB34_51
.LBB34_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB34_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_54:                              # %for.cond153
                                        #   Parent Loop BB34_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB34_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB34_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB34_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_54
.LBB34_57:                              # %for.end167
                                        #   in Loop: Header=BB34_52 Depth=1
	jmp	.LBB34_58
.LBB34_58:                              # %for.inc168
                                        #   in Loop: Header=BB34_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_52
.LBB34_59:                              # %for.end170
	jmp	.LBB34_60
.LBB34_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB34_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB34_66
.LBB34_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB34_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB34_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB34_86
.LBB34_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_69 Depth 2
                                        #       Child Loop BB34_74 Depth 3
                                        #         Child Loop BB34_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB34_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_69:                              # %for.cond197
                                        #   Parent Loop BB34_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_74 Depth 3
                                        #         Child Loop BB34_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB34_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB34_73:                              # %if.end218
                                        #   in Loop: Header=BB34_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB34_74:                              # %for.cond233
                                        #   Parent Loop BB34_67 Depth=1
                                        #     Parent Loop BB34_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB34_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB34_74 Depth=3
	movl	$0, -8(%rbp)
.LBB34_76:                              # %for.cond237
                                        #   Parent Loop BB34_67 Depth=1
                                        #     Parent Loop BB34_69 Depth=2
                                        #       Parent Loop BB34_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB34_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB34_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB34_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_76
.LBB34_79:                              # %for.end269
                                        #   in Loop: Header=BB34_74 Depth=3
	jmp	.LBB34_80
.LBB34_80:                              # %for.inc270
                                        #   in Loop: Header=BB34_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_74
.LBB34_81:                              # %for.end272
                                        #   in Loop: Header=BB34_69 Depth=2
	jmp	.LBB34_82
.LBB34_82:                              # %for.inc273
                                        #   in Loop: Header=BB34_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_69
.LBB34_83:                              # %for.end275
                                        #   in Loop: Header=BB34_67 Depth=1
	jmp	.LBB34_84
.LBB34_84:                              # %for.inc276
                                        #   in Loop: Header=BB34_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_67
.LBB34_85:                              # %for.end278
	jmp	.LBB34_95
.LBB34_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB34_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_89:                              # %for.cond284
                                        #   Parent Loop BB34_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB34_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB34_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB34_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_89
.LBB34_92:                              # %for.end310
                                        #   in Loop: Header=BB34_87 Depth=1
	jmp	.LBB34_93
.LBB34_93:                              # %for.inc311
                                        #   in Loop: Header=BB34_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_87
.LBB34_94:                              # %for.end313
	jmp	.LBB34_95
.LBB34_95:                              # %if.end314
	jmp	.LBB34_96
.LBB34_96:                              # %if.end315
	cmpl	$1234614395, -84(%rbp)  # imm = 0x4996B87B
	jne	.LBB34_98
.LBB34_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_97
.Lfunc_end34:
	.size	decode_one_b8block.24, .Lfunc_end34-decode_one_b8block.24
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.25 # -- Begin function compute_residue_b8block.25
	.p2align	4, 0x90
	.type	compute_residue_b8block.25,@function
compute_residue_b8block.25:             # @compute_residue_b8block.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1315160282, -36(%rbp)  # imm = 0x4E63C0DA
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB35_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB35_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB35_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_4:                               # %for.cond4
                                        #   Parent Loop BB35_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB35_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB35_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB35_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_4
.LBB35_7:                               # %for.end
                                        #   in Loop: Header=BB35_2 Depth=1
	jmp	.LBB35_8
.LBB35_8:                               # %for.inc22
                                        #   in Loop: Header=BB35_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_2
.LBB35_9:                               # %for.end24
	jmp	.LBB35_19
.LBB35_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB35_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB35_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB35_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB35_13:                              # %for.cond29
                                        #   Parent Loop BB35_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB35_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB35_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB35_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_13
.LBB35_16:                              # %for.end56
                                        #   in Loop: Header=BB35_11 Depth=1
	jmp	.LBB35_17
.LBB35_17:                              # %for.inc57
                                        #   in Loop: Header=BB35_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_11
.LBB35_18:                              # %for.end59
	jmp	.LBB35_19
.LBB35_19:                              # %if.end
	cmpl	$1315160282, -36(%rbp)  # imm = 0x4E63C0DA
	jne	.LBB35_21
.LBB35_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_20
.Lfunc_end35:
	.size	compute_residue_b8block.25, .Lfunc_end35-compute_residue_b8block.25
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.26        # -- Begin function decode_one_mb.26
	.p2align	4, 0x90
	.type	decode_one_mb.26,@function
decode_one_mb.26:                       # @decode_one_mb.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2134407208, -4(%rbp)   # imm = 0x7F387828
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$2134407208, -4(%rbp)   # imm = 0x7F387828
	jne	.LBB36_2
.LBB36_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_1
.Lfunc_end36:
	.size	decode_one_mb.26, .Lfunc_end36-decode_one_mb.26
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.27        # -- Begin function Conceal_Error.27
	.p2align	4, 0x90
	.type	Conceal_Error.27,@function
Conceal_Error.27:                       # @Conceal_Error.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1155793162, -68(%rbp)  # imm = 0x44E4010A
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB37_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB37_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB37_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB37_4:                               # %land.end
.LBB37_5:                               # %lor.end
.LBB37_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB37_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB37_9
.LBB37_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB37_14
.LBB37_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB37_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB37_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB37_12:                              # %land.end51
.LBB37_13:                              # %lor.end53
.LBB37_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB37_180
# %bb.15:                               # %land.end54
	movq	.LJTI37_0(,%rax,8), %rax
	jmpq	*%rax
.LBB37_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB37_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB37_18 Depth=1
	movl	$0, -4(%rbp)
.LBB37_20:                              # %for.cond68
                                        #   Parent Loop BB37_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB37_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB37_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_20
.LBB37_23:                              # %for.end
                                        #   in Loop: Header=BB37_18 Depth=1
	jmp	.LBB37_24
.LBB37_24:                              # %for.inc85
                                        #   in Loop: Header=BB37_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_18
.LBB37_25:                              # %for.end87
	jmp	.LBB37_35
.LBB37_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB37_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB37_27 Depth=1
	movl	$0, -4(%rbp)
.LBB37_29:                              # %for.cond92
                                        #   Parent Loop BB37_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB37_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB37_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_29
.LBB37_32:                              # %for.end104
                                        #   in Loop: Header=BB37_27 Depth=1
	jmp	.LBB37_33
.LBB37_33:                              # %for.inc105
                                        #   in Loop: Header=BB37_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_27
.LBB37_34:                              # %for.end107
	jmp	.LBB37_35
.LBB37_35:                              # %if.end
	jmp	.LBB37_180
.LBB37_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB37_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_39 Depth 2
                                        #       Child Loop BB37_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB37_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB37_37 Depth=1
	movl	$0, -16(%rbp)
.LBB37_39:                              # %for.cond113
                                        #   Parent Loop BB37_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB37_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB37_39 Depth=2
	movl	$0, -4(%rbp)
.LBB37_41:                              # %for.cond117
                                        #   Parent Loop BB37_37 Depth=1
                                        #     Parent Loop BB37_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB37_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB37_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB37_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_41
.LBB37_44:                              # %for.end141
                                        #   in Loop: Header=BB37_39 Depth=2
	jmp	.LBB37_45
.LBB37_45:                              # %for.inc142
                                        #   in Loop: Header=BB37_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_39
.LBB37_46:                              # %for.end144
                                        #   in Loop: Header=BB37_37 Depth=1
	jmp	.LBB37_47
.LBB37_47:                              # %for.inc145
                                        #   in Loop: Header=BB37_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_37
.LBB37_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB37_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB37_49 Depth=1
	movl	$0, -8(%rbp)
.LBB37_51:                              # %for.cond152
                                        #   Parent Loop BB37_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB37_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB37_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_51
.LBB37_54:                              # %for.end162
                                        #   in Loop: Header=BB37_49 Depth=1
	jmp	.LBB37_55
.LBB37_55:                              # %for.inc163
                                        #   in Loop: Header=BB37_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_49
.LBB37_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB37_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB37_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB37_59 Depth=1
	movl	$0, -4(%rbp)
.LBB37_61:                              # %for.cond175
                                        #   Parent Loop BB37_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB37_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB37_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_61
.LBB37_64:                              # %for.end195
                                        #   in Loop: Header=BB37_59 Depth=1
	jmp	.LBB37_65
.LBB37_65:                              # %for.inc196
                                        #   in Loop: Header=BB37_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_59
.LBB37_66:                              # %for.end198
	jmp	.LBB37_95
.LBB37_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB37_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB37_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_71 Depth 2
                                        #       Child Loop BB37_73 Depth 3
                                        #         Child Loop BB37_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB37_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB37_71:                              # %for.cond210
                                        #   Parent Loop BB37_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_73 Depth 3
                                        #         Child Loop BB37_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB37_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB37_73:                              # %for.cond236
                                        #   Parent Loop BB37_69 Depth=1
                                        #     Parent Loop BB37_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB37_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB37_73 Depth=3
	movl	$0, -4(%rbp)
.LBB37_75:                              # %for.cond240
                                        #   Parent Loop BB37_69 Depth=1
                                        #     Parent Loop BB37_71 Depth=2
                                        #       Parent Loop BB37_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB37_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB37_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB37_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_75
.LBB37_78:                              # %for.end259
                                        #   in Loop: Header=BB37_73 Depth=3
	jmp	.LBB37_79
.LBB37_79:                              # %for.inc260
                                        #   in Loop: Header=BB37_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_73
.LBB37_80:                              # %for.end262
                                        #   in Loop: Header=BB37_71 Depth=2
	jmp	.LBB37_81
.LBB37_81:                              # %for.inc263
                                        #   in Loop: Header=BB37_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_71
.LBB37_82:                              # %for.end265
                                        #   in Loop: Header=BB37_69 Depth=1
	jmp	.LBB37_83
.LBB37_83:                              # %for.inc266
                                        #   in Loop: Header=BB37_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_69
.LBB37_84:                              # %for.end268
	jmp	.LBB37_94
.LBB37_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB37_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB37_86 Depth=1
	movl	$0, -4(%rbp)
.LBB37_88:                              # %for.cond274
                                        #   Parent Loop BB37_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB37_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB37_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_88
.LBB37_91:                              # %for.end294
                                        #   in Loop: Header=BB37_86 Depth=1
	jmp	.LBB37_92
.LBB37_92:                              # %for.inc295
                                        #   in Loop: Header=BB37_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_86
.LBB37_93:                              # %for.end297
	jmp	.LBB37_94
.LBB37_94:                              # %if.end298
	jmp	.LBB37_95
.LBB37_95:                              # %if.end299
	jmp	.LBB37_105
.LBB37_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB37_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB37_97 Depth=1
	movl	$0, -4(%rbp)
.LBB37_99:                              # %for.cond305
                                        #   Parent Loop BB37_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB37_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB37_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_99
.LBB37_102:                             # %for.end317
                                        #   in Loop: Header=BB37_97 Depth=1
	jmp	.LBB37_103
.LBB37_103:                             # %for.inc318
                                        #   in Loop: Header=BB37_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_97
.LBB37_104:                             # %for.end320
	jmp	.LBB37_105
.LBB37_105:                             # %if.end321
	jmp	.LBB37_180
.LBB37_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB37_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_110 Depth 2
                                        #       Child Loop BB37_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB37_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB37_108 Depth=1
	movl	$0, -16(%rbp)
.LBB37_110:                             # %for.cond331
                                        #   Parent Loop BB37_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB37_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB37_110 Depth=2
	movl	$0, -4(%rbp)
.LBB37_112:                             # %for.cond335
                                        #   Parent Loop BB37_108 Depth=1
                                        #     Parent Loop BB37_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB37_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB37_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB37_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_112
.LBB37_115:                             # %for.end359
                                        #   in Loop: Header=BB37_110 Depth=2
	jmp	.LBB37_116
.LBB37_116:                             # %for.inc360
                                        #   in Loop: Header=BB37_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_110
.LBB37_117:                             # %for.end362
                                        #   in Loop: Header=BB37_108 Depth=1
	jmp	.LBB37_118
.LBB37_118:                             # %for.inc363
                                        #   in Loop: Header=BB37_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_108
.LBB37_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB37_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB37_120 Depth=1
	movl	$0, -8(%rbp)
.LBB37_122:                             # %for.cond370
                                        #   Parent Loop BB37_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB37_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB37_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_122
.LBB37_125:                             # %for.end380
                                        #   in Loop: Header=BB37_120 Depth=1
	jmp	.LBB37_126
.LBB37_126:                             # %for.inc381
                                        #   in Loop: Header=BB37_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_120
.LBB37_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB37_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB37_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB37_129 Depth=1
	movl	$0, -4(%rbp)
.LBB37_131:                             # %for.cond390
                                        #   Parent Loop BB37_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB37_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB37_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_131
.LBB37_134:                             # %for.end410
                                        #   in Loop: Header=BB37_129 Depth=1
	jmp	.LBB37_135
.LBB37_135:                             # %for.inc411
                                        #   in Loop: Header=BB37_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_129
.LBB37_136:                             # %for.end413
	jmp	.LBB37_156
.LBB37_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB37_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB37_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_141 Depth 2
                                        #       Child Loop BB37_143 Depth 3
                                        #         Child Loop BB37_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB37_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB37_141:                             # %for.cond425
                                        #   Parent Loop BB37_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_143 Depth 3
                                        #         Child Loop BB37_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB37_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB37_143:                             # %for.cond452
                                        #   Parent Loop BB37_139 Depth=1
                                        #     Parent Loop BB37_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB37_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB37_143 Depth=3
	movl	$0, -4(%rbp)
.LBB37_145:                             # %for.cond456
                                        #   Parent Loop BB37_139 Depth=1
                                        #     Parent Loop BB37_141 Depth=2
                                        #       Parent Loop BB37_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB37_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB37_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB37_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_145
.LBB37_148:                             # %for.end475
                                        #   in Loop: Header=BB37_143 Depth=3
	jmp	.LBB37_149
.LBB37_149:                             # %for.inc476
                                        #   in Loop: Header=BB37_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_143
.LBB37_150:                             # %for.end478
                                        #   in Loop: Header=BB37_141 Depth=2
	jmp	.LBB37_151
.LBB37_151:                             # %for.inc479
                                        #   in Loop: Header=BB37_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_141
.LBB37_152:                             # %for.end481
                                        #   in Loop: Header=BB37_139 Depth=1
	jmp	.LBB37_153
.LBB37_153:                             # %for.inc482
                                        #   in Loop: Header=BB37_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_139
.LBB37_154:                             # %for.end484
	jmp	.LBB37_155
.LBB37_155:                             # %if.end485
	jmp	.LBB37_156
.LBB37_156:                             # %if.end486
	jmp	.LBB37_157
.LBB37_157:                             # %if.end487
	jmp	.LBB37_180
.LBB37_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB37_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB37_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB37_161 Depth=1
	movl	$0, -4(%rbp)
.LBB37_163:                             # %for.cond499
                                        #   Parent Loop BB37_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB37_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB37_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_163
.LBB37_166:                             # %for.end519
                                        #   in Loop: Header=BB37_161 Depth=1
	jmp	.LBB37_167
.LBB37_167:                             # %for.inc520
                                        #   in Loop: Header=BB37_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_161
.LBB37_168:                             # %for.end522
	jmp	.LBB37_169
.LBB37_169:                             # %if.end523
	jmp	.LBB37_179
.LBB37_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB37_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB37_171 Depth=1
	movl	$0, -4(%rbp)
.LBB37_173:                             # %for.cond529
                                        #   Parent Loop BB37_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB37_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB37_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_173
.LBB37_176:                             # %for.end541
                                        #   in Loop: Header=BB37_171 Depth=1
	jmp	.LBB37_177
.LBB37_177:                             # %for.inc542
                                        #   in Loop: Header=BB37_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_171
.LBB37_178:                             # %for.end544
	jmp	.LBB37_179
.LBB37_179:                             # %if.end545
	jmp	.LBB37_180
.LBB37_180:                             # %sw.epilog
	cmpl	$1155793162, -68(%rbp)  # imm = 0x44E4010A
	jne	.LBB37_182
.LBB37_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_181
.Lfunc_end37:
	.size	Conceal_Error.27, .Lfunc_end37-Conceal_Error.27
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI37_0:
	.quad	.LBB37_16
	.quad	.LBB37_158
	.quad	.LBB37_106
	.quad	.LBB37_180
	.quad	.LBB37_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.28 # -- Begin function compute_residue_b8block.28
	.p2align	4, 0x90
	.type	compute_residue_b8block.28,@function
compute_residue_b8block.28:             # @compute_residue_b8block.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1826889433, -36(%rbp)  # imm = 0x6CE41ED9
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB38_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB38_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_4:                               # %for.cond4
                                        #   Parent Loop BB38_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB38_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB38_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB38_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_4
.LBB38_7:                               # %for.end
                                        #   in Loop: Header=BB38_2 Depth=1
	jmp	.LBB38_8
.LBB38_8:                               # %for.inc22
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_2
.LBB38_9:                               # %for.end24
	jmp	.LBB38_19
.LBB38_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB38_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB38_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_13:                              # %for.cond29
                                        #   Parent Loop BB38_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB38_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB38_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB38_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_13
.LBB38_16:                              # %for.end56
                                        #   in Loop: Header=BB38_11 Depth=1
	jmp	.LBB38_17
.LBB38_17:                              # %for.inc57
                                        #   in Loop: Header=BB38_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_11
.LBB38_18:                              # %for.end59
	jmp	.LBB38_19
.LBB38_19:                              # %if.end
	cmpl	$1826889433, -36(%rbp)  # imm = 0x6CE41ED9
	jne	.LBB38_21
.LBB38_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_20
.Lfunc_end38:
	.size	compute_residue_b8block.28, .Lfunc_end38-compute_residue_b8block.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.29
.LCPI39_0:
	.quad	4636737291354636288     # double 100
.LCPI39_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.29
	.p2align	4, 0x90
	.type	Build_Status_Map.29,@function
Build_Status_Map.29:                    # @Build_Status_Map.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1755911452, -44(%rbp)  # imm = 0x68A9151C
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB39_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -12(%rbp)
.LBB39_3:                               # %for.cond2
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB39_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB39_13
.LBB39_6:                               # %if.then
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI39_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB39_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB39_8:                               # %if.end
                                        #   in Loop: Header=BB39_3 Depth=2
	callq	rand
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI39_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB39_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB39_10:                              # %if.end20
                                        #   in Loop: Header=BB39_3 Depth=2
	callq	rand
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI39_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB39_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	$1, -4(%rbp)
.LBB39_12:                              # %if.end29
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB39_13:                              # %if.end30
                                        #   in Loop: Header=BB39_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB39_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB39_18
.LBB39_15:                              # %if.else
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB39_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB39_17:                              # %if.end49
                                        #   in Loop: Header=BB39_3 Depth=2
	jmp	.LBB39_18
.LBB39_18:                              # %if.end50
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_3
.LBB39_20:                              # %for.end
                                        #   in Loop: Header=BB39_1 Depth=1
	jmp	.LBB39_21
.LBB39_21:                              # %for.inc53
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_1
.LBB39_22:                              # %for.end55
	cmpl	$1755911452, -44(%rbp)  # imm = 0x68A9151C
	jne	.LBB39_24
.LBB39_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_23
.Lfunc_end39:
	.size	Build_Status_Map.29, .Lfunc_end39-Build_Status_Map.29
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.30    # -- Begin function Error_Concealment.30
	.p2align	4, 0x90
	.type	Error_Concealment.30,@function
Error_Concealment.30:                   # @Error_Concealment.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1624372657, -16(%rbp)  # imm = 0x60D1F5B1
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB40_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_3:                               # %for.cond2
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB40_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB40_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB40_6:                               # %if.end
                                        #   in Loop: Header=BB40_3 Depth=2
	jmp	.LBB40_7
.LBB40_7:                               # %for.inc
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_3
.LBB40_8:                               # %for.end
                                        #   in Loop: Header=BB40_1 Depth=1
	jmp	.LBB40_9
.LBB40_9:                               # %for.inc7
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_1
.LBB40_10:                              # %for.end9
	cmpl	$1624372657, -16(%rbp)  # imm = 0x60D1F5B1
	jne	.LBB40_12
.LBB40_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_11
.Lfunc_end40:
	.size	Error_Concealment.30, .Lfunc_end40-Error_Concealment.30
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.31 # -- Begin function compute_residue_b8block.31
	.p2align	4, 0x90
	.type	compute_residue_b8block.31,@function
compute_residue_b8block.31:             # @compute_residue_b8block.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1790541423, -36(%rbp)  # imm = 0x6AB97E6F
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB41_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB41_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB41_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB41_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB41_4:                               # %for.cond4
                                        #   Parent Loop BB41_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB41_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB41_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB41_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_4
.LBB41_7:                               # %for.end
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_8
.LBB41_8:                               # %for.inc22
                                        #   in Loop: Header=BB41_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_2
.LBB41_9:                               # %for.end24
	jmp	.LBB41_19
.LBB41_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB41_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB41_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB41_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB41_13:                              # %for.cond29
                                        #   Parent Loop BB41_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB41_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB41_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB41_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_13
.LBB41_16:                              # %for.end56
                                        #   in Loop: Header=BB41_11 Depth=1
	jmp	.LBB41_17
.LBB41_17:                              # %for.inc57
                                        #   in Loop: Header=BB41_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_11
.LBB41_18:                              # %for.end59
	jmp	.LBB41_19
.LBB41_19:                              # %if.end
	cmpl	$1790541423, -36(%rbp)  # imm = 0x6AB97E6F
	jne	.LBB41_21
.LBB41_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_20
.Lfunc_end41:
	.size	compute_residue_b8block.31, .Lfunc_end41-compute_residue_b8block.31
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.32   # -- Begin function decode_one_b8block.32
	.p2align	4, 0x90
	.type	decode_one_b8block.32,@function
decode_one_b8block.32:                  # @decode_one_b8block.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$613269378, -84(%rbp)   # imm = 0x248DBF82
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_4:                               # %for.cond9
                                        #   Parent Loop BB42_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB42_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB42_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_4
.LBB42_7:                               # %for.end
                                        #   in Loop: Header=BB42_2 Depth=1
	jmp	.LBB42_8
.LBB42_8:                               # %for.inc26
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_2
.LBB42_9:                               # %for.end28
	jmp	.LBB42_96
.LBB42_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB42_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB42_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB42_31
.LBB42_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB42_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_17:                              # %for.cond40
                                        #   Parent Loop BB42_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB42_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB42_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_17
.LBB42_20:                              # %for.end49
                                        #   in Loop: Header=BB42_15 Depth=1
	jmp	.LBB42_21
.LBB42_21:                              # %for.inc50
                                        #   in Loop: Header=BB42_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_15
.LBB42_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB42_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_25:                              # %for.cond56
                                        #   Parent Loop BB42_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB42_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_25
.LBB42_28:                              # %for.end71
                                        #   in Loop: Header=BB42_23 Depth=1
	jmp	.LBB42_29
.LBB42_29:                              # %for.inc72
                                        #   in Loop: Header=BB42_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_23
.LBB42_30:                              # %for.end74
	jmp	.LBB42_60
.LBB42_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB42_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB42_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB42_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_36:                              # %for.cond83
                                        #   Parent Loop BB42_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB42_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_36
.LBB42_39:                              # %for.end120
                                        #   in Loop: Header=BB42_34 Depth=1
	jmp	.LBB42_40
.LBB42_40:                              # %for.inc121
                                        #   in Loop: Header=BB42_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_34
.LBB42_41:                              # %for.end123
	jmp	.LBB42_51
.LBB42_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB42_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_45:                              # %for.cond129
                                        #   Parent Loop BB42_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB42_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB42_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_45
.LBB42_48:                              # %for.end145
                                        #   in Loop: Header=BB42_43 Depth=1
	jmp	.LBB42_49
.LBB42_49:                              # %for.inc146
                                        #   in Loop: Header=BB42_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_43
.LBB42_50:                              # %for.end148
	jmp	.LBB42_51
.LBB42_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB42_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_54:                              # %for.cond153
                                        #   Parent Loop BB42_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB42_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_54
.LBB42_57:                              # %for.end167
                                        #   in Loop: Header=BB42_52 Depth=1
	jmp	.LBB42_58
.LBB42_58:                              # %for.inc168
                                        #   in Loop: Header=BB42_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_52
.LBB42_59:                              # %for.end170
	jmp	.LBB42_60
.LBB42_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB42_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB42_66
.LBB42_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB42_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB42_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB42_86
.LBB42_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_69 Depth 2
                                        #       Child Loop BB42_74 Depth 3
                                        #         Child Loop BB42_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB42_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_69:                              # %for.cond197
                                        #   Parent Loop BB42_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_74 Depth 3
                                        #         Child Loop BB42_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB42_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB42_73:                              # %if.end218
                                        #   in Loop: Header=BB42_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB42_74:                              # %for.cond233
                                        #   Parent Loop BB42_67 Depth=1
                                        #     Parent Loop BB42_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB42_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB42_74 Depth=3
	movl	$0, -8(%rbp)
.LBB42_76:                              # %for.cond237
                                        #   Parent Loop BB42_67 Depth=1
                                        #     Parent Loop BB42_69 Depth=2
                                        #       Parent Loop BB42_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB42_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB42_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB42_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_76
.LBB42_79:                              # %for.end269
                                        #   in Loop: Header=BB42_74 Depth=3
	jmp	.LBB42_80
.LBB42_80:                              # %for.inc270
                                        #   in Loop: Header=BB42_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_74
.LBB42_81:                              # %for.end272
                                        #   in Loop: Header=BB42_69 Depth=2
	jmp	.LBB42_82
.LBB42_82:                              # %for.inc273
                                        #   in Loop: Header=BB42_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_69
.LBB42_83:                              # %for.end275
                                        #   in Loop: Header=BB42_67 Depth=1
	jmp	.LBB42_84
.LBB42_84:                              # %for.inc276
                                        #   in Loop: Header=BB42_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_67
.LBB42_85:                              # %for.end278
	jmp	.LBB42_95
.LBB42_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB42_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_89:                              # %for.cond284
                                        #   Parent Loop BB42_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB42_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB42_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB42_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_89
.LBB42_92:                              # %for.end310
                                        #   in Loop: Header=BB42_87 Depth=1
	jmp	.LBB42_93
.LBB42_93:                              # %for.inc311
                                        #   in Loop: Header=BB42_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_87
.LBB42_94:                              # %for.end313
	jmp	.LBB42_95
.LBB42_95:                              # %if.end314
	jmp	.LBB42_96
.LBB42_96:                              # %if.end315
	cmpl	$613269378, -84(%rbp)   # imm = 0x248DBF82
	jne	.LBB42_98
.LBB42_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_97
.Lfunc_end42:
	.size	decode_one_b8block.32, .Lfunc_end42-decode_one_b8block.32
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.33 # -- Begin function compute_residue_b8block.33
	.p2align	4, 0x90
	.type	compute_residue_b8block.33,@function
compute_residue_b8block.33:             # @compute_residue_b8block.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2035832790, -36(%rbp)  # imm = 0x795857D6
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB43_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB43_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB43_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_4:                               # %for.cond4
                                        #   Parent Loop BB43_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB43_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB43_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB43_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_4
.LBB43_7:                               # %for.end
                                        #   in Loop: Header=BB43_2 Depth=1
	jmp	.LBB43_8
.LBB43_8:                               # %for.inc22
                                        #   in Loop: Header=BB43_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_2
.LBB43_9:                               # %for.end24
	jmp	.LBB43_19
.LBB43_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB43_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB43_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_13:                              # %for.cond29
                                        #   Parent Loop BB43_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB43_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB43_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB43_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_13
.LBB43_16:                              # %for.end56
                                        #   in Loop: Header=BB43_11 Depth=1
	jmp	.LBB43_17
.LBB43_17:                              # %for.inc57
                                        #   in Loop: Header=BB43_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_11
.LBB43_18:                              # %for.end59
	jmp	.LBB43_19
.LBB43_19:                              # %if.end
	cmpl	$2035832790, -36(%rbp)  # imm = 0x795857D6
	jne	.LBB43_21
.LBB43_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_20
.Lfunc_end43:
	.size	compute_residue_b8block.33, .Lfunc_end43-compute_residue_b8block.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.34
.LCPI44_0:
	.quad	4636737291354636288     # double 100
.LCPI44_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.34
	.p2align	4, 0x90
	.type	Build_Status_Map.34,@function
Build_Status_Map.34:                    # @Build_Status_Map.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1168012743, -36(%rbp)  # imm = 0x459E75C7
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -12(%rbp)
.LBB44_3:                               # %for.cond2
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB44_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB44_13
.LBB44_6:                               # %if.then
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB44_8:                               # %if.end
                                        #   in Loop: Header=BB44_3 Depth=2
	callq	rand
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB44_10:                              # %if.end20
                                        #   in Loop: Header=BB44_3 Depth=2
	callq	rand
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	$1, -4(%rbp)
.LBB44_12:                              # %if.end29
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB44_13:                              # %if.end30
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB44_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB44_18
.LBB44_15:                              # %if.else
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB44_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB44_17:                              # %if.end49
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_18
.LBB44_18:                              # %if.end50
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_3
.LBB44_20:                              # %for.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_21
.LBB44_21:                              # %for.inc53
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_1
.LBB44_22:                              # %for.end55
	cmpl	$1168012743, -36(%rbp)  # imm = 0x459E75C7
	jne	.LBB44_24
.LBB44_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_23
.Lfunc_end44:
	.size	Build_Status_Map.34, .Lfunc_end44-Build_Status_Map.34
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.35 # -- Begin function compute_residue_b8block.35
	.p2align	4, 0x90
	.type	compute_residue_b8block.35,@function
compute_residue_b8block.35:             # @compute_residue_b8block.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$189903755, -36(%rbp)   # imm = 0xB51B38B
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB45_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB45_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_4:                               # %for.cond4
                                        #   Parent Loop BB45_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB45_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB45_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB45_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_4
.LBB45_7:                               # %for.end
                                        #   in Loop: Header=BB45_2 Depth=1
	jmp	.LBB45_8
.LBB45_8:                               # %for.inc22
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_2
.LBB45_9:                               # %for.end24
	jmp	.LBB45_19
.LBB45_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB45_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB45_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_13:                              # %for.cond29
                                        #   Parent Loop BB45_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB45_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB45_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB45_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_13
.LBB45_16:                              # %for.end56
                                        #   in Loop: Header=BB45_11 Depth=1
	jmp	.LBB45_17
.LBB45_17:                              # %for.inc57
                                        #   in Loop: Header=BB45_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_11
.LBB45_18:                              # %for.end59
	jmp	.LBB45_19
.LBB45_19:                              # %if.end
	cmpl	$189903755, -36(%rbp)   # imm = 0xB51B38B
	jne	.LBB45_21
.LBB45_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_20
.Lfunc_end45:
	.size	compute_residue_b8block.35, .Lfunc_end45-compute_residue_b8block.35
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.36    # -- Begin function Error_Concealment.36
	.p2align	4, 0x90
	.type	Error_Concealment.36,@function
Error_Concealment.36:                   # @Error_Concealment.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1346353129, -20(%rbp)  # imm = 0x503FB7E9
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB46_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_3:                               # %for.cond2
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB46_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB46_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB46_6:                               # %if.end
                                        #   in Loop: Header=BB46_3 Depth=2
	jmp	.LBB46_7
.LBB46_7:                               # %for.inc
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_3
.LBB46_8:                               # %for.end
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_9
.LBB46_9:                               # %for.inc7
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_1
.LBB46_10:                              # %for.end9
	cmpl	$1346353129, -20(%rbp)  # imm = 0x503FB7E9
	jne	.LBB46_12
.LBB46_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_11
.Lfunc_end46:
	.size	Error_Concealment.36, .Lfunc_end46-Error_Concealment.36
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.37  # -- Begin function Get_Reference_Block.37
	.p2align	4, 0x90
	.type	Get_Reference_Block.37,@function
Get_Reference_Block.37:                 # @Get_Reference_Block.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$134154039, -28(%rbp)   # imm = 0x7FF0737
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB47_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_3:                               # %for.cond5
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_3
.LBB47_6:                               # %for.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_7
.LBB47_7:                               # %for.inc14
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_1
.LBB47_8:                               # %for.end16
	cmpl	$134154039, -28(%rbp)   # imm = 0x7FF0737
	jne	.LBB47_10
.LBB47_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_9
.Lfunc_end47:
	.size	Get_Reference_Block.37, .Lfunc_end47-Get_Reference_Block.37
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.38 # -- Begin function compute_residue_b8block.38
	.p2align	4, 0x90
	.type	compute_residue_b8block.38,@function
compute_residue_b8block.38:             # @compute_residue_b8block.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$310670514, -36(%rbp)   # imm = 0x128474B2
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB48_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB48_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_4:                               # %for.cond4
                                        #   Parent Loop BB48_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB48_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB48_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB48_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_4
.LBB48_7:                               # %for.end
                                        #   in Loop: Header=BB48_2 Depth=1
	jmp	.LBB48_8
.LBB48_8:                               # %for.inc22
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_2
.LBB48_9:                               # %for.end24
	jmp	.LBB48_19
.LBB48_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB48_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_13:                              # %for.cond29
                                        #   Parent Loop BB48_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB48_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB48_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB48_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_13
.LBB48_16:                              # %for.end56
                                        #   in Loop: Header=BB48_11 Depth=1
	jmp	.LBB48_17
.LBB48_17:                              # %for.inc57
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_11
.LBB48_18:                              # %for.end59
	jmp	.LBB48_19
.LBB48_19:                              # %if.end
	cmpl	$310670514, -36(%rbp)   # imm = 0x128474B2
	jne	.LBB48_21
.LBB48_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_20
.Lfunc_end48:
	.size	compute_residue_b8block.38, .Lfunc_end48-compute_residue_b8block.38
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.39  # -- Begin function Get_Reference_Pixel.39
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.39,@function
Get_Reference_Pixel.39:                 # @Get_Reference_Pixel.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$303751431, -108(%rbp)  # imm = 0x121AE107
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB49_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB49_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB49_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB49_5
.LBB49_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB49_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB49_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB49_11
.LBB49_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB49_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB49_10
.LBB49_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB49_10:                              # %cond.end14
.LBB49_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB49_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB49_14
.LBB49_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB49_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB49_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB49_20
.LBB49_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB49_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB49_19
.LBB49_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB49_19:                              # %cond.end29
.LBB49_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_332
.LBB49_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB49_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB49_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB49_25
.LBB49_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB49_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB49_31
.LBB49_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB49_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB49_30
.LBB49_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB49_30:                              # %cond.end52
.LBB49_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB49_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB49_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_36
.LBB49_35:                              # %cond.false61
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_36:                              # %cond.end63
                                        #   in Loop: Header=BB49_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB49_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_42
.LBB49_38:                              # %cond.false68
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_41
.LBB49_40:                              # %cond.false73
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_41:                              # %cond.end75
                                        #   in Loop: Header=BB49_32 Depth=1
.LBB49_42:                              # %cond.end77
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB49_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_32
.LBB49_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_47
.LBB49_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB49_53
.LBB49_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_52
.LBB49_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_52:                              # %cond.end113
.LBB49_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB49_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB49_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB49_57
.LBB49_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB49_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB49_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB49_63
.LBB49_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB49_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB49_62
.LBB49_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB49_62:                              # %cond.end136
.LBB49_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB49_76
.LBB49_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB49_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB49_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB49_68
.LBB49_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB49_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB49_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB49_74
.LBB49_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB49_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB49_73
.LBB49_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB49_73:                              # %cond.end169
.LBB49_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB49_75:                              # %if.end
	jmp	.LBB49_76
.LBB49_76:                              # %if.end178
	jmp	.LBB49_331
.LBB49_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB49_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB49_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB49_81
.LBB49_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB49_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB49_87
.LBB49_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB49_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB49_86
.LBB49_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB49_86:                              # %cond.end197
.LBB49_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB49_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB49_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_92
.LBB49_91:                              # %cond.false209
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_92:                              # %cond.end211
                                        #   in Loop: Header=BB49_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB49_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_98
.LBB49_94:                              # %cond.false216
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_97
.LBB49_96:                              # %cond.false221
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_97:                              # %cond.end223
                                        #   in Loop: Header=BB49_88 Depth=1
.LBB49_98:                              # %cond.end225
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB49_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_88
.LBB49_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_103
.LBB49_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB49_109
.LBB49_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_108
.LBB49_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_108:                             # %cond.end266
.LBB49_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB49_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB49_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB49_113
.LBB49_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB49_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB49_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB49_119
.LBB49_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB49_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB49_118
.LBB49_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB49_118:                             # %cond.end287
.LBB49_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB49_132
.LBB49_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB49_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB49_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB49_124
.LBB49_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB49_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB49_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB49_130
.LBB49_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB49_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB49_129
.LBB49_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB49_129:                             # %cond.end320
.LBB49_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB49_131:                             # %if.end331
	jmp	.LBB49_132
.LBB49_132:                             # %if.end332
	jmp	.LBB49_330
.LBB49_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB49_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB49_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB49_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_139
.LBB49_138:                             # %cond.false345
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_139:                             # %cond.end347
                                        #   in Loop: Header=BB49_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB49_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_145
.LBB49_141:                             # %cond.false352
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_144
.LBB49_143:                             # %cond.false357
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_144:                             # %cond.end359
                                        #   in Loop: Header=BB49_135 Depth=1
.LBB49_145:                             # %cond.end361
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB49_146:                             # %for.cond363
                                        #   Parent Loop BB49_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB49_150
.LBB49_149:                             # %cond.false371
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_150:                             # %cond.end373
                                        #   in Loop: Header=BB49_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB49_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB49_156
.LBB49_152:                             # %cond.false378
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB49_155
.LBB49_154:                             # %cond.false383
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_155:                             # %cond.end385
                                        #   in Loop: Header=BB49_146 Depth=2
.LBB49_156:                             # %cond.end387
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB49_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_146
.LBB49_158:                             # %for.end401
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_135
.LBB49_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB49_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB49_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB49_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB49_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_161
.LBB49_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_167
.LBB49_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB49_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB49_173
.LBB49_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_172
.LBB49_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB49_172:                             # %cond.end449
.LBB49_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB49_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_177
.LBB49_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB49_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB49_183
.LBB49_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_182
.LBB49_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_182:                             # %cond.end486
.LBB49_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB49_196
.LBB49_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB49_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_188
.LBB49_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB49_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB49_194
.LBB49_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_193
.LBB49_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_193:                             # %cond.end526
.LBB49_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB49_195:                             # %if.end532
	jmp	.LBB49_196
.LBB49_196:                             # %if.end533
	jmp	.LBB49_329
.LBB49_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB49_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB49_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_203
.LBB49_202:                             # %cond.false546
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_203:                             # %cond.end548
                                        #   in Loop: Header=BB49_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB49_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_209
.LBB49_205:                             # %cond.false553
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_208
.LBB49_207:                             # %cond.false558
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_208:                             # %cond.end560
                                        #   in Loop: Header=BB49_199 Depth=1
.LBB49_209:                             # %cond.end562
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB49_210:                             # %for.cond564
                                        #   Parent Loop BB49_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB49_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB49_214
.LBB49_213:                             # %cond.false572
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_214:                             # %cond.end574
                                        #   in Loop: Header=BB49_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB49_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB49_220
.LBB49_216:                             # %cond.false579
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB49_219
.LBB49_218:                             # %cond.false584
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_219:                             # %cond.end586
                                        #   in Loop: Header=BB49_210 Depth=2
.LBB49_220:                             # %cond.end588
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB49_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_210
.LBB49_222:                             # %for.end602
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_199
.LBB49_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB49_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB49_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB49_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB49_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_225
.LBB49_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_231
.LBB49_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB49_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB49_237
.LBB49_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_236
.LBB49_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB49_236:                             # %cond.end650
.LBB49_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB49_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_241
.LBB49_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB49_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB49_247
.LBB49_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_246
.LBB49_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_246:                             # %cond.end687
.LBB49_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB49_258
.LBB49_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_251
.LBB49_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB49_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB49_257
.LBB49_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB49_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_256
.LBB49_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB49_256:                             # %cond.end724
.LBB49_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB49_258:                             # %if.end730
	jmp	.LBB49_328
.LBB49_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB49_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB49_262
.LBB49_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB49_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB49_265
.LBB49_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB49_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB49_271
.LBB49_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB49_270
.LBB49_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB49_270:                             # %cond.end753
.LBB49_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB49_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB49_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_276
.LBB49_275:                             # %cond.false765
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_276:                             # %cond.end767
                                        #   in Loop: Header=BB49_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB49_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_282
.LBB49_278:                             # %cond.false772
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB49_281
.LBB49_280:                             # %cond.false777
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB49_281:                             # %cond.end779
                                        #   in Loop: Header=BB49_272 Depth=1
.LBB49_282:                             # %cond.end781
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB49_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_272
.LBB49_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_287
.LBB49_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB49_293
.LBB49_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_292
.LBB49_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_292:                             # %cond.end822
.LBB49_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB49_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB49_296
.LBB49_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB49_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB49_299
.LBB49_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB49_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB49_305
.LBB49_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB49_304
.LBB49_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB49_304:                             # %cond.end847
.LBB49_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB49_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB49_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_310
.LBB49_309:                             # %cond.false859
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_310:                             # %cond.end861
                                        #   in Loop: Header=BB49_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB49_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_316
.LBB49_312:                             # %cond.false866
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB49_315
.LBB49_314:                             # %cond.false871
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB49_315:                             # %cond.end873
                                        #   in Loop: Header=BB49_306 Depth=1
.LBB49_316:                             # %cond.end875
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB49_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_306
.LBB49_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_321
.LBB49_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB49_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB49_327
.LBB49_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_326
.LBB49_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB49_326:                             # %cond.end916
.LBB49_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB49_328:                             # %if.end922
	jmp	.LBB49_329
.LBB49_329:                             # %if.end923
	jmp	.LBB49_330
.LBB49_330:                             # %if.end924
	jmp	.LBB49_331
.LBB49_331:                             # %if.end925
	jmp	.LBB49_332
.LBB49_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$303751431, -108(%rbp)  # imm = 0x121AE107
	jne	.LBB49_334
.LBB49_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_333
.Lfunc_end49:
	.size	Get_Reference_Pixel.39, .Lfunc_end49-Get_Reference_Pixel.39
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.40  # -- Begin function Get_Reference_Block.40
	.p2align	4, 0x90
	.type	Get_Reference_Block.40,@function
Get_Reference_Block.40:                 # @Get_Reference_Block.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$150408026, -36(%rbp)   # imm = 0x8F70B5A
	movq	%rdi, -56(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -48(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB50_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_3:                               # %for.cond5
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB50_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB50_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_3
.LBB50_6:                               # %for.end
                                        #   in Loop: Header=BB50_1 Depth=1
	jmp	.LBB50_7
.LBB50_7:                               # %for.inc14
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_1
.LBB50_8:                               # %for.end16
	cmpl	$150408026, -36(%rbp)   # imm = 0x8F70B5A
	jne	.LBB50_10
.LBB50_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_9
.Lfunc_end50:
	.size	Get_Reference_Block.40, .Lfunc_end50-Get_Reference_Block.40
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.41  # -- Begin function Get_Reference_Pixel.41
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.41,@function
Get_Reference_Pixel.41:                 # @Get_Reference_Pixel.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1613579224, -104(%rbp) # imm = 0x602D43D8
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB51_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB51_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB51_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB51_5
.LBB51_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB51_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB51_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB51_11
.LBB51_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB51_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB51_10
.LBB51_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB51_10:                              # %cond.end14
.LBB51_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB51_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB51_14
.LBB51_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB51_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB51_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB51_20
.LBB51_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB51_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB51_19
.LBB51_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB51_19:                              # %cond.end29
.LBB51_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_332
.LBB51_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB51_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB51_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB51_25
.LBB51_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB51_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB51_31
.LBB51_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB51_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB51_30
.LBB51_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB51_30:                              # %cond.end52
.LBB51_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB51_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB51_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB51_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB51_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB51_36
.LBB51_35:                              # %cond.false61
                                        #   in Loop: Header=BB51_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB51_36:                              # %cond.end63
                                        #   in Loop: Header=BB51_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB51_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_42
.LBB51_38:                              # %cond.false68
                                        #   in Loop: Header=BB51_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB51_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB51_41
.LBB51_40:                              # %cond.false73
                                        #   in Loop: Header=BB51_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB51_41:                              # %cond.end75
                                        #   in Loop: Header=BB51_32 Depth=1
.LBB51_42:                              # %cond.end77
                                        #   in Loop: Header=BB51_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB51_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_32
.LBB51_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_47
.LBB51_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB51_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB51_53
.LBB51_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_52
.LBB51_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB51_52:                              # %cond.end113
.LBB51_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB51_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB51_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB51_57
.LBB51_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB51_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB51_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB51_63
.LBB51_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB51_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB51_62
.LBB51_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB51_62:                              # %cond.end136
.LBB51_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB51_76
.LBB51_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB51_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB51_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB51_68
.LBB51_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB51_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB51_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB51_74
.LBB51_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB51_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB51_73
.LBB51_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB51_73:                              # %cond.end169
.LBB51_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB51_75:                              # %if.end
	jmp	.LBB51_76
.LBB51_76:                              # %if.end178
	jmp	.LBB51_331
.LBB51_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB51_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB51_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB51_81
.LBB51_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB51_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB51_87
.LBB51_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB51_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB51_86
.LBB51_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB51_86:                              # %cond.end197
.LBB51_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB51_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB51_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB51_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB51_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB51_92
.LBB51_91:                              # %cond.false209
                                        #   in Loop: Header=BB51_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB51_92:                              # %cond.end211
                                        #   in Loop: Header=BB51_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB51_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_98
.LBB51_94:                              # %cond.false216
                                        #   in Loop: Header=BB51_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB51_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB51_97
.LBB51_96:                              # %cond.false221
                                        #   in Loop: Header=BB51_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB51_97:                              # %cond.end223
                                        #   in Loop: Header=BB51_88 Depth=1
.LBB51_98:                              # %cond.end225
                                        #   in Loop: Header=BB51_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB51_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_88
.LBB51_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_103
.LBB51_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB51_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB51_109
.LBB51_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_108
.LBB51_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB51_108:                             # %cond.end266
.LBB51_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB51_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB51_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB51_113
.LBB51_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB51_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB51_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB51_119
.LBB51_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB51_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB51_118
.LBB51_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB51_118:                             # %cond.end287
.LBB51_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB51_132
.LBB51_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB51_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB51_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB51_124
.LBB51_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB51_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB51_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB51_130
.LBB51_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB51_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB51_129
.LBB51_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB51_129:                             # %cond.end320
.LBB51_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB51_131:                             # %if.end331
	jmp	.LBB51_132
.LBB51_132:                             # %if.end332
	jmp	.LBB51_330
.LBB51_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB51_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB51_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB51_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB51_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB51_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB51_139
.LBB51_138:                             # %cond.false345
                                        #   in Loop: Header=BB51_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB51_139:                             # %cond.end347
                                        #   in Loop: Header=BB51_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB51_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_145
.LBB51_141:                             # %cond.false352
                                        #   in Loop: Header=BB51_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB51_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB51_144
.LBB51_143:                             # %cond.false357
                                        #   in Loop: Header=BB51_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB51_144:                             # %cond.end359
                                        #   in Loop: Header=BB51_135 Depth=1
.LBB51_145:                             # %cond.end361
                                        #   in Loop: Header=BB51_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB51_146:                             # %for.cond363
                                        #   Parent Loop BB51_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB51_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB51_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB51_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB51_150
.LBB51_149:                             # %cond.false371
                                        #   in Loop: Header=BB51_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB51_150:                             # %cond.end373
                                        #   in Loop: Header=BB51_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB51_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB51_156
.LBB51_152:                             # %cond.false378
                                        #   in Loop: Header=BB51_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB51_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB51_155
.LBB51_154:                             # %cond.false383
                                        #   in Loop: Header=BB51_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB51_155:                             # %cond.end385
                                        #   in Loop: Header=BB51_146 Depth=2
.LBB51_156:                             # %cond.end387
                                        #   in Loop: Header=BB51_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB51_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_146
.LBB51_158:                             # %for.end401
                                        #   in Loop: Header=BB51_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB51_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_135
.LBB51_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB51_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB51_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB51_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB51_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_161
.LBB51_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_167
.LBB51_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB51_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB51_173
.LBB51_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_172
.LBB51_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB51_172:                             # %cond.end449
.LBB51_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB51_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB51_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_177
.LBB51_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB51_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB51_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB51_183
.LBB51_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB51_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_182
.LBB51_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB51_182:                             # %cond.end486
.LBB51_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB51_196
.LBB51_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB51_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB51_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_188
.LBB51_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB51_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB51_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB51_194
.LBB51_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB51_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_193
.LBB51_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB51_193:                             # %cond.end526
.LBB51_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB51_195:                             # %if.end532
	jmp	.LBB51_196
.LBB51_196:                             # %if.end533
	jmp	.LBB51_329
.LBB51_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB51_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB51_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB51_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB51_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB51_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB51_203
.LBB51_202:                             # %cond.false546
                                        #   in Loop: Header=BB51_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB51_203:                             # %cond.end548
                                        #   in Loop: Header=BB51_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB51_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_209
.LBB51_205:                             # %cond.false553
                                        #   in Loop: Header=BB51_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB51_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB51_208
.LBB51_207:                             # %cond.false558
                                        #   in Loop: Header=BB51_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB51_208:                             # %cond.end560
                                        #   in Loop: Header=BB51_199 Depth=1
.LBB51_209:                             # %cond.end562
                                        #   in Loop: Header=BB51_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB51_210:                             # %for.cond564
                                        #   Parent Loop BB51_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB51_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB51_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB51_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB51_214
.LBB51_213:                             # %cond.false572
                                        #   in Loop: Header=BB51_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB51_214:                             # %cond.end574
                                        #   in Loop: Header=BB51_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB51_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB51_220
.LBB51_216:                             # %cond.false579
                                        #   in Loop: Header=BB51_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB51_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB51_219
.LBB51_218:                             # %cond.false584
                                        #   in Loop: Header=BB51_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB51_219:                             # %cond.end586
                                        #   in Loop: Header=BB51_210 Depth=2
.LBB51_220:                             # %cond.end588
                                        #   in Loop: Header=BB51_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB51_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_210
.LBB51_222:                             # %for.end602
                                        #   in Loop: Header=BB51_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB51_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_199
.LBB51_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB51_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB51_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB51_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB51_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_225
.LBB51_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_231
.LBB51_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB51_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB51_237
.LBB51_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_236
.LBB51_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB51_236:                             # %cond.end650
.LBB51_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB51_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB51_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_241
.LBB51_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB51_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB51_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB51_247
.LBB51_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB51_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_246
.LBB51_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB51_246:                             # %cond.end687
.LBB51_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB51_258
.LBB51_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB51_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_251
.LBB51_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB51_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB51_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB51_257
.LBB51_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB51_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_256
.LBB51_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB51_256:                             # %cond.end724
.LBB51_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB51_258:                             # %if.end730
	jmp	.LBB51_328
.LBB51_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB51_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB51_262
.LBB51_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB51_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB51_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB51_265
.LBB51_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB51_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB51_271
.LBB51_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB51_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB51_270
.LBB51_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB51_270:                             # %cond.end753
.LBB51_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB51_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB51_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB51_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB51_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB51_276
.LBB51_275:                             # %cond.false765
                                        #   in Loop: Header=BB51_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB51_276:                             # %cond.end767
                                        #   in Loop: Header=BB51_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB51_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_282
.LBB51_278:                             # %cond.false772
                                        #   in Loop: Header=BB51_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB51_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB51_281
.LBB51_280:                             # %cond.false777
                                        #   in Loop: Header=BB51_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB51_281:                             # %cond.end779
                                        #   in Loop: Header=BB51_272 Depth=1
.LBB51_282:                             # %cond.end781
                                        #   in Loop: Header=BB51_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB51_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_272
.LBB51_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_287
.LBB51_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB51_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB51_293
.LBB51_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_292
.LBB51_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB51_292:                             # %cond.end822
.LBB51_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB51_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB51_296
.LBB51_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB51_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB51_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB51_299
.LBB51_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB51_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB51_305
.LBB51_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB51_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB51_304
.LBB51_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB51_304:                             # %cond.end847
.LBB51_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB51_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB51_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB51_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB51_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB51_310
.LBB51_309:                             # %cond.false859
                                        #   in Loop: Header=BB51_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB51_310:                             # %cond.end861
                                        #   in Loop: Header=BB51_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB51_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB51_316
.LBB51_312:                             # %cond.false866
                                        #   in Loop: Header=BB51_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB51_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB51_315
.LBB51_314:                             # %cond.false871
                                        #   in Loop: Header=BB51_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB51_315:                             # %cond.end873
                                        #   in Loop: Header=BB51_306 Depth=1
.LBB51_316:                             # %cond.end875
                                        #   in Loop: Header=BB51_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB51_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_306
.LBB51_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_321
.LBB51_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB51_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB51_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB51_327
.LBB51_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB51_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_326
.LBB51_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB51_326:                             # %cond.end916
.LBB51_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB51_328:                             # %if.end922
	jmp	.LBB51_329
.LBB51_329:                             # %if.end923
	jmp	.LBB51_330
.LBB51_330:                             # %if.end924
	jmp	.LBB51_331
.LBB51_331:                             # %if.end925
	jmp	.LBB51_332
.LBB51_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1613579224, -104(%rbp) # imm = 0x602D43D8
	jne	.LBB51_334
.LBB51_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_333
.Lfunc_end51:
	.size	Get_Reference_Pixel.41, .Lfunc_end51-Get_Reference_Pixel.41
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.42
.LCPI52_0:
	.quad	4636737291354636288     # double 100
.LCPI52_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.42
	.p2align	4, 0x90
	.type	Build_Status_Map.42,@function
Build_Status_Map.42:                    # @Build_Status_Map.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$249458552, -40(%rbp)   # imm = 0xEDE6F78
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB52_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -12(%rbp)
.LBB52_3:                               # %for.cond2
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB52_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB52_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB52_13
.LBB52_6:                               # %if.then
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI52_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB52_8:                               # %if.end
                                        #   in Loop: Header=BB52_3 Depth=2
	callq	rand
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI52_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB52_10:                              # %if.end20
                                        #   in Loop: Header=BB52_3 Depth=2
	callq	rand
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI52_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	$1, -4(%rbp)
.LBB52_12:                              # %if.end29
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB52_13:                              # %if.end30
                                        #   in Loop: Header=BB52_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB52_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB52_18
.LBB52_15:                              # %if.else
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB52_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB52_17:                              # %if.end49
                                        #   in Loop: Header=BB52_3 Depth=2
	jmp	.LBB52_18
.LBB52_18:                              # %if.end50
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_3
.LBB52_20:                              # %for.end
                                        #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_21
.LBB52_21:                              # %for.inc53
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_1
.LBB52_22:                              # %for.end55
	cmpl	$249458552, -40(%rbp)   # imm = 0xEDE6F78
	jne	.LBB52_24
.LBB52_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_23
.Lfunc_end52:
	.size	Build_Status_Map.42, .Lfunc_end52-Build_Status_Map.42
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.43   # -- Begin function decode_one_b8block.43
	.p2align	4, 0x90
	.type	decode_one_b8block.43,@function
decode_one_b8block.43:                  # @decode_one_b8block.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$338683460, -84(%rbp)   # imm = 0x142FE644
	movl	%edi, -40(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB53_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_4:                               # %for.cond9
                                        #   Parent Loop BB53_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB53_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB53_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_4
.LBB53_7:                               # %for.end
                                        #   in Loop: Header=BB53_2 Depth=1
	jmp	.LBB53_8
.LBB53_8:                               # %for.inc26
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_2
.LBB53_9:                               # %for.end28
	jmp	.LBB53_96
.LBB53_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB53_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB53_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB53_31
.LBB53_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB53_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB53_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_17:                              # %for.cond40
                                        #   Parent Loop BB53_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB53_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB53_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_17
.LBB53_20:                              # %for.end49
                                        #   in Loop: Header=BB53_15 Depth=1
	jmp	.LBB53_21
.LBB53_21:                              # %for.inc50
                                        #   in Loop: Header=BB53_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_15
.LBB53_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB53_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_25:                              # %for.cond56
                                        #   Parent Loop BB53_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB53_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB53_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_25
.LBB53_28:                              # %for.end71
                                        #   in Loop: Header=BB53_23 Depth=1
	jmp	.LBB53_29
.LBB53_29:                              # %for.inc72
                                        #   in Loop: Header=BB53_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_23
.LBB53_30:                              # %for.end74
	jmp	.LBB53_60
.LBB53_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB53_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB53_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB53_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_36:                              # %for.cond83
                                        #   Parent Loop BB53_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB53_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB53_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_36
.LBB53_39:                              # %for.end120
                                        #   in Loop: Header=BB53_34 Depth=1
	jmp	.LBB53_40
.LBB53_40:                              # %for.inc121
                                        #   in Loop: Header=BB53_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_34
.LBB53_41:                              # %for.end123
	jmp	.LBB53_51
.LBB53_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB53_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_45:                              # %for.cond129
                                        #   Parent Loop BB53_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB53_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB53_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_45
.LBB53_48:                              # %for.end145
                                        #   in Loop: Header=BB53_43 Depth=1
	jmp	.LBB53_49
.LBB53_49:                              # %for.inc146
                                        #   in Loop: Header=BB53_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_43
.LBB53_50:                              # %for.end148
	jmp	.LBB53_51
.LBB53_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB53_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_54:                              # %for.cond153
                                        #   Parent Loop BB53_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB53_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB53_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_54
.LBB53_57:                              # %for.end167
                                        #   in Loop: Header=BB53_52 Depth=1
	jmp	.LBB53_58
.LBB53_58:                              # %for.inc168
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_52
.LBB53_59:                              # %for.end170
	jmp	.LBB53_60
.LBB53_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB53_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB53_66
.LBB53_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB53_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB53_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB53_86
.LBB53_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_69 Depth 2
                                        #       Child Loop BB53_74 Depth 3
                                        #         Child Loop BB53_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB53_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_69:                              # %for.cond197
                                        #   Parent Loop BB53_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_74 Depth 3
                                        #         Child Loop BB53_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB53_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB53_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB53_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB53_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB53_73:                              # %if.end218
                                        #   in Loop: Header=BB53_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB53_74:                              # %for.cond233
                                        #   Parent Loop BB53_67 Depth=1
                                        #     Parent Loop BB53_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB53_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB53_74 Depth=3
	movl	$0, -8(%rbp)
.LBB53_76:                              # %for.cond237
                                        #   Parent Loop BB53_67 Depth=1
                                        #     Parent Loop BB53_69 Depth=2
                                        #       Parent Loop BB53_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB53_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB53_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB53_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_76
.LBB53_79:                              # %for.end269
                                        #   in Loop: Header=BB53_74 Depth=3
	jmp	.LBB53_80
.LBB53_80:                              # %for.inc270
                                        #   in Loop: Header=BB53_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_74
.LBB53_81:                              # %for.end272
                                        #   in Loop: Header=BB53_69 Depth=2
	jmp	.LBB53_82
.LBB53_82:                              # %for.inc273
                                        #   in Loop: Header=BB53_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_69
.LBB53_83:                              # %for.end275
                                        #   in Loop: Header=BB53_67 Depth=1
	jmp	.LBB53_84
.LBB53_84:                              # %for.inc276
                                        #   in Loop: Header=BB53_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_67
.LBB53_85:                              # %for.end278
	jmp	.LBB53_95
.LBB53_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB53_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB53_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_89:                              # %for.cond284
                                        #   Parent Loop BB53_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB53_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB53_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_89
.LBB53_92:                              # %for.end310
                                        #   in Loop: Header=BB53_87 Depth=1
	jmp	.LBB53_93
.LBB53_93:                              # %for.inc311
                                        #   in Loop: Header=BB53_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_87
.LBB53_94:                              # %for.end313
	jmp	.LBB53_95
.LBB53_95:                              # %if.end314
	jmp	.LBB53_96
.LBB53_96:                              # %if.end315
	cmpl	$338683460, -84(%rbp)   # imm = 0x142FE644
	jne	.LBB53_98
.LBB53_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_97
.Lfunc_end53:
	.size	decode_one_b8block.43, .Lfunc_end53-decode_one_b8block.43
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.44        # -- Begin function Conceal_Error.44
	.p2align	4, 0x90
	.type	Conceal_Error.44,@function
Conceal_Error.44:                       # @Conceal_Error.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1968850723, -68(%rbp)  # imm = 0x755A4723
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB54_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB54_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB54_4:                               # %land.end
.LBB54_5:                               # %lor.end
.LBB54_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB54_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB54_9
.LBB54_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB54_14
.LBB54_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB54_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB54_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB54_12:                              # %land.end51
.LBB54_13:                              # %lor.end53
.LBB54_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB54_180
# %bb.15:                               # %land.end54
	movq	.LJTI54_0(,%rax,8), %rax
	jmpq	*%rax
.LBB54_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB54_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB54_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB54_18 Depth=1
	movl	$0, -4(%rbp)
.LBB54_20:                              # %for.cond68
                                        #   Parent Loop BB54_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB54_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB54_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_20
.LBB54_23:                              # %for.end
                                        #   in Loop: Header=BB54_18 Depth=1
	jmp	.LBB54_24
.LBB54_24:                              # %for.inc85
                                        #   in Loop: Header=BB54_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_18
.LBB54_25:                              # %for.end87
	jmp	.LBB54_35
.LBB54_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB54_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB54_27 Depth=1
	movl	$0, -4(%rbp)
.LBB54_29:                              # %for.cond92
                                        #   Parent Loop BB54_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB54_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB54_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_29
.LBB54_32:                              # %for.end104
                                        #   in Loop: Header=BB54_27 Depth=1
	jmp	.LBB54_33
.LBB54_33:                              # %for.inc105
                                        #   in Loop: Header=BB54_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_27
.LBB54_34:                              # %for.end107
	jmp	.LBB54_35
.LBB54_35:                              # %if.end
	jmp	.LBB54_180
.LBB54_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB54_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_39 Depth 2
                                        #       Child Loop BB54_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB54_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB54_37 Depth=1
	movl	$0, -16(%rbp)
.LBB54_39:                              # %for.cond113
                                        #   Parent Loop BB54_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB54_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB54_39 Depth=2
	movl	$0, -4(%rbp)
.LBB54_41:                              # %for.cond117
                                        #   Parent Loop BB54_37 Depth=1
                                        #     Parent Loop BB54_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB54_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB54_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB54_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_41
.LBB54_44:                              # %for.end141
                                        #   in Loop: Header=BB54_39 Depth=2
	jmp	.LBB54_45
.LBB54_45:                              # %for.inc142
                                        #   in Loop: Header=BB54_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_39
.LBB54_46:                              # %for.end144
                                        #   in Loop: Header=BB54_37 Depth=1
	jmp	.LBB54_47
.LBB54_47:                              # %for.inc145
                                        #   in Loop: Header=BB54_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_37
.LBB54_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB54_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB54_49 Depth=1
	movl	$0, -8(%rbp)
.LBB54_51:                              # %for.cond152
                                        #   Parent Loop BB54_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB54_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB54_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_51
.LBB54_54:                              # %for.end162
                                        #   in Loop: Header=BB54_49 Depth=1
	jmp	.LBB54_55
.LBB54_55:                              # %for.inc163
                                        #   in Loop: Header=BB54_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_49
.LBB54_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB54_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB54_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB54_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB54_59 Depth=1
	movl	$0, -4(%rbp)
.LBB54_61:                              # %for.cond175
                                        #   Parent Loop BB54_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB54_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB54_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_61
.LBB54_64:                              # %for.end195
                                        #   in Loop: Header=BB54_59 Depth=1
	jmp	.LBB54_65
.LBB54_65:                              # %for.inc196
                                        #   in Loop: Header=BB54_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_59
.LBB54_66:                              # %for.end198
	jmp	.LBB54_95
.LBB54_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB54_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB54_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_71 Depth 2
                                        #       Child Loop BB54_73 Depth 3
                                        #         Child Loop BB54_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB54_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB54_71:                              # %for.cond210
                                        #   Parent Loop BB54_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_73 Depth 3
                                        #         Child Loop BB54_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB54_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB54_73:                              # %for.cond236
                                        #   Parent Loop BB54_69 Depth=1
                                        #     Parent Loop BB54_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB54_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB54_73 Depth=3
	movl	$0, -4(%rbp)
.LBB54_75:                              # %for.cond240
                                        #   Parent Loop BB54_69 Depth=1
                                        #     Parent Loop BB54_71 Depth=2
                                        #       Parent Loop BB54_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB54_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB54_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB54_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_75
.LBB54_78:                              # %for.end259
                                        #   in Loop: Header=BB54_73 Depth=3
	jmp	.LBB54_79
.LBB54_79:                              # %for.inc260
                                        #   in Loop: Header=BB54_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_73
.LBB54_80:                              # %for.end262
                                        #   in Loop: Header=BB54_71 Depth=2
	jmp	.LBB54_81
.LBB54_81:                              # %for.inc263
                                        #   in Loop: Header=BB54_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_71
.LBB54_82:                              # %for.end265
                                        #   in Loop: Header=BB54_69 Depth=1
	jmp	.LBB54_83
.LBB54_83:                              # %for.inc266
                                        #   in Loop: Header=BB54_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_69
.LBB54_84:                              # %for.end268
	jmp	.LBB54_94
.LBB54_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB54_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB54_86 Depth=1
	movl	$0, -4(%rbp)
.LBB54_88:                              # %for.cond274
                                        #   Parent Loop BB54_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB54_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB54_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_88
.LBB54_91:                              # %for.end294
                                        #   in Loop: Header=BB54_86 Depth=1
	jmp	.LBB54_92
.LBB54_92:                              # %for.inc295
                                        #   in Loop: Header=BB54_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_86
.LBB54_93:                              # %for.end297
	jmp	.LBB54_94
.LBB54_94:                              # %if.end298
	jmp	.LBB54_95
.LBB54_95:                              # %if.end299
	jmp	.LBB54_105
.LBB54_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB54_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB54_97 Depth=1
	movl	$0, -4(%rbp)
.LBB54_99:                              # %for.cond305
                                        #   Parent Loop BB54_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB54_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB54_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_99
.LBB54_102:                             # %for.end317
                                        #   in Loop: Header=BB54_97 Depth=1
	jmp	.LBB54_103
.LBB54_103:                             # %for.inc318
                                        #   in Loop: Header=BB54_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_97
.LBB54_104:                             # %for.end320
	jmp	.LBB54_105
.LBB54_105:                             # %if.end321
	jmp	.LBB54_180
.LBB54_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB54_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB54_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_110 Depth 2
                                        #       Child Loop BB54_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB54_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB54_108 Depth=1
	movl	$0, -16(%rbp)
.LBB54_110:                             # %for.cond331
                                        #   Parent Loop BB54_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB54_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB54_110 Depth=2
	movl	$0, -4(%rbp)
.LBB54_112:                             # %for.cond335
                                        #   Parent Loop BB54_108 Depth=1
                                        #     Parent Loop BB54_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB54_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB54_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB54_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_112
.LBB54_115:                             # %for.end359
                                        #   in Loop: Header=BB54_110 Depth=2
	jmp	.LBB54_116
.LBB54_116:                             # %for.inc360
                                        #   in Loop: Header=BB54_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_110
.LBB54_117:                             # %for.end362
                                        #   in Loop: Header=BB54_108 Depth=1
	jmp	.LBB54_118
.LBB54_118:                             # %for.inc363
                                        #   in Loop: Header=BB54_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_108
.LBB54_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB54_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB54_120 Depth=1
	movl	$0, -8(%rbp)
.LBB54_122:                             # %for.cond370
                                        #   Parent Loop BB54_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB54_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB54_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_122
.LBB54_125:                             # %for.end380
                                        #   in Loop: Header=BB54_120 Depth=1
	jmp	.LBB54_126
.LBB54_126:                             # %for.inc381
                                        #   in Loop: Header=BB54_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_120
.LBB54_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB54_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB54_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB54_129 Depth=1
	movl	$0, -4(%rbp)
.LBB54_131:                             # %for.cond390
                                        #   Parent Loop BB54_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB54_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB54_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_131
.LBB54_134:                             # %for.end410
                                        #   in Loop: Header=BB54_129 Depth=1
	jmp	.LBB54_135
.LBB54_135:                             # %for.inc411
                                        #   in Loop: Header=BB54_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_129
.LBB54_136:                             # %for.end413
	jmp	.LBB54_156
.LBB54_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB54_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB54_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_141 Depth 2
                                        #       Child Loop BB54_143 Depth 3
                                        #         Child Loop BB54_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB54_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB54_141:                             # %for.cond425
                                        #   Parent Loop BB54_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_143 Depth 3
                                        #         Child Loop BB54_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB54_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB54_143:                             # %for.cond452
                                        #   Parent Loop BB54_139 Depth=1
                                        #     Parent Loop BB54_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB54_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB54_143 Depth=3
	movl	$0, -4(%rbp)
.LBB54_145:                             # %for.cond456
                                        #   Parent Loop BB54_139 Depth=1
                                        #     Parent Loop BB54_141 Depth=2
                                        #       Parent Loop BB54_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB54_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB54_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB54_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_145
.LBB54_148:                             # %for.end475
                                        #   in Loop: Header=BB54_143 Depth=3
	jmp	.LBB54_149
.LBB54_149:                             # %for.inc476
                                        #   in Loop: Header=BB54_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_143
.LBB54_150:                             # %for.end478
                                        #   in Loop: Header=BB54_141 Depth=2
	jmp	.LBB54_151
.LBB54_151:                             # %for.inc479
                                        #   in Loop: Header=BB54_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_141
.LBB54_152:                             # %for.end481
                                        #   in Loop: Header=BB54_139 Depth=1
	jmp	.LBB54_153
.LBB54_153:                             # %for.inc482
                                        #   in Loop: Header=BB54_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_139
.LBB54_154:                             # %for.end484
	jmp	.LBB54_155
.LBB54_155:                             # %if.end485
	jmp	.LBB54_156
.LBB54_156:                             # %if.end486
	jmp	.LBB54_157
.LBB54_157:                             # %if.end487
	jmp	.LBB54_180
.LBB54_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB54_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB54_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB54_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB54_161 Depth=1
	movl	$0, -4(%rbp)
.LBB54_163:                             # %for.cond499
                                        #   Parent Loop BB54_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB54_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB54_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_163
.LBB54_166:                             # %for.end519
                                        #   in Loop: Header=BB54_161 Depth=1
	jmp	.LBB54_167
.LBB54_167:                             # %for.inc520
                                        #   in Loop: Header=BB54_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_161
.LBB54_168:                             # %for.end522
	jmp	.LBB54_169
.LBB54_169:                             # %if.end523
	jmp	.LBB54_179
.LBB54_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB54_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB54_171 Depth=1
	movl	$0, -4(%rbp)
.LBB54_173:                             # %for.cond529
                                        #   Parent Loop BB54_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB54_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB54_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_173
.LBB54_176:                             # %for.end541
                                        #   in Loop: Header=BB54_171 Depth=1
	jmp	.LBB54_177
.LBB54_177:                             # %for.inc542
                                        #   in Loop: Header=BB54_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_171
.LBB54_178:                             # %for.end544
	jmp	.LBB54_179
.LBB54_179:                             # %if.end545
	jmp	.LBB54_180
.LBB54_180:                             # %sw.epilog
	cmpl	$1968850723, -68(%rbp)  # imm = 0x755A4723
	jne	.LBB54_182
.LBB54_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_181
.Lfunc_end54:
	.size	Conceal_Error.44, .Lfunc_end54-Conceal_Error.44
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI54_0:
	.quad	.LBB54_16
	.quad	.LBB54_158
	.quad	.LBB54_106
	.quad	.LBB54_180
	.quad	.LBB54_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.45  # -- Begin function Get_Reference_Block.45
	.p2align	4, 0x90
	.type	Get_Reference_Block.45,@function
Get_Reference_Block.45:                 # @Get_Reference_Block.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$393137950, -36(%rbp)   # imm = 0x176ECF1E
	movq	%rdi, -48(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -56(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB55_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_3:                               # %for.cond5
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_3
.LBB55_6:                               # %for.end
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_7
.LBB55_7:                               # %for.inc14
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_1
.LBB55_8:                               # %for.end16
	cmpl	$393137950, -36(%rbp)   # imm = 0x176ECF1E
	jne	.LBB55_10
.LBB55_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_9
.Lfunc_end55:
	.size	Get_Reference_Block.45, .Lfunc_end55-Get_Reference_Block.45
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.46       # -- Begin function DecOneForthPix.46
	.p2align	4, 0x90
	.type	DecOneForthPix.46,@function
DecOneForthPix.46:                      # @DecOneForthPix.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2017332824, -8(%rbp)   # imm = 0x783E0E58
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB56_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_1
.LBB56_4:                               # %for.end
	cmpl	$2017332824, -8(%rbp)   # imm = 0x783E0E58
	jne	.LBB56_6
.LBB56_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_5
.Lfunc_end56:
	.size	DecOneForthPix.46, .Lfunc_end56-DecOneForthPix.46
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.47        # -- Begin function Conceal_Error.47
	.p2align	4, 0x90
	.type	Conceal_Error.47,@function
Conceal_Error.47:                       # @Conceal_Error.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1637064808, -68(%rbp)  # imm = 0x6193A068
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB57_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB57_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB57_4:                               # %land.end
.LBB57_5:                               # %lor.end
.LBB57_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB57_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB57_9
.LBB57_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB57_14
.LBB57_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB57_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB57_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB57_12:                              # %land.end51
.LBB57_13:                              # %lor.end53
.LBB57_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB57_180
# %bb.15:                               # %land.end54
	movq	.LJTI57_0(,%rax,8), %rax
	jmpq	*%rax
.LBB57_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB57_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB57_18 Depth=1
	movl	$0, -4(%rbp)
.LBB57_20:                              # %for.cond68
                                        #   Parent Loop BB57_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB57_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB57_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_20
.LBB57_23:                              # %for.end
                                        #   in Loop: Header=BB57_18 Depth=1
	jmp	.LBB57_24
.LBB57_24:                              # %for.inc85
                                        #   in Loop: Header=BB57_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_18
.LBB57_25:                              # %for.end87
	jmp	.LBB57_35
.LBB57_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB57_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB57_27 Depth=1
	movl	$0, -4(%rbp)
.LBB57_29:                              # %for.cond92
                                        #   Parent Loop BB57_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB57_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB57_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_29
.LBB57_32:                              # %for.end104
                                        #   in Loop: Header=BB57_27 Depth=1
	jmp	.LBB57_33
.LBB57_33:                              # %for.inc105
                                        #   in Loop: Header=BB57_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_27
.LBB57_34:                              # %for.end107
	jmp	.LBB57_35
.LBB57_35:                              # %if.end
	jmp	.LBB57_180
.LBB57_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB57_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_39 Depth 2
                                        #       Child Loop BB57_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB57_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB57_37 Depth=1
	movl	$0, -12(%rbp)
.LBB57_39:                              # %for.cond113
                                        #   Parent Loop BB57_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB57_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB57_39 Depth=2
	movl	$0, -4(%rbp)
.LBB57_41:                              # %for.cond117
                                        #   Parent Loop BB57_37 Depth=1
                                        #     Parent Loop BB57_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB57_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB57_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB57_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_41
.LBB57_44:                              # %for.end141
                                        #   in Loop: Header=BB57_39 Depth=2
	jmp	.LBB57_45
.LBB57_45:                              # %for.inc142
                                        #   in Loop: Header=BB57_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_39
.LBB57_46:                              # %for.end144
                                        #   in Loop: Header=BB57_37 Depth=1
	jmp	.LBB57_47
.LBB57_47:                              # %for.inc145
                                        #   in Loop: Header=BB57_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_37
.LBB57_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB57_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB57_49 Depth=1
	movl	$0, -8(%rbp)
.LBB57_51:                              # %for.cond152
                                        #   Parent Loop BB57_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB57_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB57_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_51
.LBB57_54:                              # %for.end162
                                        #   in Loop: Header=BB57_49 Depth=1
	jmp	.LBB57_55
.LBB57_55:                              # %for.inc163
                                        #   in Loop: Header=BB57_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_49
.LBB57_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB57_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB57_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB57_59 Depth=1
	movl	$0, -4(%rbp)
.LBB57_61:                              # %for.cond175
                                        #   Parent Loop BB57_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB57_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB57_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_61
.LBB57_64:                              # %for.end195
                                        #   in Loop: Header=BB57_59 Depth=1
	jmp	.LBB57_65
.LBB57_65:                              # %for.inc196
                                        #   in Loop: Header=BB57_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_59
.LBB57_66:                              # %for.end198
	jmp	.LBB57_95
.LBB57_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB57_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB57_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_71 Depth 2
                                        #       Child Loop BB57_73 Depth 3
                                        #         Child Loop BB57_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB57_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB57_71:                              # %for.cond210
                                        #   Parent Loop BB57_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_73 Depth 3
                                        #         Child Loop BB57_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB57_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB57_73:                              # %for.cond236
                                        #   Parent Loop BB57_69 Depth=1
                                        #     Parent Loop BB57_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB57_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB57_73 Depth=3
	movl	$0, -4(%rbp)
.LBB57_75:                              # %for.cond240
                                        #   Parent Loop BB57_69 Depth=1
                                        #     Parent Loop BB57_71 Depth=2
                                        #       Parent Loop BB57_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB57_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB57_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB57_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_75
.LBB57_78:                              # %for.end259
                                        #   in Loop: Header=BB57_73 Depth=3
	jmp	.LBB57_79
.LBB57_79:                              # %for.inc260
                                        #   in Loop: Header=BB57_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_73
.LBB57_80:                              # %for.end262
                                        #   in Loop: Header=BB57_71 Depth=2
	jmp	.LBB57_81
.LBB57_81:                              # %for.inc263
                                        #   in Loop: Header=BB57_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_71
.LBB57_82:                              # %for.end265
                                        #   in Loop: Header=BB57_69 Depth=1
	jmp	.LBB57_83
.LBB57_83:                              # %for.inc266
                                        #   in Loop: Header=BB57_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_69
.LBB57_84:                              # %for.end268
	jmp	.LBB57_94
.LBB57_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB57_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB57_86 Depth=1
	movl	$0, -4(%rbp)
.LBB57_88:                              # %for.cond274
                                        #   Parent Loop BB57_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB57_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB57_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_88
.LBB57_91:                              # %for.end294
                                        #   in Loop: Header=BB57_86 Depth=1
	jmp	.LBB57_92
.LBB57_92:                              # %for.inc295
                                        #   in Loop: Header=BB57_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_86
.LBB57_93:                              # %for.end297
	jmp	.LBB57_94
.LBB57_94:                              # %if.end298
	jmp	.LBB57_95
.LBB57_95:                              # %if.end299
	jmp	.LBB57_105
.LBB57_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB57_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB57_97 Depth=1
	movl	$0, -4(%rbp)
.LBB57_99:                              # %for.cond305
                                        #   Parent Loop BB57_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB57_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB57_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_99
.LBB57_102:                             # %for.end317
                                        #   in Loop: Header=BB57_97 Depth=1
	jmp	.LBB57_103
.LBB57_103:                             # %for.inc318
                                        #   in Loop: Header=BB57_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_97
.LBB57_104:                             # %for.end320
	jmp	.LBB57_105
.LBB57_105:                             # %if.end321
	jmp	.LBB57_180
.LBB57_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB57_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_110 Depth 2
                                        #       Child Loop BB57_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB57_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	$0, -12(%rbp)
.LBB57_110:                             # %for.cond331
                                        #   Parent Loop BB57_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB57_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB57_110 Depth=2
	movl	$0, -4(%rbp)
.LBB57_112:                             # %for.cond335
                                        #   Parent Loop BB57_108 Depth=1
                                        #     Parent Loop BB57_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB57_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB57_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB57_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_112
.LBB57_115:                             # %for.end359
                                        #   in Loop: Header=BB57_110 Depth=2
	jmp	.LBB57_116
.LBB57_116:                             # %for.inc360
                                        #   in Loop: Header=BB57_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_110
.LBB57_117:                             # %for.end362
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_118
.LBB57_118:                             # %for.inc363
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_108
.LBB57_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB57_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB57_120 Depth=1
	movl	$0, -8(%rbp)
.LBB57_122:                             # %for.cond370
                                        #   Parent Loop BB57_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB57_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB57_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_122
.LBB57_125:                             # %for.end380
                                        #   in Loop: Header=BB57_120 Depth=1
	jmp	.LBB57_126
.LBB57_126:                             # %for.inc381
                                        #   in Loop: Header=BB57_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_120
.LBB57_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB57_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB57_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB57_129 Depth=1
	movl	$0, -4(%rbp)
.LBB57_131:                             # %for.cond390
                                        #   Parent Loop BB57_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB57_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB57_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_131
.LBB57_134:                             # %for.end410
                                        #   in Loop: Header=BB57_129 Depth=1
	jmp	.LBB57_135
.LBB57_135:                             # %for.inc411
                                        #   in Loop: Header=BB57_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_129
.LBB57_136:                             # %for.end413
	jmp	.LBB57_156
.LBB57_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB57_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB57_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_141 Depth 2
                                        #       Child Loop BB57_143 Depth 3
                                        #         Child Loop BB57_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB57_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB57_141:                             # %for.cond425
                                        #   Parent Loop BB57_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_143 Depth 3
                                        #         Child Loop BB57_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB57_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB57_143:                             # %for.cond452
                                        #   Parent Loop BB57_139 Depth=1
                                        #     Parent Loop BB57_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB57_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB57_143 Depth=3
	movl	$0, -4(%rbp)
.LBB57_145:                             # %for.cond456
                                        #   Parent Loop BB57_139 Depth=1
                                        #     Parent Loop BB57_141 Depth=2
                                        #       Parent Loop BB57_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB57_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB57_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB57_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_145
.LBB57_148:                             # %for.end475
                                        #   in Loop: Header=BB57_143 Depth=3
	jmp	.LBB57_149
.LBB57_149:                             # %for.inc476
                                        #   in Loop: Header=BB57_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_143
.LBB57_150:                             # %for.end478
                                        #   in Loop: Header=BB57_141 Depth=2
	jmp	.LBB57_151
.LBB57_151:                             # %for.inc479
                                        #   in Loop: Header=BB57_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_141
.LBB57_152:                             # %for.end481
                                        #   in Loop: Header=BB57_139 Depth=1
	jmp	.LBB57_153
.LBB57_153:                             # %for.inc482
                                        #   in Loop: Header=BB57_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_139
.LBB57_154:                             # %for.end484
	jmp	.LBB57_155
.LBB57_155:                             # %if.end485
	jmp	.LBB57_156
.LBB57_156:                             # %if.end486
	jmp	.LBB57_157
.LBB57_157:                             # %if.end487
	jmp	.LBB57_180
.LBB57_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB57_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB57_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB57_161 Depth=1
	movl	$0, -4(%rbp)
.LBB57_163:                             # %for.cond499
                                        #   Parent Loop BB57_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB57_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB57_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_163
.LBB57_166:                             # %for.end519
                                        #   in Loop: Header=BB57_161 Depth=1
	jmp	.LBB57_167
.LBB57_167:                             # %for.inc520
                                        #   in Loop: Header=BB57_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_161
.LBB57_168:                             # %for.end522
	jmp	.LBB57_169
.LBB57_169:                             # %if.end523
	jmp	.LBB57_179
.LBB57_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB57_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -4(%rbp)
.LBB57_173:                             # %for.cond529
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB57_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB57_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_173
.LBB57_176:                             # %for.end541
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_177
.LBB57_177:                             # %for.inc542
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_171
.LBB57_178:                             # %for.end544
	jmp	.LBB57_179
.LBB57_179:                             # %if.end545
	jmp	.LBB57_180
.LBB57_180:                             # %sw.epilog
	cmpl	$1637064808, -68(%rbp)  # imm = 0x6193A068
	jne	.LBB57_182
.LBB57_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_181
.Lfunc_end57:
	.size	Conceal_Error.47, .Lfunc_end57-Conceal_Error.47
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI57_0:
	.quad	.LBB57_16
	.quad	.LBB57_158
	.quad	.LBB57_106
	.quad	.LBB57_180
	.quad	.LBB57_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.48
.LCPI58_0:
	.quad	4636737291354636288     # double 100
.LCPI58_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.48
	.p2align	4, 0x90
	.type	Build_Status_Map.48,@function
Build_Status_Map.48:                    # @Build_Status_Map.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1732893765, -44(%rbp)  # imm = 0x6749DC45
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB58_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -12(%rbp)
.LBB58_3:                               # %for.cond2
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB58_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB58_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB58_13
.LBB58_6:                               # %if.then
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI58_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB58_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB58_8:                               # %if.end
                                        #   in Loop: Header=BB58_3 Depth=2
	callq	rand
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI58_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB58_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB58_10:                              # %if.end20
                                        #   in Loop: Header=BB58_3 Depth=2
	callq	rand
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI58_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB58_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	$1, -4(%rbp)
.LBB58_12:                              # %if.end29
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB58_13:                              # %if.end30
                                        #   in Loop: Header=BB58_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB58_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB58_18
.LBB58_15:                              # %if.else
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB58_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB58_17:                              # %if.end49
                                        #   in Loop: Header=BB58_3 Depth=2
	jmp	.LBB58_18
.LBB58_18:                              # %if.end50
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_3
.LBB58_20:                              # %for.end
                                        #   in Loop: Header=BB58_1 Depth=1
	jmp	.LBB58_21
.LBB58_21:                              # %for.inc53
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_1
.LBB58_22:                              # %for.end55
	cmpl	$1732893765, -44(%rbp)  # imm = 0x6749DC45
	jne	.LBB58_24
.LBB58_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_23
.Lfunc_end58:
	.size	Build_Status_Map.48, .Lfunc_end58-Build_Status_Map.48
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.49        # -- Begin function Conceal_Error.49
	.p2align	4, 0x90
	.type	Conceal_Error.49,@function
Conceal_Error.49:                       # @Conceal_Error.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1819371475, -68(%rbp)  # imm = 0x6C7167D3
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB59_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB59_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB59_4:                               # %land.end
.LBB59_5:                               # %lor.end
.LBB59_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB59_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB59_9
.LBB59_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB59_14
.LBB59_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB59_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB59_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB59_12:                              # %land.end51
.LBB59_13:                              # %lor.end53
.LBB59_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB59_180
# %bb.15:                               # %land.end54
	movq	.LJTI59_0(,%rax,8), %rax
	jmpq	*%rax
.LBB59_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB59_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	$0, -4(%rbp)
.LBB59_20:                              # %for.cond68
                                        #   Parent Loop BB59_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB59_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB59_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_20
.LBB59_23:                              # %for.end
                                        #   in Loop: Header=BB59_18 Depth=1
	jmp	.LBB59_24
.LBB59_24:                              # %for.inc85
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_18
.LBB59_25:                              # %for.end87
	jmp	.LBB59_35
.LBB59_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB59_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	$0, -4(%rbp)
.LBB59_29:                              # %for.cond92
                                        #   Parent Loop BB59_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB59_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB59_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_29
.LBB59_32:                              # %for.end104
                                        #   in Loop: Header=BB59_27 Depth=1
	jmp	.LBB59_33
.LBB59_33:                              # %for.inc105
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_27
.LBB59_34:                              # %for.end107
	jmp	.LBB59_35
.LBB59_35:                              # %if.end
	jmp	.LBB59_180
.LBB59_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB59_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_39 Depth 2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	$0, -16(%rbp)
.LBB59_39:                              # %for.cond113
                                        #   Parent Loop BB59_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	$0, -4(%rbp)
.LBB59_41:                              # %for.cond117
                                        #   Parent Loop BB59_37 Depth=1
                                        #     Parent Loop BB59_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB59_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB59_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_41
.LBB59_44:                              # %for.end141
                                        #   in Loop: Header=BB59_39 Depth=2
	jmp	.LBB59_45
.LBB59_45:                              # %for.inc142
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_39
.LBB59_46:                              # %for.end144
                                        #   in Loop: Header=BB59_37 Depth=1
	jmp	.LBB59_47
.LBB59_47:                              # %for.inc145
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_37
.LBB59_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB59_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	$0, -8(%rbp)
.LBB59_51:                              # %for.cond152
                                        #   Parent Loop BB59_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB59_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB59_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_51
.LBB59_54:                              # %for.end162
                                        #   in Loop: Header=BB59_49 Depth=1
	jmp	.LBB59_55
.LBB59_55:                              # %for.inc163
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_49
.LBB59_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB59_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB59_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	$0, -4(%rbp)
.LBB59_61:                              # %for.cond175
                                        #   Parent Loop BB59_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB59_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB59_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_61
.LBB59_64:                              # %for.end195
                                        #   in Loop: Header=BB59_59 Depth=1
	jmp	.LBB59_65
.LBB59_65:                              # %for.inc196
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_59
.LBB59_66:                              # %for.end198
	jmp	.LBB59_95
.LBB59_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB59_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_71 Depth 2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_71:                              # %for.cond210
                                        #   Parent Loop BB59_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB59_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_73:                              # %for.cond236
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	$0, -4(%rbp)
.LBB59_75:                              # %for.cond240
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        #       Parent Loop BB59_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB59_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB59_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_75
.LBB59_78:                              # %for.end259
                                        #   in Loop: Header=BB59_73 Depth=3
	jmp	.LBB59_79
.LBB59_79:                              # %for.inc260
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_73
.LBB59_80:                              # %for.end262
                                        #   in Loop: Header=BB59_71 Depth=2
	jmp	.LBB59_81
.LBB59_81:                              # %for.inc263
                                        #   in Loop: Header=BB59_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_71
.LBB59_82:                              # %for.end265
                                        #   in Loop: Header=BB59_69 Depth=1
	jmp	.LBB59_83
.LBB59_83:                              # %for.inc266
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_69
.LBB59_84:                              # %for.end268
	jmp	.LBB59_94
.LBB59_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB59_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	$0, -4(%rbp)
.LBB59_88:                              # %for.cond274
                                        #   Parent Loop BB59_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB59_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB59_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_88
.LBB59_91:                              # %for.end294
                                        #   in Loop: Header=BB59_86 Depth=1
	jmp	.LBB59_92
.LBB59_92:                              # %for.inc295
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_86
.LBB59_93:                              # %for.end297
	jmp	.LBB59_94
.LBB59_94:                              # %if.end298
	jmp	.LBB59_95
.LBB59_95:                              # %if.end299
	jmp	.LBB59_105
.LBB59_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB59_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	$0, -4(%rbp)
.LBB59_99:                              # %for.cond305
                                        #   Parent Loop BB59_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB59_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB59_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_99
.LBB59_102:                             # %for.end317
                                        #   in Loop: Header=BB59_97 Depth=1
	jmp	.LBB59_103
.LBB59_103:                             # %for.inc318
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_97
.LBB59_104:                             # %for.end320
	jmp	.LBB59_105
.LBB59_105:                             # %if.end321
	jmp	.LBB59_180
.LBB59_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB59_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_110 Depth 2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	$0, -16(%rbp)
.LBB59_110:                             # %for.cond331
                                        #   Parent Loop BB59_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	$0, -4(%rbp)
.LBB59_112:                             # %for.cond335
                                        #   Parent Loop BB59_108 Depth=1
                                        #     Parent Loop BB59_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB59_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB59_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_112
.LBB59_115:                             # %for.end359
                                        #   in Loop: Header=BB59_110 Depth=2
	jmp	.LBB59_116
.LBB59_116:                             # %for.inc360
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_110
.LBB59_117:                             # %for.end362
                                        #   in Loop: Header=BB59_108 Depth=1
	jmp	.LBB59_118
.LBB59_118:                             # %for.inc363
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_108
.LBB59_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB59_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	$0, -8(%rbp)
.LBB59_122:                             # %for.cond370
                                        #   Parent Loop BB59_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB59_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB59_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_122
.LBB59_125:                             # %for.end380
                                        #   in Loop: Header=BB59_120 Depth=1
	jmp	.LBB59_126
.LBB59_126:                             # %for.inc381
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_120
.LBB59_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB59_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB59_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	$0, -4(%rbp)
.LBB59_131:                             # %for.cond390
                                        #   Parent Loop BB59_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB59_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB59_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_131
.LBB59_134:                             # %for.end410
                                        #   in Loop: Header=BB59_129 Depth=1
	jmp	.LBB59_135
.LBB59_135:                             # %for.inc411
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_129
.LBB59_136:                             # %for.end413
	jmp	.LBB59_156
.LBB59_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB59_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_141 Depth 2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_141:                             # %for.cond425
                                        #   Parent Loop BB59_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB59_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_143:                             # %for.cond452
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	$0, -4(%rbp)
.LBB59_145:                             # %for.cond456
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        #       Parent Loop BB59_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB59_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB59_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_145
.LBB59_148:                             # %for.end475
                                        #   in Loop: Header=BB59_143 Depth=3
	jmp	.LBB59_149
.LBB59_149:                             # %for.inc476
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_143
.LBB59_150:                             # %for.end478
                                        #   in Loop: Header=BB59_141 Depth=2
	jmp	.LBB59_151
.LBB59_151:                             # %for.inc479
                                        #   in Loop: Header=BB59_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_141
.LBB59_152:                             # %for.end481
                                        #   in Loop: Header=BB59_139 Depth=1
	jmp	.LBB59_153
.LBB59_153:                             # %for.inc482
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_139
.LBB59_154:                             # %for.end484
	jmp	.LBB59_155
.LBB59_155:                             # %if.end485
	jmp	.LBB59_156
.LBB59_156:                             # %if.end486
	jmp	.LBB59_157
.LBB59_157:                             # %if.end487
	jmp	.LBB59_180
.LBB59_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB59_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB59_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	$0, -4(%rbp)
.LBB59_163:                             # %for.cond499
                                        #   Parent Loop BB59_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB59_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB59_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_163
.LBB59_166:                             # %for.end519
                                        #   in Loop: Header=BB59_161 Depth=1
	jmp	.LBB59_167
.LBB59_167:                             # %for.inc520
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_161
.LBB59_168:                             # %for.end522
	jmp	.LBB59_169
.LBB59_169:                             # %if.end523
	jmp	.LBB59_179
.LBB59_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB59_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	$0, -4(%rbp)
.LBB59_173:                             # %for.cond529
                                        #   Parent Loop BB59_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB59_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB59_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_173
.LBB59_176:                             # %for.end541
                                        #   in Loop: Header=BB59_171 Depth=1
	jmp	.LBB59_177
.LBB59_177:                             # %for.inc542
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_171
.LBB59_178:                             # %for.end544
	jmp	.LBB59_179
.LBB59_179:                             # %if.end545
	jmp	.LBB59_180
.LBB59_180:                             # %sw.epilog
	cmpl	$1819371475, -68(%rbp)  # imm = 0x6C7167D3
	jne	.LBB59_182
.LBB59_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_181
.Lfunc_end59:
	.size	Conceal_Error.49, .Lfunc_end59-Conceal_Error.49
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI59_0:
	.quad	.LBB59_16
	.quad	.LBB59_158
	.quad	.LBB59_106
	.quad	.LBB59_180
	.quad	.LBB59_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.50  # -- Begin function Get_Reference_Block.50
	.p2align	4, 0x90
	.type	Get_Reference_Block.50,@function
Get_Reference_Block.50:                 # @Get_Reference_Block.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$585980825, -24(%rbp)   # imm = 0x22ED5B99
	movq	%rdi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -56(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_3:                               # %for.cond5
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB60_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_3
.LBB60_6:                               # %for.end
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_7
.LBB60_7:                               # %for.inc14
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_1
.LBB60_8:                               # %for.end16
	cmpl	$585980825, -24(%rbp)   # imm = 0x22ED5B99
	jne	.LBB60_10
.LBB60_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_9
.Lfunc_end60:
	.size	Get_Reference_Block.50, .Lfunc_end60-Get_Reference_Block.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.51
.LCPI61_0:
	.quad	4636737291354636288     # double 100
.LCPI61_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.51
	.p2align	4, 0x90
	.type	Build_Status_Map.51,@function
Build_Status_Map.51:                    # @Build_Status_Map.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$217244289, -40(%rbp)   # imm = 0xCF2E281
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB61_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	$0, -12(%rbp)
.LBB61_3:                               # %for.cond2
                                        #   Parent Loop BB61_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB61_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB61_13
.LBB61_6:                               # %if.then
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB61_8:                               # %if.end
                                        #   in Loop: Header=BB61_3 Depth=2
	callq	rand
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB61_10:                              # %if.end20
                                        #   in Loop: Header=BB61_3 Depth=2
	callq	rand
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	$1, -4(%rbp)
.LBB61_12:                              # %if.end29
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB61_13:                              # %if.end30
                                        #   in Loop: Header=BB61_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB61_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB61_18
.LBB61_15:                              # %if.else
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB61_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB61_17:                              # %if.end49
                                        #   in Loop: Header=BB61_3 Depth=2
	jmp	.LBB61_18
.LBB61_18:                              # %if.end50
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_3
.LBB61_20:                              # %for.end
                                        #   in Loop: Header=BB61_1 Depth=1
	jmp	.LBB61_21
.LBB61_21:                              # %for.inc53
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_1
.LBB61_22:                              # %for.end55
	cmpl	$217244289, -40(%rbp)   # imm = 0xCF2E281
	jne	.LBB61_24
.LBB61_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_23
.Lfunc_end61:
	.size	Build_Status_Map.51, .Lfunc_end61-Build_Status_Map.51
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.52  # -- Begin function Get_Reference_Block.52
	.p2align	4, 0x90
	.type	Get_Reference_Block.52,@function
Get_Reference_Block.52:                 # @Get_Reference_Block.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1751108557, -32(%rbp)  # imm = 0x685FCBCD
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_3:                               # %for.cond5
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB62_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_3
.LBB62_6:                               # %for.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_7
.LBB62_7:                               # %for.inc14
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_1
.LBB62_8:                               # %for.end16
	cmpl	$1751108557, -32(%rbp)  # imm = 0x685FCBCD
	jne	.LBB62_10
.LBB62_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_9
.Lfunc_end62:
	.size	Get_Reference_Block.52, .Lfunc_end62-Get_Reference_Block.52
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.53   # -- Begin function decode_one_b8block.53
	.p2align	4, 0x90
	.type	decode_one_b8block.53,@function
decode_one_b8block.53:                  # @decode_one_b8block.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1678952033, -84(%rbp)  # imm = 0x6412C661
	movl	%edi, -52(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB63_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_4:                               # %for.cond9
                                        #   Parent Loop BB63_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB63_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB63_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_4
.LBB63_7:                               # %for.end
                                        #   in Loop: Header=BB63_2 Depth=1
	jmp	.LBB63_8
.LBB63_8:                               # %for.inc26
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_2
.LBB63_9:                               # %for.end28
	jmp	.LBB63_96
.LBB63_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB63_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB63_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB63_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB63_31
.LBB63_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB63_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB63_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_17:                              # %for.cond40
                                        #   Parent Loop BB63_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB63_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB63_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_17
.LBB63_20:                              # %for.end49
                                        #   in Loop: Header=BB63_15 Depth=1
	jmp	.LBB63_21
.LBB63_21:                              # %for.inc50
                                        #   in Loop: Header=BB63_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_15
.LBB63_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB63_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB63_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB63_25:                              # %for.cond56
                                        #   Parent Loop BB63_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB63_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB63_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_25
.LBB63_28:                              # %for.end71
                                        #   in Loop: Header=BB63_23 Depth=1
	jmp	.LBB63_29
.LBB63_29:                              # %for.inc72
                                        #   in Loop: Header=BB63_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_23
.LBB63_30:                              # %for.end74
	jmp	.LBB63_60
.LBB63_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB63_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB63_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB63_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB63_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB63_36:                              # %for.cond83
                                        #   Parent Loop BB63_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB63_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB63_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_36
.LBB63_39:                              # %for.end120
                                        #   in Loop: Header=BB63_34 Depth=1
	jmp	.LBB63_40
.LBB63_40:                              # %for.inc121
                                        #   in Loop: Header=BB63_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_34
.LBB63_41:                              # %for.end123
	jmp	.LBB63_51
.LBB63_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB63_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB63_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB63_45:                              # %for.cond129
                                        #   Parent Loop BB63_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB63_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB63_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_45
.LBB63_48:                              # %for.end145
                                        #   in Loop: Header=BB63_43 Depth=1
	jmp	.LBB63_49
.LBB63_49:                              # %for.inc146
                                        #   in Loop: Header=BB63_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_43
.LBB63_50:                              # %for.end148
	jmp	.LBB63_51
.LBB63_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB63_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB63_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_54:                              # %for.cond153
                                        #   Parent Loop BB63_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB63_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB63_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_54
.LBB63_57:                              # %for.end167
                                        #   in Loop: Header=BB63_52 Depth=1
	jmp	.LBB63_58
.LBB63_58:                              # %for.inc168
                                        #   in Loop: Header=BB63_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_52
.LBB63_59:                              # %for.end170
	jmp	.LBB63_60
.LBB63_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB63_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB63_66
.LBB63_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB63_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB63_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB63_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB63_86
.LBB63_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB63_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_69 Depth 2
                                        #       Child Loop BB63_74 Depth 3
                                        #         Child Loop BB63_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB63_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB63_69:                              # %for.cond197
                                        #   Parent Loop BB63_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_74 Depth 3
                                        #         Child Loop BB63_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB63_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB63_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB63_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB63_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB63_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB63_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB63_73:                              # %if.end218
                                        #   in Loop: Header=BB63_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB63_74:                              # %for.cond233
                                        #   Parent Loop BB63_67 Depth=1
                                        #     Parent Loop BB63_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB63_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB63_74 Depth=3
	movl	$0, -8(%rbp)
.LBB63_76:                              # %for.cond237
                                        #   Parent Loop BB63_67 Depth=1
                                        #     Parent Loop BB63_69 Depth=2
                                        #       Parent Loop BB63_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB63_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB63_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB63_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_76
.LBB63_79:                              # %for.end269
                                        #   in Loop: Header=BB63_74 Depth=3
	jmp	.LBB63_80
.LBB63_80:                              # %for.inc270
                                        #   in Loop: Header=BB63_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_74
.LBB63_81:                              # %for.end272
                                        #   in Loop: Header=BB63_69 Depth=2
	jmp	.LBB63_82
.LBB63_82:                              # %for.inc273
                                        #   in Loop: Header=BB63_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_69
.LBB63_83:                              # %for.end275
                                        #   in Loop: Header=BB63_67 Depth=1
	jmp	.LBB63_84
.LBB63_84:                              # %for.inc276
                                        #   in Loop: Header=BB63_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_67
.LBB63_85:                              # %for.end278
	jmp	.LBB63_95
.LBB63_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB63_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB63_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_89:                              # %for.cond284
                                        #   Parent Loop BB63_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB63_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB63_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_89
.LBB63_92:                              # %for.end310
                                        #   in Loop: Header=BB63_87 Depth=1
	jmp	.LBB63_93
.LBB63_93:                              # %for.inc311
                                        #   in Loop: Header=BB63_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_87
.LBB63_94:                              # %for.end313
	jmp	.LBB63_95
.LBB63_95:                              # %if.end314
	jmp	.LBB63_96
.LBB63_96:                              # %if.end315
	cmpl	$1678952033, -84(%rbp)  # imm = 0x6412C661
	jne	.LBB63_98
.LBB63_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_97
.Lfunc_end63:
	.size	decode_one_b8block.53, .Lfunc_end63-decode_one_b8block.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.54
.LCPI64_0:
	.quad	4636737291354636288     # double 100
.LCPI64_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.54
	.p2align	4, 0x90
	.type	Build_Status_Map.54,@function
Build_Status_Map.54:                    # @Build_Status_Map.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1987533546, -40(%rbp)  # imm = 0x76775AEA
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -12(%rbp)
.LBB64_3:                               # %for.cond2
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB64_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB64_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB64_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB64_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB64_13
.LBB64_6:                               # %if.then
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI64_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB64_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB64_8:                               # %if.end
                                        #   in Loop: Header=BB64_3 Depth=2
	callq	rand
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI64_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB64_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB64_10:                              # %if.end20
                                        #   in Loop: Header=BB64_3 Depth=2
	callq	rand
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI64_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB64_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	$1, -4(%rbp)
.LBB64_12:                              # %if.end29
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB64_13:                              # %if.end30
                                        #   in Loop: Header=BB64_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB64_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB64_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB64_18
.LBB64_15:                              # %if.else
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB64_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB64_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB64_17:                              # %if.end49
                                        #   in Loop: Header=BB64_3 Depth=2
	jmp	.LBB64_18
.LBB64_18:                              # %if.end50
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_3
.LBB64_20:                              # %for.end
                                        #   in Loop: Header=BB64_1 Depth=1
	jmp	.LBB64_21
.LBB64_21:                              # %for.inc53
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_1
.LBB64_22:                              # %for.end55
	cmpl	$1987533546, -40(%rbp)  # imm = 0x76775AEA
	jne	.LBB64_24
.LBB64_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_23
.Lfunc_end64:
	.size	Build_Status_Map.54, .Lfunc_end64-Build_Status_Map.54
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.55   # -- Begin function decode_one_b8block.55
	.p2align	4, 0x90
	.type	decode_one_b8block.55,@function
decode_one_b8block.55:                  # @decode_one_b8block.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1528422593, -84(%rbp)  # imm = 0x5B19E0C1
	movl	%edi, -48(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_4:                               # %for.cond9
                                        #   Parent Loop BB65_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB65_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB65_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_4
.LBB65_7:                               # %for.end
                                        #   in Loop: Header=BB65_2 Depth=1
	jmp	.LBB65_8
.LBB65_8:                               # %for.inc26
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_2
.LBB65_9:                               # %for.end28
	jmp	.LBB65_96
.LBB65_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB65_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB65_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB65_31
.LBB65_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB65_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_17:                              # %for.cond40
                                        #   Parent Loop BB65_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB65_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB65_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_17
.LBB65_20:                              # %for.end49
                                        #   in Loop: Header=BB65_15 Depth=1
	jmp	.LBB65_21
.LBB65_21:                              # %for.inc50
                                        #   in Loop: Header=BB65_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_15
.LBB65_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_25:                              # %for.cond56
                                        #   Parent Loop BB65_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB65_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_25
.LBB65_28:                              # %for.end71
                                        #   in Loop: Header=BB65_23 Depth=1
	jmp	.LBB65_29
.LBB65_29:                              # %for.inc72
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_23
.LBB65_30:                              # %for.end74
	jmp	.LBB65_60
.LBB65_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB65_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB65_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_36:                              # %for.cond83
                                        #   Parent Loop BB65_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB65_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_36
.LBB65_39:                              # %for.end120
                                        #   in Loop: Header=BB65_34 Depth=1
	jmp	.LBB65_40
.LBB65_40:                              # %for.inc121
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_34
.LBB65_41:                              # %for.end123
	jmp	.LBB65_51
.LBB65_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB65_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_45:                              # %for.cond129
                                        #   Parent Loop BB65_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB65_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB65_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_45
.LBB65_48:                              # %for.end145
                                        #   in Loop: Header=BB65_43 Depth=1
	jmp	.LBB65_49
.LBB65_49:                              # %for.inc146
                                        #   in Loop: Header=BB65_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_43
.LBB65_50:                              # %for.end148
	jmp	.LBB65_51
.LBB65_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB65_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_54:                              # %for.cond153
                                        #   Parent Loop BB65_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB65_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_54
.LBB65_57:                              # %for.end167
                                        #   in Loop: Header=BB65_52 Depth=1
	jmp	.LBB65_58
.LBB65_58:                              # %for.inc168
                                        #   in Loop: Header=BB65_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_52
.LBB65_59:                              # %for.end170
	jmp	.LBB65_60
.LBB65_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB65_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB65_66
.LBB65_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB65_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB65_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB65_86
.LBB65_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_69 Depth 2
                                        #       Child Loop BB65_74 Depth 3
                                        #         Child Loop BB65_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB65_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_69:                              # %for.cond197
                                        #   Parent Loop BB65_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_74 Depth 3
                                        #         Child Loop BB65_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB65_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB65_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB65_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB65_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB65_73:                              # %if.end218
                                        #   in Loop: Header=BB65_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB65_74:                              # %for.cond233
                                        #   Parent Loop BB65_67 Depth=1
                                        #     Parent Loop BB65_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB65_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB65_74 Depth=3
	movl	$0, -8(%rbp)
.LBB65_76:                              # %for.cond237
                                        #   Parent Loop BB65_67 Depth=1
                                        #     Parent Loop BB65_69 Depth=2
                                        #       Parent Loop BB65_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB65_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB65_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB65_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_76
.LBB65_79:                              # %for.end269
                                        #   in Loop: Header=BB65_74 Depth=3
	jmp	.LBB65_80
.LBB65_80:                              # %for.inc270
                                        #   in Loop: Header=BB65_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_74
.LBB65_81:                              # %for.end272
                                        #   in Loop: Header=BB65_69 Depth=2
	jmp	.LBB65_82
.LBB65_82:                              # %for.inc273
                                        #   in Loop: Header=BB65_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_69
.LBB65_83:                              # %for.end275
                                        #   in Loop: Header=BB65_67 Depth=1
	jmp	.LBB65_84
.LBB65_84:                              # %for.inc276
                                        #   in Loop: Header=BB65_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_67
.LBB65_85:                              # %for.end278
	jmp	.LBB65_95
.LBB65_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB65_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_89:                              # %for.cond284
                                        #   Parent Loop BB65_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB65_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB65_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_89
.LBB65_92:                              # %for.end310
                                        #   in Loop: Header=BB65_87 Depth=1
	jmp	.LBB65_93
.LBB65_93:                              # %for.inc311
                                        #   in Loop: Header=BB65_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_87
.LBB65_94:                              # %for.end313
	jmp	.LBB65_95
.LBB65_95:                              # %if.end314
	jmp	.LBB65_96
.LBB65_96:                              # %if.end315
	cmpl	$1528422593, -84(%rbp)  # imm = 0x5B19E0C1
	jne	.LBB65_98
.LBB65_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_97
.Lfunc_end65:
	.size	decode_one_b8block.55, .Lfunc_end65-decode_one_b8block.55
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.56 # -- Begin function compute_residue_b8block.56
	.p2align	4, 0x90
	.type	compute_residue_b8block.56,@function
compute_residue_b8block.56:             # @compute_residue_b8block.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$389847397, -36(%rbp)   # imm = 0x173C9965
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB66_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB66_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB66_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB66_4:                               # %for.cond4
                                        #   Parent Loop BB66_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB66_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB66_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB66_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_4
.LBB66_7:                               # %for.end
                                        #   in Loop: Header=BB66_2 Depth=1
	jmp	.LBB66_8
.LBB66_8:                               # %for.inc22
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_2
.LBB66_9:                               # %for.end24
	jmp	.LBB66_19
.LBB66_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB66_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB66_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB66_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB66_13:                              # %for.cond29
                                        #   Parent Loop BB66_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB66_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB66_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB66_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_13
.LBB66_16:                              # %for.end56
                                        #   in Loop: Header=BB66_11 Depth=1
	jmp	.LBB66_17
.LBB66_17:                              # %for.inc57
                                        #   in Loop: Header=BB66_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_11
.LBB66_18:                              # %for.end59
	jmp	.LBB66_19
.LBB66_19:                              # %if.end
	cmpl	$389847397, -36(%rbp)   # imm = 0x173C9965
	jne	.LBB66_21
.LBB66_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_20
.Lfunc_end66:
	.size	compute_residue_b8block.56, .Lfunc_end66-compute_residue_b8block.56
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.57       # -- Begin function DecOneForthPix.57
	.p2align	4, 0x90
	.type	DecOneForthPix.57,@function
DecOneForthPix.57:                      # @DecOneForthPix.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$972692802, -8(%rbp)    # imm = 0x39FA1D42
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB67_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_1
.LBB67_4:                               # %for.end
	cmpl	$972692802, -8(%rbp)    # imm = 0x39FA1D42
	jne	.LBB67_6
.LBB67_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_5
.Lfunc_end67:
	.size	DecOneForthPix.57, .Lfunc_end67-DecOneForthPix.57
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.58   # -- Begin function decode_one_b8block.58
	.p2align	4, 0x90
	.type	decode_one_b8block.58,@function
decode_one_b8block.58:                  # @decode_one_b8block.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1974738095, -84(%rbp)  # imm = 0x75B41CAF
	movl	%edi, -48(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB68_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_4:                               # %for.cond9
                                        #   Parent Loop BB68_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB68_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB68_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB68_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_4
.LBB68_7:                               # %for.end
                                        #   in Loop: Header=BB68_2 Depth=1
	jmp	.LBB68_8
.LBB68_8:                               # %for.inc26
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_2
.LBB68_9:                               # %for.end28
	jmp	.LBB68_96
.LBB68_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB68_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB68_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB68_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB68_31
.LBB68_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB68_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB68_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_17:                              # %for.cond40
                                        #   Parent Loop BB68_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB68_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB68_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB68_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_17
.LBB68_20:                              # %for.end49
                                        #   in Loop: Header=BB68_15 Depth=1
	jmp	.LBB68_21
.LBB68_21:                              # %for.inc50
                                        #   in Loop: Header=BB68_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_15
.LBB68_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB68_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB68_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB68_25:                              # %for.cond56
                                        #   Parent Loop BB68_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB68_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB68_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_25
.LBB68_28:                              # %for.end71
                                        #   in Loop: Header=BB68_23 Depth=1
	jmp	.LBB68_29
.LBB68_29:                              # %for.inc72
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_23
.LBB68_30:                              # %for.end74
	jmp	.LBB68_60
.LBB68_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB68_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB68_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB68_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB68_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB68_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB68_36:                              # %for.cond83
                                        #   Parent Loop BB68_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB68_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB68_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB68_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_36
.LBB68_39:                              # %for.end120
                                        #   in Loop: Header=BB68_34 Depth=1
	jmp	.LBB68_40
.LBB68_40:                              # %for.inc121
                                        #   in Loop: Header=BB68_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_34
.LBB68_41:                              # %for.end123
	jmp	.LBB68_51
.LBB68_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB68_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB68_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB68_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB68_45:                              # %for.cond129
                                        #   Parent Loop BB68_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB68_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB68_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB68_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_45
.LBB68_48:                              # %for.end145
                                        #   in Loop: Header=BB68_43 Depth=1
	jmp	.LBB68_49
.LBB68_49:                              # %for.inc146
                                        #   in Loop: Header=BB68_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_43
.LBB68_50:                              # %for.end148
	jmp	.LBB68_51
.LBB68_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB68_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB68_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_54:                              # %for.cond153
                                        #   Parent Loop BB68_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB68_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB68_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB68_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_54
.LBB68_57:                              # %for.end167
                                        #   in Loop: Header=BB68_52 Depth=1
	jmp	.LBB68_58
.LBB68_58:                              # %for.inc168
                                        #   in Loop: Header=BB68_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_52
.LBB68_59:                              # %for.end170
	jmp	.LBB68_60
.LBB68_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB68_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB68_66
.LBB68_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB68_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB68_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB68_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB68_86
.LBB68_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB68_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_69 Depth 2
                                        #       Child Loop BB68_74 Depth 3
                                        #         Child Loop BB68_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB68_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB68_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB68_69:                              # %for.cond197
                                        #   Parent Loop BB68_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_74 Depth 3
                                        #         Child Loop BB68_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB68_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB68_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB68_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB68_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB68_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB68_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB68_73:                              # %if.end218
                                        #   in Loop: Header=BB68_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB68_74:                              # %for.cond233
                                        #   Parent Loop BB68_67 Depth=1
                                        #     Parent Loop BB68_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB68_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB68_74 Depth=3
	movl	$0, -8(%rbp)
.LBB68_76:                              # %for.cond237
                                        #   Parent Loop BB68_67 Depth=1
                                        #     Parent Loop BB68_69 Depth=2
                                        #       Parent Loop BB68_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB68_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB68_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB68_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_76
.LBB68_79:                              # %for.end269
                                        #   in Loop: Header=BB68_74 Depth=3
	jmp	.LBB68_80
.LBB68_80:                              # %for.inc270
                                        #   in Loop: Header=BB68_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_74
.LBB68_81:                              # %for.end272
                                        #   in Loop: Header=BB68_69 Depth=2
	jmp	.LBB68_82
.LBB68_82:                              # %for.inc273
                                        #   in Loop: Header=BB68_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_69
.LBB68_83:                              # %for.end275
                                        #   in Loop: Header=BB68_67 Depth=1
	jmp	.LBB68_84
.LBB68_84:                              # %for.inc276
                                        #   in Loop: Header=BB68_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_67
.LBB68_85:                              # %for.end278
	jmp	.LBB68_95
.LBB68_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB68_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB68_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_89:                              # %for.cond284
                                        #   Parent Loop BB68_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB68_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB68_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB68_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_89
.LBB68_92:                              # %for.end310
                                        #   in Loop: Header=BB68_87 Depth=1
	jmp	.LBB68_93
.LBB68_93:                              # %for.inc311
                                        #   in Loop: Header=BB68_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_87
.LBB68_94:                              # %for.end313
	jmp	.LBB68_95
.LBB68_95:                              # %if.end314
	jmp	.LBB68_96
.LBB68_96:                              # %if.end315
	cmpl	$1974738095, -84(%rbp)  # imm = 0x75B41CAF
	jne	.LBB68_98
.LBB68_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_97
.Lfunc_end68:
	.size	decode_one_b8block.58, .Lfunc_end68-decode_one_b8block.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.59
.LCPI69_0:
	.quad	4636737291354636288     # double 100
.LCPI69_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.59
	.p2align	4, 0x90
	.type	Build_Status_Map.59,@function
Build_Status_Map.59:                    # @Build_Status_Map.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2063606154, -44(%rbp)  # imm = 0x7B00218A
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB69_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_3:                               # %for.cond2
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB69_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB69_13
.LBB69_6:                               # %if.then
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI69_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB69_8:                               # %if.end
                                        #   in Loop: Header=BB69_3 Depth=2
	callq	rand
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI69_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB69_10:                              # %if.end20
                                        #   in Loop: Header=BB69_3 Depth=2
	callq	rand
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI69_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	$1, -4(%rbp)
.LBB69_12:                              # %if.end29
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB69_13:                              # %if.end30
                                        #   in Loop: Header=BB69_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB69_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB69_18
.LBB69_15:                              # %if.else
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB69_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB69_17:                              # %if.end49
                                        #   in Loop: Header=BB69_3 Depth=2
	jmp	.LBB69_18
.LBB69_18:                              # %if.end50
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_3
.LBB69_20:                              # %for.end
                                        #   in Loop: Header=BB69_1 Depth=1
	jmp	.LBB69_21
.LBB69_21:                              # %for.inc53
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_1
.LBB69_22:                              # %for.end55
	cmpl	$2063606154, -44(%rbp)  # imm = 0x7B00218A
	jne	.LBB69_24
.LBB69_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_23
.Lfunc_end69:
	.size	Build_Status_Map.59, .Lfunc_end69-Build_Status_Map.59
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.60
.LCPI70_0:
	.quad	4636737291354636288     # double 100
.LCPI70_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.60
	.p2align	4, 0x90
	.type	Build_Status_Map.60,@function
Build_Status_Map.60:                    # @Build_Status_Map.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1220741505, -40(%rbp)  # imm = 0x48C30981
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB70_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	$0, -8(%rbp)
.LBB70_3:                               # %for.cond2
                                        #   Parent Loop BB70_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB70_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB70_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB70_13
.LBB70_6:                               # %if.then
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI70_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI70_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB70_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB70_8:                               # %if.end
                                        #   in Loop: Header=BB70_3 Depth=2
	callq	rand
	vmovsd	.LCPI70_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI70_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB70_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB70_10:                              # %if.end20
                                        #   in Loop: Header=BB70_3 Depth=2
	callq	rand
	vmovsd	.LCPI70_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI70_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB70_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	$1, -4(%rbp)
.LBB70_12:                              # %if.end29
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB70_13:                              # %if.end30
                                        #   in Loop: Header=BB70_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB70_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB70_18
.LBB70_15:                              # %if.else
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB70_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB70_17:                              # %if.end49
                                        #   in Loop: Header=BB70_3 Depth=2
	jmp	.LBB70_18
.LBB70_18:                              # %if.end50
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_3
.LBB70_20:                              # %for.end
                                        #   in Loop: Header=BB70_1 Depth=1
	jmp	.LBB70_21
.LBB70_21:                              # %for.inc53
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_1
.LBB70_22:                              # %for.end55
	cmpl	$1220741505, -40(%rbp)  # imm = 0x48C30981
	jne	.LBB70_24
.LBB70_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_23
.Lfunc_end70:
	.size	Build_Status_Map.60, .Lfunc_end70-Build_Status_Map.60
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.61    # -- Begin function Error_Concealment.61
	.p2align	4, 0x90
	.type	Error_Concealment.61,@function
Error_Concealment.61:                   # @Error_Concealment.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$668819241, -16(%rbp)   # imm = 0x27DD5F29
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB71_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_3:                               # %for.cond2
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB71_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB71_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB71_6:                               # %if.end
                                        #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_7
.LBB71_7:                               # %for.inc
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_3
.LBB71_8:                               # %for.end
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_9
.LBB71_9:                               # %for.inc7
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_1
.LBB71_10:                              # %for.end9
	cmpl	$668819241, -16(%rbp)   # imm = 0x27DD5F29
	jne	.LBB71_12
.LBB71_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_11
.Lfunc_end71:
	.size	Error_Concealment.61, .Lfunc_end71-Error_Concealment.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.62
.LCPI72_0:
	.quad	4636737291354636288     # double 100
.LCPI72_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.62
	.p2align	4, 0x90
	.type	Build_Status_Map.62,@function
Build_Status_Map.62:                    # @Build_Status_Map.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$17647469, -36(%rbp)    # imm = 0x10D476D
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB72_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -12(%rbp)
.LBB72_3:                               # %for.cond2
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB72_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB72_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB72_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB72_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB72_13
.LBB72_6:                               # %if.then
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI72_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB72_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB72_8:                               # %if.end
                                        #   in Loop: Header=BB72_3 Depth=2
	callq	rand
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI72_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB72_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB72_10:                              # %if.end20
                                        #   in Loop: Header=BB72_3 Depth=2
	callq	rand
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI72_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB72_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	$1, -4(%rbp)
.LBB72_12:                              # %if.end29
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB72_13:                              # %if.end30
                                        #   in Loop: Header=BB72_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB72_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB72_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB72_18
.LBB72_15:                              # %if.else
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB72_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB72_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB72_17:                              # %if.end49
                                        #   in Loop: Header=BB72_3 Depth=2
	jmp	.LBB72_18
.LBB72_18:                              # %if.end50
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_3
.LBB72_20:                              # %for.end
                                        #   in Loop: Header=BB72_1 Depth=1
	jmp	.LBB72_21
.LBB72_21:                              # %for.inc53
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_1
.LBB72_22:                              # %for.end55
	cmpl	$17647469, -36(%rbp)    # imm = 0x10D476D
	jne	.LBB72_24
.LBB72_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_23
.Lfunc_end72:
	.size	Build_Status_Map.62, .Lfunc_end72-Build_Status_Map.62
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.63        # -- Begin function Conceal_Error.63
	.p2align	4, 0x90
	.type	Conceal_Error.63,@function
Conceal_Error.63:                       # @Conceal_Error.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$359239173, -68(%rbp)   # imm = 0x15698E05
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB73_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB73_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB73_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB73_4:                               # %land.end
.LBB73_5:                               # %lor.end
.LBB73_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB73_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB73_9
.LBB73_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB73_14
.LBB73_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB73_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB73_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB73_12:                              # %land.end51
.LBB73_13:                              # %lor.end53
.LBB73_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB73_180
# %bb.15:                               # %land.end54
	movq	.LJTI73_0(,%rax,8), %rax
	jmpq	*%rax
.LBB73_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB73_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	$0, -4(%rbp)
.LBB73_20:                              # %for.cond68
                                        #   Parent Loop BB73_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB73_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB73_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_20
.LBB73_23:                              # %for.end
                                        #   in Loop: Header=BB73_18 Depth=1
	jmp	.LBB73_24
.LBB73_24:                              # %for.inc85
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_18
.LBB73_25:                              # %for.end87
	jmp	.LBB73_35
.LBB73_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB73_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	$0, -4(%rbp)
.LBB73_29:                              # %for.cond92
                                        #   Parent Loop BB73_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB73_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB73_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_29
.LBB73_32:                              # %for.end104
                                        #   in Loop: Header=BB73_27 Depth=1
	jmp	.LBB73_33
.LBB73_33:                              # %for.inc105
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_27
.LBB73_34:                              # %for.end107
	jmp	.LBB73_35
.LBB73_35:                              # %if.end
	jmp	.LBB73_180
.LBB73_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB73_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_39 Depth 2
                                        #       Child Loop BB73_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB73_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	$0, -16(%rbp)
.LBB73_39:                              # %for.cond113
                                        #   Parent Loop BB73_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB73_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	$0, -4(%rbp)
.LBB73_41:                              # %for.cond117
                                        #   Parent Loop BB73_37 Depth=1
                                        #     Parent Loop BB73_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB73_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB73_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB73_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_41
.LBB73_44:                              # %for.end141
                                        #   in Loop: Header=BB73_39 Depth=2
	jmp	.LBB73_45
.LBB73_45:                              # %for.inc142
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_39
.LBB73_46:                              # %for.end144
                                        #   in Loop: Header=BB73_37 Depth=1
	jmp	.LBB73_47
.LBB73_47:                              # %for.inc145
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_37
.LBB73_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB73_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB73_49 Depth=1
	movl	$0, -8(%rbp)
.LBB73_51:                              # %for.cond152
                                        #   Parent Loop BB73_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB73_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB73_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_51
.LBB73_54:                              # %for.end162
                                        #   in Loop: Header=BB73_49 Depth=1
	jmp	.LBB73_55
.LBB73_55:                              # %for.inc163
                                        #   in Loop: Header=BB73_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_49
.LBB73_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB73_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB73_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	$0, -4(%rbp)
.LBB73_61:                              # %for.cond175
                                        #   Parent Loop BB73_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB73_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB73_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_61
.LBB73_64:                              # %for.end195
                                        #   in Loop: Header=BB73_59 Depth=1
	jmp	.LBB73_65
.LBB73_65:                              # %for.inc196
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_59
.LBB73_66:                              # %for.end198
	jmp	.LBB73_95
.LBB73_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB73_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB73_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_71 Depth 2
                                        #       Child Loop BB73_73 Depth 3
                                        #         Child Loop BB73_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB73_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB73_71:                              # %for.cond210
                                        #   Parent Loop BB73_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_73 Depth 3
                                        #         Child Loop BB73_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB73_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB73_73:                              # %for.cond236
                                        #   Parent Loop BB73_69 Depth=1
                                        #     Parent Loop BB73_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB73_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB73_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB73_73 Depth=3
	movl	$0, -4(%rbp)
.LBB73_75:                              # %for.cond240
                                        #   Parent Loop BB73_69 Depth=1
                                        #     Parent Loop BB73_71 Depth=2
                                        #       Parent Loop BB73_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB73_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB73_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB73_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_75
.LBB73_78:                              # %for.end259
                                        #   in Loop: Header=BB73_73 Depth=3
	jmp	.LBB73_79
.LBB73_79:                              # %for.inc260
                                        #   in Loop: Header=BB73_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_73
.LBB73_80:                              # %for.end262
                                        #   in Loop: Header=BB73_71 Depth=2
	jmp	.LBB73_81
.LBB73_81:                              # %for.inc263
                                        #   in Loop: Header=BB73_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_71
.LBB73_82:                              # %for.end265
                                        #   in Loop: Header=BB73_69 Depth=1
	jmp	.LBB73_83
.LBB73_83:                              # %for.inc266
                                        #   in Loop: Header=BB73_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_69
.LBB73_84:                              # %for.end268
	jmp	.LBB73_94
.LBB73_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB73_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB73_86 Depth=1
	movl	$0, -4(%rbp)
.LBB73_88:                              # %for.cond274
                                        #   Parent Loop BB73_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB73_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB73_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_88
.LBB73_91:                              # %for.end294
                                        #   in Loop: Header=BB73_86 Depth=1
	jmp	.LBB73_92
.LBB73_92:                              # %for.inc295
                                        #   in Loop: Header=BB73_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_86
.LBB73_93:                              # %for.end297
	jmp	.LBB73_94
.LBB73_94:                              # %if.end298
	jmp	.LBB73_95
.LBB73_95:                              # %if.end299
	jmp	.LBB73_105
.LBB73_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB73_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB73_97 Depth=1
	movl	$0, -4(%rbp)
.LBB73_99:                              # %for.cond305
                                        #   Parent Loop BB73_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB73_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB73_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_99
.LBB73_102:                             # %for.end317
                                        #   in Loop: Header=BB73_97 Depth=1
	jmp	.LBB73_103
.LBB73_103:                             # %for.inc318
                                        #   in Loop: Header=BB73_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_97
.LBB73_104:                             # %for.end320
	jmp	.LBB73_105
.LBB73_105:                             # %if.end321
	jmp	.LBB73_180
.LBB73_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB73_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_110 Depth 2
                                        #       Child Loop BB73_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB73_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB73_108 Depth=1
	movl	$0, -16(%rbp)
.LBB73_110:                             # %for.cond331
                                        #   Parent Loop BB73_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB73_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB73_110 Depth=2
	movl	$0, -4(%rbp)
.LBB73_112:                             # %for.cond335
                                        #   Parent Loop BB73_108 Depth=1
                                        #     Parent Loop BB73_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB73_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB73_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB73_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_112
.LBB73_115:                             # %for.end359
                                        #   in Loop: Header=BB73_110 Depth=2
	jmp	.LBB73_116
.LBB73_116:                             # %for.inc360
                                        #   in Loop: Header=BB73_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_110
.LBB73_117:                             # %for.end362
                                        #   in Loop: Header=BB73_108 Depth=1
	jmp	.LBB73_118
.LBB73_118:                             # %for.inc363
                                        #   in Loop: Header=BB73_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_108
.LBB73_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB73_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB73_120 Depth=1
	movl	$0, -8(%rbp)
.LBB73_122:                             # %for.cond370
                                        #   Parent Loop BB73_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB73_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB73_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_122
.LBB73_125:                             # %for.end380
                                        #   in Loop: Header=BB73_120 Depth=1
	jmp	.LBB73_126
.LBB73_126:                             # %for.inc381
                                        #   in Loop: Header=BB73_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_120
.LBB73_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB73_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB73_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB73_129 Depth=1
	movl	$0, -4(%rbp)
.LBB73_131:                             # %for.cond390
                                        #   Parent Loop BB73_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB73_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB73_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_131
.LBB73_134:                             # %for.end410
                                        #   in Loop: Header=BB73_129 Depth=1
	jmp	.LBB73_135
.LBB73_135:                             # %for.inc411
                                        #   in Loop: Header=BB73_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_129
.LBB73_136:                             # %for.end413
	jmp	.LBB73_156
.LBB73_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB73_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB73_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_141 Depth 2
                                        #       Child Loop BB73_143 Depth 3
                                        #         Child Loop BB73_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB73_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB73_141:                             # %for.cond425
                                        #   Parent Loop BB73_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_143 Depth 3
                                        #         Child Loop BB73_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB73_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB73_143:                             # %for.cond452
                                        #   Parent Loop BB73_139 Depth=1
                                        #     Parent Loop BB73_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB73_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB73_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB73_143 Depth=3
	movl	$0, -4(%rbp)
.LBB73_145:                             # %for.cond456
                                        #   Parent Loop BB73_139 Depth=1
                                        #     Parent Loop BB73_141 Depth=2
                                        #       Parent Loop BB73_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB73_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB73_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB73_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_145
.LBB73_148:                             # %for.end475
                                        #   in Loop: Header=BB73_143 Depth=3
	jmp	.LBB73_149
.LBB73_149:                             # %for.inc476
                                        #   in Loop: Header=BB73_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_143
.LBB73_150:                             # %for.end478
                                        #   in Loop: Header=BB73_141 Depth=2
	jmp	.LBB73_151
.LBB73_151:                             # %for.inc479
                                        #   in Loop: Header=BB73_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_141
.LBB73_152:                             # %for.end481
                                        #   in Loop: Header=BB73_139 Depth=1
	jmp	.LBB73_153
.LBB73_153:                             # %for.inc482
                                        #   in Loop: Header=BB73_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_139
.LBB73_154:                             # %for.end484
	jmp	.LBB73_155
.LBB73_155:                             # %if.end485
	jmp	.LBB73_156
.LBB73_156:                             # %if.end486
	jmp	.LBB73_157
.LBB73_157:                             # %if.end487
	jmp	.LBB73_180
.LBB73_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB73_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB73_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	$0, -4(%rbp)
.LBB73_163:                             # %for.cond499
                                        #   Parent Loop BB73_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB73_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB73_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_163
.LBB73_166:                             # %for.end519
                                        #   in Loop: Header=BB73_161 Depth=1
	jmp	.LBB73_167
.LBB73_167:                             # %for.inc520
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_161
.LBB73_168:                             # %for.end522
	jmp	.LBB73_169
.LBB73_169:                             # %if.end523
	jmp	.LBB73_179
.LBB73_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB73_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB73_171 Depth=1
	movl	$0, -4(%rbp)
.LBB73_173:                             # %for.cond529
                                        #   Parent Loop BB73_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB73_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB73_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_173
.LBB73_176:                             # %for.end541
                                        #   in Loop: Header=BB73_171 Depth=1
	jmp	.LBB73_177
.LBB73_177:                             # %for.inc542
                                        #   in Loop: Header=BB73_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_171
.LBB73_178:                             # %for.end544
	jmp	.LBB73_179
.LBB73_179:                             # %if.end545
	jmp	.LBB73_180
.LBB73_180:                             # %sw.epilog
	cmpl	$359239173, -68(%rbp)   # imm = 0x15698E05
	jne	.LBB73_182
.LBB73_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_181
.Lfunc_end73:
	.size	Conceal_Error.63, .Lfunc_end73-Conceal_Error.63
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI73_0:
	.quad	.LBB73_16
	.quad	.LBB73_158
	.quad	.LBB73_106
	.quad	.LBB73_180
	.quad	.LBB73_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.64  # -- Begin function Get_Reference_Pixel.64
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.64,@function
Get_Reference_Pixel.64:                 # @Get_Reference_Pixel.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2080107510, -108(%rbp) # imm = 0x7BFBEBF6
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB74_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB74_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB74_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB74_5
.LBB74_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB74_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB74_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB74_11
.LBB74_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB74_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB74_10
.LBB74_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB74_10:                              # %cond.end14
.LBB74_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB74_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB74_14
.LBB74_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB74_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB74_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB74_20
.LBB74_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB74_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB74_19
.LBB74_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB74_19:                              # %cond.end29
.LBB74_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_332
.LBB74_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB74_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB74_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB74_25
.LBB74_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB74_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB74_31
.LBB74_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB74_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB74_30
.LBB74_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB74_30:                              # %cond.end52
.LBB74_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB74_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB74_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_36
.LBB74_35:                              # %cond.false61
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_36:                              # %cond.end63
                                        #   in Loop: Header=BB74_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB74_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_42
.LBB74_38:                              # %cond.false68
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_41
.LBB74_40:                              # %cond.false73
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_41:                              # %cond.end75
                                        #   in Loop: Header=BB74_32 Depth=1
.LBB74_42:                              # %cond.end77
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB74_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_32
.LBB74_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_47
.LBB74_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB74_53
.LBB74_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_52
.LBB74_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_52:                              # %cond.end113
.LBB74_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB74_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB74_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB74_57
.LBB74_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB74_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB74_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB74_63
.LBB74_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB74_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB74_62
.LBB74_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB74_62:                              # %cond.end136
.LBB74_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB74_76
.LBB74_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB74_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB74_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB74_68
.LBB74_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB74_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB74_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB74_74
.LBB74_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB74_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB74_73
.LBB74_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB74_73:                              # %cond.end169
.LBB74_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB74_75:                              # %if.end
	jmp	.LBB74_76
.LBB74_76:                              # %if.end178
	jmp	.LBB74_331
.LBB74_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB74_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB74_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB74_81
.LBB74_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB74_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB74_87
.LBB74_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB74_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB74_86
.LBB74_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB74_86:                              # %cond.end197
.LBB74_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB74_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB74_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_92
.LBB74_91:                              # %cond.false209
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_92:                              # %cond.end211
                                        #   in Loop: Header=BB74_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB74_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_98
.LBB74_94:                              # %cond.false216
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_97
.LBB74_96:                              # %cond.false221
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_97:                              # %cond.end223
                                        #   in Loop: Header=BB74_88 Depth=1
.LBB74_98:                              # %cond.end225
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB74_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_88
.LBB74_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_103
.LBB74_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB74_109
.LBB74_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_108
.LBB74_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_108:                             # %cond.end266
.LBB74_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB74_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB74_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB74_113
.LBB74_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB74_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB74_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB74_119
.LBB74_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB74_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB74_118
.LBB74_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB74_118:                             # %cond.end287
.LBB74_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB74_132
.LBB74_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB74_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB74_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB74_124
.LBB74_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB74_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB74_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB74_130
.LBB74_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB74_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB74_129
.LBB74_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB74_129:                             # %cond.end320
.LBB74_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB74_131:                             # %if.end331
	jmp	.LBB74_132
.LBB74_132:                             # %if.end332
	jmp	.LBB74_330
.LBB74_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB74_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB74_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB74_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_139
.LBB74_138:                             # %cond.false345
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_139:                             # %cond.end347
                                        #   in Loop: Header=BB74_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB74_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_145
.LBB74_141:                             # %cond.false352
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_144
.LBB74_143:                             # %cond.false357
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_144:                             # %cond.end359
                                        #   in Loop: Header=BB74_135 Depth=1
.LBB74_145:                             # %cond.end361
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB74_146:                             # %for.cond363
                                        #   Parent Loop BB74_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB74_150
.LBB74_149:                             # %cond.false371
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_150:                             # %cond.end373
                                        #   in Loop: Header=BB74_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB74_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_156
.LBB74_152:                             # %cond.false378
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB74_155
.LBB74_154:                             # %cond.false383
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_155:                             # %cond.end385
                                        #   in Loop: Header=BB74_146 Depth=2
.LBB74_156:                             # %cond.end387
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB74_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_146
.LBB74_158:                             # %for.end401
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_135
.LBB74_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB74_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB74_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB74_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB74_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_161
.LBB74_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_167
.LBB74_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB74_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB74_173
.LBB74_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_172
.LBB74_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB74_172:                             # %cond.end449
.LBB74_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB74_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_177
.LBB74_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB74_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB74_183
.LBB74_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_182
.LBB74_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_182:                             # %cond.end486
.LBB74_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB74_196
.LBB74_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB74_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_188
.LBB74_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB74_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB74_194
.LBB74_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_193
.LBB74_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_193:                             # %cond.end526
.LBB74_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB74_195:                             # %if.end532
	jmp	.LBB74_196
.LBB74_196:                             # %if.end533
	jmp	.LBB74_329
.LBB74_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB74_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB74_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_203
.LBB74_202:                             # %cond.false546
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_203:                             # %cond.end548
                                        #   in Loop: Header=BB74_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB74_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_209
.LBB74_205:                             # %cond.false553
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_208
.LBB74_207:                             # %cond.false558
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_208:                             # %cond.end560
                                        #   in Loop: Header=BB74_199 Depth=1
.LBB74_209:                             # %cond.end562
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB74_210:                             # %for.cond564
                                        #   Parent Loop BB74_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB74_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB74_214
.LBB74_213:                             # %cond.false572
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_214:                             # %cond.end574
                                        #   in Loop: Header=BB74_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB74_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_220
.LBB74_216:                             # %cond.false579
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB74_219
.LBB74_218:                             # %cond.false584
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_219:                             # %cond.end586
                                        #   in Loop: Header=BB74_210 Depth=2
.LBB74_220:                             # %cond.end588
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB74_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_210
.LBB74_222:                             # %for.end602
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB74_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_199
.LBB74_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB74_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB74_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB74_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB74_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_225
.LBB74_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_231
.LBB74_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB74_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB74_237
.LBB74_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_236
.LBB74_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB74_236:                             # %cond.end650
.LBB74_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB74_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_241
.LBB74_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB74_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB74_247
.LBB74_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_246
.LBB74_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_246:                             # %cond.end687
.LBB74_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB74_258
.LBB74_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_251
.LBB74_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB74_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB74_257
.LBB74_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB74_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_256
.LBB74_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB74_256:                             # %cond.end724
.LBB74_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB74_258:                             # %if.end730
	jmp	.LBB74_328
.LBB74_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB74_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB74_262
.LBB74_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB74_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB74_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB74_265
.LBB74_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB74_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB74_271
.LBB74_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB74_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB74_270
.LBB74_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB74_270:                             # %cond.end753
.LBB74_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB74_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB74_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_276
.LBB74_275:                             # %cond.false765
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_276:                             # %cond.end767
                                        #   in Loop: Header=BB74_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB74_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_282
.LBB74_278:                             # %cond.false772
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB74_281
.LBB74_280:                             # %cond.false777
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB74_281:                             # %cond.end779
                                        #   in Loop: Header=BB74_272 Depth=1
.LBB74_282:                             # %cond.end781
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB74_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_272
.LBB74_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_287
.LBB74_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB74_293
.LBB74_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_292
.LBB74_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_292:                             # %cond.end822
.LBB74_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB74_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB74_296
.LBB74_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB74_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB74_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB74_299
.LBB74_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB74_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB74_305
.LBB74_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB74_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB74_304
.LBB74_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB74_304:                             # %cond.end847
.LBB74_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB74_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB74_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_310
.LBB74_309:                             # %cond.false859
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_310:                             # %cond.end861
                                        #   in Loop: Header=BB74_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB74_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_316
.LBB74_312:                             # %cond.false866
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB74_315
.LBB74_314:                             # %cond.false871
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB74_315:                             # %cond.end873
                                        #   in Loop: Header=BB74_306 Depth=1
.LBB74_316:                             # %cond.end875
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB74_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_306
.LBB74_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_321
.LBB74_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB74_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB74_327
.LBB74_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_326
.LBB74_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB74_326:                             # %cond.end916
.LBB74_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB74_328:                             # %if.end922
	jmp	.LBB74_329
.LBB74_329:                             # %if.end923
	jmp	.LBB74_330
.LBB74_330:                             # %if.end924
	jmp	.LBB74_331
.LBB74_331:                             # %if.end925
	jmp	.LBB74_332
.LBB74_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$2080107510, -108(%rbp) # imm = 0x7BFBEBF6
	jne	.LBB74_334
.LBB74_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_333
.Lfunc_end74:
	.size	Get_Reference_Pixel.64, .Lfunc_end74-Get_Reference_Pixel.64
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.65  # -- Begin function Get_Reference_Pixel.65
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.65,@function
Get_Reference_Pixel.65:                 # @Get_Reference_Pixel.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1754343249, -100(%rbp) # imm = 0x68912751
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB75_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB75_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB75_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB75_5
.LBB75_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB75_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB75_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB75_11
.LBB75_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB75_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB75_10
.LBB75_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB75_10:                              # %cond.end14
.LBB75_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB75_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB75_14
.LBB75_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB75_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB75_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB75_20
.LBB75_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB75_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB75_19
.LBB75_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB75_19:                              # %cond.end29
.LBB75_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_332
.LBB75_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB75_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB75_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB75_25
.LBB75_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB75_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB75_31
.LBB75_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB75_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB75_30
.LBB75_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB75_30:                              # %cond.end52
.LBB75_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB75_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB75_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_36
.LBB75_35:                              # %cond.false61
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_36:                              # %cond.end63
                                        #   in Loop: Header=BB75_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB75_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_42
.LBB75_38:                              # %cond.false68
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_41
.LBB75_40:                              # %cond.false73
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_41:                              # %cond.end75
                                        #   in Loop: Header=BB75_32 Depth=1
.LBB75_42:                              # %cond.end77
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_32
.LBB75_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_47
.LBB75_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB75_53
.LBB75_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_52
.LBB75_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_52:                              # %cond.end113
.LBB75_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB75_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB75_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB75_57
.LBB75_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB75_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB75_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB75_63
.LBB75_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB75_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB75_62
.LBB75_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB75_62:                              # %cond.end136
.LBB75_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB75_76
.LBB75_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB75_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB75_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB75_68
.LBB75_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB75_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB75_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB75_74
.LBB75_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB75_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB75_73
.LBB75_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB75_73:                              # %cond.end169
.LBB75_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB75_75:                              # %if.end
	jmp	.LBB75_76
.LBB75_76:                              # %if.end178
	jmp	.LBB75_331
.LBB75_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB75_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB75_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB75_81
.LBB75_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB75_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB75_87
.LBB75_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB75_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB75_86
.LBB75_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB75_86:                              # %cond.end197
.LBB75_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB75_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB75_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_92
.LBB75_91:                              # %cond.false209
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_92:                              # %cond.end211
                                        #   in Loop: Header=BB75_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB75_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_98
.LBB75_94:                              # %cond.false216
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_97
.LBB75_96:                              # %cond.false221
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_97:                              # %cond.end223
                                        #   in Loop: Header=BB75_88 Depth=1
.LBB75_98:                              # %cond.end225
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB75_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_88
.LBB75_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_103
.LBB75_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB75_109
.LBB75_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_108
.LBB75_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_108:                             # %cond.end266
.LBB75_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB75_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB75_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB75_113
.LBB75_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB75_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB75_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB75_119
.LBB75_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB75_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB75_118
.LBB75_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB75_118:                             # %cond.end287
.LBB75_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB75_132
.LBB75_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB75_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB75_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB75_124
.LBB75_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB75_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB75_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB75_130
.LBB75_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB75_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB75_129
.LBB75_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB75_129:                             # %cond.end320
.LBB75_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB75_131:                             # %if.end331
	jmp	.LBB75_132
.LBB75_132:                             # %if.end332
	jmp	.LBB75_330
.LBB75_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB75_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB75_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB75_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_139
.LBB75_138:                             # %cond.false345
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_139:                             # %cond.end347
                                        #   in Loop: Header=BB75_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB75_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_145
.LBB75_141:                             # %cond.false352
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_144
.LBB75_143:                             # %cond.false357
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_144:                             # %cond.end359
                                        #   in Loop: Header=BB75_135 Depth=1
.LBB75_145:                             # %cond.end361
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB75_146:                             # %for.cond363
                                        #   Parent Loop BB75_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB75_150
.LBB75_149:                             # %cond.false371
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_150:                             # %cond.end373
                                        #   in Loop: Header=BB75_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB75_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_156
.LBB75_152:                             # %cond.false378
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB75_155
.LBB75_154:                             # %cond.false383
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_155:                             # %cond.end385
                                        #   in Loop: Header=BB75_146 Depth=2
.LBB75_156:                             # %cond.end387
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB75_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_146
.LBB75_158:                             # %for.end401
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_135
.LBB75_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB75_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB75_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_161
.LBB75_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_167
.LBB75_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB75_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB75_173
.LBB75_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_172
.LBB75_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB75_172:                             # %cond.end449
.LBB75_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB75_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_177
.LBB75_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB75_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB75_183
.LBB75_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_182
.LBB75_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_182:                             # %cond.end486
.LBB75_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB75_196
.LBB75_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB75_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_188
.LBB75_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB75_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB75_194
.LBB75_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_193
.LBB75_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_193:                             # %cond.end526
.LBB75_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB75_195:                             # %if.end532
	jmp	.LBB75_196
.LBB75_196:                             # %if.end533
	jmp	.LBB75_329
.LBB75_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB75_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB75_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_203
.LBB75_202:                             # %cond.false546
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_203:                             # %cond.end548
                                        #   in Loop: Header=BB75_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB75_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_209
.LBB75_205:                             # %cond.false553
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_208
.LBB75_207:                             # %cond.false558
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_208:                             # %cond.end560
                                        #   in Loop: Header=BB75_199 Depth=1
.LBB75_209:                             # %cond.end562
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB75_210:                             # %for.cond564
                                        #   Parent Loop BB75_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB75_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB75_214
.LBB75_213:                             # %cond.false572
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_214:                             # %cond.end574
                                        #   in Loop: Header=BB75_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB75_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_220
.LBB75_216:                             # %cond.false579
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB75_219
.LBB75_218:                             # %cond.false584
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_219:                             # %cond.end586
                                        #   in Loop: Header=BB75_210 Depth=2
.LBB75_220:                             # %cond.end588
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB75_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_210
.LBB75_222:                             # %for.end602
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB75_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_199
.LBB75_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB75_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB75_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB75_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB75_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_225
.LBB75_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_231
.LBB75_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB75_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB75_237
.LBB75_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_236
.LBB75_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB75_236:                             # %cond.end650
.LBB75_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB75_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_241
.LBB75_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB75_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB75_247
.LBB75_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_246
.LBB75_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_246:                             # %cond.end687
.LBB75_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB75_258
.LBB75_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_251
.LBB75_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB75_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB75_257
.LBB75_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB75_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_256
.LBB75_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB75_256:                             # %cond.end724
.LBB75_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB75_258:                             # %if.end730
	jmp	.LBB75_328
.LBB75_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB75_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB75_262
.LBB75_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB75_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB75_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB75_265
.LBB75_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB75_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB75_271
.LBB75_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB75_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB75_270
.LBB75_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB75_270:                             # %cond.end753
.LBB75_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB75_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB75_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_276
.LBB75_275:                             # %cond.false765
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_276:                             # %cond.end767
                                        #   in Loop: Header=BB75_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB75_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_282
.LBB75_278:                             # %cond.false772
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB75_281
.LBB75_280:                             # %cond.false777
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB75_281:                             # %cond.end779
                                        #   in Loop: Header=BB75_272 Depth=1
.LBB75_282:                             # %cond.end781
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB75_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_272
.LBB75_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_287
.LBB75_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB75_293
.LBB75_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_292
.LBB75_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_292:                             # %cond.end822
.LBB75_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB75_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB75_296
.LBB75_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB75_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB75_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB75_299
.LBB75_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB75_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB75_305
.LBB75_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB75_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB75_304
.LBB75_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB75_304:                             # %cond.end847
.LBB75_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB75_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB75_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_310
.LBB75_309:                             # %cond.false859
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_310:                             # %cond.end861
                                        #   in Loop: Header=BB75_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB75_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB75_316
.LBB75_312:                             # %cond.false866
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB75_315
.LBB75_314:                             # %cond.false871
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB75_315:                             # %cond.end873
                                        #   in Loop: Header=BB75_306 Depth=1
.LBB75_316:                             # %cond.end875
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB75_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_306
.LBB75_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_321
.LBB75_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB75_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB75_327
.LBB75_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB75_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB75_326
.LBB75_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB75_326:                             # %cond.end916
.LBB75_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB75_328:                             # %if.end922
	jmp	.LBB75_329
.LBB75_329:                             # %if.end923
	jmp	.LBB75_330
.LBB75_330:                             # %if.end924
	jmp	.LBB75_331
.LBB75_331:                             # %if.end925
	jmp	.LBB75_332
.LBB75_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1754343249, -100(%rbp) # imm = 0x68912751
	jne	.LBB75_334
.LBB75_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_333
.Lfunc_end75:
	.size	Get_Reference_Pixel.65, .Lfunc_end75-Get_Reference_Pixel.65
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.66  # -- Begin function Get_Reference_Pixel.66
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.66,@function
Get_Reference_Pixel.66:                 # @Get_Reference_Pixel.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$540307333, -104(%rbp)  # imm = 0x20346F85
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB76_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB76_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB76_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB76_5
.LBB76_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB76_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB76_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB76_11
.LBB76_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB76_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB76_10
.LBB76_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB76_10:                              # %cond.end14
.LBB76_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB76_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB76_14
.LBB76_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB76_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB76_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB76_20
.LBB76_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB76_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB76_19
.LBB76_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB76_19:                              # %cond.end29
.LBB76_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_332
.LBB76_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB76_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB76_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB76_25
.LBB76_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB76_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB76_31
.LBB76_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB76_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB76_30
.LBB76_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB76_30:                              # %cond.end52
.LBB76_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB76_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB76_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_36
.LBB76_35:                              # %cond.false61
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_36:                              # %cond.end63
                                        #   in Loop: Header=BB76_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB76_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_42
.LBB76_38:                              # %cond.false68
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_41
.LBB76_40:                              # %cond.false73
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_41:                              # %cond.end75
                                        #   in Loop: Header=BB76_32 Depth=1
.LBB76_42:                              # %cond.end77
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_32
.LBB76_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_47
.LBB76_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB76_53
.LBB76_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_52
.LBB76_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_52:                              # %cond.end113
.LBB76_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB76_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB76_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB76_57
.LBB76_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB76_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB76_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB76_63
.LBB76_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB76_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB76_62
.LBB76_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB76_62:                              # %cond.end136
.LBB76_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB76_76
.LBB76_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB76_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB76_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB76_68
.LBB76_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB76_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB76_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB76_74
.LBB76_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB76_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB76_73
.LBB76_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB76_73:                              # %cond.end169
.LBB76_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB76_75:                              # %if.end
	jmp	.LBB76_76
.LBB76_76:                              # %if.end178
	jmp	.LBB76_331
.LBB76_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB76_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB76_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB76_81
.LBB76_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB76_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB76_87
.LBB76_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB76_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB76_86
.LBB76_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB76_86:                              # %cond.end197
.LBB76_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB76_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB76_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_92
.LBB76_91:                              # %cond.false209
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_92:                              # %cond.end211
                                        #   in Loop: Header=BB76_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB76_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_98
.LBB76_94:                              # %cond.false216
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_97
.LBB76_96:                              # %cond.false221
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_97:                              # %cond.end223
                                        #   in Loop: Header=BB76_88 Depth=1
.LBB76_98:                              # %cond.end225
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_88
.LBB76_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_103
.LBB76_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB76_109
.LBB76_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_108
.LBB76_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_108:                             # %cond.end266
.LBB76_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB76_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB76_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB76_113
.LBB76_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB76_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB76_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB76_119
.LBB76_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB76_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB76_118
.LBB76_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB76_118:                             # %cond.end287
.LBB76_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB76_132
.LBB76_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB76_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB76_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB76_124
.LBB76_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB76_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB76_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB76_130
.LBB76_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB76_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB76_129
.LBB76_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB76_129:                             # %cond.end320
.LBB76_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB76_131:                             # %if.end331
	jmp	.LBB76_132
.LBB76_132:                             # %if.end332
	jmp	.LBB76_330
.LBB76_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB76_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB76_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB76_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_139
.LBB76_138:                             # %cond.false345
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_139:                             # %cond.end347
                                        #   in Loop: Header=BB76_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB76_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_145
.LBB76_141:                             # %cond.false352
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_144
.LBB76_143:                             # %cond.false357
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_144:                             # %cond.end359
                                        #   in Loop: Header=BB76_135 Depth=1
.LBB76_145:                             # %cond.end361
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB76_146:                             # %for.cond363
                                        #   Parent Loop BB76_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB76_150
.LBB76_149:                             # %cond.false371
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_150:                             # %cond.end373
                                        #   in Loop: Header=BB76_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB76_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_156
.LBB76_152:                             # %cond.false378
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB76_155
.LBB76_154:                             # %cond.false383
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_155:                             # %cond.end385
                                        #   in Loop: Header=BB76_146 Depth=2
.LBB76_156:                             # %cond.end387
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_146
.LBB76_158:                             # %for.end401
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_135
.LBB76_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB76_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB76_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB76_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB76_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_161
.LBB76_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_167
.LBB76_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB76_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB76_173
.LBB76_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_172
.LBB76_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB76_172:                             # %cond.end449
.LBB76_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB76_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_177
.LBB76_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB76_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB76_183
.LBB76_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_182
.LBB76_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_182:                             # %cond.end486
.LBB76_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB76_196
.LBB76_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB76_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_188
.LBB76_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB76_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB76_194
.LBB76_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_193
.LBB76_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_193:                             # %cond.end526
.LBB76_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB76_195:                             # %if.end532
	jmp	.LBB76_196
.LBB76_196:                             # %if.end533
	jmp	.LBB76_329
.LBB76_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB76_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB76_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_203
.LBB76_202:                             # %cond.false546
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_203:                             # %cond.end548
                                        #   in Loop: Header=BB76_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB76_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_209
.LBB76_205:                             # %cond.false553
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_208
.LBB76_207:                             # %cond.false558
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_208:                             # %cond.end560
                                        #   in Loop: Header=BB76_199 Depth=1
.LBB76_209:                             # %cond.end562
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB76_210:                             # %for.cond564
                                        #   Parent Loop BB76_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB76_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB76_214
.LBB76_213:                             # %cond.false572
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_214:                             # %cond.end574
                                        #   in Loop: Header=BB76_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB76_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_220
.LBB76_216:                             # %cond.false579
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB76_219
.LBB76_218:                             # %cond.false584
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_219:                             # %cond.end586
                                        #   in Loop: Header=BB76_210 Depth=2
.LBB76_220:                             # %cond.end588
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_210
.LBB76_222:                             # %for.end602
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_199
.LBB76_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB76_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB76_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB76_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB76_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_225
.LBB76_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_231
.LBB76_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB76_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB76_237
.LBB76_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_236
.LBB76_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB76_236:                             # %cond.end650
.LBB76_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB76_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_241
.LBB76_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB76_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB76_247
.LBB76_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_246
.LBB76_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_246:                             # %cond.end687
.LBB76_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB76_258
.LBB76_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_251
.LBB76_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB76_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB76_257
.LBB76_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_256
.LBB76_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_256:                             # %cond.end724
.LBB76_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB76_258:                             # %if.end730
	jmp	.LBB76_328
.LBB76_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB76_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB76_262
.LBB76_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB76_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB76_265
.LBB76_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB76_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB76_271
.LBB76_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB76_270
.LBB76_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB76_270:                             # %cond.end753
.LBB76_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB76_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB76_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_276
.LBB76_275:                             # %cond.false765
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_276:                             # %cond.end767
                                        #   in Loop: Header=BB76_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB76_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_282
.LBB76_278:                             # %cond.false772
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_281
.LBB76_280:                             # %cond.false777
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_281:                             # %cond.end779
                                        #   in Loop: Header=BB76_272 Depth=1
.LBB76_282:                             # %cond.end781
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_272
.LBB76_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_287
.LBB76_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB76_293
.LBB76_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_292
.LBB76_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_292:                             # %cond.end822
.LBB76_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB76_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB76_296
.LBB76_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB76_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB76_299
.LBB76_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB76_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB76_305
.LBB76_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB76_304
.LBB76_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB76_304:                             # %cond.end847
.LBB76_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB76_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB76_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_310
.LBB76_309:                             # %cond.false859
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_310:                             # %cond.end861
                                        #   in Loop: Header=BB76_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB76_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_316
.LBB76_312:                             # %cond.false866
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_315
.LBB76_314:                             # %cond.false871
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_315:                             # %cond.end873
                                        #   in Loop: Header=BB76_306 Depth=1
.LBB76_316:                             # %cond.end875
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_306
.LBB76_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_321
.LBB76_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB76_327
.LBB76_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_326
.LBB76_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_326:                             # %cond.end916
.LBB76_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB76_328:                             # %if.end922
	jmp	.LBB76_329
.LBB76_329:                             # %if.end923
	jmp	.LBB76_330
.LBB76_330:                             # %if.end924
	jmp	.LBB76_331
.LBB76_331:                             # %if.end925
	jmp	.LBB76_332
.LBB76_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$540307333, -104(%rbp)  # imm = 0x20346F85
	jne	.LBB76_334
.LBB76_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_333
.Lfunc_end76:
	.size	Get_Reference_Pixel.66, .Lfunc_end76-Get_Reference_Pixel.66
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.67
.LCPI77_0:
	.quad	4636737291354636288     # double 100
.LCPI77_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.67
	.p2align	4, 0x90
	.type	Build_Status_Map.67,@function
Build_Status_Map.67:                    # @Build_Status_Map.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$429762308, -44(%rbp)   # imm = 0x199DA704
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB77_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -12(%rbp)
.LBB77_3:                               # %for.cond2
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB77_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB77_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB77_13
.LBB77_6:                               # %if.then
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI77_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB77_8:                               # %if.end
                                        #   in Loop: Header=BB77_3 Depth=2
	callq	rand
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI77_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB77_10:                              # %if.end20
                                        #   in Loop: Header=BB77_3 Depth=2
	callq	rand
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI77_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	$1, -4(%rbp)
.LBB77_12:                              # %if.end29
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB77_13:                              # %if.end30
                                        #   in Loop: Header=BB77_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB77_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB77_18
.LBB77_15:                              # %if.else
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB77_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB77_17:                              # %if.end49
                                        #   in Loop: Header=BB77_3 Depth=2
	jmp	.LBB77_18
.LBB77_18:                              # %if.end50
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_3
.LBB77_20:                              # %for.end
                                        #   in Loop: Header=BB77_1 Depth=1
	jmp	.LBB77_21
.LBB77_21:                              # %for.inc53
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_1
.LBB77_22:                              # %for.end55
	cmpl	$429762308, -44(%rbp)   # imm = 0x199DA704
	jne	.LBB77_24
.LBB77_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_23
.Lfunc_end77:
	.size	Build_Status_Map.67, .Lfunc_end77-Build_Status_Map.67
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.68  # -- Begin function Get_Reference_Pixel.68
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.68,@function
Get_Reference_Pixel.68:                 # @Get_Reference_Pixel.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$338498703, -108(%rbp)  # imm = 0x142D148F
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB78_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB78_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB78_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB78_5
.LBB78_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB78_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB78_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB78_11
.LBB78_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB78_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB78_10
.LBB78_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB78_10:                              # %cond.end14
.LBB78_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB78_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB78_14
.LBB78_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB78_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB78_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB78_20
.LBB78_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB78_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB78_19
.LBB78_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB78_19:                              # %cond.end29
.LBB78_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_332
.LBB78_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB78_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB78_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB78_25
.LBB78_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB78_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB78_31
.LBB78_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB78_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB78_30
.LBB78_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB78_30:                              # %cond.end52
.LBB78_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB78_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB78_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_36
.LBB78_35:                              # %cond.false61
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_36:                              # %cond.end63
                                        #   in Loop: Header=BB78_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB78_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_42
.LBB78_38:                              # %cond.false68
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_41
.LBB78_40:                              # %cond.false73
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_41:                              # %cond.end75
                                        #   in Loop: Header=BB78_32 Depth=1
.LBB78_42:                              # %cond.end77
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_32
.LBB78_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_47
.LBB78_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB78_53
.LBB78_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_52
.LBB78_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_52:                              # %cond.end113
.LBB78_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB78_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB78_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB78_57
.LBB78_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB78_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB78_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB78_63
.LBB78_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB78_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB78_62
.LBB78_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB78_62:                              # %cond.end136
.LBB78_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB78_76
.LBB78_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB78_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB78_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB78_68
.LBB78_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB78_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB78_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB78_74
.LBB78_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB78_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB78_73
.LBB78_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB78_73:                              # %cond.end169
.LBB78_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB78_75:                              # %if.end
	jmp	.LBB78_76
.LBB78_76:                              # %if.end178
	jmp	.LBB78_331
.LBB78_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB78_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB78_81
.LBB78_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB78_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB78_87
.LBB78_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB78_86
.LBB78_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB78_86:                              # %cond.end197
.LBB78_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB78_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB78_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_92
.LBB78_91:                              # %cond.false209
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_92:                              # %cond.end211
                                        #   in Loop: Header=BB78_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB78_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_98
.LBB78_94:                              # %cond.false216
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_97
.LBB78_96:                              # %cond.false221
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_97:                              # %cond.end223
                                        #   in Loop: Header=BB78_88 Depth=1
.LBB78_98:                              # %cond.end225
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_88
.LBB78_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_103
.LBB78_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB78_109
.LBB78_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_108
.LBB78_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_108:                             # %cond.end266
.LBB78_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB78_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB78_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB78_113
.LBB78_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB78_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB78_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB78_119
.LBB78_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB78_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB78_118
.LBB78_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB78_118:                             # %cond.end287
.LBB78_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB78_132
.LBB78_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB78_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB78_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB78_124
.LBB78_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB78_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB78_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB78_130
.LBB78_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB78_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB78_129
.LBB78_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB78_129:                             # %cond.end320
.LBB78_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB78_131:                             # %if.end331
	jmp	.LBB78_132
.LBB78_132:                             # %if.end332
	jmp	.LBB78_330
.LBB78_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB78_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB78_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB78_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_139
.LBB78_138:                             # %cond.false345
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_139:                             # %cond.end347
                                        #   in Loop: Header=BB78_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB78_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_145
.LBB78_141:                             # %cond.false352
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_144
.LBB78_143:                             # %cond.false357
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_144:                             # %cond.end359
                                        #   in Loop: Header=BB78_135 Depth=1
.LBB78_145:                             # %cond.end361
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB78_146:                             # %for.cond363
                                        #   Parent Loop BB78_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB78_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB78_150
.LBB78_149:                             # %cond.false371
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_150:                             # %cond.end373
                                        #   in Loop: Header=BB78_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB78_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB78_156
.LBB78_152:                             # %cond.false378
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB78_155
.LBB78_154:                             # %cond.false383
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_155:                             # %cond.end385
                                        #   in Loop: Header=BB78_146 Depth=2
.LBB78_156:                             # %cond.end387
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_146
.LBB78_158:                             # %for.end401
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_135
.LBB78_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB78_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB78_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB78_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB78_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_161
.LBB78_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_167
.LBB78_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB78_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB78_173
.LBB78_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_172
.LBB78_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB78_172:                             # %cond.end449
.LBB78_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB78_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_177
.LBB78_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB78_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB78_183
.LBB78_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_182
.LBB78_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_182:                             # %cond.end486
.LBB78_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB78_196
.LBB78_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB78_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_188
.LBB78_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB78_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB78_194
.LBB78_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_193
.LBB78_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_193:                             # %cond.end526
.LBB78_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB78_195:                             # %if.end532
	jmp	.LBB78_196
.LBB78_196:                             # %if.end533
	jmp	.LBB78_329
.LBB78_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB78_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB78_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB78_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_203
.LBB78_202:                             # %cond.false546
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_203:                             # %cond.end548
                                        #   in Loop: Header=BB78_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB78_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_209
.LBB78_205:                             # %cond.false553
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_208
.LBB78_207:                             # %cond.false558
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_208:                             # %cond.end560
                                        #   in Loop: Header=BB78_199 Depth=1
.LBB78_209:                             # %cond.end562
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB78_210:                             # %for.cond564
                                        #   Parent Loop BB78_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB78_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB78_214
.LBB78_213:                             # %cond.false572
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_214:                             # %cond.end574
                                        #   in Loop: Header=BB78_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB78_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB78_220
.LBB78_216:                             # %cond.false579
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB78_219
.LBB78_218:                             # %cond.false584
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_219:                             # %cond.end586
                                        #   in Loop: Header=BB78_210 Depth=2
.LBB78_220:                             # %cond.end588
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_210
.LBB78_222:                             # %for.end602
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_199
.LBB78_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB78_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB78_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB78_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB78_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_225
.LBB78_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_231
.LBB78_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB78_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB78_237
.LBB78_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_236
.LBB78_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB78_236:                             # %cond.end650
.LBB78_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB78_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_241
.LBB78_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB78_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB78_247
.LBB78_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_246
.LBB78_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_246:                             # %cond.end687
.LBB78_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB78_258
.LBB78_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_251
.LBB78_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB78_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB78_257
.LBB78_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_256
.LBB78_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_256:                             # %cond.end724
.LBB78_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB78_258:                             # %if.end730
	jmp	.LBB78_328
.LBB78_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB78_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB78_262
.LBB78_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB78_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB78_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB78_265
.LBB78_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB78_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB78_271
.LBB78_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB78_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB78_270
.LBB78_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB78_270:                             # %cond.end753
.LBB78_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB78_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB78_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_276
.LBB78_275:                             # %cond.false765
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_276:                             # %cond.end767
                                        #   in Loop: Header=BB78_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB78_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_282
.LBB78_278:                             # %cond.false772
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_281
.LBB78_280:                             # %cond.false777
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_281:                             # %cond.end779
                                        #   in Loop: Header=BB78_272 Depth=1
.LBB78_282:                             # %cond.end781
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_272
.LBB78_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_287
.LBB78_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB78_293
.LBB78_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_292
.LBB78_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_292:                             # %cond.end822
.LBB78_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB78_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB78_296
.LBB78_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB78_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB78_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB78_299
.LBB78_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB78_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB78_305
.LBB78_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB78_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB78_304
.LBB78_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB78_304:                             # %cond.end847
.LBB78_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB78_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB78_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_310
.LBB78_309:                             # %cond.false859
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_310:                             # %cond.end861
                                        #   in Loop: Header=BB78_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB78_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_316
.LBB78_312:                             # %cond.false866
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_315
.LBB78_314:                             # %cond.false871
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_315:                             # %cond.end873
                                        #   in Loop: Header=BB78_306 Depth=1
.LBB78_316:                             # %cond.end875
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_306
.LBB78_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_321
.LBB78_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB78_327
.LBB78_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_326
.LBB78_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_326:                             # %cond.end916
.LBB78_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB78_328:                             # %if.end922
	jmp	.LBB78_329
.LBB78_329:                             # %if.end923
	jmp	.LBB78_330
.LBB78_330:                             # %if.end924
	jmp	.LBB78_331
.LBB78_331:                             # %if.end925
	jmp	.LBB78_332
.LBB78_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$338498703, -108(%rbp)  # imm = 0x142D148F
	jne	.LBB78_334
.LBB78_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_333
.Lfunc_end78:
	.size	Get_Reference_Pixel.68, .Lfunc_end78-Get_Reference_Pixel.68
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.69  # -- Begin function Get_Reference_Pixel.69
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.69,@function
Get_Reference_Pixel.69:                 # @Get_Reference_Pixel.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$459133362, -100(%rbp)  # imm = 0x1B5DD1B2
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB79_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB79_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB79_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB79_5
.LBB79_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB79_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB79_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB79_11
.LBB79_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB79_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB79_10
.LBB79_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB79_10:                              # %cond.end14
.LBB79_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB79_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB79_14
.LBB79_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB79_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB79_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB79_20
.LBB79_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB79_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB79_19
.LBB79_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB79_19:                              # %cond.end29
.LBB79_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_332
.LBB79_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB79_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB79_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB79_25
.LBB79_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB79_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB79_31
.LBB79_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB79_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB79_30
.LBB79_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB79_30:                              # %cond.end52
.LBB79_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB79_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB79_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_36
.LBB79_35:                              # %cond.false61
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_36:                              # %cond.end63
                                        #   in Loop: Header=BB79_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB79_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_42
.LBB79_38:                              # %cond.false68
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_41
.LBB79_40:                              # %cond.false73
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_41:                              # %cond.end75
                                        #   in Loop: Header=BB79_32 Depth=1
.LBB79_42:                              # %cond.end77
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB79_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_32
.LBB79_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_47
.LBB79_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB79_53
.LBB79_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_52
.LBB79_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_52:                              # %cond.end113
.LBB79_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB79_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB79_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB79_57
.LBB79_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB79_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB79_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB79_63
.LBB79_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB79_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB79_62
.LBB79_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB79_62:                              # %cond.end136
.LBB79_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB79_76
.LBB79_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB79_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB79_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB79_68
.LBB79_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB79_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB79_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB79_74
.LBB79_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB79_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB79_73
.LBB79_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB79_73:                              # %cond.end169
.LBB79_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB79_75:                              # %if.end
	jmp	.LBB79_76
.LBB79_76:                              # %if.end178
	jmp	.LBB79_331
.LBB79_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB79_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB79_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB79_81
.LBB79_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB79_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB79_87
.LBB79_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB79_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB79_86
.LBB79_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB79_86:                              # %cond.end197
.LBB79_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB79_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB79_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_92
.LBB79_91:                              # %cond.false209
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_92:                              # %cond.end211
                                        #   in Loop: Header=BB79_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB79_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_98
.LBB79_94:                              # %cond.false216
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_97
.LBB79_96:                              # %cond.false221
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_97:                              # %cond.end223
                                        #   in Loop: Header=BB79_88 Depth=1
.LBB79_98:                              # %cond.end225
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB79_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_88
.LBB79_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_103
.LBB79_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB79_109
.LBB79_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_108
.LBB79_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_108:                             # %cond.end266
.LBB79_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB79_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB79_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB79_113
.LBB79_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB79_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB79_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB79_119
.LBB79_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB79_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB79_118
.LBB79_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB79_118:                             # %cond.end287
.LBB79_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB79_132
.LBB79_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB79_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB79_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB79_124
.LBB79_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB79_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB79_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB79_130
.LBB79_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB79_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB79_129
.LBB79_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB79_129:                             # %cond.end320
.LBB79_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB79_131:                             # %if.end331
	jmp	.LBB79_132
.LBB79_132:                             # %if.end332
	jmp	.LBB79_330
.LBB79_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB79_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB79_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB79_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_139
.LBB79_138:                             # %cond.false345
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_139:                             # %cond.end347
                                        #   in Loop: Header=BB79_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB79_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_145
.LBB79_141:                             # %cond.false352
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_144
.LBB79_143:                             # %cond.false357
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_144:                             # %cond.end359
                                        #   in Loop: Header=BB79_135 Depth=1
.LBB79_145:                             # %cond.end361
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB79_146:                             # %for.cond363
                                        #   Parent Loop BB79_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB79_150
.LBB79_149:                             # %cond.false371
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_150:                             # %cond.end373
                                        #   in Loop: Header=BB79_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB79_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB79_156
.LBB79_152:                             # %cond.false378
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB79_155
.LBB79_154:                             # %cond.false383
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_155:                             # %cond.end385
                                        #   in Loop: Header=BB79_146 Depth=2
.LBB79_156:                             # %cond.end387
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB79_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_146
.LBB79_158:                             # %for.end401
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB79_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_135
.LBB79_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB79_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB79_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB79_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB79_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_161
.LBB79_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_167
.LBB79_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB79_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB79_173
.LBB79_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_172
.LBB79_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB79_172:                             # %cond.end449
.LBB79_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB79_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_177
.LBB79_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB79_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB79_183
.LBB79_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_182
.LBB79_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_182:                             # %cond.end486
.LBB79_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB79_196
.LBB79_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB79_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_188
.LBB79_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB79_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB79_194
.LBB79_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_193
.LBB79_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_193:                             # %cond.end526
.LBB79_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB79_195:                             # %if.end532
	jmp	.LBB79_196
.LBB79_196:                             # %if.end533
	jmp	.LBB79_329
.LBB79_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB79_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB79_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB79_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_203
.LBB79_202:                             # %cond.false546
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_203:                             # %cond.end548
                                        #   in Loop: Header=BB79_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB79_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_209
.LBB79_205:                             # %cond.false553
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_208
.LBB79_207:                             # %cond.false558
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_208:                             # %cond.end560
                                        #   in Loop: Header=BB79_199 Depth=1
.LBB79_209:                             # %cond.end562
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB79_210:                             # %for.cond564
                                        #   Parent Loop BB79_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB79_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB79_214
.LBB79_213:                             # %cond.false572
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_214:                             # %cond.end574
                                        #   in Loop: Header=BB79_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB79_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB79_220
.LBB79_216:                             # %cond.false579
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB79_219
.LBB79_218:                             # %cond.false584
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_219:                             # %cond.end586
                                        #   in Loop: Header=BB79_210 Depth=2
.LBB79_220:                             # %cond.end588
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB79_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_210
.LBB79_222:                             # %for.end602
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB79_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_199
.LBB79_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB79_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB79_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB79_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB79_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_225
.LBB79_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_231
.LBB79_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB79_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB79_237
.LBB79_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_236
.LBB79_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB79_236:                             # %cond.end650
.LBB79_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB79_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_241
.LBB79_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB79_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB79_247
.LBB79_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_246
.LBB79_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_246:                             # %cond.end687
.LBB79_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB79_258
.LBB79_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_251
.LBB79_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB79_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB79_257
.LBB79_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB79_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_256
.LBB79_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB79_256:                             # %cond.end724
.LBB79_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB79_258:                             # %if.end730
	jmp	.LBB79_328
.LBB79_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB79_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB79_262
.LBB79_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB79_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB79_265
.LBB79_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB79_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB79_271
.LBB79_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB79_270
.LBB79_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB79_270:                             # %cond.end753
.LBB79_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB79_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB79_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_276
.LBB79_275:                             # %cond.false765
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_276:                             # %cond.end767
                                        #   in Loop: Header=BB79_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB79_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_282
.LBB79_278:                             # %cond.false772
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB79_281
.LBB79_280:                             # %cond.false777
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB79_281:                             # %cond.end779
                                        #   in Loop: Header=BB79_272 Depth=1
.LBB79_282:                             # %cond.end781
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB79_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_272
.LBB79_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_287
.LBB79_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB79_293
.LBB79_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_292
.LBB79_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_292:                             # %cond.end822
.LBB79_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB79_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB79_296
.LBB79_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB79_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB79_299
.LBB79_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB79_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB79_305
.LBB79_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB79_304
.LBB79_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB79_304:                             # %cond.end847
.LBB79_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB79_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB79_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_310
.LBB79_309:                             # %cond.false859
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_310:                             # %cond.end861
                                        #   in Loop: Header=BB79_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB79_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_316
.LBB79_312:                             # %cond.false866
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB79_315
.LBB79_314:                             # %cond.false871
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB79_315:                             # %cond.end873
                                        #   in Loop: Header=BB79_306 Depth=1
.LBB79_316:                             # %cond.end875
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB79_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_306
.LBB79_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_321
.LBB79_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB79_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB79_327
.LBB79_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB79_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB79_326
.LBB79_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB79_326:                             # %cond.end916
.LBB79_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB79_328:                             # %if.end922
	jmp	.LBB79_329
.LBB79_329:                             # %if.end923
	jmp	.LBB79_330
.LBB79_330:                             # %if.end924
	jmp	.LBB79_331
.LBB79_331:                             # %if.end925
	jmp	.LBB79_332
.LBB79_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$459133362, -100(%rbp)  # imm = 0x1B5DD1B2
	jne	.LBB79_334
.LBB79_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_333
.Lfunc_end79:
	.size	Get_Reference_Pixel.69, .Lfunc_end79-Get_Reference_Pixel.69
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.70        # -- Begin function Conceal_Error.70
	.p2align	4, 0x90
	.type	Conceal_Error.70,@function
Conceal_Error.70:                       # @Conceal_Error.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$2045658924, -68(%rbp)  # imm = 0x79EE472C
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB80_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB80_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB80_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB80_4:                               # %land.end
.LBB80_5:                               # %lor.end
.LBB80_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB80_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB80_9
.LBB80_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB80_14
.LBB80_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB80_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB80_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB80_12:                              # %land.end51
.LBB80_13:                              # %lor.end53
.LBB80_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB80_180
# %bb.15:                               # %land.end54
	movq	.LJTI80_0(,%rax,8), %rax
	jmpq	*%rax
.LBB80_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB80_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB80_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB80_18 Depth=1
	movl	$0, -4(%rbp)
.LBB80_20:                              # %for.cond68
                                        #   Parent Loop BB80_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB80_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB80_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_20
.LBB80_23:                              # %for.end
                                        #   in Loop: Header=BB80_18 Depth=1
	jmp	.LBB80_24
.LBB80_24:                              # %for.inc85
                                        #   in Loop: Header=BB80_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_18
.LBB80_25:                              # %for.end87
	jmp	.LBB80_35
.LBB80_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB80_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB80_27 Depth=1
	movl	$0, -4(%rbp)
.LBB80_29:                              # %for.cond92
                                        #   Parent Loop BB80_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB80_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB80_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_29
.LBB80_32:                              # %for.end104
                                        #   in Loop: Header=BB80_27 Depth=1
	jmp	.LBB80_33
.LBB80_33:                              # %for.inc105
                                        #   in Loop: Header=BB80_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_27
.LBB80_34:                              # %for.end107
	jmp	.LBB80_35
.LBB80_35:                              # %if.end
	jmp	.LBB80_180
.LBB80_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB80_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_39 Depth 2
                                        #       Child Loop BB80_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB80_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB80_37 Depth=1
	movl	$0, -12(%rbp)
.LBB80_39:                              # %for.cond113
                                        #   Parent Loop BB80_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB80_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB80_39 Depth=2
	movl	$0, -4(%rbp)
.LBB80_41:                              # %for.cond117
                                        #   Parent Loop BB80_37 Depth=1
                                        #     Parent Loop BB80_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB80_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB80_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB80_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_41
.LBB80_44:                              # %for.end141
                                        #   in Loop: Header=BB80_39 Depth=2
	jmp	.LBB80_45
.LBB80_45:                              # %for.inc142
                                        #   in Loop: Header=BB80_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_39
.LBB80_46:                              # %for.end144
                                        #   in Loop: Header=BB80_37 Depth=1
	jmp	.LBB80_47
.LBB80_47:                              # %for.inc145
                                        #   in Loop: Header=BB80_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_37
.LBB80_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB80_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB80_49 Depth=1
	movl	$0, -8(%rbp)
.LBB80_51:                              # %for.cond152
                                        #   Parent Loop BB80_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB80_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB80_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_51
.LBB80_54:                              # %for.end162
                                        #   in Loop: Header=BB80_49 Depth=1
	jmp	.LBB80_55
.LBB80_55:                              # %for.inc163
                                        #   in Loop: Header=BB80_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_49
.LBB80_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB80_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB80_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB80_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB80_59 Depth=1
	movl	$0, -4(%rbp)
.LBB80_61:                              # %for.cond175
                                        #   Parent Loop BB80_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB80_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB80_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_61
.LBB80_64:                              # %for.end195
                                        #   in Loop: Header=BB80_59 Depth=1
	jmp	.LBB80_65
.LBB80_65:                              # %for.inc196
                                        #   in Loop: Header=BB80_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_59
.LBB80_66:                              # %for.end198
	jmp	.LBB80_95
.LBB80_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB80_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB80_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_71 Depth 2
                                        #       Child Loop BB80_73 Depth 3
                                        #         Child Loop BB80_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB80_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB80_71:                              # %for.cond210
                                        #   Parent Loop BB80_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_73 Depth 3
                                        #         Child Loop BB80_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB80_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB80_73:                              # %for.cond236
                                        #   Parent Loop BB80_69 Depth=1
                                        #     Parent Loop BB80_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB80_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB80_73 Depth=3
	movl	$0, -4(%rbp)
.LBB80_75:                              # %for.cond240
                                        #   Parent Loop BB80_69 Depth=1
                                        #     Parent Loop BB80_71 Depth=2
                                        #       Parent Loop BB80_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB80_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB80_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB80_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_75
.LBB80_78:                              # %for.end259
                                        #   in Loop: Header=BB80_73 Depth=3
	jmp	.LBB80_79
.LBB80_79:                              # %for.inc260
                                        #   in Loop: Header=BB80_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_73
.LBB80_80:                              # %for.end262
                                        #   in Loop: Header=BB80_71 Depth=2
	jmp	.LBB80_81
.LBB80_81:                              # %for.inc263
                                        #   in Loop: Header=BB80_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_71
.LBB80_82:                              # %for.end265
                                        #   in Loop: Header=BB80_69 Depth=1
	jmp	.LBB80_83
.LBB80_83:                              # %for.inc266
                                        #   in Loop: Header=BB80_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_69
.LBB80_84:                              # %for.end268
	jmp	.LBB80_94
.LBB80_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB80_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB80_86 Depth=1
	movl	$0, -4(%rbp)
.LBB80_88:                              # %for.cond274
                                        #   Parent Loop BB80_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB80_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB80_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_88
.LBB80_91:                              # %for.end294
                                        #   in Loop: Header=BB80_86 Depth=1
	jmp	.LBB80_92
.LBB80_92:                              # %for.inc295
                                        #   in Loop: Header=BB80_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_86
.LBB80_93:                              # %for.end297
	jmp	.LBB80_94
.LBB80_94:                              # %if.end298
	jmp	.LBB80_95
.LBB80_95:                              # %if.end299
	jmp	.LBB80_105
.LBB80_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB80_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB80_97 Depth=1
	movl	$0, -4(%rbp)
.LBB80_99:                              # %for.cond305
                                        #   Parent Loop BB80_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB80_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB80_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_99
.LBB80_102:                             # %for.end317
                                        #   in Loop: Header=BB80_97 Depth=1
	jmp	.LBB80_103
.LBB80_103:                             # %for.inc318
                                        #   in Loop: Header=BB80_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_97
.LBB80_104:                             # %for.end320
	jmp	.LBB80_105
.LBB80_105:                             # %if.end321
	jmp	.LBB80_180
.LBB80_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB80_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB80_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_110 Depth 2
                                        #       Child Loop BB80_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB80_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB80_108 Depth=1
	movl	$0, -12(%rbp)
.LBB80_110:                             # %for.cond331
                                        #   Parent Loop BB80_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB80_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB80_110 Depth=2
	movl	$0, -4(%rbp)
.LBB80_112:                             # %for.cond335
                                        #   Parent Loop BB80_108 Depth=1
                                        #     Parent Loop BB80_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB80_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB80_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB80_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_112
.LBB80_115:                             # %for.end359
                                        #   in Loop: Header=BB80_110 Depth=2
	jmp	.LBB80_116
.LBB80_116:                             # %for.inc360
                                        #   in Loop: Header=BB80_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_110
.LBB80_117:                             # %for.end362
                                        #   in Loop: Header=BB80_108 Depth=1
	jmp	.LBB80_118
.LBB80_118:                             # %for.inc363
                                        #   in Loop: Header=BB80_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_108
.LBB80_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB80_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB80_120 Depth=1
	movl	$0, -8(%rbp)
.LBB80_122:                             # %for.cond370
                                        #   Parent Loop BB80_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB80_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB80_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_122
.LBB80_125:                             # %for.end380
                                        #   in Loop: Header=BB80_120 Depth=1
	jmp	.LBB80_126
.LBB80_126:                             # %for.inc381
                                        #   in Loop: Header=BB80_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_120
.LBB80_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB80_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB80_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB80_129 Depth=1
	movl	$0, -4(%rbp)
.LBB80_131:                             # %for.cond390
                                        #   Parent Loop BB80_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB80_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB80_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_131
.LBB80_134:                             # %for.end410
                                        #   in Loop: Header=BB80_129 Depth=1
	jmp	.LBB80_135
.LBB80_135:                             # %for.inc411
                                        #   in Loop: Header=BB80_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_129
.LBB80_136:                             # %for.end413
	jmp	.LBB80_156
.LBB80_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB80_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB80_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_141 Depth 2
                                        #       Child Loop BB80_143 Depth 3
                                        #         Child Loop BB80_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB80_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB80_141:                             # %for.cond425
                                        #   Parent Loop BB80_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_143 Depth 3
                                        #         Child Loop BB80_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB80_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB80_143:                             # %for.cond452
                                        #   Parent Loop BB80_139 Depth=1
                                        #     Parent Loop BB80_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB80_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB80_143 Depth=3
	movl	$0, -4(%rbp)
.LBB80_145:                             # %for.cond456
                                        #   Parent Loop BB80_139 Depth=1
                                        #     Parent Loop BB80_141 Depth=2
                                        #       Parent Loop BB80_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB80_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB80_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB80_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_145
.LBB80_148:                             # %for.end475
                                        #   in Loop: Header=BB80_143 Depth=3
	jmp	.LBB80_149
.LBB80_149:                             # %for.inc476
                                        #   in Loop: Header=BB80_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_143
.LBB80_150:                             # %for.end478
                                        #   in Loop: Header=BB80_141 Depth=2
	jmp	.LBB80_151
.LBB80_151:                             # %for.inc479
                                        #   in Loop: Header=BB80_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_141
.LBB80_152:                             # %for.end481
                                        #   in Loop: Header=BB80_139 Depth=1
	jmp	.LBB80_153
.LBB80_153:                             # %for.inc482
                                        #   in Loop: Header=BB80_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_139
.LBB80_154:                             # %for.end484
	jmp	.LBB80_155
.LBB80_155:                             # %if.end485
	jmp	.LBB80_156
.LBB80_156:                             # %if.end486
	jmp	.LBB80_157
.LBB80_157:                             # %if.end487
	jmp	.LBB80_180
.LBB80_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB80_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB80_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB80_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB80_161 Depth=1
	movl	$0, -4(%rbp)
.LBB80_163:                             # %for.cond499
                                        #   Parent Loop BB80_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB80_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB80_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_163
.LBB80_166:                             # %for.end519
                                        #   in Loop: Header=BB80_161 Depth=1
	jmp	.LBB80_167
.LBB80_167:                             # %for.inc520
                                        #   in Loop: Header=BB80_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_161
.LBB80_168:                             # %for.end522
	jmp	.LBB80_169
.LBB80_169:                             # %if.end523
	jmp	.LBB80_179
.LBB80_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB80_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB80_171 Depth=1
	movl	$0, -4(%rbp)
.LBB80_173:                             # %for.cond529
                                        #   Parent Loop BB80_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB80_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB80_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_173
.LBB80_176:                             # %for.end541
                                        #   in Loop: Header=BB80_171 Depth=1
	jmp	.LBB80_177
.LBB80_177:                             # %for.inc542
                                        #   in Loop: Header=BB80_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_171
.LBB80_178:                             # %for.end544
	jmp	.LBB80_179
.LBB80_179:                             # %if.end545
	jmp	.LBB80_180
.LBB80_180:                             # %sw.epilog
	cmpl	$2045658924, -68(%rbp)  # imm = 0x79EE472C
	jne	.LBB80_182
.LBB80_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_181
.Lfunc_end80:
	.size	Conceal_Error.70, .Lfunc_end80-Conceal_Error.70
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI80_0:
	.quad	.LBB80_16
	.quad	.LBB80_158
	.quad	.LBB80_106
	.quad	.LBB80_180
	.quad	.LBB80_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.71   # -- Begin function decode_one_b8block.71
	.p2align	4, 0x90
	.type	decode_one_b8block.71,@function
decode_one_b8block.71:                  # @decode_one_b8block.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1650765188, -84(%rbp)  # imm = 0x6264AD84
	movl	%edi, -44(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB81_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_4:                               # %for.cond9
                                        #   Parent Loop BB81_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB81_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB81_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB81_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_4
.LBB81_7:                               # %for.end
                                        #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_8
.LBB81_8:                               # %for.inc26
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_2
.LBB81_9:                               # %for.end28
	jmp	.LBB81_96
.LBB81_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB81_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB81_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB81_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB81_31
.LBB81_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB81_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB81_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_17:                              # %for.cond40
                                        #   Parent Loop BB81_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB81_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB81_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB81_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_17
.LBB81_20:                              # %for.end49
                                        #   in Loop: Header=BB81_15 Depth=1
	jmp	.LBB81_21
.LBB81_21:                              # %for.inc50
                                        #   in Loop: Header=BB81_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_15
.LBB81_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB81_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB81_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB81_25:                              # %for.cond56
                                        #   Parent Loop BB81_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB81_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB81_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB81_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_25
.LBB81_28:                              # %for.end71
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_29
.LBB81_29:                              # %for.inc72
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_23
.LBB81_30:                              # %for.end74
	jmp	.LBB81_60
.LBB81_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB81_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB81_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB81_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB81_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB81_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB81_36:                              # %for.cond83
                                        #   Parent Loop BB81_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB81_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB81_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB81_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_36
.LBB81_39:                              # %for.end120
                                        #   in Loop: Header=BB81_34 Depth=1
	jmp	.LBB81_40
.LBB81_40:                              # %for.inc121
                                        #   in Loop: Header=BB81_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_34
.LBB81_41:                              # %for.end123
	jmp	.LBB81_51
.LBB81_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB81_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB81_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB81_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB81_45:                              # %for.cond129
                                        #   Parent Loop BB81_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB81_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB81_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB81_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_45
.LBB81_48:                              # %for.end145
                                        #   in Loop: Header=BB81_43 Depth=1
	jmp	.LBB81_49
.LBB81_49:                              # %for.inc146
                                        #   in Loop: Header=BB81_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_43
.LBB81_50:                              # %for.end148
	jmp	.LBB81_51
.LBB81_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB81_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB81_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_54:                              # %for.cond153
                                        #   Parent Loop BB81_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB81_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB81_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB81_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_54
.LBB81_57:                              # %for.end167
                                        #   in Loop: Header=BB81_52 Depth=1
	jmp	.LBB81_58
.LBB81_58:                              # %for.inc168
                                        #   in Loop: Header=BB81_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_52
.LBB81_59:                              # %for.end170
	jmp	.LBB81_60
.LBB81_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB81_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB81_66
.LBB81_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB81_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB81_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB81_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB81_86
.LBB81_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB81_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_69 Depth 2
                                        #       Child Loop BB81_74 Depth 3
                                        #         Child Loop BB81_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB81_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB81_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB81_69:                              # %for.cond197
                                        #   Parent Loop BB81_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_74 Depth 3
                                        #         Child Loop BB81_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB81_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB81_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB81_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB81_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB81_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB81_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB81_73:                              # %if.end218
                                        #   in Loop: Header=BB81_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB81_74:                              # %for.cond233
                                        #   Parent Loop BB81_67 Depth=1
                                        #     Parent Loop BB81_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB81_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB81_74 Depth=3
	movl	$0, -4(%rbp)
.LBB81_76:                              # %for.cond237
                                        #   Parent Loop BB81_67 Depth=1
                                        #     Parent Loop BB81_69 Depth=2
                                        #       Parent Loop BB81_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB81_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB81_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB81_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_76
.LBB81_79:                              # %for.end269
                                        #   in Loop: Header=BB81_74 Depth=3
	jmp	.LBB81_80
.LBB81_80:                              # %for.inc270
                                        #   in Loop: Header=BB81_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_74
.LBB81_81:                              # %for.end272
                                        #   in Loop: Header=BB81_69 Depth=2
	jmp	.LBB81_82
.LBB81_82:                              # %for.inc273
                                        #   in Loop: Header=BB81_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_69
.LBB81_83:                              # %for.end275
                                        #   in Loop: Header=BB81_67 Depth=1
	jmp	.LBB81_84
.LBB81_84:                              # %for.inc276
                                        #   in Loop: Header=BB81_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_67
.LBB81_85:                              # %for.end278
	jmp	.LBB81_95
.LBB81_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB81_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB81_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_89:                              # %for.cond284
                                        #   Parent Loop BB81_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB81_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB81_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB81_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_89
.LBB81_92:                              # %for.end310
                                        #   in Loop: Header=BB81_87 Depth=1
	jmp	.LBB81_93
.LBB81_93:                              # %for.inc311
                                        #   in Loop: Header=BB81_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_87
.LBB81_94:                              # %for.end313
	jmp	.LBB81_95
.LBB81_95:                              # %if.end314
	jmp	.LBB81_96
.LBB81_96:                              # %if.end315
	cmpl	$1650765188, -84(%rbp)  # imm = 0x6264AD84
	jne	.LBB81_98
.LBB81_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_97
.Lfunc_end81:
	.size	decode_one_b8block.71, .Lfunc_end81-decode_one_b8block.71
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.72    # -- Begin function Error_Concealment.72
	.p2align	4, 0x90
	.type	Error_Concealment.72,@function
Error_Concealment.72:                   # @Error_Concealment.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$453694469, -12(%rbp)   # imm = 0x1B0AD405
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB82_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB82_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	$0, -4(%rbp)
.LBB82_3:                               # %for.cond2
                                        #   Parent Loop BB82_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB82_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB82_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB82_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB82_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB82_6:                               # %if.end
                                        #   in Loop: Header=BB82_3 Depth=2
	jmp	.LBB82_7
.LBB82_7:                               # %for.inc
                                        #   in Loop: Header=BB82_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_3
.LBB82_8:                               # %for.end
                                        #   in Loop: Header=BB82_1 Depth=1
	jmp	.LBB82_9
.LBB82_9:                               # %for.inc7
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_1
.LBB82_10:                              # %for.end9
	cmpl	$453694469, -12(%rbp)   # imm = 0x1B0AD405
	jne	.LBB82_12
.LBB82_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_11
.Lfunc_end82:
	.size	Error_Concealment.72, .Lfunc_end82-Error_Concealment.72
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.73    # -- Begin function Error_Concealment.73
	.p2align	4, 0x90
	.type	Error_Concealment.73,@function
Error_Concealment.73:                   # @Error_Concealment.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1815655895, -16(%rbp)  # imm = 0x6C38B5D7
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB83_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_3:                               # %for.cond2
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB83_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB83_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB83_6:                               # %if.end
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_7
.LBB83_7:                               # %for.inc
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_3
.LBB83_8:                               # %for.end
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_9
.LBB83_9:                               # %for.inc7
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_1
.LBB83_10:                              # %for.end9
	cmpl	$1815655895, -16(%rbp)  # imm = 0x6C38B5D7
	jne	.LBB83_12
.LBB83_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_11
.Lfunc_end83:
	.size	Error_Concealment.73, .Lfunc_end83-Error_Concealment.73
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.74  # -- Begin function Get_Reference_Block.74
	.p2align	4, 0x90
	.type	Get_Reference_Block.74,@function
Get_Reference_Block.74:                 # @Get_Reference_Block.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1604015512, -32(%rbp)  # imm = 0x5F9B5598
	movq	%rdi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	$0, -8(%rbp)
.LBB84_3:                               # %for.cond5
                                        #   Parent Loop BB84_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB84_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_3
.LBB84_6:                               # %for.end
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_7
.LBB84_7:                               # %for.inc14
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_1
.LBB84_8:                               # %for.end16
	cmpl	$1604015512, -32(%rbp)  # imm = 0x5F9B5598
	jne	.LBB84_10
.LBB84_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_9
.Lfunc_end84:
	.size	Get_Reference_Block.74, .Lfunc_end84-Get_Reference_Block.74
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.75 # -- Begin function compute_residue_b8block.75
	.p2align	4, 0x90
	.type	compute_residue_b8block.75,@function
compute_residue_b8block.75:             # @compute_residue_b8block.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$346347920, -36(%rbp)   # imm = 0x14A4D990
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB85_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB85_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB85_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_4:                               # %for.cond4
                                        #   Parent Loop BB85_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB85_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB85_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB85_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_4
.LBB85_7:                               # %for.end
                                        #   in Loop: Header=BB85_2 Depth=1
	jmp	.LBB85_8
.LBB85_8:                               # %for.inc22
                                        #   in Loop: Header=BB85_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_2
.LBB85_9:                               # %for.end24
	jmp	.LBB85_19
.LBB85_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB85_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB85_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_13:                              # %for.cond29
                                        #   Parent Loop BB85_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB85_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB85_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB85_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_13
.LBB85_16:                              # %for.end56
                                        #   in Loop: Header=BB85_11 Depth=1
	jmp	.LBB85_17
.LBB85_17:                              # %for.inc57
                                        #   in Loop: Header=BB85_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_11
.LBB85_18:                              # %for.end59
	jmp	.LBB85_19
.LBB85_19:                              # %if.end
	cmpl	$346347920, -36(%rbp)   # imm = 0x14A4D990
	jne	.LBB85_21
.LBB85_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_20
.Lfunc_end85:
	.size	compute_residue_b8block.75, .Lfunc_end85-compute_residue_b8block.75
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.76 # -- Begin function compute_residue_b8block.76
	.p2align	4, 0x90
	.type	compute_residue_b8block.76,@function
compute_residue_b8block.76:             # @compute_residue_b8block.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1712109714, -36(%rbp)  # imm = 0x660CB892
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB86_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB86_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB86_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_4:                               # %for.cond4
                                        #   Parent Loop BB86_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB86_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB86_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB86_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_4
.LBB86_7:                               # %for.end
                                        #   in Loop: Header=BB86_2 Depth=1
	jmp	.LBB86_8
.LBB86_8:                               # %for.inc22
                                        #   in Loop: Header=BB86_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_2
.LBB86_9:                               # %for.end24
	jmp	.LBB86_19
.LBB86_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB86_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB86_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_13:                              # %for.cond29
                                        #   Parent Loop BB86_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB86_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB86_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB86_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_13
.LBB86_16:                              # %for.end56
                                        #   in Loop: Header=BB86_11 Depth=1
	jmp	.LBB86_17
.LBB86_17:                              # %for.inc57
                                        #   in Loop: Header=BB86_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_11
.LBB86_18:                              # %for.end59
	jmp	.LBB86_19
.LBB86_19:                              # %if.end
	cmpl	$1712109714, -36(%rbp)  # imm = 0x660CB892
	jne	.LBB86_21
.LBB86_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_20
.Lfunc_end86:
	.size	compute_residue_b8block.76, .Lfunc_end86-compute_residue_b8block.76
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.77  # -- Begin function Get_Reference_Pixel.77
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.77,@function
Get_Reference_Pixel.77:                 # @Get_Reference_Pixel.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1799810580, -104(%rbp) # imm = 0x6B46EE14
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB87_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB87_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB87_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB87_5
.LBB87_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB87_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB87_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB87_11
.LBB87_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB87_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB87_10
.LBB87_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB87_10:                              # %cond.end14
.LBB87_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB87_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB87_14
.LBB87_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB87_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB87_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB87_20
.LBB87_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB87_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB87_19
.LBB87_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB87_19:                              # %cond.end29
.LBB87_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_332
.LBB87_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB87_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB87_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB87_25
.LBB87_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB87_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB87_31
.LBB87_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB87_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB87_30
.LBB87_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB87_30:                              # %cond.end52
.LBB87_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB87_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB87_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB87_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB87_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB87_36
.LBB87_35:                              # %cond.false61
                                        #   in Loop: Header=BB87_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB87_36:                              # %cond.end63
                                        #   in Loop: Header=BB87_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB87_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB87_42
.LBB87_38:                              # %cond.false68
                                        #   in Loop: Header=BB87_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB87_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB87_41
.LBB87_40:                              # %cond.false73
                                        #   in Loop: Header=BB87_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB87_41:                              # %cond.end75
                                        #   in Loop: Header=BB87_32 Depth=1
.LBB87_42:                              # %cond.end77
                                        #   in Loop: Header=BB87_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB87_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_32
.LBB87_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_47
.LBB87_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB87_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB87_53
.LBB87_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_52
.LBB87_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB87_52:                              # %cond.end113
.LBB87_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB87_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB87_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB87_57
.LBB87_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB87_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB87_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB87_63
.LBB87_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB87_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB87_62
.LBB87_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB87_62:                              # %cond.end136
.LBB87_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB87_76
.LBB87_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB87_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB87_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB87_68
.LBB87_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB87_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB87_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB87_74
.LBB87_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB87_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB87_73
.LBB87_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB87_73:                              # %cond.end169
.LBB87_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB87_75:                              # %if.end
	jmp	.LBB87_76
.LBB87_76:                              # %if.end178
	jmp	.LBB87_331
.LBB87_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB87_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB87_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB87_81
.LBB87_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB87_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB87_87
.LBB87_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB87_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB87_86
.LBB87_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB87_86:                              # %cond.end197
.LBB87_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB87_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB87_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB87_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB87_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB87_92
.LBB87_91:                              # %cond.false209
                                        #   in Loop: Header=BB87_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_92:                              # %cond.end211
                                        #   in Loop: Header=BB87_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB87_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB87_98
.LBB87_94:                              # %cond.false216
                                        #   in Loop: Header=BB87_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB87_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB87_97
.LBB87_96:                              # %cond.false221
                                        #   in Loop: Header=BB87_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_97:                              # %cond.end223
                                        #   in Loop: Header=BB87_88 Depth=1
.LBB87_98:                              # %cond.end225
                                        #   in Loop: Header=BB87_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB87_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_88
.LBB87_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_103
.LBB87_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB87_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB87_109
.LBB87_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_108
.LBB87_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB87_108:                             # %cond.end266
.LBB87_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB87_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB87_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB87_113
.LBB87_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB87_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB87_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB87_119
.LBB87_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB87_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB87_118
.LBB87_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB87_118:                             # %cond.end287
.LBB87_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB87_132
.LBB87_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB87_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB87_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB87_124
.LBB87_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB87_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB87_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB87_130
.LBB87_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB87_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB87_129
.LBB87_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB87_129:                             # %cond.end320
.LBB87_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB87_131:                             # %if.end331
	jmp	.LBB87_132
.LBB87_132:                             # %if.end332
	jmp	.LBB87_330
.LBB87_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB87_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB87_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB87_139
.LBB87_138:                             # %cond.false345
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_139:                             # %cond.end347
                                        #   in Loop: Header=BB87_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB87_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB87_145
.LBB87_141:                             # %cond.false352
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB87_144
.LBB87_143:                             # %cond.false357
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_144:                             # %cond.end359
                                        #   in Loop: Header=BB87_135 Depth=1
.LBB87_145:                             # %cond.end361
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB87_146:                             # %for.cond363
                                        #   Parent Loop BB87_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB87_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB87_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB87_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB87_150
.LBB87_149:                             # %cond.false371
                                        #   in Loop: Header=BB87_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB87_150:                             # %cond.end373
                                        #   in Loop: Header=BB87_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB87_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB87_156
.LBB87_152:                             # %cond.false378
                                        #   in Loop: Header=BB87_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB87_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB87_155
.LBB87_154:                             # %cond.false383
                                        #   in Loop: Header=BB87_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB87_155:                             # %cond.end385
                                        #   in Loop: Header=BB87_146 Depth=2
.LBB87_156:                             # %cond.end387
                                        #   in Loop: Header=BB87_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB87_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_146
.LBB87_158:                             # %for.end401
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_135
.LBB87_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB87_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB87_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB87_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB87_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_161
.LBB87_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_167
.LBB87_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB87_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB87_173
.LBB87_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_172
.LBB87_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB87_172:                             # %cond.end449
.LBB87_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB87_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB87_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_177
.LBB87_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB87_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB87_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB87_183
.LBB87_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB87_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_182
.LBB87_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB87_182:                             # %cond.end486
.LBB87_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB87_196
.LBB87_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB87_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB87_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_188
.LBB87_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB87_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB87_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB87_194
.LBB87_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB87_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_193
.LBB87_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB87_193:                             # %cond.end526
.LBB87_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB87_195:                             # %if.end532
	jmp	.LBB87_196
.LBB87_196:                             # %if.end533
	jmp	.LBB87_329
.LBB87_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB87_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB87_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB87_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB87_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB87_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB87_203
.LBB87_202:                             # %cond.false546
                                        #   in Loop: Header=BB87_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB87_203:                             # %cond.end548
                                        #   in Loop: Header=BB87_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB87_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB87_209
.LBB87_205:                             # %cond.false553
                                        #   in Loop: Header=BB87_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB87_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB87_208
.LBB87_207:                             # %cond.false558
                                        #   in Loop: Header=BB87_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB87_208:                             # %cond.end560
                                        #   in Loop: Header=BB87_199 Depth=1
.LBB87_209:                             # %cond.end562
                                        #   in Loop: Header=BB87_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB87_210:                             # %for.cond564
                                        #   Parent Loop BB87_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB87_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB87_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB87_214
.LBB87_213:                             # %cond.false572
                                        #   in Loop: Header=BB87_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_214:                             # %cond.end574
                                        #   in Loop: Header=BB87_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB87_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB87_220
.LBB87_216:                             # %cond.false579
                                        #   in Loop: Header=BB87_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB87_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB87_219
.LBB87_218:                             # %cond.false584
                                        #   in Loop: Header=BB87_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_219:                             # %cond.end586
                                        #   in Loop: Header=BB87_210 Depth=2
.LBB87_220:                             # %cond.end588
                                        #   in Loop: Header=BB87_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB87_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_210
.LBB87_222:                             # %for.end602
                                        #   in Loop: Header=BB87_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB87_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_199
.LBB87_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB87_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB87_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB87_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB87_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_225
.LBB87_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_231
.LBB87_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB87_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB87_237
.LBB87_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_236
.LBB87_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB87_236:                             # %cond.end650
.LBB87_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB87_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB87_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_241
.LBB87_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB87_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB87_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB87_247
.LBB87_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB87_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_246
.LBB87_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB87_246:                             # %cond.end687
.LBB87_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB87_258
.LBB87_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB87_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_251
.LBB87_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB87_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB87_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB87_257
.LBB87_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB87_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_256
.LBB87_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB87_256:                             # %cond.end724
.LBB87_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB87_258:                             # %if.end730
	jmp	.LBB87_328
.LBB87_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB87_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB87_262
.LBB87_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB87_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB87_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB87_265
.LBB87_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB87_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB87_271
.LBB87_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB87_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB87_270
.LBB87_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB87_270:                             # %cond.end753
.LBB87_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB87_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB87_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB87_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB87_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB87_276
.LBB87_275:                             # %cond.false765
                                        #   in Loop: Header=BB87_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB87_276:                             # %cond.end767
                                        #   in Loop: Header=BB87_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB87_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB87_282
.LBB87_278:                             # %cond.false772
                                        #   in Loop: Header=BB87_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB87_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB87_281
.LBB87_280:                             # %cond.false777
                                        #   in Loop: Header=BB87_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB87_281:                             # %cond.end779
                                        #   in Loop: Header=BB87_272 Depth=1
.LBB87_282:                             # %cond.end781
                                        #   in Loop: Header=BB87_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB87_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_272
.LBB87_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_287
.LBB87_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB87_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB87_293
.LBB87_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_292
.LBB87_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB87_292:                             # %cond.end822
.LBB87_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB87_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB87_296
.LBB87_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB87_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB87_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB87_299
.LBB87_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB87_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB87_305
.LBB87_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB87_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB87_304
.LBB87_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB87_304:                             # %cond.end847
.LBB87_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB87_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB87_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB87_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB87_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB87_310
.LBB87_309:                             # %cond.false859
                                        #   in Loop: Header=BB87_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_310:                             # %cond.end861
                                        #   in Loop: Header=BB87_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB87_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB87_316
.LBB87_312:                             # %cond.false866
                                        #   in Loop: Header=BB87_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB87_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB87_315
.LBB87_314:                             # %cond.false871
                                        #   in Loop: Header=BB87_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB87_315:                             # %cond.end873
                                        #   in Loop: Header=BB87_306 Depth=1
.LBB87_316:                             # %cond.end875
                                        #   in Loop: Header=BB87_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB87_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_306
.LBB87_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_321
.LBB87_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB87_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB87_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB87_327
.LBB87_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB87_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_326
.LBB87_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB87_326:                             # %cond.end916
.LBB87_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB87_328:                             # %if.end922
	jmp	.LBB87_329
.LBB87_329:                             # %if.end923
	jmp	.LBB87_330
.LBB87_330:                             # %if.end924
	jmp	.LBB87_331
.LBB87_331:                             # %if.end925
	jmp	.LBB87_332
.LBB87_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1799810580, -104(%rbp) # imm = 0x6B46EE14
	jne	.LBB87_334
.LBB87_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_333
.Lfunc_end87:
	.size	Get_Reference_Pixel.77, .Lfunc_end87-Get_Reference_Pixel.77
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.78       # -- Begin function DecOneForthPix.78
	.p2align	4, 0x90
	.type	DecOneForthPix.78,@function
DecOneForthPix.78:                      # @DecOneForthPix.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$661894087, -8(%rbp)    # imm = 0x2773B3C7
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB88_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB88_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB88_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_1
.LBB88_4:                               # %for.end
	cmpl	$661894087, -8(%rbp)    # imm = 0x2773B3C7
	jne	.LBB88_6
.LBB88_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_5
.Lfunc_end88:
	.size	DecOneForthPix.78, .Lfunc_end88-DecOneForthPix.78
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.79        # -- Begin function Conceal_Error.79
	.p2align	4, 0x90
	.type	Conceal_Error.79,@function
Conceal_Error.79:                       # @Conceal_Error.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1613135342, -68(%rbp)  # imm = 0x60267DEE
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB89_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB89_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB89_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB89_4:                               # %land.end
.LBB89_5:                               # %lor.end
.LBB89_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB89_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB89_9
.LBB89_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB89_14
.LBB89_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB89_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB89_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB89_12:                              # %land.end51
.LBB89_13:                              # %lor.end53
.LBB89_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB89_180
# %bb.15:                               # %land.end54
	movq	.LJTI89_0(,%rax,8), %rax
	jmpq	*%rax
.LBB89_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB89_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB89_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB89_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB89_18 Depth=1
	movl	$0, -4(%rbp)
.LBB89_20:                              # %for.cond68
                                        #   Parent Loop BB89_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB89_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB89_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB89_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_20
.LBB89_23:                              # %for.end
                                        #   in Loop: Header=BB89_18 Depth=1
	jmp	.LBB89_24
.LBB89_24:                              # %for.inc85
                                        #   in Loop: Header=BB89_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_18
.LBB89_25:                              # %for.end87
	jmp	.LBB89_35
.LBB89_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB89_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB89_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB89_27 Depth=1
	movl	$0, -4(%rbp)
.LBB89_29:                              # %for.cond92
                                        #   Parent Loop BB89_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB89_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB89_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB89_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_29
.LBB89_32:                              # %for.end104
                                        #   in Loop: Header=BB89_27 Depth=1
	jmp	.LBB89_33
.LBB89_33:                              # %for.inc105
                                        #   in Loop: Header=BB89_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_27
.LBB89_34:                              # %for.end107
	jmp	.LBB89_35
.LBB89_35:                              # %if.end
	jmp	.LBB89_180
.LBB89_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB89_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_39 Depth 2
                                        #       Child Loop BB89_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB89_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB89_37 Depth=1
	movl	$0, -12(%rbp)
.LBB89_39:                              # %for.cond113
                                        #   Parent Loop BB89_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB89_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB89_39 Depth=2
	movl	$0, -4(%rbp)
.LBB89_41:                              # %for.cond117
                                        #   Parent Loop BB89_37 Depth=1
                                        #     Parent Loop BB89_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB89_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB89_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB89_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_41
.LBB89_44:                              # %for.end141
                                        #   in Loop: Header=BB89_39 Depth=2
	jmp	.LBB89_45
.LBB89_45:                              # %for.inc142
                                        #   in Loop: Header=BB89_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_39
.LBB89_46:                              # %for.end144
                                        #   in Loop: Header=BB89_37 Depth=1
	jmp	.LBB89_47
.LBB89_47:                              # %for.inc145
                                        #   in Loop: Header=BB89_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_37
.LBB89_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB89_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB89_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB89_49 Depth=1
	movl	$0, -8(%rbp)
.LBB89_51:                              # %for.cond152
                                        #   Parent Loop BB89_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB89_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB89_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB89_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_51
.LBB89_54:                              # %for.end162
                                        #   in Loop: Header=BB89_49 Depth=1
	jmp	.LBB89_55
.LBB89_55:                              # %for.inc163
                                        #   in Loop: Header=BB89_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_49
.LBB89_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB89_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB89_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB89_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB89_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB89_59 Depth=1
	movl	$0, -4(%rbp)
.LBB89_61:                              # %for.cond175
                                        #   Parent Loop BB89_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB89_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB89_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB89_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_61
.LBB89_64:                              # %for.end195
                                        #   in Loop: Header=BB89_59 Depth=1
	jmp	.LBB89_65
.LBB89_65:                              # %for.inc196
                                        #   in Loop: Header=BB89_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_59
.LBB89_66:                              # %for.end198
	jmp	.LBB89_95
.LBB89_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB89_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB89_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_71 Depth 2
                                        #       Child Loop BB89_73 Depth 3
                                        #         Child Loop BB89_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB89_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB89_71:                              # %for.cond210
                                        #   Parent Loop BB89_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_73 Depth 3
                                        #         Child Loop BB89_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB89_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB89_73:                              # %for.cond236
                                        #   Parent Loop BB89_69 Depth=1
                                        #     Parent Loop BB89_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB89_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB89_73 Depth=3
	movl	$0, -4(%rbp)
.LBB89_75:                              # %for.cond240
                                        #   Parent Loop BB89_69 Depth=1
                                        #     Parent Loop BB89_71 Depth=2
                                        #       Parent Loop BB89_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB89_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB89_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB89_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_75
.LBB89_78:                              # %for.end259
                                        #   in Loop: Header=BB89_73 Depth=3
	jmp	.LBB89_79
.LBB89_79:                              # %for.inc260
                                        #   in Loop: Header=BB89_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_73
.LBB89_80:                              # %for.end262
                                        #   in Loop: Header=BB89_71 Depth=2
	jmp	.LBB89_81
.LBB89_81:                              # %for.inc263
                                        #   in Loop: Header=BB89_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_71
.LBB89_82:                              # %for.end265
                                        #   in Loop: Header=BB89_69 Depth=1
	jmp	.LBB89_83
.LBB89_83:                              # %for.inc266
                                        #   in Loop: Header=BB89_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_69
.LBB89_84:                              # %for.end268
	jmp	.LBB89_94
.LBB89_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB89_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB89_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB89_86 Depth=1
	movl	$0, -4(%rbp)
.LBB89_88:                              # %for.cond274
                                        #   Parent Loop BB89_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB89_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB89_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB89_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_88
.LBB89_91:                              # %for.end294
                                        #   in Loop: Header=BB89_86 Depth=1
	jmp	.LBB89_92
.LBB89_92:                              # %for.inc295
                                        #   in Loop: Header=BB89_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_86
.LBB89_93:                              # %for.end297
	jmp	.LBB89_94
.LBB89_94:                              # %if.end298
	jmp	.LBB89_95
.LBB89_95:                              # %if.end299
	jmp	.LBB89_105
.LBB89_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB89_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB89_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB89_97 Depth=1
	movl	$0, -4(%rbp)
.LBB89_99:                              # %for.cond305
                                        #   Parent Loop BB89_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB89_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB89_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB89_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_99
.LBB89_102:                             # %for.end317
                                        #   in Loop: Header=BB89_97 Depth=1
	jmp	.LBB89_103
.LBB89_103:                             # %for.inc318
                                        #   in Loop: Header=BB89_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_97
.LBB89_104:                             # %for.end320
	jmp	.LBB89_105
.LBB89_105:                             # %if.end321
	jmp	.LBB89_180
.LBB89_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB89_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB89_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_110 Depth 2
                                        #       Child Loop BB89_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB89_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB89_108 Depth=1
	movl	$0, -12(%rbp)
.LBB89_110:                             # %for.cond331
                                        #   Parent Loop BB89_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB89_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB89_110 Depth=2
	movl	$0, -4(%rbp)
.LBB89_112:                             # %for.cond335
                                        #   Parent Loop BB89_108 Depth=1
                                        #     Parent Loop BB89_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB89_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB89_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB89_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_112
.LBB89_115:                             # %for.end359
                                        #   in Loop: Header=BB89_110 Depth=2
	jmp	.LBB89_116
.LBB89_116:                             # %for.inc360
                                        #   in Loop: Header=BB89_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_110
.LBB89_117:                             # %for.end362
                                        #   in Loop: Header=BB89_108 Depth=1
	jmp	.LBB89_118
.LBB89_118:                             # %for.inc363
                                        #   in Loop: Header=BB89_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_108
.LBB89_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB89_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB89_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB89_120 Depth=1
	movl	$0, -8(%rbp)
.LBB89_122:                             # %for.cond370
                                        #   Parent Loop BB89_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB89_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB89_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB89_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_122
.LBB89_125:                             # %for.end380
                                        #   in Loop: Header=BB89_120 Depth=1
	jmp	.LBB89_126
.LBB89_126:                             # %for.inc381
                                        #   in Loop: Header=BB89_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_120
.LBB89_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB89_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB89_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB89_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB89_129 Depth=1
	movl	$0, -4(%rbp)
.LBB89_131:                             # %for.cond390
                                        #   Parent Loop BB89_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB89_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB89_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB89_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_131
.LBB89_134:                             # %for.end410
                                        #   in Loop: Header=BB89_129 Depth=1
	jmp	.LBB89_135
.LBB89_135:                             # %for.inc411
                                        #   in Loop: Header=BB89_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_129
.LBB89_136:                             # %for.end413
	jmp	.LBB89_156
.LBB89_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB89_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB89_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_141 Depth 2
                                        #       Child Loop BB89_143 Depth 3
                                        #         Child Loop BB89_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB89_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB89_141:                             # %for.cond425
                                        #   Parent Loop BB89_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_143 Depth 3
                                        #         Child Loop BB89_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB89_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB89_143:                             # %for.cond452
                                        #   Parent Loop BB89_139 Depth=1
                                        #     Parent Loop BB89_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB89_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB89_143 Depth=3
	movl	$0, -4(%rbp)
.LBB89_145:                             # %for.cond456
                                        #   Parent Loop BB89_139 Depth=1
                                        #     Parent Loop BB89_141 Depth=2
                                        #       Parent Loop BB89_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB89_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB89_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB89_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_145
.LBB89_148:                             # %for.end475
                                        #   in Loop: Header=BB89_143 Depth=3
	jmp	.LBB89_149
.LBB89_149:                             # %for.inc476
                                        #   in Loop: Header=BB89_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_143
.LBB89_150:                             # %for.end478
                                        #   in Loop: Header=BB89_141 Depth=2
	jmp	.LBB89_151
.LBB89_151:                             # %for.inc479
                                        #   in Loop: Header=BB89_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_141
.LBB89_152:                             # %for.end481
                                        #   in Loop: Header=BB89_139 Depth=1
	jmp	.LBB89_153
.LBB89_153:                             # %for.inc482
                                        #   in Loop: Header=BB89_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_139
.LBB89_154:                             # %for.end484
	jmp	.LBB89_155
.LBB89_155:                             # %if.end485
	jmp	.LBB89_156
.LBB89_156:                             # %if.end486
	jmp	.LBB89_157
.LBB89_157:                             # %if.end487
	jmp	.LBB89_180
.LBB89_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB89_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB89_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB89_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB89_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB89_161 Depth=1
	movl	$0, -4(%rbp)
.LBB89_163:                             # %for.cond499
                                        #   Parent Loop BB89_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB89_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB89_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB89_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_163
.LBB89_166:                             # %for.end519
                                        #   in Loop: Header=BB89_161 Depth=1
	jmp	.LBB89_167
.LBB89_167:                             # %for.inc520
                                        #   in Loop: Header=BB89_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_161
.LBB89_168:                             # %for.end522
	jmp	.LBB89_169
.LBB89_169:                             # %if.end523
	jmp	.LBB89_179
.LBB89_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB89_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB89_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB89_171 Depth=1
	movl	$0, -4(%rbp)
.LBB89_173:                             # %for.cond529
                                        #   Parent Loop BB89_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB89_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB89_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB89_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_173
.LBB89_176:                             # %for.end541
                                        #   in Loop: Header=BB89_171 Depth=1
	jmp	.LBB89_177
.LBB89_177:                             # %for.inc542
                                        #   in Loop: Header=BB89_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_171
.LBB89_178:                             # %for.end544
	jmp	.LBB89_179
.LBB89_179:                             # %if.end545
	jmp	.LBB89_180
.LBB89_180:                             # %sw.epilog
	cmpl	$1613135342, -68(%rbp)  # imm = 0x60267DEE
	jne	.LBB89_182
.LBB89_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_181
.Lfunc_end89:
	.size	Conceal_Error.79, .Lfunc_end89-Conceal_Error.79
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI89_0:
	.quad	.LBB89_16
	.quad	.LBB89_158
	.quad	.LBB89_106
	.quad	.LBB89_180
	.quad	.LBB89_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.80 # -- Begin function compute_residue_b8block.80
	.p2align	4, 0x90
	.type	compute_residue_b8block.80,@function
compute_residue_b8block.80:             # @compute_residue_b8block.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$56703569, -36(%rbp)    # imm = 0x3613A51
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB90_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB90_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB90_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_4:                               # %for.cond4
                                        #   Parent Loop BB90_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB90_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB90_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB90_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_4
.LBB90_7:                               # %for.end
                                        #   in Loop: Header=BB90_2 Depth=1
	jmp	.LBB90_8
.LBB90_8:                               # %for.inc22
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_2
.LBB90_9:                               # %for.end24
	jmp	.LBB90_19
.LBB90_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB90_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB90_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB90_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_13:                              # %for.cond29
                                        #   Parent Loop BB90_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB90_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB90_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB90_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_13
.LBB90_16:                              # %for.end56
                                        #   in Loop: Header=BB90_11 Depth=1
	jmp	.LBB90_17
.LBB90_17:                              # %for.inc57
                                        #   in Loop: Header=BB90_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_11
.LBB90_18:                              # %for.end59
	jmp	.LBB90_19
.LBB90_19:                              # %if.end
	cmpl	$56703569, -36(%rbp)    # imm = 0x3613A51
	jne	.LBB90_21
.LBB90_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_20
.Lfunc_end90:
	.size	compute_residue_b8block.80, .Lfunc_end90-compute_residue_b8block.80
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.81        # -- Begin function Conceal_Error.81
	.p2align	4, 0x90
	.type	Conceal_Error.81,@function
Conceal_Error.81:                       # @Conceal_Error.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1411896003, -68(%rbp)  # imm = 0x5427D2C3
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB91_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB91_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB91_4:                               # %land.end
.LBB91_5:                               # %lor.end
.LBB91_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB91_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB91_9
.LBB91_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB91_14
.LBB91_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB91_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB91_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB91_12:                              # %land.end51
.LBB91_13:                              # %lor.end53
.LBB91_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB91_180
# %bb.15:                               # %land.end54
	movq	.LJTI91_0(,%rax,8), %rax
	jmpq	*%rax
.LBB91_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB91_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB91_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB91_18 Depth=1
	movl	$0, -4(%rbp)
.LBB91_20:                              # %for.cond68
                                        #   Parent Loop BB91_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB91_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB91_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_20
.LBB91_23:                              # %for.end
                                        #   in Loop: Header=BB91_18 Depth=1
	jmp	.LBB91_24
.LBB91_24:                              # %for.inc85
                                        #   in Loop: Header=BB91_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_18
.LBB91_25:                              # %for.end87
	jmp	.LBB91_35
.LBB91_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB91_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB91_27 Depth=1
	movl	$0, -4(%rbp)
.LBB91_29:                              # %for.cond92
                                        #   Parent Loop BB91_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB91_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB91_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_29
.LBB91_32:                              # %for.end104
                                        #   in Loop: Header=BB91_27 Depth=1
	jmp	.LBB91_33
.LBB91_33:                              # %for.inc105
                                        #   in Loop: Header=BB91_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_27
.LBB91_34:                              # %for.end107
	jmp	.LBB91_35
.LBB91_35:                              # %if.end
	jmp	.LBB91_180
.LBB91_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB91_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_39 Depth 2
                                        #       Child Loop BB91_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB91_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB91_37 Depth=1
	movl	$0, -12(%rbp)
.LBB91_39:                              # %for.cond113
                                        #   Parent Loop BB91_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB91_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB91_39 Depth=2
	movl	$0, -4(%rbp)
.LBB91_41:                              # %for.cond117
                                        #   Parent Loop BB91_37 Depth=1
                                        #     Parent Loop BB91_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB91_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB91_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB91_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_41
.LBB91_44:                              # %for.end141
                                        #   in Loop: Header=BB91_39 Depth=2
	jmp	.LBB91_45
.LBB91_45:                              # %for.inc142
                                        #   in Loop: Header=BB91_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_39
.LBB91_46:                              # %for.end144
                                        #   in Loop: Header=BB91_37 Depth=1
	jmp	.LBB91_47
.LBB91_47:                              # %for.inc145
                                        #   in Loop: Header=BB91_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_37
.LBB91_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB91_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB91_49 Depth=1
	movl	$0, -8(%rbp)
.LBB91_51:                              # %for.cond152
                                        #   Parent Loop BB91_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB91_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB91_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_51
.LBB91_54:                              # %for.end162
                                        #   in Loop: Header=BB91_49 Depth=1
	jmp	.LBB91_55
.LBB91_55:                              # %for.inc163
                                        #   in Loop: Header=BB91_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_49
.LBB91_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB91_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB91_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB91_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB91_59 Depth=1
	movl	$0, -4(%rbp)
.LBB91_61:                              # %for.cond175
                                        #   Parent Loop BB91_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB91_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB91_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_61
.LBB91_64:                              # %for.end195
                                        #   in Loop: Header=BB91_59 Depth=1
	jmp	.LBB91_65
.LBB91_65:                              # %for.inc196
                                        #   in Loop: Header=BB91_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_59
.LBB91_66:                              # %for.end198
	jmp	.LBB91_95
.LBB91_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB91_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB91_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_71 Depth 2
                                        #       Child Loop BB91_73 Depth 3
                                        #         Child Loop BB91_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB91_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB91_71:                              # %for.cond210
                                        #   Parent Loop BB91_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_73 Depth 3
                                        #         Child Loop BB91_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB91_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB91_73:                              # %for.cond236
                                        #   Parent Loop BB91_69 Depth=1
                                        #     Parent Loop BB91_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB91_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB91_73 Depth=3
	movl	$0, -4(%rbp)
.LBB91_75:                              # %for.cond240
                                        #   Parent Loop BB91_69 Depth=1
                                        #     Parent Loop BB91_71 Depth=2
                                        #       Parent Loop BB91_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB91_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB91_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB91_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_75
.LBB91_78:                              # %for.end259
                                        #   in Loop: Header=BB91_73 Depth=3
	jmp	.LBB91_79
.LBB91_79:                              # %for.inc260
                                        #   in Loop: Header=BB91_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_73
.LBB91_80:                              # %for.end262
                                        #   in Loop: Header=BB91_71 Depth=2
	jmp	.LBB91_81
.LBB91_81:                              # %for.inc263
                                        #   in Loop: Header=BB91_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_71
.LBB91_82:                              # %for.end265
                                        #   in Loop: Header=BB91_69 Depth=1
	jmp	.LBB91_83
.LBB91_83:                              # %for.inc266
                                        #   in Loop: Header=BB91_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_69
.LBB91_84:                              # %for.end268
	jmp	.LBB91_94
.LBB91_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB91_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB91_86 Depth=1
	movl	$0, -4(%rbp)
.LBB91_88:                              # %for.cond274
                                        #   Parent Loop BB91_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB91_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB91_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_88
.LBB91_91:                              # %for.end294
                                        #   in Loop: Header=BB91_86 Depth=1
	jmp	.LBB91_92
.LBB91_92:                              # %for.inc295
                                        #   in Loop: Header=BB91_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_86
.LBB91_93:                              # %for.end297
	jmp	.LBB91_94
.LBB91_94:                              # %if.end298
	jmp	.LBB91_95
.LBB91_95:                              # %if.end299
	jmp	.LBB91_105
.LBB91_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB91_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB91_97 Depth=1
	movl	$0, -4(%rbp)
.LBB91_99:                              # %for.cond305
                                        #   Parent Loop BB91_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB91_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB91_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_99
.LBB91_102:                             # %for.end317
                                        #   in Loop: Header=BB91_97 Depth=1
	jmp	.LBB91_103
.LBB91_103:                             # %for.inc318
                                        #   in Loop: Header=BB91_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_97
.LBB91_104:                             # %for.end320
	jmp	.LBB91_105
.LBB91_105:                             # %if.end321
	jmp	.LBB91_180
.LBB91_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB91_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB91_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_110 Depth 2
                                        #       Child Loop BB91_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB91_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB91_108 Depth=1
	movl	$0, -12(%rbp)
.LBB91_110:                             # %for.cond331
                                        #   Parent Loop BB91_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB91_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB91_110 Depth=2
	movl	$0, -4(%rbp)
.LBB91_112:                             # %for.cond335
                                        #   Parent Loop BB91_108 Depth=1
                                        #     Parent Loop BB91_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB91_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB91_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB91_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_112
.LBB91_115:                             # %for.end359
                                        #   in Loop: Header=BB91_110 Depth=2
	jmp	.LBB91_116
.LBB91_116:                             # %for.inc360
                                        #   in Loop: Header=BB91_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_110
.LBB91_117:                             # %for.end362
                                        #   in Loop: Header=BB91_108 Depth=1
	jmp	.LBB91_118
.LBB91_118:                             # %for.inc363
                                        #   in Loop: Header=BB91_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_108
.LBB91_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB91_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB91_120 Depth=1
	movl	$0, -8(%rbp)
.LBB91_122:                             # %for.cond370
                                        #   Parent Loop BB91_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB91_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB91_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_122
.LBB91_125:                             # %for.end380
                                        #   in Loop: Header=BB91_120 Depth=1
	jmp	.LBB91_126
.LBB91_126:                             # %for.inc381
                                        #   in Loop: Header=BB91_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_120
.LBB91_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB91_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB91_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB91_129 Depth=1
	movl	$0, -4(%rbp)
.LBB91_131:                             # %for.cond390
                                        #   Parent Loop BB91_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB91_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB91_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_131
.LBB91_134:                             # %for.end410
                                        #   in Loop: Header=BB91_129 Depth=1
	jmp	.LBB91_135
.LBB91_135:                             # %for.inc411
                                        #   in Loop: Header=BB91_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_129
.LBB91_136:                             # %for.end413
	jmp	.LBB91_156
.LBB91_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB91_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB91_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_141 Depth 2
                                        #       Child Loop BB91_143 Depth 3
                                        #         Child Loop BB91_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB91_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB91_141:                             # %for.cond425
                                        #   Parent Loop BB91_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_143 Depth 3
                                        #         Child Loop BB91_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB91_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB91_143:                             # %for.cond452
                                        #   Parent Loop BB91_139 Depth=1
                                        #     Parent Loop BB91_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB91_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB91_143 Depth=3
	movl	$0, -4(%rbp)
.LBB91_145:                             # %for.cond456
                                        #   Parent Loop BB91_139 Depth=1
                                        #     Parent Loop BB91_141 Depth=2
                                        #       Parent Loop BB91_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB91_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB91_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB91_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_145
.LBB91_148:                             # %for.end475
                                        #   in Loop: Header=BB91_143 Depth=3
	jmp	.LBB91_149
.LBB91_149:                             # %for.inc476
                                        #   in Loop: Header=BB91_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_143
.LBB91_150:                             # %for.end478
                                        #   in Loop: Header=BB91_141 Depth=2
	jmp	.LBB91_151
.LBB91_151:                             # %for.inc479
                                        #   in Loop: Header=BB91_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_141
.LBB91_152:                             # %for.end481
                                        #   in Loop: Header=BB91_139 Depth=1
	jmp	.LBB91_153
.LBB91_153:                             # %for.inc482
                                        #   in Loop: Header=BB91_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_139
.LBB91_154:                             # %for.end484
	jmp	.LBB91_155
.LBB91_155:                             # %if.end485
	jmp	.LBB91_156
.LBB91_156:                             # %if.end486
	jmp	.LBB91_157
.LBB91_157:                             # %if.end487
	jmp	.LBB91_180
.LBB91_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB91_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB91_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB91_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB91_161 Depth=1
	movl	$0, -4(%rbp)
.LBB91_163:                             # %for.cond499
                                        #   Parent Loop BB91_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB91_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB91_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_163
.LBB91_166:                             # %for.end519
                                        #   in Loop: Header=BB91_161 Depth=1
	jmp	.LBB91_167
.LBB91_167:                             # %for.inc520
                                        #   in Loop: Header=BB91_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_161
.LBB91_168:                             # %for.end522
	jmp	.LBB91_169
.LBB91_169:                             # %if.end523
	jmp	.LBB91_179
.LBB91_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB91_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB91_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB91_171 Depth=1
	movl	$0, -4(%rbp)
.LBB91_173:                             # %for.cond529
                                        #   Parent Loop BB91_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB91_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB91_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB91_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_173
.LBB91_176:                             # %for.end541
                                        #   in Loop: Header=BB91_171 Depth=1
	jmp	.LBB91_177
.LBB91_177:                             # %for.inc542
                                        #   in Loop: Header=BB91_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_171
.LBB91_178:                             # %for.end544
	jmp	.LBB91_179
.LBB91_179:                             # %if.end545
	jmp	.LBB91_180
.LBB91_180:                             # %sw.epilog
	cmpl	$1411896003, -68(%rbp)  # imm = 0x5427D2C3
	jne	.LBB91_182
.LBB91_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_181
.Lfunc_end91:
	.size	Conceal_Error.81, .Lfunc_end91-Conceal_Error.81
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI91_0:
	.quad	.LBB91_16
	.quad	.LBB91_158
	.quad	.LBB91_106
	.quad	.LBB91_180
	.quad	.LBB91_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.82  # -- Begin function Get_Reference_Block.82
	.p2align	4, 0x90
	.type	Get_Reference_Block.82,@function
Get_Reference_Block.82:                 # @Get_Reference_Block.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1128604964, -24(%rbp)  # imm = 0x43452524
	movq	%rdi, -48(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -56(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB92_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB92_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	$0, -8(%rbp)
.LBB92_3:                               # %for.cond5
                                        #   Parent Loop BB92_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB92_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_3
.LBB92_6:                               # %for.end
                                        #   in Loop: Header=BB92_1 Depth=1
	jmp	.LBB92_7
.LBB92_7:                               # %for.inc14
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_1
.LBB92_8:                               # %for.end16
	cmpl	$1128604964, -24(%rbp)  # imm = 0x43452524
	jne	.LBB92_10
.LBB92_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_9
.Lfunc_end92:
	.size	Get_Reference_Block.82, .Lfunc_end92-Get_Reference_Block.82
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.83       # -- Begin function DecOneForthPix.83
	.p2align	4, 0x90
	.type	DecOneForthPix.83,@function
DecOneForthPix.83:                      # @DecOneForthPix.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1063332733, -8(%rbp)   # imm = 0x3F612B7D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB93_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB93_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB93_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_1
.LBB93_4:                               # %for.end
	cmpl	$1063332733, -8(%rbp)   # imm = 0x3F612B7D
	jne	.LBB93_6
.LBB93_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_5
.Lfunc_end93:
	.size	DecOneForthPix.83, .Lfunc_end93-DecOneForthPix.83
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.84
.LCPI94_0:
	.quad	4636737291354636288     # double 100
.LCPI94_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.84
	.p2align	4, 0x90
	.type	Build_Status_Map.84,@function
Build_Status_Map.84:                    # @Build_Status_Map.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$552617175, -40(%rbp)   # imm = 0x20F044D7
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB94_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB94_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB94_1 Depth=1
	movl	$0, -8(%rbp)
.LBB94_3:                               # %for.cond2
                                        #   Parent Loop BB94_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB94_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB94_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB94_13
.LBB94_6:                               # %if.then
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI94_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI94_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB94_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB94_8:                               # %if.end
                                        #   in Loop: Header=BB94_3 Depth=2
	callq	rand
	vmovsd	.LCPI94_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI94_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB94_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB94_10:                              # %if.end20
                                        #   in Loop: Header=BB94_3 Depth=2
	callq	rand
	vmovsd	.LCPI94_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI94_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB94_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	$1, -4(%rbp)
.LBB94_12:                              # %if.end29
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB94_13:                              # %if.end30
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB94_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB94_18
.LBB94_15:                              # %if.else
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB94_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB94_17:                              # %if.end49
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_18
.LBB94_18:                              # %if.end50
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_3
.LBB94_20:                              # %for.end
                                        #   in Loop: Header=BB94_1 Depth=1
	jmp	.LBB94_21
.LBB94_21:                              # %for.inc53
                                        #   in Loop: Header=BB94_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_1
.LBB94_22:                              # %for.end55
	cmpl	$552617175, -40(%rbp)   # imm = 0x20F044D7
	jne	.LBB94_24
.LBB94_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_23
.Lfunc_end94:
	.size	Build_Status_Map.84, .Lfunc_end94-Build_Status_Map.84
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.85  # -- Begin function Get_Reference_Pixel.85
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.85,@function
Get_Reference_Pixel.85:                 # @Get_Reference_Pixel.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$35273410, -100(%rbp)   # imm = 0x21A3AC2
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB95_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB95_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB95_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB95_5
.LBB95_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB95_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB95_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB95_11
.LBB95_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB95_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB95_10
.LBB95_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB95_10:                              # %cond.end14
.LBB95_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB95_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB95_14
.LBB95_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB95_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB95_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB95_20
.LBB95_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB95_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB95_19
.LBB95_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB95_19:                              # %cond.end29
.LBB95_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_332
.LBB95_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB95_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB95_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB95_25
.LBB95_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB95_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB95_31
.LBB95_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB95_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB95_30
.LBB95_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB95_30:                              # %cond.end52
.LBB95_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB95_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB95_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_36
.LBB95_35:                              # %cond.false61
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_36:                              # %cond.end63
                                        #   in Loop: Header=BB95_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB95_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_42
.LBB95_38:                              # %cond.false68
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_41
.LBB95_40:                              # %cond.false73
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_41:                              # %cond.end75
                                        #   in Loop: Header=BB95_32 Depth=1
.LBB95_42:                              # %cond.end77
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB95_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_32
.LBB95_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_47
.LBB95_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB95_53
.LBB95_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_52
.LBB95_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_52:                              # %cond.end113
.LBB95_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB95_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB95_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB95_57
.LBB95_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB95_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB95_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB95_63
.LBB95_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB95_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB95_62
.LBB95_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB95_62:                              # %cond.end136
.LBB95_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB95_76
.LBB95_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB95_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB95_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB95_68
.LBB95_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB95_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB95_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB95_74
.LBB95_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB95_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB95_73
.LBB95_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB95_73:                              # %cond.end169
.LBB95_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB95_75:                              # %if.end
	jmp	.LBB95_76
.LBB95_76:                              # %if.end178
	jmp	.LBB95_331
.LBB95_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB95_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB95_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB95_81
.LBB95_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB95_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB95_87
.LBB95_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB95_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB95_86
.LBB95_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB95_86:                              # %cond.end197
.LBB95_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB95_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB95_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_92
.LBB95_91:                              # %cond.false209
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_92:                              # %cond.end211
                                        #   in Loop: Header=BB95_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB95_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_98
.LBB95_94:                              # %cond.false216
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_97
.LBB95_96:                              # %cond.false221
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_97:                              # %cond.end223
                                        #   in Loop: Header=BB95_88 Depth=1
.LBB95_98:                              # %cond.end225
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB95_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_88
.LBB95_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_103
.LBB95_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB95_109
.LBB95_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_108
.LBB95_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_108:                             # %cond.end266
.LBB95_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB95_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB95_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB95_113
.LBB95_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB95_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB95_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB95_119
.LBB95_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB95_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB95_118
.LBB95_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB95_118:                             # %cond.end287
.LBB95_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB95_132
.LBB95_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB95_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB95_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB95_124
.LBB95_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB95_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB95_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB95_130
.LBB95_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB95_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB95_129
.LBB95_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB95_129:                             # %cond.end320
.LBB95_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB95_131:                             # %if.end331
	jmp	.LBB95_132
.LBB95_132:                             # %if.end332
	jmp	.LBB95_330
.LBB95_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB95_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB95_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB95_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_139
.LBB95_138:                             # %cond.false345
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_139:                             # %cond.end347
                                        #   in Loop: Header=BB95_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB95_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_145
.LBB95_141:                             # %cond.false352
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_144
.LBB95_143:                             # %cond.false357
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_144:                             # %cond.end359
                                        #   in Loop: Header=BB95_135 Depth=1
.LBB95_145:                             # %cond.end361
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB95_146:                             # %for.cond363
                                        #   Parent Loop BB95_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB95_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB95_150
.LBB95_149:                             # %cond.false371
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_150:                             # %cond.end373
                                        #   in Loop: Header=BB95_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB95_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_156
.LBB95_152:                             # %cond.false378
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB95_155
.LBB95_154:                             # %cond.false383
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_155:                             # %cond.end385
                                        #   in Loop: Header=BB95_146 Depth=2
.LBB95_156:                             # %cond.end387
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_146
.LBB95_158:                             # %for.end401
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB95_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_135
.LBB95_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB95_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB95_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB95_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB95_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_161
.LBB95_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_167
.LBB95_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB95_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB95_173
.LBB95_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_172
.LBB95_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB95_172:                             # %cond.end449
.LBB95_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB95_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_177
.LBB95_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB95_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB95_183
.LBB95_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_182
.LBB95_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_182:                             # %cond.end486
.LBB95_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB95_196
.LBB95_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB95_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_188
.LBB95_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB95_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB95_194
.LBB95_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_193
.LBB95_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_193:                             # %cond.end526
.LBB95_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB95_195:                             # %if.end532
	jmp	.LBB95_196
.LBB95_196:                             # %if.end533
	jmp	.LBB95_329
.LBB95_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB95_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB95_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB95_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_203
.LBB95_202:                             # %cond.false546
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_203:                             # %cond.end548
                                        #   in Loop: Header=BB95_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB95_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_209
.LBB95_205:                             # %cond.false553
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_208
.LBB95_207:                             # %cond.false558
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_208:                             # %cond.end560
                                        #   in Loop: Header=BB95_199 Depth=1
.LBB95_209:                             # %cond.end562
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB95_210:                             # %for.cond564
                                        #   Parent Loop BB95_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB95_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB95_214
.LBB95_213:                             # %cond.false572
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_214:                             # %cond.end574
                                        #   in Loop: Header=BB95_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB95_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_220
.LBB95_216:                             # %cond.false579
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB95_219
.LBB95_218:                             # %cond.false584
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_219:                             # %cond.end586
                                        #   in Loop: Header=BB95_210 Depth=2
.LBB95_220:                             # %cond.end588
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB95_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_210
.LBB95_222:                             # %for.end602
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB95_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_199
.LBB95_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB95_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB95_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB95_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB95_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_225
.LBB95_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_231
.LBB95_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB95_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB95_237
.LBB95_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_236
.LBB95_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB95_236:                             # %cond.end650
.LBB95_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB95_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_241
.LBB95_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB95_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB95_247
.LBB95_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_246
.LBB95_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_246:                             # %cond.end687
.LBB95_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB95_258
.LBB95_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_251
.LBB95_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB95_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB95_257
.LBB95_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB95_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_256
.LBB95_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB95_256:                             # %cond.end724
.LBB95_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB95_258:                             # %if.end730
	jmp	.LBB95_328
.LBB95_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB95_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB95_262
.LBB95_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB95_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB95_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB95_265
.LBB95_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB95_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB95_271
.LBB95_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB95_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB95_270
.LBB95_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB95_270:                             # %cond.end753
.LBB95_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB95_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB95_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_276
.LBB95_275:                             # %cond.false765
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_276:                             # %cond.end767
                                        #   in Loop: Header=BB95_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB95_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_282
.LBB95_278:                             # %cond.false772
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB95_281
.LBB95_280:                             # %cond.false777
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB95_281:                             # %cond.end779
                                        #   in Loop: Header=BB95_272 Depth=1
.LBB95_282:                             # %cond.end781
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB95_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_272
.LBB95_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_287
.LBB95_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB95_293
.LBB95_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_292
.LBB95_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_292:                             # %cond.end822
.LBB95_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB95_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB95_296
.LBB95_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB95_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB95_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB95_299
.LBB95_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB95_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB95_305
.LBB95_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB95_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB95_304
.LBB95_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB95_304:                             # %cond.end847
.LBB95_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB95_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB95_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_310
.LBB95_309:                             # %cond.false859
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_310:                             # %cond.end861
                                        #   in Loop: Header=BB95_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB95_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB95_316
.LBB95_312:                             # %cond.false866
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB95_315
.LBB95_314:                             # %cond.false871
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB95_315:                             # %cond.end873
                                        #   in Loop: Header=BB95_306 Depth=1
.LBB95_316:                             # %cond.end875
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB95_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_306
.LBB95_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_321
.LBB95_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB95_327
.LBB95_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB95_326
.LBB95_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB95_326:                             # %cond.end916
.LBB95_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB95_328:                             # %if.end922
	jmp	.LBB95_329
.LBB95_329:                             # %if.end923
	jmp	.LBB95_330
.LBB95_330:                             # %if.end924
	jmp	.LBB95_331
.LBB95_331:                             # %if.end925
	jmp	.LBB95_332
.LBB95_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$35273410, -100(%rbp)   # imm = 0x21A3AC2
	jne	.LBB95_334
.LBB95_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_333
.Lfunc_end95:
	.size	Get_Reference_Pixel.85, .Lfunc_end95-Get_Reference_Pixel.85
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.86    # -- Begin function Error_Concealment.86
	.p2align	4, 0x90
	.type	Error_Concealment.86,@function
Error_Concealment.86:                   # @Error_Concealment.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$682603150, -16(%rbp)   # imm = 0x28AFB28E
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB96_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB96_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	$0, -8(%rbp)
.LBB96_3:                               # %for.cond2
                                        #   Parent Loop BB96_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB96_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB96_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB96_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB96_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB96_6:                               # %if.end
                                        #   in Loop: Header=BB96_3 Depth=2
	jmp	.LBB96_7
.LBB96_7:                               # %for.inc
                                        #   in Loop: Header=BB96_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_3
.LBB96_8:                               # %for.end
                                        #   in Loop: Header=BB96_1 Depth=1
	jmp	.LBB96_9
.LBB96_9:                               # %for.inc7
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_1
.LBB96_10:                              # %for.end9
	cmpl	$682603150, -16(%rbp)   # imm = 0x28AFB28E
	jne	.LBB96_12
.LBB96_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_11
.Lfunc_end96:
	.size	Error_Concealment.86, .Lfunc_end96-Error_Concealment.86
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.87       # -- Begin function DecOneForthPix.87
	.p2align	4, 0x90
	.type	DecOneForthPix.87,@function
DecOneForthPix.87:                      # @DecOneForthPix.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1109248878, -12(%rbp)  # imm = 0x421DCB6E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB97_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB97_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_1
.LBB97_4:                               # %for.end
	cmpl	$1109248878, -12(%rbp)  # imm = 0x421DCB6E
	jne	.LBB97_6
.LBB97_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_5
.Lfunc_end97:
	.size	DecOneForthPix.87, .Lfunc_end97-DecOneForthPix.87
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.88    # -- Begin function Error_Concealment.88
	.p2align	4, 0x90
	.type	Error_Concealment.88,@function
Error_Concealment.88:                   # @Error_Concealment.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$270355228, -20(%rbp)   # imm = 0x101D4B1C
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB98_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	$0, -4(%rbp)
.LBB98_3:                               # %for.cond2
                                        #   Parent Loop BB98_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB98_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB98_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB98_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB98_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB98_6:                               # %if.end
                                        #   in Loop: Header=BB98_3 Depth=2
	jmp	.LBB98_7
.LBB98_7:                               # %for.inc
                                        #   in Loop: Header=BB98_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_3
.LBB98_8:                               # %for.end
                                        #   in Loop: Header=BB98_1 Depth=1
	jmp	.LBB98_9
.LBB98_9:                               # %for.inc7
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_1
.LBB98_10:                              # %for.end9
	cmpl	$270355228, -20(%rbp)   # imm = 0x101D4B1C
	jne	.LBB98_12
.LBB98_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_11
.Lfunc_end98:
	.size	Error_Concealment.88, .Lfunc_end98-Error_Concealment.88
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.89 # -- Begin function compute_residue_b8block.89
	.p2align	4, 0x90
	.type	compute_residue_b8block.89,@function
compute_residue_b8block.89:             # @compute_residue_b8block.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1022877259, -36(%rbp)  # imm = 0x3CF7DE4B
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB99_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB99_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB99_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_4:                               # %for.cond4
                                        #   Parent Loop BB99_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB99_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB99_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB99_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_4
.LBB99_7:                               # %for.end
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_8
.LBB99_8:                               # %for.inc22
                                        #   in Loop: Header=BB99_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_2
.LBB99_9:                               # %for.end24
	jmp	.LBB99_19
.LBB99_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB99_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB99_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_13:                              # %for.cond29
                                        #   Parent Loop BB99_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB99_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB99_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB99_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_13
.LBB99_16:                              # %for.end56
                                        #   in Loop: Header=BB99_11 Depth=1
	jmp	.LBB99_17
.LBB99_17:                              # %for.inc57
                                        #   in Loop: Header=BB99_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_11
.LBB99_18:                              # %for.end59
	jmp	.LBB99_19
.LBB99_19:                              # %if.end
	cmpl	$1022877259, -36(%rbp)  # imm = 0x3CF7DE4B
	jne	.LBB99_21
.LBB99_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_20
.Lfunc_end99:
	.size	compute_residue_b8block.89, .Lfunc_end99-compute_residue_b8block.89
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.90  # -- Begin function Get_Reference_Block.90
	.p2align	4, 0x90
	.type	Get_Reference_Block.90,@function
Get_Reference_Block.90:                 # @Get_Reference_Block.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1857670994, -12(%rbp)  # imm = 0x6EB9CF52
	movq	%rdi, -48(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -56(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB100_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	$0, -8(%rbp)
.LBB100_3:                              # %for.cond5
                                        #   Parent Loop BB100_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB100_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB100_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB100_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_3
.LBB100_6:                              # %for.end
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_7
.LBB100_7:                              # %for.inc14
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_1
.LBB100_8:                              # %for.end16
	cmpl	$1857670994, -12(%rbp)  # imm = 0x6EB9CF52
	jne	.LBB100_10
.LBB100_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_9
.Lfunc_end100:
	.size	Get_Reference_Block.90, .Lfunc_end100-Get_Reference_Block.90
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.91        # -- Begin function Conceal_Error.91
	.p2align	4, 0x90
	.type	Conceal_Error.91,@function
Conceal_Error.91:                       # @Conceal_Error.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$534073669, -68(%rbp)   # imm = 0x1FD55145
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB101_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB101_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB101_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB101_4:                              # %land.end
.LBB101_5:                              # %lor.end
.LBB101_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB101_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB101_9
.LBB101_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB101_14
.LBB101_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB101_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB101_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB101_12:                             # %land.end51
.LBB101_13:                             # %lor.end53
.LBB101_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB101_180
# %bb.15:                               # %land.end54
	movq	.LJTI101_0(,%rax,8), %rax
	jmpq	*%rax
.LBB101_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB101_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB101_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB101_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB101_18 Depth=1
	movl	$0, -4(%rbp)
.LBB101_20:                             # %for.cond68
                                        #   Parent Loop BB101_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB101_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB101_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB101_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_20
.LBB101_23:                             # %for.end
                                        #   in Loop: Header=BB101_18 Depth=1
	jmp	.LBB101_24
.LBB101_24:                             # %for.inc85
                                        #   in Loop: Header=BB101_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_18
.LBB101_25:                             # %for.end87
	jmp	.LBB101_35
.LBB101_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB101_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB101_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB101_27 Depth=1
	movl	$0, -4(%rbp)
.LBB101_29:                             # %for.cond92
                                        #   Parent Loop BB101_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB101_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB101_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB101_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_29
.LBB101_32:                             # %for.end104
                                        #   in Loop: Header=BB101_27 Depth=1
	jmp	.LBB101_33
.LBB101_33:                             # %for.inc105
                                        #   in Loop: Header=BB101_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_27
.LBB101_34:                             # %for.end107
	jmp	.LBB101_35
.LBB101_35:                             # %if.end
	jmp	.LBB101_180
.LBB101_36:                             # %sw.bb108
	movl	$0, -12(%rbp)
.LBB101_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_39 Depth 2
                                        #       Child Loop BB101_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB101_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB101_37 Depth=1
	movl	$0, -16(%rbp)
.LBB101_39:                             # %for.cond113
                                        #   Parent Loop BB101_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB101_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB101_39 Depth=2
	movl	$0, -4(%rbp)
.LBB101_41:                             # %for.cond117
                                        #   Parent Loop BB101_37 Depth=1
                                        #     Parent Loop BB101_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB101_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB101_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB101_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_41
.LBB101_44:                             # %for.end141
                                        #   in Loop: Header=BB101_39 Depth=2
	jmp	.LBB101_45
.LBB101_45:                             # %for.inc142
                                        #   in Loop: Header=BB101_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_39
.LBB101_46:                             # %for.end144
                                        #   in Loop: Header=BB101_37 Depth=1
	jmp	.LBB101_47
.LBB101_47:                             # %for.inc145
                                        #   in Loop: Header=BB101_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_37
.LBB101_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB101_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB101_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB101_49 Depth=1
	movl	$0, -8(%rbp)
.LBB101_51:                             # %for.cond152
                                        #   Parent Loop BB101_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB101_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB101_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB101_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_51
.LBB101_54:                             # %for.end162
                                        #   in Loop: Header=BB101_49 Depth=1
	jmp	.LBB101_55
.LBB101_55:                             # %for.inc163
                                        #   in Loop: Header=BB101_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_49
.LBB101_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB101_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB101_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB101_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB101_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB101_59 Depth=1
	movl	$0, -4(%rbp)
.LBB101_61:                             # %for.cond175
                                        #   Parent Loop BB101_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB101_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB101_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB101_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_61
.LBB101_64:                             # %for.end195
                                        #   in Loop: Header=BB101_59 Depth=1
	jmp	.LBB101_65
.LBB101_65:                             # %for.inc196
                                        #   in Loop: Header=BB101_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_59
.LBB101_66:                             # %for.end198
	jmp	.LBB101_95
.LBB101_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB101_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB101_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_71 Depth 2
                                        #       Child Loop BB101_73 Depth 3
                                        #         Child Loop BB101_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB101_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB101_71:                             # %for.cond210
                                        #   Parent Loop BB101_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_73 Depth 3
                                        #         Child Loop BB101_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB101_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB101_73:                             # %for.cond236
                                        #   Parent Loop BB101_69 Depth=1
                                        #     Parent Loop BB101_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB101_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB101_73 Depth=3
	movl	$0, -4(%rbp)
.LBB101_75:                             # %for.cond240
                                        #   Parent Loop BB101_69 Depth=1
                                        #     Parent Loop BB101_71 Depth=2
                                        #       Parent Loop BB101_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB101_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB101_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB101_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_75
.LBB101_78:                             # %for.end259
                                        #   in Loop: Header=BB101_73 Depth=3
	jmp	.LBB101_79
.LBB101_79:                             # %for.inc260
                                        #   in Loop: Header=BB101_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_73
.LBB101_80:                             # %for.end262
                                        #   in Loop: Header=BB101_71 Depth=2
	jmp	.LBB101_81
.LBB101_81:                             # %for.inc263
                                        #   in Loop: Header=BB101_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_71
.LBB101_82:                             # %for.end265
                                        #   in Loop: Header=BB101_69 Depth=1
	jmp	.LBB101_83
.LBB101_83:                             # %for.inc266
                                        #   in Loop: Header=BB101_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_69
.LBB101_84:                             # %for.end268
	jmp	.LBB101_94
.LBB101_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB101_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB101_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB101_86 Depth=1
	movl	$0, -4(%rbp)
.LBB101_88:                             # %for.cond274
                                        #   Parent Loop BB101_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB101_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB101_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB101_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_88
.LBB101_91:                             # %for.end294
                                        #   in Loop: Header=BB101_86 Depth=1
	jmp	.LBB101_92
.LBB101_92:                             # %for.inc295
                                        #   in Loop: Header=BB101_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_86
.LBB101_93:                             # %for.end297
	jmp	.LBB101_94
.LBB101_94:                             # %if.end298
	jmp	.LBB101_95
.LBB101_95:                             # %if.end299
	jmp	.LBB101_105
.LBB101_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB101_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB101_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB101_97 Depth=1
	movl	$0, -4(%rbp)
.LBB101_99:                             # %for.cond305
                                        #   Parent Loop BB101_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB101_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB101_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB101_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_99
.LBB101_102:                            # %for.end317
                                        #   in Loop: Header=BB101_97 Depth=1
	jmp	.LBB101_103
.LBB101_103:                            # %for.inc318
                                        #   in Loop: Header=BB101_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_97
.LBB101_104:                            # %for.end320
	jmp	.LBB101_105
.LBB101_105:                            # %if.end321
	jmp	.LBB101_180
.LBB101_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB101_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB101_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_110 Depth 2
                                        #       Child Loop BB101_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB101_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB101_108 Depth=1
	movl	$0, -16(%rbp)
.LBB101_110:                            # %for.cond331
                                        #   Parent Loop BB101_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB101_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB101_110 Depth=2
	movl	$0, -4(%rbp)
.LBB101_112:                            # %for.cond335
                                        #   Parent Loop BB101_108 Depth=1
                                        #     Parent Loop BB101_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB101_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB101_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB101_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_112
.LBB101_115:                            # %for.end359
                                        #   in Loop: Header=BB101_110 Depth=2
	jmp	.LBB101_116
.LBB101_116:                            # %for.inc360
                                        #   in Loop: Header=BB101_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_110
.LBB101_117:                            # %for.end362
                                        #   in Loop: Header=BB101_108 Depth=1
	jmp	.LBB101_118
.LBB101_118:                            # %for.inc363
                                        #   in Loop: Header=BB101_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_108
.LBB101_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB101_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB101_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB101_120 Depth=1
	movl	$0, -8(%rbp)
.LBB101_122:                            # %for.cond370
                                        #   Parent Loop BB101_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB101_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB101_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB101_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_122
.LBB101_125:                            # %for.end380
                                        #   in Loop: Header=BB101_120 Depth=1
	jmp	.LBB101_126
.LBB101_126:                            # %for.inc381
                                        #   in Loop: Header=BB101_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_120
.LBB101_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB101_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB101_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB101_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB101_129 Depth=1
	movl	$0, -4(%rbp)
.LBB101_131:                            # %for.cond390
                                        #   Parent Loop BB101_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB101_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB101_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB101_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_131
.LBB101_134:                            # %for.end410
                                        #   in Loop: Header=BB101_129 Depth=1
	jmp	.LBB101_135
.LBB101_135:                            # %for.inc411
                                        #   in Loop: Header=BB101_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_129
.LBB101_136:                            # %for.end413
	jmp	.LBB101_156
.LBB101_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB101_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB101_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_141 Depth 2
                                        #       Child Loop BB101_143 Depth 3
                                        #         Child Loop BB101_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB101_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB101_141:                            # %for.cond425
                                        #   Parent Loop BB101_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_143 Depth 3
                                        #         Child Loop BB101_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB101_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB101_143:                            # %for.cond452
                                        #   Parent Loop BB101_139 Depth=1
                                        #     Parent Loop BB101_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB101_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB101_143 Depth=3
	movl	$0, -4(%rbp)
.LBB101_145:                            # %for.cond456
                                        #   Parent Loop BB101_139 Depth=1
                                        #     Parent Loop BB101_141 Depth=2
                                        #       Parent Loop BB101_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB101_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB101_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB101_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_145
.LBB101_148:                            # %for.end475
                                        #   in Loop: Header=BB101_143 Depth=3
	jmp	.LBB101_149
.LBB101_149:                            # %for.inc476
                                        #   in Loop: Header=BB101_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_143
.LBB101_150:                            # %for.end478
                                        #   in Loop: Header=BB101_141 Depth=2
	jmp	.LBB101_151
.LBB101_151:                            # %for.inc479
                                        #   in Loop: Header=BB101_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_141
.LBB101_152:                            # %for.end481
                                        #   in Loop: Header=BB101_139 Depth=1
	jmp	.LBB101_153
.LBB101_153:                            # %for.inc482
                                        #   in Loop: Header=BB101_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_139
.LBB101_154:                            # %for.end484
	jmp	.LBB101_155
.LBB101_155:                            # %if.end485
	jmp	.LBB101_156
.LBB101_156:                            # %if.end486
	jmp	.LBB101_157
.LBB101_157:                            # %if.end487
	jmp	.LBB101_180
.LBB101_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB101_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB101_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB101_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB101_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB101_161 Depth=1
	movl	$0, -4(%rbp)
.LBB101_163:                            # %for.cond499
                                        #   Parent Loop BB101_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB101_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB101_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB101_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_163
.LBB101_166:                            # %for.end519
                                        #   in Loop: Header=BB101_161 Depth=1
	jmp	.LBB101_167
.LBB101_167:                            # %for.inc520
                                        #   in Loop: Header=BB101_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_161
.LBB101_168:                            # %for.end522
	jmp	.LBB101_169
.LBB101_169:                            # %if.end523
	jmp	.LBB101_179
.LBB101_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB101_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB101_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB101_171 Depth=1
	movl	$0, -4(%rbp)
.LBB101_173:                            # %for.cond529
                                        #   Parent Loop BB101_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB101_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB101_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB101_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_173
.LBB101_176:                            # %for.end541
                                        #   in Loop: Header=BB101_171 Depth=1
	jmp	.LBB101_177
.LBB101_177:                            # %for.inc542
                                        #   in Loop: Header=BB101_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_171
.LBB101_178:                            # %for.end544
	jmp	.LBB101_179
.LBB101_179:                            # %if.end545
	jmp	.LBB101_180
.LBB101_180:                            # %sw.epilog
	cmpl	$534073669, -68(%rbp)   # imm = 0x1FD55145
	jne	.LBB101_182
.LBB101_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_181
.Lfunc_end101:
	.size	Conceal_Error.91, .Lfunc_end101-Conceal_Error.91
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI101_0:
	.quad	.LBB101_16
	.quad	.LBB101_158
	.quad	.LBB101_106
	.quad	.LBB101_180
	.quad	.LBB101_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.92   # -- Begin function decode_one_b8block.92
	.p2align	4, 0x90
	.type	decode_one_b8block.92,@function
decode_one_b8block.92:                  # @decode_one_b8block.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$254234762, -84(%rbp)   # imm = 0xF27508A
	movl	%edi, -56(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB102_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB102_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB102_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_4:                              # %for.cond9
                                        #   Parent Loop BB102_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB102_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB102_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB102_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_4
.LBB102_7:                              # %for.end
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_8
.LBB102_8:                              # %for.inc26
                                        #   in Loop: Header=BB102_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_2
.LBB102_9:                              # %for.end28
	jmp	.LBB102_96
.LBB102_10:                             # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB102_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB102_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB102_31
.LBB102_14:                             # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB102_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB102_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_17:                             # %for.cond40
                                        #   Parent Loop BB102_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB102_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB102_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB102_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_17
.LBB102_20:                             # %for.end49
                                        #   in Loop: Header=BB102_15 Depth=1
	jmp	.LBB102_21
.LBB102_21:                             # %for.inc50
                                        #   in Loop: Header=BB102_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_15
.LBB102_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB102_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB102_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB102_25:                             # %for.cond56
                                        #   Parent Loop BB102_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB102_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB102_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_25
.LBB102_28:                             # %for.end71
                                        #   in Loop: Header=BB102_23 Depth=1
	jmp	.LBB102_29
.LBB102_29:                             # %for.inc72
                                        #   in Loop: Header=BB102_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_23
.LBB102_30:                             # %for.end74
	jmp	.LBB102_60
.LBB102_31:                             # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB102_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB102_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB102_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB102_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB102_36:                             # %for.cond83
                                        #   Parent Loop BB102_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB102_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB102_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_36
.LBB102_39:                             # %for.end120
                                        #   in Loop: Header=BB102_34 Depth=1
	jmp	.LBB102_40
.LBB102_40:                             # %for.inc121
                                        #   in Loop: Header=BB102_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_34
.LBB102_41:                             # %for.end123
	jmp	.LBB102_51
.LBB102_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB102_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB102_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB102_45:                             # %for.cond129
                                        #   Parent Loop BB102_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB102_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB102_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_45
.LBB102_48:                             # %for.end145
                                        #   in Loop: Header=BB102_43 Depth=1
	jmp	.LBB102_49
.LBB102_49:                             # %for.inc146
                                        #   in Loop: Header=BB102_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_43
.LBB102_50:                             # %for.end148
	jmp	.LBB102_51
.LBB102_51:                             # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB102_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB102_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_54:                             # %for.cond153
                                        #   Parent Loop BB102_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB102_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB102_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB102_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_54
.LBB102_57:                             # %for.end167
                                        #   in Loop: Header=BB102_52 Depth=1
	jmp	.LBB102_58
.LBB102_58:                             # %for.inc168
                                        #   in Loop: Header=BB102_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_52
.LBB102_59:                             # %for.end170
	jmp	.LBB102_60
.LBB102_60:                             # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB102_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB102_66
.LBB102_62:                             # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB102_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB102_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB102_86
.LBB102_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB102_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_69 Depth 2
                                        #       Child Loop BB102_74 Depth 3
                                        #         Child Loop BB102_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB102_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB102_69:                             # %for.cond197
                                        #   Parent Loop BB102_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_74 Depth 3
                                        #         Child Loop BB102_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB102_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB102_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB102_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB102_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB102_73:                             # %if.end218
                                        #   in Loop: Header=BB102_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB102_74:                             # %for.cond233
                                        #   Parent Loop BB102_67 Depth=1
                                        #     Parent Loop BB102_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB102_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB102_74 Depth=3
	movl	$0, -4(%rbp)
.LBB102_76:                             # %for.cond237
                                        #   Parent Loop BB102_67 Depth=1
                                        #     Parent Loop BB102_69 Depth=2
                                        #       Parent Loop BB102_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB102_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB102_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB102_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_76
.LBB102_79:                             # %for.end269
                                        #   in Loop: Header=BB102_74 Depth=3
	jmp	.LBB102_80
.LBB102_80:                             # %for.inc270
                                        #   in Loop: Header=BB102_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_74
.LBB102_81:                             # %for.end272
                                        #   in Loop: Header=BB102_69 Depth=2
	jmp	.LBB102_82
.LBB102_82:                             # %for.inc273
                                        #   in Loop: Header=BB102_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_69
.LBB102_83:                             # %for.end275
                                        #   in Loop: Header=BB102_67 Depth=1
	jmp	.LBB102_84
.LBB102_84:                             # %for.inc276
                                        #   in Loop: Header=BB102_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_67
.LBB102_85:                             # %for.end278
	jmp	.LBB102_95
.LBB102_86:                             # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB102_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB102_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_89:                             # %for.cond284
                                        #   Parent Loop BB102_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB102_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB102_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB102_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_89
.LBB102_92:                             # %for.end310
                                        #   in Loop: Header=BB102_87 Depth=1
	jmp	.LBB102_93
.LBB102_93:                             # %for.inc311
                                        #   in Loop: Header=BB102_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_87
.LBB102_94:                             # %for.end313
	jmp	.LBB102_95
.LBB102_95:                             # %if.end314
	jmp	.LBB102_96
.LBB102_96:                             # %if.end315
	cmpl	$254234762, -84(%rbp)   # imm = 0xF27508A
	jne	.LBB102_98
.LBB102_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_97
.Lfunc_end102:
	.size	decode_one_b8block.92, .Lfunc_end102-decode_one_b8block.92
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.93 # -- Begin function compute_residue_b8block.93
	.p2align	4, 0x90
	.type	compute_residue_b8block.93,@function
compute_residue_b8block.93:             # @compute_residue_b8block.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1261266442, -36(%rbp)  # imm = 0x4B2D660A
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB103_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB103_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_4:                              # %for.cond4
                                        #   Parent Loop BB103_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB103_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB103_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB103_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_4
.LBB103_7:                              # %for.end
                                        #   in Loop: Header=BB103_2 Depth=1
	jmp	.LBB103_8
.LBB103_8:                              # %for.inc22
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_2
.LBB103_9:                              # %for.end24
	jmp	.LBB103_19
.LBB103_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB103_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB103_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_13:                             # %for.cond29
                                        #   Parent Loop BB103_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB103_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB103_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB103_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_13
.LBB103_16:                             # %for.end56
                                        #   in Loop: Header=BB103_11 Depth=1
	jmp	.LBB103_17
.LBB103_17:                             # %for.inc57
                                        #   in Loop: Header=BB103_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_11
.LBB103_18:                             # %for.end59
	jmp	.LBB103_19
.LBB103_19:                             # %if.end
	cmpl	$1261266442, -36(%rbp)  # imm = 0x4B2D660A
	jne	.LBB103_21
.LBB103_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_20
.Lfunc_end103:
	.size	compute_residue_b8block.93, .Lfunc_end103-compute_residue_b8block.93
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.94  # -- Begin function Get_Reference_Block.94
	.p2align	4, 0x90
	.type	Get_Reference_Block.94,@function
Get_Reference_Block.94:                 # @Get_Reference_Block.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1195118158, -32(%rbp)  # imm = 0x473C0E4E
	movq	%rdi, -56(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB104_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	$0, -8(%rbp)
.LBB104_3:                              # %for.cond5
                                        #   Parent Loop BB104_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB104_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_3
.LBB104_6:                              # %for.end
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_7
.LBB104_7:                              # %for.inc14
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_1
.LBB104_8:                              # %for.end16
	cmpl	$1195118158, -32(%rbp)  # imm = 0x473C0E4E
	jne	.LBB104_10
.LBB104_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_9
.Lfunc_end104:
	.size	Get_Reference_Block.94, .Lfunc_end104-Get_Reference_Block.94
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.95   # -- Begin function decode_one_b8block.95
	.p2align	4, 0x90
	.type	decode_one_b8block.95,@function
decode_one_b8block.95:                  # @decode_one_b8block.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$189970957, -84(%rbp)   # imm = 0xB52BA0D
	movl	%edi, -48(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB105_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB105_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB105_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_4:                              # %for.cond9
                                        #   Parent Loop BB105_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB105_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB105_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB105_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_4
.LBB105_7:                              # %for.end
                                        #   in Loop: Header=BB105_2 Depth=1
	jmp	.LBB105_8
.LBB105_8:                              # %for.inc26
                                        #   in Loop: Header=BB105_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_2
.LBB105_9:                              # %for.end28
	jmp	.LBB105_96
.LBB105_10:                             # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB105_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB105_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB105_31
.LBB105_14:                             # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB105_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB105_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_17:                             # %for.cond40
                                        #   Parent Loop BB105_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB105_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB105_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB105_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_17
.LBB105_20:                             # %for.end49
                                        #   in Loop: Header=BB105_15 Depth=1
	jmp	.LBB105_21
.LBB105_21:                             # %for.inc50
                                        #   in Loop: Header=BB105_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_15
.LBB105_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB105_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB105_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB105_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB105_25:                             # %for.cond56
                                        #   Parent Loop BB105_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB105_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB105_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB105_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_25
.LBB105_28:                             # %for.end71
                                        #   in Loop: Header=BB105_23 Depth=1
	jmp	.LBB105_29
.LBB105_29:                             # %for.inc72
                                        #   in Loop: Header=BB105_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_23
.LBB105_30:                             # %for.end74
	jmp	.LBB105_60
.LBB105_31:                             # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB105_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB105_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB105_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB105_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB105_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB105_36:                             # %for.cond83
                                        #   Parent Loop BB105_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB105_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB105_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB105_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_36
.LBB105_39:                             # %for.end120
                                        #   in Loop: Header=BB105_34 Depth=1
	jmp	.LBB105_40
.LBB105_40:                             # %for.inc121
                                        #   in Loop: Header=BB105_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_34
.LBB105_41:                             # %for.end123
	jmp	.LBB105_51
.LBB105_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB105_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB105_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB105_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB105_45:                             # %for.cond129
                                        #   Parent Loop BB105_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB105_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB105_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB105_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_45
.LBB105_48:                             # %for.end145
                                        #   in Loop: Header=BB105_43 Depth=1
	jmp	.LBB105_49
.LBB105_49:                             # %for.inc146
                                        #   in Loop: Header=BB105_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_43
.LBB105_50:                             # %for.end148
	jmp	.LBB105_51
.LBB105_51:                             # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB105_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB105_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_54:                             # %for.cond153
                                        #   Parent Loop BB105_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB105_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB105_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB105_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_54
.LBB105_57:                             # %for.end167
                                        #   in Loop: Header=BB105_52 Depth=1
	jmp	.LBB105_58
.LBB105_58:                             # %for.inc168
                                        #   in Loop: Header=BB105_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_52
.LBB105_59:                             # %for.end170
	jmp	.LBB105_60
.LBB105_60:                             # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB105_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB105_66
.LBB105_62:                             # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB105_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB105_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB105_86
.LBB105_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB105_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_69 Depth 2
                                        #       Child Loop BB105_74 Depth 3
                                        #         Child Loop BB105_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB105_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB105_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB105_69:                             # %for.cond197
                                        #   Parent Loop BB105_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_74 Depth 3
                                        #         Child Loop BB105_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB105_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB105_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB105_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB105_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB105_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB105_73:                             # %if.end218
                                        #   in Loop: Header=BB105_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB105_74:                             # %for.cond233
                                        #   Parent Loop BB105_67 Depth=1
                                        #     Parent Loop BB105_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB105_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB105_74 Depth=3
	movl	$0, -4(%rbp)
.LBB105_76:                             # %for.cond237
                                        #   Parent Loop BB105_67 Depth=1
                                        #     Parent Loop BB105_69 Depth=2
                                        #       Parent Loop BB105_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB105_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB105_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB105_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_76
.LBB105_79:                             # %for.end269
                                        #   in Loop: Header=BB105_74 Depth=3
	jmp	.LBB105_80
.LBB105_80:                             # %for.inc270
                                        #   in Loop: Header=BB105_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_74
.LBB105_81:                             # %for.end272
                                        #   in Loop: Header=BB105_69 Depth=2
	jmp	.LBB105_82
.LBB105_82:                             # %for.inc273
                                        #   in Loop: Header=BB105_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_69
.LBB105_83:                             # %for.end275
                                        #   in Loop: Header=BB105_67 Depth=1
	jmp	.LBB105_84
.LBB105_84:                             # %for.inc276
                                        #   in Loop: Header=BB105_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_67
.LBB105_85:                             # %for.end278
	jmp	.LBB105_95
.LBB105_86:                             # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB105_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB105_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_89:                             # %for.cond284
                                        #   Parent Loop BB105_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB105_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB105_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB105_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_89
.LBB105_92:                             # %for.end310
                                        #   in Loop: Header=BB105_87 Depth=1
	jmp	.LBB105_93
.LBB105_93:                             # %for.inc311
                                        #   in Loop: Header=BB105_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_87
.LBB105_94:                             # %for.end313
	jmp	.LBB105_95
.LBB105_95:                             # %if.end314
	jmp	.LBB105_96
.LBB105_96:                             # %if.end315
	cmpl	$189970957, -84(%rbp)   # imm = 0xB52BA0D
	jne	.LBB105_98
.LBB105_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_97
.Lfunc_end105:
	.size	decode_one_b8block.95, .Lfunc_end105-decode_one_b8block.95
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.96       # -- Begin function DecOneForthPix.96
	.p2align	4, 0x90
	.type	DecOneForthPix.96,@function
DecOneForthPix.96:                      # @DecOneForthPix.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1688569704, -12(%rbp)  # imm = 0x64A58768
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB106_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB106_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_1
.LBB106_4:                              # %for.end
	cmpl	$1688569704, -12(%rbp)  # imm = 0x64A58768
	jne	.LBB106_6
.LBB106_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_5
.Lfunc_end106:
	.size	DecOneForthPix.96, .Lfunc_end106-DecOneForthPix.96
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.97  # -- Begin function Get_Reference_Pixel.97
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.97,@function
Get_Reference_Pixel.97:                 # @Get_Reference_Pixel.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1474406743, -100(%rbp) # imm = 0x57E1A957
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB107_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB107_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB107_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB107_5
.LBB107_4:                              # %cond.false
	movl	-28(%rbp), %ecx
.LBB107_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB107_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB107_11
.LBB107_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB107_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB107_10
.LBB107_9:                              # %cond.false13
	movl	-28(%rbp), %ecx
.LBB107_10:                             # %cond.end14
.LBB107_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB107_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB107_14
.LBB107_13:                             # %cond.false20
	movl	-24(%rbp), %ecx
.LBB107_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB107_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB107_20
.LBB107_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB107_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB107_19
.LBB107_18:                             # %cond.false28
	movl	-24(%rbp), %ecx
.LBB107_19:                             # %cond.end29
.LBB107_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_332
.LBB107_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB107_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB107_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB107_25
.LBB107_24:                             # %cond.false41
	movl	-28(%rbp), %eax
.LBB107_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB107_31
.LBB107_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB107_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB107_30
.LBB107_29:                             # %cond.false51
	movl	-28(%rbp), %eax
.LBB107_30:                             # %cond.end52
.LBB107_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB107_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB107_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_36
.LBB107_35:                             # %cond.false61
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_36:                             # %cond.end63
                                        #   in Loop: Header=BB107_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB107_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_42
.LBB107_38:                             # %cond.false68
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_41
.LBB107_40:                             # %cond.false73
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_41:                             # %cond.end75
                                        #   in Loop: Header=BB107_32 Depth=1
.LBB107_42:                             # %cond.end77
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB107_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_32
.LBB107_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_47
.LBB107_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB107_53
.LBB107_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_52
.LBB107_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_52:                             # %cond.end113
.LBB107_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB107_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB107_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB107_57
.LBB107_56:                             # %cond.false125
	movl	-24(%rbp), %edx
.LBB107_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB107_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB107_63
.LBB107_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB107_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB107_62
.LBB107_61:                             # %cond.false135
	movl	-24(%rbp), %edx
.LBB107_62:                             # %cond.end136
.LBB107_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB107_76
.LBB107_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB107_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB107_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB107_68
.LBB107_67:                             # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB107_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB107_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB107_74
.LBB107_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB107_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB107_73
.LBB107_72:                             # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB107_73:                             # %cond.end169
.LBB107_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB107_75:                             # %if.end
	jmp	.LBB107_76
.LBB107_76:                             # %if.end178
	jmp	.LBB107_331
.LBB107_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB107_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB107_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB107_81
.LBB107_80:                             # %cond.false186
	movl	-24(%rbp), %eax
.LBB107_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB107_87
.LBB107_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB107_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB107_86
.LBB107_85:                             # %cond.false196
	movl	-24(%rbp), %eax
.LBB107_86:                             # %cond.end197
.LBB107_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB107_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB107_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_92
.LBB107_91:                             # %cond.false209
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_92:                             # %cond.end211
                                        #   in Loop: Header=BB107_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB107_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_98
.LBB107_94:                             # %cond.false216
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_97
.LBB107_96:                             # %cond.false221
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_97:                             # %cond.end223
                                        #   in Loop: Header=BB107_88 Depth=1
.LBB107_98:                             # %cond.end225
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB107_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_88
.LBB107_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_103
.LBB107_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB107_109
.LBB107_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_108
.LBB107_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_108:                            # %cond.end266
.LBB107_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB107_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB107_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB107_113
.LBB107_112:                            # %cond.false276
	movl	-28(%rbp), %edx
.LBB107_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB107_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB107_119
.LBB107_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB107_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB107_118
.LBB107_117:                            # %cond.false286
	movl	-28(%rbp), %edx
.LBB107_118:                            # %cond.end287
.LBB107_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB107_132
.LBB107_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB107_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB107_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB107_124
.LBB107_123:                            # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB107_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB107_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB107_130
.LBB107_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB107_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB107_129
.LBB107_128:                            # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB107_129:                            # %cond.end320
.LBB107_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB107_131:                            # %if.end331
	jmp	.LBB107_132
.LBB107_132:                            # %if.end332
	jmp	.LBB107_330
.LBB107_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB107_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB107_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB107_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_139
.LBB107_138:                            # %cond.false345
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_139:                            # %cond.end347
                                        #   in Loop: Header=BB107_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB107_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_145
.LBB107_141:                            # %cond.false352
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_144
.LBB107_143:                            # %cond.false357
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_144:                            # %cond.end359
                                        #   in Loop: Header=BB107_135 Depth=1
.LBB107_145:                            # %cond.end361
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB107_146:                            # %for.cond363
                                        #   Parent Loop BB107_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB107_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB107_150
.LBB107_149:                            # %cond.false371
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_150:                            # %cond.end373
                                        #   in Loop: Header=BB107_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB107_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB107_156
.LBB107_152:                            # %cond.false378
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB107_155
.LBB107_154:                            # %cond.false383
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_155:                            # %cond.end385
                                        #   in Loop: Header=BB107_146 Depth=2
.LBB107_156:                            # %cond.end387
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB107_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_146
.LBB107_158:                            # %for.end401
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB107_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_135
.LBB107_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB107_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB107_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB107_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB107_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_161
.LBB107_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_167
.LBB107_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB107_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB107_173
.LBB107_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_172
.LBB107_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB107_172:                            # %cond.end449
.LBB107_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB107_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_177
.LBB107_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB107_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB107_183
.LBB107_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_182
.LBB107_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_182:                            # %cond.end486
.LBB107_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB107_196
.LBB107_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB107_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_188
.LBB107_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB107_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB107_194
.LBB107_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_193
.LBB107_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_193:                            # %cond.end526
.LBB107_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB107_195:                            # %if.end532
	jmp	.LBB107_196
.LBB107_196:                            # %if.end533
	jmp	.LBB107_329
.LBB107_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB107_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB107_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB107_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_203
.LBB107_202:                            # %cond.false546
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_203:                            # %cond.end548
                                        #   in Loop: Header=BB107_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB107_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_209
.LBB107_205:                            # %cond.false553
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_208
.LBB107_207:                            # %cond.false558
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_208:                            # %cond.end560
                                        #   in Loop: Header=BB107_199 Depth=1
.LBB107_209:                            # %cond.end562
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB107_210:                            # %for.cond564
                                        #   Parent Loop BB107_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB107_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB107_214
.LBB107_213:                            # %cond.false572
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_214:                            # %cond.end574
                                        #   in Loop: Header=BB107_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB107_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB107_220
.LBB107_216:                            # %cond.false579
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB107_219
.LBB107_218:                            # %cond.false584
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_219:                            # %cond.end586
                                        #   in Loop: Header=BB107_210 Depth=2
.LBB107_220:                            # %cond.end588
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB107_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_210
.LBB107_222:                            # %for.end602
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB107_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_199
.LBB107_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB107_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB107_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB107_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB107_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_225
.LBB107_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_231
.LBB107_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB107_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB107_237
.LBB107_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_236
.LBB107_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB107_236:                            # %cond.end650
.LBB107_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB107_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_241
.LBB107_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB107_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB107_247
.LBB107_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_246
.LBB107_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_246:                            # %cond.end687
.LBB107_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB107_258
.LBB107_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_251
.LBB107_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB107_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB107_257
.LBB107_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB107_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_256
.LBB107_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB107_256:                            # %cond.end724
.LBB107_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB107_258:                            # %if.end730
	jmp	.LBB107_328
.LBB107_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB107_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB107_262
.LBB107_261:                            # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB107_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB107_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB107_265
.LBB107_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB107_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB107_271
.LBB107_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB107_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB107_270
.LBB107_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB107_270:                            # %cond.end753
.LBB107_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB107_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB107_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_276
.LBB107_275:                            # %cond.false765
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_276:                            # %cond.end767
                                        #   in Loop: Header=BB107_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB107_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_282
.LBB107_278:                            # %cond.false772
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB107_281
.LBB107_280:                            # %cond.false777
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB107_281:                            # %cond.end779
                                        #   in Loop: Header=BB107_272 Depth=1
.LBB107_282:                            # %cond.end781
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB107_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_272
.LBB107_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_287
.LBB107_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB107_293
.LBB107_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_292
.LBB107_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_292:                            # %cond.end822
.LBB107_293:                            # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB107_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB107_296
.LBB107_295:                            # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB107_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB107_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB107_299
.LBB107_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB107_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB107_305
.LBB107_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB107_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB107_304
.LBB107_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB107_304:                            # %cond.end847
.LBB107_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB107_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB107_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_310
.LBB107_309:                            # %cond.false859
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_310:                            # %cond.end861
                                        #   in Loop: Header=BB107_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB107_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_316
.LBB107_312:                            # %cond.false866
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB107_315
.LBB107_314:                            # %cond.false871
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB107_315:                            # %cond.end873
                                        #   in Loop: Header=BB107_306 Depth=1
.LBB107_316:                            # %cond.end875
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB107_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_306
.LBB107_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_321
.LBB107_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB107_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB107_327
.LBB107_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB107_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_326
.LBB107_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB107_326:                            # %cond.end916
.LBB107_327:                            # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB107_328:                            # %if.end922
	jmp	.LBB107_329
.LBB107_329:                            # %if.end923
	jmp	.LBB107_330
.LBB107_330:                            # %if.end924
	jmp	.LBB107_331
.LBB107_331:                            # %if.end925
	jmp	.LBB107_332
.LBB107_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1474406743, -100(%rbp) # imm = 0x57E1A957
	jne	.LBB107_334
.LBB107_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_333
.Lfunc_end107:
	.size	Get_Reference_Pixel.97, .Lfunc_end107-Get_Reference_Pixel.97
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.98       # -- Begin function DecOneForthPix.98
	.p2align	4, 0x90
	.type	DecOneForthPix.98,@function
DecOneForthPix.98:                      # @DecOneForthPix.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$780080707, -12(%rbp)   # imm = 0x2E7F1643
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB108_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB108_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_1
.LBB108_4:                              # %for.end
	cmpl	$780080707, -12(%rbp)   # imm = 0x2E7F1643
	jne	.LBB108_6
.LBB108_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_5
.Lfunc_end108:
	.size	DecOneForthPix.98, .Lfunc_end108-DecOneForthPix.98
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.99   # -- Begin function decode_one_b8block.99
	.p2align	4, 0x90
	.type	decode_one_b8block.99,@function
decode_one_b8block.99:                  # @decode_one_b8block.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$726327573, -84(%rbp)   # imm = 0x2B4AE115
	movl	%edi, -56(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB109_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB109_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB109_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB109_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB109_4:                              # %for.cond9
                                        #   Parent Loop BB109_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB109_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB109_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB109_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_4
.LBB109_7:                              # %for.end
                                        #   in Loop: Header=BB109_2 Depth=1
	jmp	.LBB109_8
.LBB109_8:                              # %for.inc26
                                        #   in Loop: Header=BB109_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_2
.LBB109_9:                              # %for.end28
	jmp	.LBB109_96
.LBB109_10:                             # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB109_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB109_31
.LBB109_14:                             # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB109_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB109_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB109_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB109_17:                             # %for.cond40
                                        #   Parent Loop BB109_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB109_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB109_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB109_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_17
.LBB109_20:                             # %for.end49
                                        #   in Loop: Header=BB109_15 Depth=1
	jmp	.LBB109_21
.LBB109_21:                             # %for.inc50
                                        #   in Loop: Header=BB109_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_15
.LBB109_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB109_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB109_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB109_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB109_25:                             # %for.cond56
                                        #   Parent Loop BB109_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB109_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB109_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB109_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_25
.LBB109_28:                             # %for.end71
                                        #   in Loop: Header=BB109_23 Depth=1
	jmp	.LBB109_29
.LBB109_29:                             # %for.inc72
                                        #   in Loop: Header=BB109_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_23
.LBB109_30:                             # %for.end74
	jmp	.LBB109_60
.LBB109_31:                             # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB109_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB109_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB109_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB109_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB109_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB109_36:                             # %for.cond83
                                        #   Parent Loop BB109_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB109_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB109_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB109_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_36
.LBB109_39:                             # %for.end120
                                        #   in Loop: Header=BB109_34 Depth=1
	jmp	.LBB109_40
.LBB109_40:                             # %for.inc121
                                        #   in Loop: Header=BB109_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_34
.LBB109_41:                             # %for.end123
	jmp	.LBB109_51
.LBB109_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB109_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB109_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB109_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB109_45:                             # %for.cond129
                                        #   Parent Loop BB109_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB109_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB109_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB109_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_45
.LBB109_48:                             # %for.end145
                                        #   in Loop: Header=BB109_43 Depth=1
	jmp	.LBB109_49
.LBB109_49:                             # %for.inc146
                                        #   in Loop: Header=BB109_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_43
.LBB109_50:                             # %for.end148
	jmp	.LBB109_51
.LBB109_51:                             # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB109_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB109_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB109_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB109_54:                             # %for.cond153
                                        #   Parent Loop BB109_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB109_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB109_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB109_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_54
.LBB109_57:                             # %for.end167
                                        #   in Loop: Header=BB109_52 Depth=1
	jmp	.LBB109_58
.LBB109_58:                             # %for.inc168
                                        #   in Loop: Header=BB109_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_52
.LBB109_59:                             # %for.end170
	jmp	.LBB109_60
.LBB109_60:                             # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB109_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB109_66
.LBB109_62:                             # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB109_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB109_86
.LBB109_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB109_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_69 Depth 2
                                        #       Child Loop BB109_74 Depth 3
                                        #         Child Loop BB109_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB109_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB109_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB109_69:                             # %for.cond197
                                        #   Parent Loop BB109_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_74 Depth 3
                                        #         Child Loop BB109_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB109_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB109_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB109_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB109_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB109_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB109_73:                             # %if.end218
                                        #   in Loop: Header=BB109_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB109_74:                             # %for.cond233
                                        #   Parent Loop BB109_67 Depth=1
                                        #     Parent Loop BB109_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB109_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB109_74 Depth=3
	movl	$0, -4(%rbp)
.LBB109_76:                             # %for.cond237
                                        #   Parent Loop BB109_67 Depth=1
                                        #     Parent Loop BB109_69 Depth=2
                                        #       Parent Loop BB109_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB109_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB109_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB109_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_76
.LBB109_79:                             # %for.end269
                                        #   in Loop: Header=BB109_74 Depth=3
	jmp	.LBB109_80
.LBB109_80:                             # %for.inc270
                                        #   in Loop: Header=BB109_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_74
.LBB109_81:                             # %for.end272
                                        #   in Loop: Header=BB109_69 Depth=2
	jmp	.LBB109_82
.LBB109_82:                             # %for.inc273
                                        #   in Loop: Header=BB109_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_69
.LBB109_83:                             # %for.end275
                                        #   in Loop: Header=BB109_67 Depth=1
	jmp	.LBB109_84
.LBB109_84:                             # %for.inc276
                                        #   in Loop: Header=BB109_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_67
.LBB109_85:                             # %for.end278
	jmp	.LBB109_95
.LBB109_86:                             # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB109_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB109_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB109_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB109_89:                             # %for.cond284
                                        #   Parent Loop BB109_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB109_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB109_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB109_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_89
.LBB109_92:                             # %for.end310
                                        #   in Loop: Header=BB109_87 Depth=1
	jmp	.LBB109_93
.LBB109_93:                             # %for.inc311
                                        #   in Loop: Header=BB109_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_87
.LBB109_94:                             # %for.end313
	jmp	.LBB109_95
.LBB109_95:                             # %if.end314
	jmp	.LBB109_96
.LBB109_96:                             # %if.end315
	cmpl	$726327573, -84(%rbp)   # imm = 0x2B4AE115
	jne	.LBB109_98
.LBB109_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_97
.Lfunc_end109:
	.size	decode_one_b8block.99, .Lfunc_end109-decode_one_b8block.99
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.100       # -- Begin function Conceal_Error.100
	.p2align	4, 0x90
	.type	Conceal_Error.100,@function
Conceal_Error.100:                      # @Conceal_Error.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1504766222, -68(%rbp)  # imm = 0x59B0E90E
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB110_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB110_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB110_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB110_4:                              # %land.end
.LBB110_5:                              # %lor.end
.LBB110_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB110_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB110_9
.LBB110_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB110_14
.LBB110_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB110_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB110_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB110_12:                             # %land.end51
.LBB110_13:                             # %lor.end53
.LBB110_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB110_180
# %bb.15:                               # %land.end54
	movq	.LJTI110_0(,%rax,8), %rax
	jmpq	*%rax
.LBB110_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB110_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB110_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB110_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB110_18 Depth=1
	movl	$0, -4(%rbp)
.LBB110_20:                             # %for.cond68
                                        #   Parent Loop BB110_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB110_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB110_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB110_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_20
.LBB110_23:                             # %for.end
                                        #   in Loop: Header=BB110_18 Depth=1
	jmp	.LBB110_24
.LBB110_24:                             # %for.inc85
                                        #   in Loop: Header=BB110_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_18
.LBB110_25:                             # %for.end87
	jmp	.LBB110_35
.LBB110_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB110_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB110_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB110_27 Depth=1
	movl	$0, -4(%rbp)
.LBB110_29:                             # %for.cond92
                                        #   Parent Loop BB110_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB110_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB110_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB110_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_29
.LBB110_32:                             # %for.end104
                                        #   in Loop: Header=BB110_27 Depth=1
	jmp	.LBB110_33
.LBB110_33:                             # %for.inc105
                                        #   in Loop: Header=BB110_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_27
.LBB110_34:                             # %for.end107
	jmp	.LBB110_35
.LBB110_35:                             # %if.end
	jmp	.LBB110_180
.LBB110_36:                             # %sw.bb108
	movl	$0, -12(%rbp)
.LBB110_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_39 Depth 2
                                        #       Child Loop BB110_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB110_37 Depth=1
	movl	$0, -16(%rbp)
.LBB110_39:                             # %for.cond113
                                        #   Parent Loop BB110_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB110_39 Depth=2
	movl	$0, -4(%rbp)
.LBB110_41:                             # %for.cond117
                                        #   Parent Loop BB110_37 Depth=1
                                        #     Parent Loop BB110_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB110_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB110_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB110_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_41
.LBB110_44:                             # %for.end141
                                        #   in Loop: Header=BB110_39 Depth=2
	jmp	.LBB110_45
.LBB110_45:                             # %for.inc142
                                        #   in Loop: Header=BB110_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_39
.LBB110_46:                             # %for.end144
                                        #   in Loop: Header=BB110_37 Depth=1
	jmp	.LBB110_47
.LBB110_47:                             # %for.inc145
                                        #   in Loop: Header=BB110_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_37
.LBB110_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB110_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB110_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB110_49 Depth=1
	movl	$0, -8(%rbp)
.LBB110_51:                             # %for.cond152
                                        #   Parent Loop BB110_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB110_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB110_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB110_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_51
.LBB110_54:                             # %for.end162
                                        #   in Loop: Header=BB110_49 Depth=1
	jmp	.LBB110_55
.LBB110_55:                             # %for.inc163
                                        #   in Loop: Header=BB110_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_49
.LBB110_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB110_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB110_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB110_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB110_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB110_59 Depth=1
	movl	$0, -4(%rbp)
.LBB110_61:                             # %for.cond175
                                        #   Parent Loop BB110_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB110_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB110_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB110_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_61
.LBB110_64:                             # %for.end195
                                        #   in Loop: Header=BB110_59 Depth=1
	jmp	.LBB110_65
.LBB110_65:                             # %for.inc196
                                        #   in Loop: Header=BB110_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_59
.LBB110_66:                             # %for.end198
	jmp	.LBB110_95
.LBB110_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB110_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB110_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_71 Depth 2
                                        #       Child Loop BB110_73 Depth 3
                                        #         Child Loop BB110_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB110_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB110_71:                             # %for.cond210
                                        #   Parent Loop BB110_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_73 Depth 3
                                        #         Child Loop BB110_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB110_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB110_73:                             # %for.cond236
                                        #   Parent Loop BB110_69 Depth=1
                                        #     Parent Loop BB110_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB110_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB110_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB110_73 Depth=3
	movl	$0, -4(%rbp)
.LBB110_75:                             # %for.cond240
                                        #   Parent Loop BB110_69 Depth=1
                                        #     Parent Loop BB110_71 Depth=2
                                        #       Parent Loop BB110_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB110_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB110_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB110_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_75
.LBB110_78:                             # %for.end259
                                        #   in Loop: Header=BB110_73 Depth=3
	jmp	.LBB110_79
.LBB110_79:                             # %for.inc260
                                        #   in Loop: Header=BB110_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_73
.LBB110_80:                             # %for.end262
                                        #   in Loop: Header=BB110_71 Depth=2
	jmp	.LBB110_81
.LBB110_81:                             # %for.inc263
                                        #   in Loop: Header=BB110_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_71
.LBB110_82:                             # %for.end265
                                        #   in Loop: Header=BB110_69 Depth=1
	jmp	.LBB110_83
.LBB110_83:                             # %for.inc266
                                        #   in Loop: Header=BB110_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_69
.LBB110_84:                             # %for.end268
	jmp	.LBB110_94
.LBB110_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB110_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB110_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB110_86 Depth=1
	movl	$0, -4(%rbp)
.LBB110_88:                             # %for.cond274
                                        #   Parent Loop BB110_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB110_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB110_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB110_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_88
.LBB110_91:                             # %for.end294
                                        #   in Loop: Header=BB110_86 Depth=1
	jmp	.LBB110_92
.LBB110_92:                             # %for.inc295
                                        #   in Loop: Header=BB110_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_86
.LBB110_93:                             # %for.end297
	jmp	.LBB110_94
.LBB110_94:                             # %if.end298
	jmp	.LBB110_95
.LBB110_95:                             # %if.end299
	jmp	.LBB110_105
.LBB110_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB110_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB110_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB110_97 Depth=1
	movl	$0, -4(%rbp)
.LBB110_99:                             # %for.cond305
                                        #   Parent Loop BB110_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB110_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB110_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB110_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_99
.LBB110_102:                            # %for.end317
                                        #   in Loop: Header=BB110_97 Depth=1
	jmp	.LBB110_103
.LBB110_103:                            # %for.inc318
                                        #   in Loop: Header=BB110_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_97
.LBB110_104:                            # %for.end320
	jmp	.LBB110_105
.LBB110_105:                            # %if.end321
	jmp	.LBB110_180
.LBB110_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB110_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB110_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_110 Depth 2
                                        #       Child Loop BB110_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB110_108 Depth=1
	movl	$0, -16(%rbp)
.LBB110_110:                            # %for.cond331
                                        #   Parent Loop BB110_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB110_110 Depth=2
	movl	$0, -4(%rbp)
.LBB110_112:                            # %for.cond335
                                        #   Parent Loop BB110_108 Depth=1
                                        #     Parent Loop BB110_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB110_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB110_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB110_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_112
.LBB110_115:                            # %for.end359
                                        #   in Loop: Header=BB110_110 Depth=2
	jmp	.LBB110_116
.LBB110_116:                            # %for.inc360
                                        #   in Loop: Header=BB110_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_110
.LBB110_117:                            # %for.end362
                                        #   in Loop: Header=BB110_108 Depth=1
	jmp	.LBB110_118
.LBB110_118:                            # %for.inc363
                                        #   in Loop: Header=BB110_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_108
.LBB110_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB110_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB110_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB110_120 Depth=1
	movl	$0, -8(%rbp)
.LBB110_122:                            # %for.cond370
                                        #   Parent Loop BB110_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB110_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB110_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB110_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_122
.LBB110_125:                            # %for.end380
                                        #   in Loop: Header=BB110_120 Depth=1
	jmp	.LBB110_126
.LBB110_126:                            # %for.inc381
                                        #   in Loop: Header=BB110_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_120
.LBB110_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB110_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB110_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB110_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB110_129 Depth=1
	movl	$0, -4(%rbp)
.LBB110_131:                            # %for.cond390
                                        #   Parent Loop BB110_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB110_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB110_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB110_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_131
.LBB110_134:                            # %for.end410
                                        #   in Loop: Header=BB110_129 Depth=1
	jmp	.LBB110_135
.LBB110_135:                            # %for.inc411
                                        #   in Loop: Header=BB110_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_129
.LBB110_136:                            # %for.end413
	jmp	.LBB110_156
.LBB110_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB110_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB110_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_141 Depth 2
                                        #       Child Loop BB110_143 Depth 3
                                        #         Child Loop BB110_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB110_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB110_141:                            # %for.cond425
                                        #   Parent Loop BB110_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_143 Depth 3
                                        #         Child Loop BB110_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB110_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB110_143:                            # %for.cond452
                                        #   Parent Loop BB110_139 Depth=1
                                        #     Parent Loop BB110_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB110_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB110_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB110_143 Depth=3
	movl	$0, -4(%rbp)
.LBB110_145:                            # %for.cond456
                                        #   Parent Loop BB110_139 Depth=1
                                        #     Parent Loop BB110_141 Depth=2
                                        #       Parent Loop BB110_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB110_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB110_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB110_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_145
.LBB110_148:                            # %for.end475
                                        #   in Loop: Header=BB110_143 Depth=3
	jmp	.LBB110_149
.LBB110_149:                            # %for.inc476
                                        #   in Loop: Header=BB110_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_143
.LBB110_150:                            # %for.end478
                                        #   in Loop: Header=BB110_141 Depth=2
	jmp	.LBB110_151
.LBB110_151:                            # %for.inc479
                                        #   in Loop: Header=BB110_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_141
.LBB110_152:                            # %for.end481
                                        #   in Loop: Header=BB110_139 Depth=1
	jmp	.LBB110_153
.LBB110_153:                            # %for.inc482
                                        #   in Loop: Header=BB110_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_139
.LBB110_154:                            # %for.end484
	jmp	.LBB110_155
.LBB110_155:                            # %if.end485
	jmp	.LBB110_156
.LBB110_156:                            # %if.end486
	jmp	.LBB110_157
.LBB110_157:                            # %if.end487
	jmp	.LBB110_180
.LBB110_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB110_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB110_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB110_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB110_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB110_161 Depth=1
	movl	$0, -4(%rbp)
.LBB110_163:                            # %for.cond499
                                        #   Parent Loop BB110_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB110_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB110_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB110_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_163
.LBB110_166:                            # %for.end519
                                        #   in Loop: Header=BB110_161 Depth=1
	jmp	.LBB110_167
.LBB110_167:                            # %for.inc520
                                        #   in Loop: Header=BB110_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_161
.LBB110_168:                            # %for.end522
	jmp	.LBB110_169
.LBB110_169:                            # %if.end523
	jmp	.LBB110_179
.LBB110_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB110_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB110_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB110_171 Depth=1
	movl	$0, -4(%rbp)
.LBB110_173:                            # %for.cond529
                                        #   Parent Loop BB110_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB110_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB110_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB110_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_173
.LBB110_176:                            # %for.end541
                                        #   in Loop: Header=BB110_171 Depth=1
	jmp	.LBB110_177
.LBB110_177:                            # %for.inc542
                                        #   in Loop: Header=BB110_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_171
.LBB110_178:                            # %for.end544
	jmp	.LBB110_179
.LBB110_179:                            # %if.end545
	jmp	.LBB110_180
.LBB110_180:                            # %sw.epilog
	cmpl	$1504766222, -68(%rbp)  # imm = 0x59B0E90E
	jne	.LBB110_182
.LBB110_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_181
.Lfunc_end110:
	.size	Conceal_Error.100, .Lfunc_end110-Conceal_Error.100
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI110_0:
	.quad	.LBB110_16
	.quad	.LBB110_158
	.quad	.LBB110_106
	.quad	.LBB110_180
	.quad	.LBB110_36
                                        # -- End function
	.text
	.globl	Error_Concealment.101   # -- Begin function Error_Concealment.101
	.p2align	4, 0x90
	.type	Error_Concealment.101,@function
Error_Concealment.101:                  # @Error_Concealment.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$262679712, -16(%rbp)   # imm = 0xFA82CA0
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB111_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	$0, -8(%rbp)
.LBB111_3:                              # %for.cond2
                                        #   Parent Loop BB111_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB111_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB111_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB111_6:                              # %if.end
                                        #   in Loop: Header=BB111_3 Depth=2
	jmp	.LBB111_7
.LBB111_7:                              # %for.inc
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_3
.LBB111_8:                              # %for.end
                                        #   in Loop: Header=BB111_1 Depth=1
	jmp	.LBB111_9
.LBB111_9:                              # %for.inc7
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_1
.LBB111_10:                             # %for.end9
	cmpl	$262679712, -16(%rbp)   # imm = 0xFA82CA0
	jne	.LBB111_12
.LBB111_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_11
.Lfunc_end111:
	.size	Error_Concealment.101, .Lfunc_end111-Error_Concealment.101
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.102       # -- Begin function Conceal_Error.102
	.p2align	4, 0x90
	.type	Conceal_Error.102,@function
Conceal_Error.102:                      # @Conceal_Error.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$43613894, -68(%rbp)    # imm = 0x2997EC6
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB112_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB112_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB112_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB112_4:                              # %land.end
.LBB112_5:                              # %lor.end
.LBB112_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB112_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB112_9
.LBB112_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB112_14
.LBB112_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB112_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB112_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB112_12:                             # %land.end51
.LBB112_13:                             # %lor.end53
.LBB112_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB112_180
# %bb.15:                               # %land.end54
	movq	.LJTI112_0(,%rax,8), %rax
	jmpq	*%rax
.LBB112_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB112_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB112_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB112_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB112_18 Depth=1
	movl	$0, -4(%rbp)
.LBB112_20:                             # %for.cond68
                                        #   Parent Loop BB112_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB112_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB112_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB112_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_20
.LBB112_23:                             # %for.end
                                        #   in Loop: Header=BB112_18 Depth=1
	jmp	.LBB112_24
.LBB112_24:                             # %for.inc85
                                        #   in Loop: Header=BB112_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_18
.LBB112_25:                             # %for.end87
	jmp	.LBB112_35
.LBB112_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB112_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB112_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB112_27 Depth=1
	movl	$0, -4(%rbp)
.LBB112_29:                             # %for.cond92
                                        #   Parent Loop BB112_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB112_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB112_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB112_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_29
.LBB112_32:                             # %for.end104
                                        #   in Loop: Header=BB112_27 Depth=1
	jmp	.LBB112_33
.LBB112_33:                             # %for.inc105
                                        #   in Loop: Header=BB112_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_27
.LBB112_34:                             # %for.end107
	jmp	.LBB112_35
.LBB112_35:                             # %if.end
	jmp	.LBB112_180
.LBB112_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB112_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_39 Depth 2
                                        #       Child Loop BB112_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB112_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB112_37 Depth=1
	movl	$0, -12(%rbp)
.LBB112_39:                             # %for.cond113
                                        #   Parent Loop BB112_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB112_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB112_39 Depth=2
	movl	$0, -4(%rbp)
.LBB112_41:                             # %for.cond117
                                        #   Parent Loop BB112_37 Depth=1
                                        #     Parent Loop BB112_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB112_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB112_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB112_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_41
.LBB112_44:                             # %for.end141
                                        #   in Loop: Header=BB112_39 Depth=2
	jmp	.LBB112_45
.LBB112_45:                             # %for.inc142
                                        #   in Loop: Header=BB112_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_39
.LBB112_46:                             # %for.end144
                                        #   in Loop: Header=BB112_37 Depth=1
	jmp	.LBB112_47
.LBB112_47:                             # %for.inc145
                                        #   in Loop: Header=BB112_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_37
.LBB112_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB112_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB112_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB112_49 Depth=1
	movl	$0, -8(%rbp)
.LBB112_51:                             # %for.cond152
                                        #   Parent Loop BB112_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB112_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB112_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB112_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_51
.LBB112_54:                             # %for.end162
                                        #   in Loop: Header=BB112_49 Depth=1
	jmp	.LBB112_55
.LBB112_55:                             # %for.inc163
                                        #   in Loop: Header=BB112_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_49
.LBB112_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB112_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB112_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB112_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB112_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB112_59 Depth=1
	movl	$0, -4(%rbp)
.LBB112_61:                             # %for.cond175
                                        #   Parent Loop BB112_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB112_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB112_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB112_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_61
.LBB112_64:                             # %for.end195
                                        #   in Loop: Header=BB112_59 Depth=1
	jmp	.LBB112_65
.LBB112_65:                             # %for.inc196
                                        #   in Loop: Header=BB112_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_59
.LBB112_66:                             # %for.end198
	jmp	.LBB112_95
.LBB112_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB112_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB112_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_71 Depth 2
                                        #       Child Loop BB112_73 Depth 3
                                        #         Child Loop BB112_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB112_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB112_71:                             # %for.cond210
                                        #   Parent Loop BB112_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_73 Depth 3
                                        #         Child Loop BB112_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB112_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB112_73:                             # %for.cond236
                                        #   Parent Loop BB112_69 Depth=1
                                        #     Parent Loop BB112_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB112_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB112_73 Depth=3
	movl	$0, -4(%rbp)
.LBB112_75:                             # %for.cond240
                                        #   Parent Loop BB112_69 Depth=1
                                        #     Parent Loop BB112_71 Depth=2
                                        #       Parent Loop BB112_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB112_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB112_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB112_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_75
.LBB112_78:                             # %for.end259
                                        #   in Loop: Header=BB112_73 Depth=3
	jmp	.LBB112_79
.LBB112_79:                             # %for.inc260
                                        #   in Loop: Header=BB112_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_73
.LBB112_80:                             # %for.end262
                                        #   in Loop: Header=BB112_71 Depth=2
	jmp	.LBB112_81
.LBB112_81:                             # %for.inc263
                                        #   in Loop: Header=BB112_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_71
.LBB112_82:                             # %for.end265
                                        #   in Loop: Header=BB112_69 Depth=1
	jmp	.LBB112_83
.LBB112_83:                             # %for.inc266
                                        #   in Loop: Header=BB112_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_69
.LBB112_84:                             # %for.end268
	jmp	.LBB112_94
.LBB112_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB112_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB112_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB112_86 Depth=1
	movl	$0, -4(%rbp)
.LBB112_88:                             # %for.cond274
                                        #   Parent Loop BB112_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB112_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB112_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB112_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_88
.LBB112_91:                             # %for.end294
                                        #   in Loop: Header=BB112_86 Depth=1
	jmp	.LBB112_92
.LBB112_92:                             # %for.inc295
                                        #   in Loop: Header=BB112_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_86
.LBB112_93:                             # %for.end297
	jmp	.LBB112_94
.LBB112_94:                             # %if.end298
	jmp	.LBB112_95
.LBB112_95:                             # %if.end299
	jmp	.LBB112_105
.LBB112_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB112_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB112_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB112_97 Depth=1
	movl	$0, -4(%rbp)
.LBB112_99:                             # %for.cond305
                                        #   Parent Loop BB112_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB112_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB112_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB112_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_99
.LBB112_102:                            # %for.end317
                                        #   in Loop: Header=BB112_97 Depth=1
	jmp	.LBB112_103
.LBB112_103:                            # %for.inc318
                                        #   in Loop: Header=BB112_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_97
.LBB112_104:                            # %for.end320
	jmp	.LBB112_105
.LBB112_105:                            # %if.end321
	jmp	.LBB112_180
.LBB112_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB112_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB112_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_110 Depth 2
                                        #       Child Loop BB112_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB112_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	$0, -12(%rbp)
.LBB112_110:                            # %for.cond331
                                        #   Parent Loop BB112_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB112_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB112_110 Depth=2
	movl	$0, -4(%rbp)
.LBB112_112:                            # %for.cond335
                                        #   Parent Loop BB112_108 Depth=1
                                        #     Parent Loop BB112_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB112_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB112_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB112_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_112
.LBB112_115:                            # %for.end359
                                        #   in Loop: Header=BB112_110 Depth=2
	jmp	.LBB112_116
.LBB112_116:                            # %for.inc360
                                        #   in Loop: Header=BB112_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_110
.LBB112_117:                            # %for.end362
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_118
.LBB112_118:                            # %for.inc363
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_108
.LBB112_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB112_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB112_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB112_120 Depth=1
	movl	$0, -8(%rbp)
.LBB112_122:                            # %for.cond370
                                        #   Parent Loop BB112_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB112_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB112_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB112_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_122
.LBB112_125:                            # %for.end380
                                        #   in Loop: Header=BB112_120 Depth=1
	jmp	.LBB112_126
.LBB112_126:                            # %for.inc381
                                        #   in Loop: Header=BB112_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_120
.LBB112_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB112_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB112_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB112_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB112_129 Depth=1
	movl	$0, -4(%rbp)
.LBB112_131:                            # %for.cond390
                                        #   Parent Loop BB112_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB112_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB112_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB112_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_131
.LBB112_134:                            # %for.end410
                                        #   in Loop: Header=BB112_129 Depth=1
	jmp	.LBB112_135
.LBB112_135:                            # %for.inc411
                                        #   in Loop: Header=BB112_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_129
.LBB112_136:                            # %for.end413
	jmp	.LBB112_156
.LBB112_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB112_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB112_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_141 Depth 2
                                        #       Child Loop BB112_143 Depth 3
                                        #         Child Loop BB112_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB112_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB112_141:                            # %for.cond425
                                        #   Parent Loop BB112_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_143 Depth 3
                                        #         Child Loop BB112_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB112_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB112_143:                            # %for.cond452
                                        #   Parent Loop BB112_139 Depth=1
                                        #     Parent Loop BB112_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB112_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB112_143 Depth=3
	movl	$0, -4(%rbp)
.LBB112_145:                            # %for.cond456
                                        #   Parent Loop BB112_139 Depth=1
                                        #     Parent Loop BB112_141 Depth=2
                                        #       Parent Loop BB112_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB112_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB112_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB112_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_145
.LBB112_148:                            # %for.end475
                                        #   in Loop: Header=BB112_143 Depth=3
	jmp	.LBB112_149
.LBB112_149:                            # %for.inc476
                                        #   in Loop: Header=BB112_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_143
.LBB112_150:                            # %for.end478
                                        #   in Loop: Header=BB112_141 Depth=2
	jmp	.LBB112_151
.LBB112_151:                            # %for.inc479
                                        #   in Loop: Header=BB112_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_141
.LBB112_152:                            # %for.end481
                                        #   in Loop: Header=BB112_139 Depth=1
	jmp	.LBB112_153
.LBB112_153:                            # %for.inc482
                                        #   in Loop: Header=BB112_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_139
.LBB112_154:                            # %for.end484
	jmp	.LBB112_155
.LBB112_155:                            # %if.end485
	jmp	.LBB112_156
.LBB112_156:                            # %if.end486
	jmp	.LBB112_157
.LBB112_157:                            # %if.end487
	jmp	.LBB112_180
.LBB112_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB112_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB112_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB112_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB112_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB112_161 Depth=1
	movl	$0, -4(%rbp)
.LBB112_163:                            # %for.cond499
                                        #   Parent Loop BB112_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB112_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB112_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB112_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_163
.LBB112_166:                            # %for.end519
                                        #   in Loop: Header=BB112_161 Depth=1
	jmp	.LBB112_167
.LBB112_167:                            # %for.inc520
                                        #   in Loop: Header=BB112_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_161
.LBB112_168:                            # %for.end522
	jmp	.LBB112_169
.LBB112_169:                            # %if.end523
	jmp	.LBB112_179
.LBB112_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB112_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB112_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB112_171 Depth=1
	movl	$0, -4(%rbp)
.LBB112_173:                            # %for.cond529
                                        #   Parent Loop BB112_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB112_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB112_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB112_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_173
.LBB112_176:                            # %for.end541
                                        #   in Loop: Header=BB112_171 Depth=1
	jmp	.LBB112_177
.LBB112_177:                            # %for.inc542
                                        #   in Loop: Header=BB112_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_171
.LBB112_178:                            # %for.end544
	jmp	.LBB112_179
.LBB112_179:                            # %if.end545
	jmp	.LBB112_180
.LBB112_180:                            # %sw.epilog
	cmpl	$43613894, -68(%rbp)    # imm = 0x2997EC6
	jne	.LBB112_182
.LBB112_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_181
.Lfunc_end112:
	.size	Conceal_Error.102, .Lfunc_end112-Conceal_Error.102
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI112_0:
	.quad	.LBB112_16
	.quad	.LBB112_158
	.quad	.LBB112_106
	.quad	.LBB112_180
	.quad	.LBB112_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.103 # -- Begin function compute_residue_b8block.103
	.p2align	4, 0x90
	.type	compute_residue_b8block.103,@function
compute_residue_b8block.103:            # @compute_residue_b8block.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1772543340, -36(%rbp)  # imm = 0x69A6DD6C
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB113_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB113_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB113_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB113_4:                              # %for.cond4
                                        #   Parent Loop BB113_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB113_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB113_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB113_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_4
.LBB113_7:                              # %for.end
                                        #   in Loop: Header=BB113_2 Depth=1
	jmp	.LBB113_8
.LBB113_8:                              # %for.inc22
                                        #   in Loop: Header=BB113_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_2
.LBB113_9:                              # %for.end24
	jmp	.LBB113_19
.LBB113_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB113_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB113_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB113_13:                             # %for.cond29
                                        #   Parent Loop BB113_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB113_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB113_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB113_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_13
.LBB113_16:                             # %for.end56
                                        #   in Loop: Header=BB113_11 Depth=1
	jmp	.LBB113_17
.LBB113_17:                             # %for.inc57
                                        #   in Loop: Header=BB113_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_11
.LBB113_18:                             # %for.end59
	jmp	.LBB113_19
.LBB113_19:                             # %if.end
	cmpl	$1772543340, -36(%rbp)  # imm = 0x69A6DD6C
	jne	.LBB113_21
.LBB113_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_20
.Lfunc_end113:
	.size	compute_residue_b8block.103, .Lfunc_end113-compute_residue_b8block.103
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.104      # -- Begin function DecOneForthPix.104
	.p2align	4, 0x90
	.type	DecOneForthPix.104,@function
DecOneForthPix.104:                     # @DecOneForthPix.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1811632372, -8(%rbp)   # imm = 0x6BFB50F4
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB114_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB114_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB114_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_1
.LBB114_4:                              # %for.end
	cmpl	$1811632372, -8(%rbp)   # imm = 0x6BFB50F4
	jne	.LBB114_6
.LBB114_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_5
.Lfunc_end114:
	.size	DecOneForthPix.104, .Lfunc_end114-DecOneForthPix.104
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.105 # -- Begin function Get_Reference_Block.105
	.p2align	4, 0x90
	.type	Get_Reference_Block.105,@function
Get_Reference_Block.105:                # @Get_Reference_Block.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1632407131, -20(%rbp)  # imm = 0x614C8E5B
	movq	%rdi, -56(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -48(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB115_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	$0, -8(%rbp)
.LBB115_3:                              # %for.cond5
                                        #   Parent Loop BB115_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB115_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_3
.LBB115_6:                              # %for.end
                                        #   in Loop: Header=BB115_1 Depth=1
	jmp	.LBB115_7
.LBB115_7:                              # %for.inc14
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_1
.LBB115_8:                              # %for.end16
	cmpl	$1632407131, -20(%rbp)  # imm = 0x614C8E5B
	jne	.LBB115_10
.LBB115_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_9
.Lfunc_end115:
	.size	Get_Reference_Block.105, .Lfunc_end115-Get_Reference_Block.105
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.106  # -- Begin function decode_one_b8block.106
	.p2align	4, 0x90
	.type	decode_one_b8block.106,@function
decode_one_b8block.106:                 # @decode_one_b8block.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$486843012, -84(%rbp)   # imm = 0x1D04A284
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB116_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB116_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB116_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_4:                              # %for.cond9
                                        #   Parent Loop BB116_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB116_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB116_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB116_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_4
.LBB116_7:                              # %for.end
                                        #   in Loop: Header=BB116_2 Depth=1
	jmp	.LBB116_8
.LBB116_8:                              # %for.inc26
                                        #   in Loop: Header=BB116_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_2
.LBB116_9:                              # %for.end28
	jmp	.LBB116_96
.LBB116_10:                             # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB116_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB116_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB116_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB116_31
.LBB116_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB116_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB116_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_17:                             # %for.cond40
                                        #   Parent Loop BB116_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB116_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB116_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB116_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_17
.LBB116_20:                             # %for.end49
                                        #   in Loop: Header=BB116_15 Depth=1
	jmp	.LBB116_21
.LBB116_21:                             # %for.inc50
                                        #   in Loop: Header=BB116_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_15
.LBB116_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB116_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB116_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB116_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB116_25:                             # %for.cond56
                                        #   Parent Loop BB116_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB116_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB116_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB116_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_25
.LBB116_28:                             # %for.end71
                                        #   in Loop: Header=BB116_23 Depth=1
	jmp	.LBB116_29
.LBB116_29:                             # %for.inc72
                                        #   in Loop: Header=BB116_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_23
.LBB116_30:                             # %for.end74
	jmp	.LBB116_60
.LBB116_31:                             # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB116_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB116_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB116_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB116_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB116_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB116_36:                             # %for.cond83
                                        #   Parent Loop BB116_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB116_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB116_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB116_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_36
.LBB116_39:                             # %for.end120
                                        #   in Loop: Header=BB116_34 Depth=1
	jmp	.LBB116_40
.LBB116_40:                             # %for.inc121
                                        #   in Loop: Header=BB116_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_34
.LBB116_41:                             # %for.end123
	jmp	.LBB116_51
.LBB116_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB116_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB116_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB116_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB116_45:                             # %for.cond129
                                        #   Parent Loop BB116_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB116_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB116_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB116_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_45
.LBB116_48:                             # %for.end145
                                        #   in Loop: Header=BB116_43 Depth=1
	jmp	.LBB116_49
.LBB116_49:                             # %for.inc146
                                        #   in Loop: Header=BB116_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_43
.LBB116_50:                             # %for.end148
	jmp	.LBB116_51
.LBB116_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB116_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB116_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_54:                             # %for.cond153
                                        #   Parent Loop BB116_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB116_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB116_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB116_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_54
.LBB116_57:                             # %for.end167
                                        #   in Loop: Header=BB116_52 Depth=1
	jmp	.LBB116_58
.LBB116_58:                             # %for.inc168
                                        #   in Loop: Header=BB116_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_52
.LBB116_59:                             # %for.end170
	jmp	.LBB116_60
.LBB116_60:                             # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB116_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB116_66
.LBB116_62:                             # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB116_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB116_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB116_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB116_86
.LBB116_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB116_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_69 Depth 2
                                        #       Child Loop BB116_74 Depth 3
                                        #         Child Loop BB116_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB116_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB116_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB116_69:                             # %for.cond197
                                        #   Parent Loop BB116_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_74 Depth 3
                                        #         Child Loop BB116_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB116_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB116_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB116_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB116_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB116_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB116_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB116_73:                             # %if.end218
                                        #   in Loop: Header=BB116_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB116_74:                             # %for.cond233
                                        #   Parent Loop BB116_67 Depth=1
                                        #     Parent Loop BB116_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB116_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB116_74 Depth=3
	movl	$0, -4(%rbp)
.LBB116_76:                             # %for.cond237
                                        #   Parent Loop BB116_67 Depth=1
                                        #     Parent Loop BB116_69 Depth=2
                                        #       Parent Loop BB116_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB116_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB116_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB116_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_76
.LBB116_79:                             # %for.end269
                                        #   in Loop: Header=BB116_74 Depth=3
	jmp	.LBB116_80
.LBB116_80:                             # %for.inc270
                                        #   in Loop: Header=BB116_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_74
.LBB116_81:                             # %for.end272
                                        #   in Loop: Header=BB116_69 Depth=2
	jmp	.LBB116_82
.LBB116_82:                             # %for.inc273
                                        #   in Loop: Header=BB116_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_69
.LBB116_83:                             # %for.end275
                                        #   in Loop: Header=BB116_67 Depth=1
	jmp	.LBB116_84
.LBB116_84:                             # %for.inc276
                                        #   in Loop: Header=BB116_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_67
.LBB116_85:                             # %for.end278
	jmp	.LBB116_95
.LBB116_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB116_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB116_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_89:                             # %for.cond284
                                        #   Parent Loop BB116_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB116_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB116_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB116_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_89
.LBB116_92:                             # %for.end310
                                        #   in Loop: Header=BB116_87 Depth=1
	jmp	.LBB116_93
.LBB116_93:                             # %for.inc311
                                        #   in Loop: Header=BB116_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_87
.LBB116_94:                             # %for.end313
	jmp	.LBB116_95
.LBB116_95:                             # %if.end314
	jmp	.LBB116_96
.LBB116_96:                             # %if.end315
	cmpl	$486843012, -84(%rbp)   # imm = 0x1D04A284
	jne	.LBB116_98
.LBB116_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_97
.Lfunc_end116:
	.size	decode_one_b8block.106, .Lfunc_end116-decode_one_b8block.106
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.107   # -- Begin function Error_Concealment.107
	.p2align	4, 0x90
	.type	Error_Concealment.107,@function
Error_Concealment.107:                  # @Error_Concealment.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1528104627, -16(%rbp)  # imm = 0x5B1506B3
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB117_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB117_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	$0, -8(%rbp)
.LBB117_3:                              # %for.cond2
                                        #   Parent Loop BB117_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB117_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB117_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB117_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB117_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB117_6:                              # %if.end
                                        #   in Loop: Header=BB117_3 Depth=2
	jmp	.LBB117_7
.LBB117_7:                              # %for.inc
                                        #   in Loop: Header=BB117_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_3
.LBB117_8:                              # %for.end
                                        #   in Loop: Header=BB117_1 Depth=1
	jmp	.LBB117_9
.LBB117_9:                              # %for.inc7
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_1
.LBB117_10:                             # %for.end9
	cmpl	$1528104627, -16(%rbp)  # imm = 0x5B1506B3
	jne	.LBB117_12
.LBB117_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_11
.Lfunc_end117:
	.size	Error_Concealment.107, .Lfunc_end117-Error_Concealment.107
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.108 # -- Begin function Get_Reference_Pixel.108
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.108,@function
Get_Reference_Pixel.108:                # @Get_Reference_Pixel.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$75550240, -104(%rbp)   # imm = 0x480CE20
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB118_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB118_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB118_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB118_5
.LBB118_4:                              # %cond.false
	movl	-28(%rbp), %ecx
.LBB118_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB118_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB118_11
.LBB118_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB118_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB118_10
.LBB118_9:                              # %cond.false13
	movl	-28(%rbp), %ecx
.LBB118_10:                             # %cond.end14
.LBB118_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB118_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB118_14
.LBB118_13:                             # %cond.false20
	movl	-24(%rbp), %ecx
.LBB118_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB118_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB118_20
.LBB118_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB118_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB118_19
.LBB118_18:                             # %cond.false28
	movl	-24(%rbp), %ecx
.LBB118_19:                             # %cond.end29
.LBB118_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_332
.LBB118_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB118_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB118_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB118_25
.LBB118_24:                             # %cond.false41
	movl	-28(%rbp), %eax
.LBB118_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB118_31
.LBB118_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB118_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB118_30
.LBB118_29:                             # %cond.false51
	movl	-28(%rbp), %eax
.LBB118_30:                             # %cond.end52
.LBB118_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB118_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB118_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB118_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB118_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB118_36
.LBB118_35:                             # %cond.false61
                                        #   in Loop: Header=BB118_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_36:                             # %cond.end63
                                        #   in Loop: Header=BB118_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB118_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB118_42
.LBB118_38:                             # %cond.false68
                                        #   in Loop: Header=BB118_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB118_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB118_41
.LBB118_40:                             # %cond.false73
                                        #   in Loop: Header=BB118_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_41:                             # %cond.end75
                                        #   in Loop: Header=BB118_32 Depth=1
.LBB118_42:                             # %cond.end77
                                        #   in Loop: Header=BB118_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB118_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_32
.LBB118_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_47
.LBB118_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB118_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB118_53
.LBB118_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_52
.LBB118_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB118_52:                             # %cond.end113
.LBB118_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB118_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB118_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB118_57
.LBB118_56:                             # %cond.false125
	movl	-24(%rbp), %edx
.LBB118_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB118_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB118_63
.LBB118_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB118_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB118_62
.LBB118_61:                             # %cond.false135
	movl	-24(%rbp), %edx
.LBB118_62:                             # %cond.end136
.LBB118_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB118_76
.LBB118_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB118_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB118_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB118_68
.LBB118_67:                             # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB118_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB118_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB118_74
.LBB118_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB118_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB118_73
.LBB118_72:                             # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB118_73:                             # %cond.end169
.LBB118_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB118_75:                             # %if.end
	jmp	.LBB118_76
.LBB118_76:                             # %if.end178
	jmp	.LBB118_331
.LBB118_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB118_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB118_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB118_81
.LBB118_80:                             # %cond.false186
	movl	-24(%rbp), %eax
.LBB118_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB118_87
.LBB118_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB118_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB118_86
.LBB118_85:                             # %cond.false196
	movl	-24(%rbp), %eax
.LBB118_86:                             # %cond.end197
.LBB118_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB118_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB118_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB118_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB118_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB118_92
.LBB118_91:                             # %cond.false209
                                        #   in Loop: Header=BB118_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB118_92:                             # %cond.end211
                                        #   in Loop: Header=BB118_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB118_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB118_98
.LBB118_94:                             # %cond.false216
                                        #   in Loop: Header=BB118_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB118_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB118_97
.LBB118_96:                             # %cond.false221
                                        #   in Loop: Header=BB118_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB118_97:                             # %cond.end223
                                        #   in Loop: Header=BB118_88 Depth=1
.LBB118_98:                             # %cond.end225
                                        #   in Loop: Header=BB118_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB118_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB118_88
.LBB118_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_103
.LBB118_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB118_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB118_109
.LBB118_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_108
.LBB118_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB118_108:                            # %cond.end266
.LBB118_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB118_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB118_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB118_113
.LBB118_112:                            # %cond.false276
	movl	-28(%rbp), %edx
.LBB118_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB118_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB118_119
.LBB118_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB118_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB118_118
.LBB118_117:                            # %cond.false286
	movl	-28(%rbp), %edx
.LBB118_118:                            # %cond.end287
.LBB118_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB118_132
.LBB118_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB118_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB118_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB118_124
.LBB118_123:                            # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB118_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB118_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB118_130
.LBB118_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB118_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB118_129
.LBB118_128:                            # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB118_129:                            # %cond.end320
.LBB118_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB118_131:                            # %if.end331
	jmp	.LBB118_132
.LBB118_132:                            # %if.end332
	jmp	.LBB118_330
.LBB118_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB118_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB118_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB118_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB118_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB118_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB118_139
.LBB118_138:                            # %cond.false345
                                        #   in Loop: Header=BB118_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB118_139:                            # %cond.end347
                                        #   in Loop: Header=BB118_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB118_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB118_145
.LBB118_141:                            # %cond.false352
                                        #   in Loop: Header=BB118_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB118_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB118_144
.LBB118_143:                            # %cond.false357
                                        #   in Loop: Header=BB118_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB118_144:                            # %cond.end359
                                        #   in Loop: Header=BB118_135 Depth=1
.LBB118_145:                            # %cond.end361
                                        #   in Loop: Header=BB118_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB118_146:                            # %for.cond363
                                        #   Parent Loop BB118_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB118_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB118_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB118_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB118_150
.LBB118_149:                            # %cond.false371
                                        #   in Loop: Header=BB118_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_150:                            # %cond.end373
                                        #   in Loop: Header=BB118_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB118_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_156
.LBB118_152:                            # %cond.false378
                                        #   in Loop: Header=BB118_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB118_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB118_155
.LBB118_154:                            # %cond.false383
                                        #   in Loop: Header=BB118_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_155:                            # %cond.end385
                                        #   in Loop: Header=BB118_146 Depth=2
.LBB118_156:                            # %cond.end387
                                        #   in Loop: Header=BB118_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB118_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_146
.LBB118_158:                            # %for.end401
                                        #   in Loop: Header=BB118_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB118_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB118_135
.LBB118_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB118_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB118_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB118_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB118_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB118_161
.LBB118_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_167
.LBB118_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB118_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB118_173
.LBB118_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_172
.LBB118_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB118_172:                            # %cond.end449
.LBB118_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB118_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB118_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_177
.LBB118_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB118_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB118_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB118_183
.LBB118_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB118_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_182
.LBB118_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB118_182:                            # %cond.end486
.LBB118_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB118_196
.LBB118_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB118_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB118_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_188
.LBB118_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB118_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB118_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB118_194
.LBB118_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB118_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_193
.LBB118_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB118_193:                            # %cond.end526
.LBB118_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB118_195:                            # %if.end532
	jmp	.LBB118_196
.LBB118_196:                            # %if.end533
	jmp	.LBB118_329
.LBB118_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB118_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB118_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB118_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB118_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB118_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB118_203
.LBB118_202:                            # %cond.false546
                                        #   in Loop: Header=BB118_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_203:                            # %cond.end548
                                        #   in Loop: Header=BB118_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB118_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB118_209
.LBB118_205:                            # %cond.false553
                                        #   in Loop: Header=BB118_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB118_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB118_208
.LBB118_207:                            # %cond.false558
                                        #   in Loop: Header=BB118_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_208:                            # %cond.end560
                                        #   in Loop: Header=BB118_199 Depth=1
.LBB118_209:                            # %cond.end562
                                        #   in Loop: Header=BB118_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB118_210:                            # %for.cond564
                                        #   Parent Loop BB118_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB118_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB118_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB118_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB118_214
.LBB118_213:                            # %cond.false572
                                        #   in Loop: Header=BB118_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB118_214:                            # %cond.end574
                                        #   in Loop: Header=BB118_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB118_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_220
.LBB118_216:                            # %cond.false579
                                        #   in Loop: Header=BB118_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB118_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB118_219
.LBB118_218:                            # %cond.false584
                                        #   in Loop: Header=BB118_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB118_219:                            # %cond.end586
                                        #   in Loop: Header=BB118_210 Depth=2
.LBB118_220:                            # %cond.end588
                                        #   in Loop: Header=BB118_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB118_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB118_210
.LBB118_222:                            # %for.end602
                                        #   in Loop: Header=BB118_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB118_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_199
.LBB118_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB118_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB118_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB118_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB118_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_225
.LBB118_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_231
.LBB118_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB118_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB118_237
.LBB118_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_236
.LBB118_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB118_236:                            # %cond.end650
.LBB118_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB118_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB118_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_241
.LBB118_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB118_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB118_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB118_247
.LBB118_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB118_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_246
.LBB118_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB118_246:                            # %cond.end687
.LBB118_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB118_258
.LBB118_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB118_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_251
.LBB118_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB118_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB118_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB118_257
.LBB118_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB118_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_256
.LBB118_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB118_256:                            # %cond.end724
.LBB118_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB118_258:                            # %if.end730
	jmp	.LBB118_328
.LBB118_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB118_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB118_262
.LBB118_261:                            # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB118_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB118_265
.LBB118_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB118_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB118_271
.LBB118_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB118_270
.LBB118_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB118_270:                            # %cond.end753
.LBB118_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB118_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB118_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB118_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB118_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB118_276
.LBB118_275:                            # %cond.false765
                                        #   in Loop: Header=BB118_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_276:                            # %cond.end767
                                        #   in Loop: Header=BB118_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB118_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB118_282
.LBB118_278:                            # %cond.false772
                                        #   in Loop: Header=BB118_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB118_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB118_281
.LBB118_280:                            # %cond.false777
                                        #   in Loop: Header=BB118_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_281:                            # %cond.end779
                                        #   in Loop: Header=BB118_272 Depth=1
.LBB118_282:                            # %cond.end781
                                        #   in Loop: Header=BB118_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB118_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_272
.LBB118_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_287
.LBB118_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB118_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB118_293
.LBB118_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_292
.LBB118_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB118_292:                            # %cond.end822
.LBB118_293:                            # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB118_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB118_296
.LBB118_295:                            # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB118_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB118_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB118_299
.LBB118_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB118_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB118_305
.LBB118_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB118_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB118_304
.LBB118_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB118_304:                            # %cond.end847
.LBB118_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB118_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB118_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB118_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB118_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB118_310
.LBB118_309:                            # %cond.false859
                                        #   in Loop: Header=BB118_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB118_310:                            # %cond.end861
                                        #   in Loop: Header=BB118_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB118_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB118_316
.LBB118_312:                            # %cond.false866
                                        #   in Loop: Header=BB118_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB118_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB118_315
.LBB118_314:                            # %cond.false871
                                        #   in Loop: Header=BB118_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB118_315:                            # %cond.end873
                                        #   in Loop: Header=BB118_306 Depth=1
.LBB118_316:                            # %cond.end875
                                        #   in Loop: Header=BB118_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB118_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB118_306
.LBB118_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_321
.LBB118_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB118_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB118_327
.LBB118_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_326
.LBB118_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB118_326:                            # %cond.end916
.LBB118_327:                            # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB118_328:                            # %if.end922
	jmp	.LBB118_329
.LBB118_329:                            # %if.end923
	jmp	.LBB118_330
.LBB118_330:                            # %if.end924
	jmp	.LBB118_331
.LBB118_331:                            # %if.end925
	jmp	.LBB118_332
.LBB118_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$75550240, -104(%rbp)   # imm = 0x480CE20
	jne	.LBB118_334
.LBB118_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_333
.Lfunc_end118:
	.size	Get_Reference_Pixel.108, .Lfunc_end118-Get_Reference_Pixel.108
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.109 # -- Begin function Get_Reference_Block.109
	.p2align	4, 0x90
	.type	Get_Reference_Block.109,@function
Get_Reference_Block.109:                # @Get_Reference_Block.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$498521399, -32(%rbp)   # imm = 0x1DB6D537
	movq	%rdi, -56(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -48(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB119_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB119_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	$0, -4(%rbp)
.LBB119_3:                              # %for.cond5
                                        #   Parent Loop BB119_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB119_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB119_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_3
.LBB119_6:                              # %for.end
                                        #   in Loop: Header=BB119_1 Depth=1
	jmp	.LBB119_7
.LBB119_7:                              # %for.inc14
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_1
.LBB119_8:                              # %for.end16
	cmpl	$498521399, -32(%rbp)   # imm = 0x1DB6D537
	jne	.LBB119_10
.LBB119_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_9
.Lfunc_end119:
	.size	Get_Reference_Block.109, .Lfunc_end119-Get_Reference_Block.109
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.110   # -- Begin function Error_Concealment.110
	.p2align	4, 0x90
	.type	Error_Concealment.110,@function
Error_Concealment.110:                  # @Error_Concealment.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$501588732, -16(%rbp)   # imm = 0x1DE5A2FC
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB120_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB120_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB120_1 Depth=1
	movl	$0, -4(%rbp)
.LBB120_3:                              # %for.cond2
                                        #   Parent Loop BB120_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB120_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB120_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB120_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB120_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB120_6:                              # %if.end
                                        #   in Loop: Header=BB120_3 Depth=2
	jmp	.LBB120_7
.LBB120_7:                              # %for.inc
                                        #   in Loop: Header=BB120_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_3
.LBB120_8:                              # %for.end
                                        #   in Loop: Header=BB120_1 Depth=1
	jmp	.LBB120_9
.LBB120_9:                              # %for.inc7
                                        #   in Loop: Header=BB120_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_1
.LBB120_10:                             # %for.end9
	cmpl	$501588732, -16(%rbp)   # imm = 0x1DE5A2FC
	jne	.LBB120_12
.LBB120_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_11
.Lfunc_end120:
	.size	Error_Concealment.110, .Lfunc_end120-Error_Concealment.110
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.111 # -- Begin function Get_Reference_Block.111
	.p2align	4, 0x90
	.type	Get_Reference_Block.111,@function
Get_Reference_Block.111:                # @Get_Reference_Block.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1073384059, -16(%rbp)  # imm = 0x3FFA8A7B
	movq	%rdi, -48(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB121_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	$0, -4(%rbp)
.LBB121_3:                              # %for.cond5
                                        #   Parent Loop BB121_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB121_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB121_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_3
.LBB121_6:                              # %for.end
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_7
.LBB121_7:                              # %for.inc14
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_1
.LBB121_8:                              # %for.end16
	cmpl	$1073384059, -16(%rbp)  # imm = 0x3FFA8A7B
	jne	.LBB121_10
.LBB121_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_9
.Lfunc_end121:
	.size	Get_Reference_Block.111, .Lfunc_end121-Get_Reference_Block.111
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.112  # -- Begin function decode_one_b8block.112
	.p2align	4, 0x90
	.type	decode_one_b8block.112,@function
decode_one_b8block.112:                 # @decode_one_b8block.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$273070538, -84(%rbp)   # imm = 0x1046B9CA
	movl	%edi, -56(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB122_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB122_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB122_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB122_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB122_4:                              # %for.cond9
                                        #   Parent Loop BB122_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB122_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB122_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB122_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_4
.LBB122_7:                              # %for.end
                                        #   in Loop: Header=BB122_2 Depth=1
	jmp	.LBB122_8
.LBB122_8:                              # %for.inc26
                                        #   in Loop: Header=BB122_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_2
.LBB122_9:                              # %for.end28
	jmp	.LBB122_96
.LBB122_10:                             # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB122_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB122_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB122_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB122_31
.LBB122_14:                             # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB122_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB122_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB122_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB122_17:                             # %for.cond40
                                        #   Parent Loop BB122_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB122_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB122_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB122_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_17
.LBB122_20:                             # %for.end49
                                        #   in Loop: Header=BB122_15 Depth=1
	jmp	.LBB122_21
.LBB122_21:                             # %for.inc50
                                        #   in Loop: Header=BB122_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_15
.LBB122_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB122_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB122_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB122_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB122_25:                             # %for.cond56
                                        #   Parent Loop BB122_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB122_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB122_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB122_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_25
.LBB122_28:                             # %for.end71
                                        #   in Loop: Header=BB122_23 Depth=1
	jmp	.LBB122_29
.LBB122_29:                             # %for.inc72
                                        #   in Loop: Header=BB122_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_23
.LBB122_30:                             # %for.end74
	jmp	.LBB122_60
.LBB122_31:                             # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB122_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB122_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB122_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB122_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB122_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB122_36:                             # %for.cond83
                                        #   Parent Loop BB122_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB122_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB122_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB122_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_36
.LBB122_39:                             # %for.end120
                                        #   in Loop: Header=BB122_34 Depth=1
	jmp	.LBB122_40
.LBB122_40:                             # %for.inc121
                                        #   in Loop: Header=BB122_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_34
.LBB122_41:                             # %for.end123
	jmp	.LBB122_51
.LBB122_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB122_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB122_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB122_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB122_45:                             # %for.cond129
                                        #   Parent Loop BB122_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB122_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB122_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB122_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_45
.LBB122_48:                             # %for.end145
                                        #   in Loop: Header=BB122_43 Depth=1
	jmp	.LBB122_49
.LBB122_49:                             # %for.inc146
                                        #   in Loop: Header=BB122_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_43
.LBB122_50:                             # %for.end148
	jmp	.LBB122_51
.LBB122_51:                             # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB122_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB122_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB122_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB122_54:                             # %for.cond153
                                        #   Parent Loop BB122_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB122_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB122_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB122_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_54
.LBB122_57:                             # %for.end167
                                        #   in Loop: Header=BB122_52 Depth=1
	jmp	.LBB122_58
.LBB122_58:                             # %for.inc168
                                        #   in Loop: Header=BB122_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_52
.LBB122_59:                             # %for.end170
	jmp	.LBB122_60
.LBB122_60:                             # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB122_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB122_66
.LBB122_62:                             # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB122_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB122_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB122_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB122_86
.LBB122_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB122_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_69 Depth 2
                                        #       Child Loop BB122_74 Depth 3
                                        #         Child Loop BB122_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB122_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB122_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB122_69:                             # %for.cond197
                                        #   Parent Loop BB122_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_74 Depth 3
                                        #         Child Loop BB122_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB122_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB122_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB122_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB122_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB122_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB122_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB122_73:                             # %if.end218
                                        #   in Loop: Header=BB122_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB122_74:                             # %for.cond233
                                        #   Parent Loop BB122_67 Depth=1
                                        #     Parent Loop BB122_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB122_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB122_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB122_74 Depth=3
	movl	$0, -8(%rbp)
.LBB122_76:                             # %for.cond237
                                        #   Parent Loop BB122_67 Depth=1
                                        #     Parent Loop BB122_69 Depth=2
                                        #       Parent Loop BB122_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB122_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB122_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB122_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_76
.LBB122_79:                             # %for.end269
                                        #   in Loop: Header=BB122_74 Depth=3
	jmp	.LBB122_80
.LBB122_80:                             # %for.inc270
                                        #   in Loop: Header=BB122_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_74
.LBB122_81:                             # %for.end272
                                        #   in Loop: Header=BB122_69 Depth=2
	jmp	.LBB122_82
.LBB122_82:                             # %for.inc273
                                        #   in Loop: Header=BB122_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_69
.LBB122_83:                             # %for.end275
                                        #   in Loop: Header=BB122_67 Depth=1
	jmp	.LBB122_84
.LBB122_84:                             # %for.inc276
                                        #   in Loop: Header=BB122_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_67
.LBB122_85:                             # %for.end278
	jmp	.LBB122_95
.LBB122_86:                             # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB122_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB122_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB122_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB122_89:                             # %for.cond284
                                        #   Parent Loop BB122_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB122_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB122_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB122_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_89
.LBB122_92:                             # %for.end310
                                        #   in Loop: Header=BB122_87 Depth=1
	jmp	.LBB122_93
.LBB122_93:                             # %for.inc311
                                        #   in Loop: Header=BB122_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_87
.LBB122_94:                             # %for.end313
	jmp	.LBB122_95
.LBB122_95:                             # %if.end314
	jmp	.LBB122_96
.LBB122_96:                             # %if.end315
	cmpl	$273070538, -84(%rbp)   # imm = 0x1046B9CA
	jne	.LBB122_98
.LBB122_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_97
.Lfunc_end122:
	.size	decode_one_b8block.112, .Lfunc_end122-decode_one_b8block.112
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.113      # -- Begin function DecOneForthPix.113
	.p2align	4, 0x90
	.type	DecOneForthPix.113,@function
DecOneForthPix.113:                     # @DecOneForthPix.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1628935056, -12(%rbp)  # imm = 0x61179390
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB123_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB123_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB123_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_1
.LBB123_4:                              # %for.end
	cmpl	$1628935056, -12(%rbp)  # imm = 0x61179390
	jne	.LBB123_6
.LBB123_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_5
.Lfunc_end123:
	.size	DecOneForthPix.113, .Lfunc_end123-DecOneForthPix.113
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.114  # -- Begin function decode_one_b8block.114
	.p2align	4, 0x90
	.type	decode_one_b8block.114,@function
decode_one_b8block.114:                 # @decode_one_b8block.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$618495940, -84(%rbp)   # imm = 0x24DD7FC4
	movl	%edi, -40(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB124_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB124_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB124_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_4:                              # %for.cond9
                                        #   Parent Loop BB124_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB124_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB124_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_4
.LBB124_7:                              # %for.end
                                        #   in Loop: Header=BB124_2 Depth=1
	jmp	.LBB124_8
.LBB124_8:                              # %for.inc26
                                        #   in Loop: Header=BB124_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_2
.LBB124_9:                              # %for.end28
	jmp	.LBB124_96
.LBB124_10:                             # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB124_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB124_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB124_31
.LBB124_14:                             # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB124_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB124_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_17:                             # %for.cond40
                                        #   Parent Loop BB124_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB124_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB124_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_17
.LBB124_20:                             # %for.end49
                                        #   in Loop: Header=BB124_15 Depth=1
	jmp	.LBB124_21
.LBB124_21:                             # %for.inc50
                                        #   in Loop: Header=BB124_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_15
.LBB124_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB124_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB124_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB124_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB124_25:                             # %for.cond56
                                        #   Parent Loop BB124_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB124_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB124_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB124_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_25
.LBB124_28:                             # %for.end71
                                        #   in Loop: Header=BB124_23 Depth=1
	jmp	.LBB124_29
.LBB124_29:                             # %for.inc72
                                        #   in Loop: Header=BB124_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_23
.LBB124_30:                             # %for.end74
	jmp	.LBB124_60
.LBB124_31:                             # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB124_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB124_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB124_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB124_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB124_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB124_36:                             # %for.cond83
                                        #   Parent Loop BB124_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB124_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB124_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB124_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_36
.LBB124_39:                             # %for.end120
                                        #   in Loop: Header=BB124_34 Depth=1
	jmp	.LBB124_40
.LBB124_40:                             # %for.inc121
                                        #   in Loop: Header=BB124_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_34
.LBB124_41:                             # %for.end123
	jmp	.LBB124_51
.LBB124_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB124_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB124_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB124_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB124_45:                             # %for.cond129
                                        #   Parent Loop BB124_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB124_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB124_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB124_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_45
.LBB124_48:                             # %for.end145
                                        #   in Loop: Header=BB124_43 Depth=1
	jmp	.LBB124_49
.LBB124_49:                             # %for.inc146
                                        #   in Loop: Header=BB124_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_43
.LBB124_50:                             # %for.end148
	jmp	.LBB124_51
.LBB124_51:                             # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB124_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB124_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_54:                             # %for.cond153
                                        #   Parent Loop BB124_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB124_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB124_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_54
.LBB124_57:                             # %for.end167
                                        #   in Loop: Header=BB124_52 Depth=1
	jmp	.LBB124_58
.LBB124_58:                             # %for.inc168
                                        #   in Loop: Header=BB124_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_52
.LBB124_59:                             # %for.end170
	jmp	.LBB124_60
.LBB124_60:                             # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB124_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB124_66
.LBB124_62:                             # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB124_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB124_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB124_86
.LBB124_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB124_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_69 Depth 2
                                        #       Child Loop BB124_74 Depth 3
                                        #         Child Loop BB124_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB124_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB124_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB124_69:                             # %for.cond197
                                        #   Parent Loop BB124_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_74 Depth 3
                                        #         Child Loop BB124_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB124_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB124_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB124_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB124_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB124_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB124_73:                             # %if.end218
                                        #   in Loop: Header=BB124_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB124_74:                             # %for.cond233
                                        #   Parent Loop BB124_67 Depth=1
                                        #     Parent Loop BB124_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB124_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB124_74 Depth=3
	movl	$0, -8(%rbp)
.LBB124_76:                             # %for.cond237
                                        #   Parent Loop BB124_67 Depth=1
                                        #     Parent Loop BB124_69 Depth=2
                                        #       Parent Loop BB124_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB124_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB124_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB124_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_76
.LBB124_79:                             # %for.end269
                                        #   in Loop: Header=BB124_74 Depth=3
	jmp	.LBB124_80
.LBB124_80:                             # %for.inc270
                                        #   in Loop: Header=BB124_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_74
.LBB124_81:                             # %for.end272
                                        #   in Loop: Header=BB124_69 Depth=2
	jmp	.LBB124_82
.LBB124_82:                             # %for.inc273
                                        #   in Loop: Header=BB124_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_69
.LBB124_83:                             # %for.end275
                                        #   in Loop: Header=BB124_67 Depth=1
	jmp	.LBB124_84
.LBB124_84:                             # %for.inc276
                                        #   in Loop: Header=BB124_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_67
.LBB124_85:                             # %for.end278
	jmp	.LBB124_95
.LBB124_86:                             # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB124_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB124_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_89:                             # %for.cond284
                                        #   Parent Loop BB124_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB124_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB124_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_89
.LBB124_92:                             # %for.end310
                                        #   in Loop: Header=BB124_87 Depth=1
	jmp	.LBB124_93
.LBB124_93:                             # %for.inc311
                                        #   in Loop: Header=BB124_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_87
.LBB124_94:                             # %for.end313
	jmp	.LBB124_95
.LBB124_95:                             # %if.end314
	jmp	.LBB124_96
.LBB124_96:                             # %if.end315
	cmpl	$618495940, -84(%rbp)   # imm = 0x24DD7FC4
	jne	.LBB124_98
.LBB124_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_97
.Lfunc_end124:
	.size	decode_one_b8block.114, .Lfunc_end124-decode_one_b8block.114
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.115 # -- Begin function Get_Reference_Pixel.115
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.115,@function
Get_Reference_Pixel.115:                # @Get_Reference_Pixel.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$980456005, -108(%rbp)  # imm = 0x3A709245
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB125_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB125_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB125_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB125_5
.LBB125_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB125_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB125_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB125_11
.LBB125_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB125_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB125_10
.LBB125_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB125_10:                             # %cond.end14
.LBB125_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB125_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB125_14
.LBB125_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB125_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB125_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB125_20
.LBB125_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB125_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB125_19
.LBB125_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB125_19:                             # %cond.end29
.LBB125_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_332
.LBB125_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB125_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB125_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB125_25
.LBB125_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB125_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB125_31
.LBB125_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB125_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB125_30
.LBB125_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB125_30:                             # %cond.end52
.LBB125_31:                             # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB125_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB125_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB125_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB125_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB125_36
.LBB125_35:                             # %cond.false61
                                        #   in Loop: Header=BB125_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB125_36:                             # %cond.end63
                                        #   in Loop: Header=BB125_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB125_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB125_42
.LBB125_38:                             # %cond.false68
                                        #   in Loop: Header=BB125_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB125_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB125_41
.LBB125_40:                             # %cond.false73
                                        #   in Loop: Header=BB125_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB125_41:                             # %cond.end75
                                        #   in Loop: Header=BB125_32 Depth=1
.LBB125_42:                             # %cond.end77
                                        #   in Loop: Header=BB125_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB125_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_32
.LBB125_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_47
.LBB125_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB125_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB125_53
.LBB125_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_52
.LBB125_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB125_52:                             # %cond.end113
.LBB125_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB125_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB125_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB125_57
.LBB125_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB125_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB125_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB125_63
.LBB125_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB125_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB125_62
.LBB125_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB125_62:                             # %cond.end136
.LBB125_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB125_76
.LBB125_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB125_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB125_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB125_68
.LBB125_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB125_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB125_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB125_74
.LBB125_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB125_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB125_73
.LBB125_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB125_73:                             # %cond.end169
.LBB125_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB125_75:                             # %if.end
	jmp	.LBB125_76
.LBB125_76:                             # %if.end178
	jmp	.LBB125_331
.LBB125_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB125_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB125_81
.LBB125_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB125_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB125_87
.LBB125_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB125_86
.LBB125_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB125_86:                             # %cond.end197
.LBB125_87:                             # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB125_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB125_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB125_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB125_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB125_92
.LBB125_91:                             # %cond.false209
                                        #   in Loop: Header=BB125_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB125_92:                             # %cond.end211
                                        #   in Loop: Header=BB125_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB125_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB125_98
.LBB125_94:                             # %cond.false216
                                        #   in Loop: Header=BB125_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB125_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB125_97
.LBB125_96:                             # %cond.false221
                                        #   in Loop: Header=BB125_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB125_97:                             # %cond.end223
                                        #   in Loop: Header=BB125_88 Depth=1
.LBB125_98:                             # %cond.end225
                                        #   in Loop: Header=BB125_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB125_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_88
.LBB125_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_103
.LBB125_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB125_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB125_109
.LBB125_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_108
.LBB125_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB125_108:                            # %cond.end266
.LBB125_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB125_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB125_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB125_113
.LBB125_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB125_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB125_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB125_119
.LBB125_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB125_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB125_118
.LBB125_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB125_118:                            # %cond.end287
.LBB125_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB125_132
.LBB125_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB125_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB125_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB125_124
.LBB125_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB125_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB125_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB125_130
.LBB125_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB125_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB125_129
.LBB125_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB125_129:                            # %cond.end320
.LBB125_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB125_131:                            # %if.end331
	jmp	.LBB125_132
.LBB125_132:                            # %if.end332
	jmp	.LBB125_330
.LBB125_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB125_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB125_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB125_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB125_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB125_139
.LBB125_138:                            # %cond.false345
                                        #   in Loop: Header=BB125_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB125_139:                            # %cond.end347
                                        #   in Loop: Header=BB125_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB125_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB125_145
.LBB125_141:                            # %cond.false352
                                        #   in Loop: Header=BB125_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB125_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB125_144
.LBB125_143:                            # %cond.false357
                                        #   in Loop: Header=BB125_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB125_144:                            # %cond.end359
                                        #   in Loop: Header=BB125_135 Depth=1
.LBB125_145:                            # %cond.end361
                                        #   in Loop: Header=BB125_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB125_146:                            # %for.cond363
                                        #   Parent Loop BB125_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB125_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB125_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB125_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB125_150
.LBB125_149:                            # %cond.false371
                                        #   in Loop: Header=BB125_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB125_150:                            # %cond.end373
                                        #   in Loop: Header=BB125_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB125_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB125_156
.LBB125_152:                            # %cond.false378
                                        #   in Loop: Header=BB125_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB125_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB125_155
.LBB125_154:                            # %cond.false383
                                        #   in Loop: Header=BB125_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB125_155:                            # %cond.end385
                                        #   in Loop: Header=BB125_146 Depth=2
.LBB125_156:                            # %cond.end387
                                        #   in Loop: Header=BB125_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB125_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_146
.LBB125_158:                            # %for.end401
                                        #   in Loop: Header=BB125_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB125_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_135
.LBB125_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB125_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB125_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB125_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB125_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_161
.LBB125_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_167
.LBB125_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB125_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB125_173
.LBB125_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_172
.LBB125_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB125_172:                            # %cond.end449
.LBB125_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB125_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB125_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_177
.LBB125_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB125_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB125_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB125_183
.LBB125_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB125_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_182
.LBB125_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB125_182:                            # %cond.end486
.LBB125_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB125_196
.LBB125_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB125_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB125_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_188
.LBB125_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB125_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB125_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB125_194
.LBB125_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB125_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_193
.LBB125_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB125_193:                            # %cond.end526
.LBB125_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB125_195:                            # %if.end532
	jmp	.LBB125_196
.LBB125_196:                            # %if.end533
	jmp	.LBB125_329
.LBB125_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB125_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB125_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB125_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB125_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB125_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB125_203
.LBB125_202:                            # %cond.false546
                                        #   in Loop: Header=BB125_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB125_203:                            # %cond.end548
                                        #   in Loop: Header=BB125_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB125_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB125_209
.LBB125_205:                            # %cond.false553
                                        #   in Loop: Header=BB125_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB125_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB125_208
.LBB125_207:                            # %cond.false558
                                        #   in Loop: Header=BB125_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB125_208:                            # %cond.end560
                                        #   in Loop: Header=BB125_199 Depth=1
.LBB125_209:                            # %cond.end562
                                        #   in Loop: Header=BB125_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB125_210:                            # %for.cond564
                                        #   Parent Loop BB125_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB125_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB125_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB125_214
.LBB125_213:                            # %cond.false572
                                        #   in Loop: Header=BB125_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB125_214:                            # %cond.end574
                                        #   in Loop: Header=BB125_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB125_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB125_220
.LBB125_216:                            # %cond.false579
                                        #   in Loop: Header=BB125_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB125_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB125_219
.LBB125_218:                            # %cond.false584
                                        #   in Loop: Header=BB125_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB125_219:                            # %cond.end586
                                        #   in Loop: Header=BB125_210 Depth=2
.LBB125_220:                            # %cond.end588
                                        #   in Loop: Header=BB125_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB125_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_210
.LBB125_222:                            # %for.end602
                                        #   in Loop: Header=BB125_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB125_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_199
.LBB125_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB125_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB125_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB125_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB125_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_225
.LBB125_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_231
.LBB125_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB125_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB125_237
.LBB125_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_236
.LBB125_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB125_236:                            # %cond.end650
.LBB125_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB125_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB125_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_241
.LBB125_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB125_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB125_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB125_247
.LBB125_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB125_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_246
.LBB125_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB125_246:                            # %cond.end687
.LBB125_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB125_258
.LBB125_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB125_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_251
.LBB125_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB125_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB125_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB125_257
.LBB125_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB125_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_256
.LBB125_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB125_256:                            # %cond.end724
.LBB125_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB125_258:                            # %if.end730
	jmp	.LBB125_328
.LBB125_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB125_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB125_262
.LBB125_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB125_262:                            # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB125_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB125_265
.LBB125_264:                            # %cond.false742
	movl	-40(%rbp), %eax
.LBB125_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB125_271
.LBB125_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB125_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB125_270
.LBB125_269:                            # %cond.false752
	movl	-40(%rbp), %eax
.LBB125_270:                            # %cond.end753
.LBB125_271:                            # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB125_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB125_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB125_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB125_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB125_276
.LBB125_275:                            # %cond.false765
                                        #   in Loop: Header=BB125_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB125_276:                            # %cond.end767
                                        #   in Loop: Header=BB125_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB125_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB125_282
.LBB125_278:                            # %cond.false772
                                        #   in Loop: Header=BB125_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB125_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB125_281
.LBB125_280:                            # %cond.false777
                                        #   in Loop: Header=BB125_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB125_281:                            # %cond.end779
                                        #   in Loop: Header=BB125_272 Depth=1
.LBB125_282:                            # %cond.end781
                                        #   in Loop: Header=BB125_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB125_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_272
.LBB125_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_287
.LBB125_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB125_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB125_293
.LBB125_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_292
.LBB125_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB125_292:                            # %cond.end822
.LBB125_293:                            # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB125_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB125_296
.LBB125_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB125_296:                            # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB125_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB125_299
.LBB125_298:                            # %cond.false836
	movl	-44(%rbp), %eax
.LBB125_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB125_305
.LBB125_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB125_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB125_304
.LBB125_303:                            # %cond.false846
	movl	-44(%rbp), %eax
.LBB125_304:                            # %cond.end847
.LBB125_305:                            # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB125_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB125_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB125_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB125_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB125_310
.LBB125_309:                            # %cond.false859
                                        #   in Loop: Header=BB125_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB125_310:                            # %cond.end861
                                        #   in Loop: Header=BB125_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB125_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB125_316
.LBB125_312:                            # %cond.false866
                                        #   in Loop: Header=BB125_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB125_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB125_315
.LBB125_314:                            # %cond.false871
                                        #   in Loop: Header=BB125_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB125_315:                            # %cond.end873
                                        #   in Loop: Header=BB125_306 Depth=1
.LBB125_316:                            # %cond.end875
                                        #   in Loop: Header=BB125_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB125_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_306
.LBB125_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_321
.LBB125_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB125_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB125_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB125_327
.LBB125_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB125_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_326
.LBB125_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB125_326:                            # %cond.end916
.LBB125_327:                            # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB125_328:                            # %if.end922
	jmp	.LBB125_329
.LBB125_329:                            # %if.end923
	jmp	.LBB125_330
.LBB125_330:                            # %if.end924
	jmp	.LBB125_331
.LBB125_331:                            # %if.end925
	jmp	.LBB125_332
.LBB125_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$980456005, -108(%rbp)  # imm = 0x3A709245
	jne	.LBB125_334
.LBB125_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_333
.Lfunc_end125:
	.size	Get_Reference_Pixel.115, .Lfunc_end125-Get_Reference_Pixel.115
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.116 # -- Begin function Get_Reference_Block.116
	.p2align	4, 0x90
	.type	Get_Reference_Block.116,@function
Get_Reference_Block.116:                # @Get_Reference_Block.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$907546904, -32(%rbp)   # imm = 0x36181118
	movq	%rdi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -56(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB126_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB126_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	$0, -8(%rbp)
.LBB126_3:                              # %for.cond5
                                        #   Parent Loop BB126_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB126_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB126_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB126_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_3
.LBB126_6:                              # %for.end
                                        #   in Loop: Header=BB126_1 Depth=1
	jmp	.LBB126_7
.LBB126_7:                              # %for.inc14
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_1
.LBB126_8:                              # %for.end16
	cmpl	$907546904, -32(%rbp)   # imm = 0x36181118
	jne	.LBB126_10
.LBB126_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_9
.Lfunc_end126:
	.size	Get_Reference_Block.116, .Lfunc_end126-Get_Reference_Block.116
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.117  # -- Begin function decode_one_b8block.117
	.p2align	4, 0x90
	.type	decode_one_b8block.117,@function
decode_one_b8block.117:                 # @decode_one_b8block.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1797774128, -84(%rbp)  # imm = 0x6B27DB30
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB127_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB127_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB127_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_4:                              # %for.cond9
                                        #   Parent Loop BB127_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB127_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB127_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB127_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_4
.LBB127_7:                              # %for.end
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_8
.LBB127_8:                              # %for.inc26
                                        #   in Loop: Header=BB127_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_2
.LBB127_9:                              # %for.end28
	jmp	.LBB127_96
.LBB127_10:                             # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB127_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB127_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB127_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB127_31
.LBB127_14:                             # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB127_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB127_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_17:                             # %for.cond40
                                        #   Parent Loop BB127_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB127_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB127_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB127_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_17
.LBB127_20:                             # %for.end49
                                        #   in Loop: Header=BB127_15 Depth=1
	jmp	.LBB127_21
.LBB127_21:                             # %for.inc50
                                        #   in Loop: Header=BB127_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_15
.LBB127_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB127_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB127_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB127_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB127_25:                             # %for.cond56
                                        #   Parent Loop BB127_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB127_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB127_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB127_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_25
.LBB127_28:                             # %for.end71
                                        #   in Loop: Header=BB127_23 Depth=1
	jmp	.LBB127_29
.LBB127_29:                             # %for.inc72
                                        #   in Loop: Header=BB127_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_23
.LBB127_30:                             # %for.end74
	jmp	.LBB127_60
.LBB127_31:                             # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB127_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB127_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB127_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB127_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB127_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB127_36:                             # %for.cond83
                                        #   Parent Loop BB127_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB127_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB127_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB127_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_36
.LBB127_39:                             # %for.end120
                                        #   in Loop: Header=BB127_34 Depth=1
	jmp	.LBB127_40
.LBB127_40:                             # %for.inc121
                                        #   in Loop: Header=BB127_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_34
.LBB127_41:                             # %for.end123
	jmp	.LBB127_51
.LBB127_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB127_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB127_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB127_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB127_45:                             # %for.cond129
                                        #   Parent Loop BB127_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB127_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB127_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB127_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_45
.LBB127_48:                             # %for.end145
                                        #   in Loop: Header=BB127_43 Depth=1
	jmp	.LBB127_49
.LBB127_49:                             # %for.inc146
                                        #   in Loop: Header=BB127_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_43
.LBB127_50:                             # %for.end148
	jmp	.LBB127_51
.LBB127_51:                             # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB127_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB127_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_54:                             # %for.cond153
                                        #   Parent Loop BB127_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB127_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB127_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB127_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_54
.LBB127_57:                             # %for.end167
                                        #   in Loop: Header=BB127_52 Depth=1
	jmp	.LBB127_58
.LBB127_58:                             # %for.inc168
                                        #   in Loop: Header=BB127_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_52
.LBB127_59:                             # %for.end170
	jmp	.LBB127_60
.LBB127_60:                             # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB127_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB127_66
.LBB127_62:                             # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB127_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB127_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB127_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB127_86
.LBB127_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB127_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_69 Depth 2
                                        #       Child Loop BB127_74 Depth 3
                                        #         Child Loop BB127_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB127_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB127_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB127_69:                             # %for.cond197
                                        #   Parent Loop BB127_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_74 Depth 3
                                        #         Child Loop BB127_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB127_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB127_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB127_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB127_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB127_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB127_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB127_73:                             # %if.end218
                                        #   in Loop: Header=BB127_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB127_74:                             # %for.cond233
                                        #   Parent Loop BB127_67 Depth=1
                                        #     Parent Loop BB127_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB127_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB127_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB127_74 Depth=3
	movl	$0, -4(%rbp)
.LBB127_76:                             # %for.cond237
                                        #   Parent Loop BB127_67 Depth=1
                                        #     Parent Loop BB127_69 Depth=2
                                        #       Parent Loop BB127_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB127_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB127_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB127_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_76
.LBB127_79:                             # %for.end269
                                        #   in Loop: Header=BB127_74 Depth=3
	jmp	.LBB127_80
.LBB127_80:                             # %for.inc270
                                        #   in Loop: Header=BB127_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_74
.LBB127_81:                             # %for.end272
                                        #   in Loop: Header=BB127_69 Depth=2
	jmp	.LBB127_82
.LBB127_82:                             # %for.inc273
                                        #   in Loop: Header=BB127_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_69
.LBB127_83:                             # %for.end275
                                        #   in Loop: Header=BB127_67 Depth=1
	jmp	.LBB127_84
.LBB127_84:                             # %for.inc276
                                        #   in Loop: Header=BB127_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_67
.LBB127_85:                             # %for.end278
	jmp	.LBB127_95
.LBB127_86:                             # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB127_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB127_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_89:                             # %for.cond284
                                        #   Parent Loop BB127_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB127_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB127_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB127_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_89
.LBB127_92:                             # %for.end310
                                        #   in Loop: Header=BB127_87 Depth=1
	jmp	.LBB127_93
.LBB127_93:                             # %for.inc311
                                        #   in Loop: Header=BB127_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_87
.LBB127_94:                             # %for.end313
	jmp	.LBB127_95
.LBB127_95:                             # %if.end314
	jmp	.LBB127_96
.LBB127_96:                             # %if.end315
	cmpl	$1797774128, -84(%rbp)  # imm = 0x6B27DB30
	jne	.LBB127_98
.LBB127_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_97
.Lfunc_end127:
	.size	decode_one_b8block.117, .Lfunc_end127-decode_one_b8block.117
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.118 # -- Begin function Get_Reference_Block.118
	.p2align	4, 0x90
	.type	Get_Reference_Block.118,@function
Get_Reference_Block.118:                # @Get_Reference_Block.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1860741510, -28(%rbp)  # imm = 0x6EE8A986
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB128_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB128_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	$0, -8(%rbp)
.LBB128_3:                              # %for.cond5
                                        #   Parent Loop BB128_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB128_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB128_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_3
.LBB128_6:                              # %for.end
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_7
.LBB128_7:                              # %for.inc14
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_1
.LBB128_8:                              # %for.end16
	cmpl	$1860741510, -28(%rbp)  # imm = 0x6EE8A986
	jne	.LBB128_10
.LBB128_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_9
.Lfunc_end128:
	.size	Get_Reference_Block.118, .Lfunc_end128-Get_Reference_Block.118
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.119   # -- Begin function Error_Concealment.119
	.p2align	4, 0x90
	.type	Error_Concealment.119,@function
Error_Concealment.119:                  # @Error_Concealment.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1952089801, -20(%rbp)  # imm = 0x745A86C9
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB129_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB129_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	$0, -4(%rbp)
.LBB129_3:                              # %for.cond2
                                        #   Parent Loop BB129_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB129_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB129_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB129_6:                              # %if.end
                                        #   in Loop: Header=BB129_3 Depth=2
	jmp	.LBB129_7
.LBB129_7:                              # %for.inc
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_3
.LBB129_8:                              # %for.end
                                        #   in Loop: Header=BB129_1 Depth=1
	jmp	.LBB129_9
.LBB129_9:                              # %for.inc7
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_1
.LBB129_10:                             # %for.end9
	cmpl	$1952089801, -20(%rbp)  # imm = 0x745A86C9
	jne	.LBB129_12
.LBB129_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_11
.Lfunc_end129:
	.size	Error_Concealment.119, .Lfunc_end129-Error_Concealment.119
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.120 # -- Begin function compute_residue_b8block.120
	.p2align	4, 0x90
	.type	compute_residue_b8block.120,@function
compute_residue_b8block.120:            # @compute_residue_b8block.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$160992166, -36(%rbp)   # imm = 0x9988BA6
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB130_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB130_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB130_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB130_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB130_4:                              # %for.cond4
                                        #   Parent Loop BB130_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB130_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB130_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB130_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_4
.LBB130_7:                              # %for.end
                                        #   in Loop: Header=BB130_2 Depth=1
	jmp	.LBB130_8
.LBB130_8:                              # %for.inc22
                                        #   in Loop: Header=BB130_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_2
.LBB130_9:                              # %for.end24
	jmp	.LBB130_19
.LBB130_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB130_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB130_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB130_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB130_13:                             # %for.cond29
                                        #   Parent Loop BB130_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB130_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB130_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB130_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_13
.LBB130_16:                             # %for.end56
                                        #   in Loop: Header=BB130_11 Depth=1
	jmp	.LBB130_17
.LBB130_17:                             # %for.inc57
                                        #   in Loop: Header=BB130_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_11
.LBB130_18:                             # %for.end59
	jmp	.LBB130_19
.LBB130_19:                             # %if.end
	cmpl	$160992166, -36(%rbp)   # imm = 0x9988BA6
	jne	.LBB130_21
.LBB130_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_20
.Lfunc_end130:
	.size	compute_residue_b8block.120, .Lfunc_end130-compute_residue_b8block.120
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.121 # -- Begin function Get_Reference_Block.121
	.p2align	4, 0x90
	.type	Get_Reference_Block.121,@function
Get_Reference_Block.121:                # @Get_Reference_Block.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1097613468, -20(%rbp)  # imm = 0x416C409C
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB131_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB131_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	$0, -4(%rbp)
.LBB131_3:                              # %for.cond5
                                        #   Parent Loop BB131_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB131_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB131_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_3
.LBB131_6:                              # %for.end
                                        #   in Loop: Header=BB131_1 Depth=1
	jmp	.LBB131_7
.LBB131_7:                              # %for.inc14
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_1
.LBB131_8:                              # %for.end16
	cmpl	$1097613468, -20(%rbp)  # imm = 0x416C409C
	jne	.LBB131_10
.LBB131_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_9
.Lfunc_end131:
	.size	Get_Reference_Block.121, .Lfunc_end131-Get_Reference_Block.121
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.122   # -- Begin function Error_Concealment.122
	.p2align	4, 0x90
	.type	Error_Concealment.122,@function
Error_Concealment.122:                  # @Error_Concealment.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$633791270, -12(%rbp)   # imm = 0x25C6E326
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB132_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB132_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	$0, -8(%rbp)
.LBB132_3:                              # %for.cond2
                                        #   Parent Loop BB132_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB132_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB132_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB132_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB132_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB132_6:                              # %if.end
                                        #   in Loop: Header=BB132_3 Depth=2
	jmp	.LBB132_7
.LBB132_7:                              # %for.inc
                                        #   in Loop: Header=BB132_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB132_3
.LBB132_8:                              # %for.end
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_9
.LBB132_9:                              # %for.inc7
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_1
.LBB132_10:                             # %for.end9
	cmpl	$633791270, -12(%rbp)   # imm = 0x25C6E326
	jne	.LBB132_12
.LBB132_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_11
.Lfunc_end132:
	.size	Error_Concealment.122, .Lfunc_end132-Error_Concealment.122
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.123      # -- Begin function DecOneForthPix.123
	.p2align	4, 0x90
	.type	DecOneForthPix.123,@function
DecOneForthPix.123:                     # @DecOneForthPix.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1723812617, -8(%rbp)   # imm = 0x66BF4B09
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB133_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB133_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB133_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_1
.LBB133_4:                              # %for.end
	cmpl	$1723812617, -8(%rbp)   # imm = 0x66BF4B09
	jne	.LBB133_6
.LBB133_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_5
.Lfunc_end133:
	.size	DecOneForthPix.123, .Lfunc_end133-DecOneForthPix.123
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.124   # -- Begin function Error_Concealment.124
	.p2align	4, 0x90
	.type	Error_Concealment.124,@function
Error_Concealment.124:                  # @Error_Concealment.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$419836354, -20(%rbp)   # imm = 0x190631C2
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB134_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB134_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB134_1 Depth=1
	movl	$0, -4(%rbp)
.LBB134_3:                              # %for.cond2
                                        #   Parent Loop BB134_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB134_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB134_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB134_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB134_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB134_6:                              # %if.end
                                        #   in Loop: Header=BB134_3 Depth=2
	jmp	.LBB134_7
.LBB134_7:                              # %for.inc
                                        #   in Loop: Header=BB134_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_3
.LBB134_8:                              # %for.end
                                        #   in Loop: Header=BB134_1 Depth=1
	jmp	.LBB134_9
.LBB134_9:                              # %for.inc7
                                        #   in Loop: Header=BB134_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_1
.LBB134_10:                             # %for.end9
	cmpl	$419836354, -20(%rbp)   # imm = 0x190631C2
	jne	.LBB134_12
.LBB134_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_11
.Lfunc_end134:
	.size	Error_Concealment.124, .Lfunc_end134-Error_Concealment.124
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.125 # -- Begin function compute_residue_b8block.125
	.p2align	4, 0x90
	.type	compute_residue_b8block.125,@function
compute_residue_b8block.125:            # @compute_residue_b8block.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1549202039, -36(%rbp)  # imm = 0x5C56F277
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB135_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB135_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB135_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB135_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB135_4:                              # %for.cond4
                                        #   Parent Loop BB135_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB135_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB135_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB135_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_4
.LBB135_7:                              # %for.end
                                        #   in Loop: Header=BB135_2 Depth=1
	jmp	.LBB135_8
.LBB135_8:                              # %for.inc22
                                        #   in Loop: Header=BB135_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_2
.LBB135_9:                              # %for.end24
	jmp	.LBB135_19
.LBB135_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB135_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB135_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB135_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB135_13:                             # %for.cond29
                                        #   Parent Loop BB135_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB135_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB135_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB135_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_13
.LBB135_16:                             # %for.end56
                                        #   in Loop: Header=BB135_11 Depth=1
	jmp	.LBB135_17
.LBB135_17:                             # %for.inc57
                                        #   in Loop: Header=BB135_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_11
.LBB135_18:                             # %for.end59
	jmp	.LBB135_19
.LBB135_19:                             # %if.end
	cmpl	$1549202039, -36(%rbp)  # imm = 0x5C56F277
	jne	.LBB135_21
.LBB135_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_20
.Lfunc_end135:
	.size	compute_residue_b8block.125, .Lfunc_end135-compute_residue_b8block.125
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.126      # -- Begin function DecOneForthPix.126
	.p2align	4, 0x90
	.type	DecOneForthPix.126,@function
DecOneForthPix.126:                     # @DecOneForthPix.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1850495387, -12(%rbp)  # imm = 0x6E4C519B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB136_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB136_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_1
.LBB136_4:                              # %for.end
	cmpl	$1850495387, -12(%rbp)  # imm = 0x6E4C519B
	jne	.LBB136_6
.LBB136_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_5
.Lfunc_end136:
	.size	DecOneForthPix.126, .Lfunc_end136-DecOneForthPix.126
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.127 # -- Begin function Get_Reference_Pixel.127
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.127,@function
Get_Reference_Pixel.127:                # @Get_Reference_Pixel.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$539334917, -104(%rbp)  # imm = 0x20259905
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB137_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB137_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB137_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB137_5
.LBB137_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB137_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB137_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB137_11
.LBB137_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB137_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB137_10
.LBB137_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB137_10:                             # %cond.end14
.LBB137_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB137_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB137_14
.LBB137_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB137_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB137_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB137_20
.LBB137_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB137_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB137_19
.LBB137_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB137_19:                             # %cond.end29
.LBB137_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_332
.LBB137_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB137_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB137_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB137_25
.LBB137_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB137_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB137_31
.LBB137_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB137_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB137_30
.LBB137_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB137_30:                             # %cond.end52
.LBB137_31:                             # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB137_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB137_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_36
.LBB137_35:                             # %cond.false61
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_36:                             # %cond.end63
                                        #   in Loop: Header=BB137_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB137_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_42
.LBB137_38:                             # %cond.false68
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_41
.LBB137_40:                             # %cond.false73
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_41:                             # %cond.end75
                                        #   in Loop: Header=BB137_32 Depth=1
.LBB137_42:                             # %cond.end77
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB137_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_32
.LBB137_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_47
.LBB137_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB137_53
.LBB137_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_52
.LBB137_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_52:                             # %cond.end113
.LBB137_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB137_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB137_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB137_57
.LBB137_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB137_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB137_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB137_63
.LBB137_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB137_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB137_62
.LBB137_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB137_62:                             # %cond.end136
.LBB137_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB137_76
.LBB137_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB137_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB137_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB137_68
.LBB137_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB137_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB137_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB137_74
.LBB137_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB137_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB137_73
.LBB137_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB137_73:                             # %cond.end169
.LBB137_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB137_75:                             # %if.end
	jmp	.LBB137_76
.LBB137_76:                             # %if.end178
	jmp	.LBB137_331
.LBB137_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB137_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB137_81
.LBB137_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB137_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB137_87
.LBB137_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB137_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB137_86
.LBB137_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB137_86:                             # %cond.end197
.LBB137_87:                             # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB137_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB137_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_92
.LBB137_91:                             # %cond.false209
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_92:                             # %cond.end211
                                        #   in Loop: Header=BB137_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB137_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_98
.LBB137_94:                             # %cond.false216
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_97
.LBB137_96:                             # %cond.false221
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_97:                             # %cond.end223
                                        #   in Loop: Header=BB137_88 Depth=1
.LBB137_98:                             # %cond.end225
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB137_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_88
.LBB137_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_103
.LBB137_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB137_109
.LBB137_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_108
.LBB137_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_108:                            # %cond.end266
.LBB137_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB137_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB137_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB137_113
.LBB137_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB137_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB137_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB137_119
.LBB137_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB137_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB137_118
.LBB137_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB137_118:                            # %cond.end287
.LBB137_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB137_132
.LBB137_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB137_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB137_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB137_124
.LBB137_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB137_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB137_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB137_130
.LBB137_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB137_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB137_129
.LBB137_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB137_129:                            # %cond.end320
.LBB137_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB137_131:                            # %if.end331
	jmp	.LBB137_132
.LBB137_132:                            # %if.end332
	jmp	.LBB137_330
.LBB137_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB137_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB137_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB137_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_139
.LBB137_138:                            # %cond.false345
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_139:                            # %cond.end347
                                        #   in Loop: Header=BB137_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB137_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_145
.LBB137_141:                            # %cond.false352
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_144
.LBB137_143:                            # %cond.false357
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_144:                            # %cond.end359
                                        #   in Loop: Header=BB137_135 Depth=1
.LBB137_145:                            # %cond.end361
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB137_146:                            # %for.cond363
                                        #   Parent Loop BB137_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB137_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB137_150
.LBB137_149:                            # %cond.false371
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_150:                            # %cond.end373
                                        #   in Loop: Header=BB137_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB137_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB137_156
.LBB137_152:                            # %cond.false378
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB137_155
.LBB137_154:                            # %cond.false383
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_155:                            # %cond.end385
                                        #   in Loop: Header=BB137_146 Depth=2
.LBB137_156:                            # %cond.end387
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB137_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_146
.LBB137_158:                            # %for.end401
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB137_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_135
.LBB137_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB137_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB137_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB137_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB137_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_161
.LBB137_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_167
.LBB137_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB137_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB137_173
.LBB137_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_172
.LBB137_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB137_172:                            # %cond.end449
.LBB137_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB137_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_177
.LBB137_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB137_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB137_183
.LBB137_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_182
.LBB137_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_182:                            # %cond.end486
.LBB137_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB137_196
.LBB137_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB137_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_188
.LBB137_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB137_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB137_194
.LBB137_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_193
.LBB137_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_193:                            # %cond.end526
.LBB137_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB137_195:                            # %if.end532
	jmp	.LBB137_196
.LBB137_196:                            # %if.end533
	jmp	.LBB137_329
.LBB137_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB137_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB137_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB137_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_203
.LBB137_202:                            # %cond.false546
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_203:                            # %cond.end548
                                        #   in Loop: Header=BB137_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB137_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_209
.LBB137_205:                            # %cond.false553
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_208
.LBB137_207:                            # %cond.false558
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_208:                            # %cond.end560
                                        #   in Loop: Header=BB137_199 Depth=1
.LBB137_209:                            # %cond.end562
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB137_210:                            # %for.cond564
                                        #   Parent Loop BB137_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB137_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB137_214
.LBB137_213:                            # %cond.false572
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_214:                            # %cond.end574
                                        #   in Loop: Header=BB137_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB137_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB137_220
.LBB137_216:                            # %cond.false579
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB137_219
.LBB137_218:                            # %cond.false584
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_219:                            # %cond.end586
                                        #   in Loop: Header=BB137_210 Depth=2
.LBB137_220:                            # %cond.end588
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB137_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_210
.LBB137_222:                            # %for.end602
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB137_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_199
.LBB137_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB137_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB137_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB137_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB137_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_225
.LBB137_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_231
.LBB137_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB137_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB137_237
.LBB137_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_236
.LBB137_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB137_236:                            # %cond.end650
.LBB137_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB137_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_241
.LBB137_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB137_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB137_247
.LBB137_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_246
.LBB137_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_246:                            # %cond.end687
.LBB137_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB137_258
.LBB137_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_251
.LBB137_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB137_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB137_257
.LBB137_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB137_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_256
.LBB137_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB137_256:                            # %cond.end724
.LBB137_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB137_258:                            # %if.end730
	jmp	.LBB137_328
.LBB137_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB137_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB137_262
.LBB137_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB137_262:                            # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB137_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB137_265
.LBB137_264:                            # %cond.false742
	movl	-40(%rbp), %eax
.LBB137_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB137_271
.LBB137_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB137_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB137_270
.LBB137_269:                            # %cond.false752
	movl	-40(%rbp), %eax
.LBB137_270:                            # %cond.end753
.LBB137_271:                            # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB137_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB137_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_276
.LBB137_275:                            # %cond.false765
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_276:                            # %cond.end767
                                        #   in Loop: Header=BB137_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB137_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_282
.LBB137_278:                            # %cond.false772
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB137_281
.LBB137_280:                            # %cond.false777
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB137_281:                            # %cond.end779
                                        #   in Loop: Header=BB137_272 Depth=1
.LBB137_282:                            # %cond.end781
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB137_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_272
.LBB137_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_287
.LBB137_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB137_293
.LBB137_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_292
.LBB137_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_292:                            # %cond.end822
.LBB137_293:                            # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB137_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB137_296
.LBB137_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB137_296:                            # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB137_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB137_299
.LBB137_298:                            # %cond.false836
	movl	-44(%rbp), %eax
.LBB137_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB137_305
.LBB137_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB137_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB137_304
.LBB137_303:                            # %cond.false846
	movl	-44(%rbp), %eax
.LBB137_304:                            # %cond.end847
.LBB137_305:                            # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB137_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB137_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_310
.LBB137_309:                            # %cond.false859
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_310:                            # %cond.end861
                                        #   in Loop: Header=BB137_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB137_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_316
.LBB137_312:                            # %cond.false866
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB137_315
.LBB137_314:                            # %cond.false871
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB137_315:                            # %cond.end873
                                        #   in Loop: Header=BB137_306 Depth=1
.LBB137_316:                            # %cond.end875
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB137_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_306
.LBB137_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_321
.LBB137_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB137_327
.LBB137_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB137_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_326
.LBB137_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB137_326:                            # %cond.end916
.LBB137_327:                            # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB137_328:                            # %if.end922
	jmp	.LBB137_329
.LBB137_329:                            # %if.end923
	jmp	.LBB137_330
.LBB137_330:                            # %if.end924
	jmp	.LBB137_331
.LBB137_331:                            # %if.end925
	jmp	.LBB137_332
.LBB137_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$539334917, -104(%rbp)  # imm = 0x20259905
	jne	.LBB137_334
.LBB137_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_333
.Lfunc_end137:
	.size	Get_Reference_Pixel.127, .Lfunc_end137-Get_Reference_Pixel.127
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.128      # -- Begin function DecOneForthPix.128
	.p2align	4, 0x90
	.type	DecOneForthPix.128,@function
DecOneForthPix.128:                     # @DecOneForthPix.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1715714875, -12(%rbp)  # imm = 0x6643BB3B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB138_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB138_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB138_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_1
.LBB138_4:                              # %for.end
	cmpl	$1715714875, -12(%rbp)  # imm = 0x6643BB3B
	jne	.LBB138_6
.LBB138_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_5
.Lfunc_end138:
	.size	DecOneForthPix.128, .Lfunc_end138-DecOneForthPix.128
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.129      # -- Begin function DecOneForthPix.129
	.p2align	4, 0x90
	.type	DecOneForthPix.129,@function
DecOneForthPix.129:                     # @DecOneForthPix.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$692559653, -8(%rbp)    # imm = 0x29479F25
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB139_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB139_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_1
.LBB139_4:                              # %for.end
	cmpl	$692559653, -8(%rbp)    # imm = 0x29479F25
	jne	.LBB139_6
.LBB139_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_5
.Lfunc_end139:
	.size	DecOneForthPix.129, .Lfunc_end139-DecOneForthPix.129
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.130      # -- Begin function DecOneForthPix.130
	.p2align	4, 0x90
	.type	DecOneForthPix.130,@function
DecOneForthPix.130:                     # @DecOneForthPix.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1999280977, -12(%rbp)  # imm = 0x772A9B51
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB140_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB140_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_1
.LBB140_4:                              # %for.end
	cmpl	$1999280977, -12(%rbp)  # imm = 0x772A9B51
	jne	.LBB140_6
.LBB140_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_5
.Lfunc_end140:
	.size	DecOneForthPix.130, .Lfunc_end140-DecOneForthPix.130
	.cfi_endproc
                                        # -- End function
	.type	Get_Reference_Pixel.COEF,@object # @Get_Reference_Pixel.COEF
	.section	.rodata,"a",@progbits
	.p2align	4
Get_Reference_Pixel.COEF:
	.long	1                       # 0x1
	.long	4294967291              # 0xfffffffb
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.size	Get_Reference_Pixel.COEF, 24

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
