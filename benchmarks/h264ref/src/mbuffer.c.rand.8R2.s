	.text
	.file	"mbuffer.c"
	.globl	dump_dpb                # -- Begin function dump_dpb
	.p2align	4, 0x90
	.type	dump_dpb,@function
dump_dpb:                               # @dump_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	dump_dpb, .Lfunc_end0-dump_dpb
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize              # -- Begin function getDpbSize
	.p2align	4, 0x90
	.type	getDpbSize,@function
getDpbSize:                             # @getDpbSize
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_getDpbSize.34
	callq	getDpbSize.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_getDpbSize.62
	.cfi_def_cfa %rbp, 16
	callq	getDpbSize.62
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	getDpbSize, .Lfunc_end1-getDpbSize
	.cfi_endproc
                                        # -- End function
	.globl	init_dpb                # -- Begin function init_dpb
	.p2align	4, 0x90
	.type	init_dpb,@function
init_dpb:                               # @init_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_init_dpb.27
	callq	init_dpb.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_init_dpb.44
	.cfi_def_cfa %rbp, 16
	callq	init_dpb.44
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	init_dpb, .Lfunc_end2-init_dpb
	.cfi_endproc
                                        # -- End function
	.globl	free_dpb                # -- Begin function free_dpb
	.p2align	4, 0x90
	.type	free_dpb,@function
free_dpb:                               # @free_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	cmpq	$0, dpb
	je	.LBB3_6
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB3_2:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB3_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB3_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB3_2
.LBB3_5:                                # %for.end
	movq	dpb, %rdi
	callq	free
	movq	$0, dpb
.LBB3_6:                                # %if.end
	cmpq	$0, dpb+8
	je	.LBB3_8
# %bb.7:                                # %if.then2
	movq	dpb+8, %rdi
	callq	free
.LBB3_8:                                # %if.end3
	cmpq	$0, dpb+16
	je	.LBB3_10
# %bb.9:                                # %if.then5
	movq	dpb+16, %rdi
	callq	free
.LBB3_10:                               # %if.end6
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movl	$0, -4(%rbp)
.LBB3_11:                               # %for.cond7
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB3_16
# %bb.12:                               # %for.body9
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	cmpq	$0, listX(,%rax,8)
	je	.LBB3_14
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	movq	listX(,%rax,8), %rdi
	callq	free
	movl	-4(%rbp), %eax
	movq	$0, listX(,%rax,8)
.LBB3_14:                               # %if.end18
                                        #   in Loop: Header=BB3_11 Depth=1
	jmp	.LBB3_15
.LBB3_15:                               # %for.inc19
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB3_11
.LBB3_16:                               # %for.end21
	movl	$0, dpb+48
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end3:
	.size	free_dpb, .Lfunc_end3-free_dpb
	.cfi_endproc
                                        # -- End function
	.globl	free_frame_store        # -- Begin function free_frame_store
	.p2align	4, 0x90
	.type	free_frame_store,@function
free_frame_store:                       # @free_frame_store
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB4_8
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB4_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
.LBB4_3:                                # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB4_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
.LBB4_5:                                # %if.end9
	movq	-8(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	.LBB4_7
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
.LBB4_7:                                # %if.end14
	movq	-8(%rbp), %rdi
	callq	free
.LBB4_8:                                # %if.end15
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	free_frame_store, .Lfunc_end4-free_frame_store
	.cfi_endproc
                                        # -- End function
	.globl	alloc_frame_store       # -- Begin function alloc_frame_store
	.p2align	4, 0x90
	.type	alloc_frame_store,@function
alloc_frame_store:                      # @alloc_frame_store
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1, %edi
	movl	$64, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -8(%rbp)
	cmpq	-8(%rbp), %rcx
	jne	.LBB5_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB5_2:                                # %if.end
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end5:
	.size	alloc_frame_store, .Lfunc_end5-alloc_frame_store
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture  # -- Begin function alloc_storable_picture
	.p2align	4, 0x90
	.type	alloc_storable_picture,@function
alloc_storable_picture:                 # @alloc_storable_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_alloc_storable_picture.20
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_alloc_storable_picture.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_alloc_storable_picture.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.75
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_alloc_storable_picture.89
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.89
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_alloc_storable_picture.126
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.126
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_alloc_storable_picture.151
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.151
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_alloc_storable_picture.153
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.153
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_alloc_storable_picture.175
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.175
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	alloc_storable_picture, .Lfunc_end6-alloc_storable_picture
	.cfi_endproc
                                        # -- End function
	.globl	free_storable_picture   # -- Begin function free_storable_picture
	.p2align	4, 0x90
	.type	free_storable_picture,@function
free_storable_picture:                  # @free_storable_picture
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB7_32
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, 6480(%rax)
	je	.LBB7_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	6480(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	$0, 6480(%rax)
.LBB7_3:                                # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 6488(%rax)
	je	.LBB7_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	6488(%rax), %rdi
	movl	$6, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	$0, 6488(%rax)
.LBB7_5:                                # %if.end9
	movq	-8(%rbp), %rax
	cmpq	$0, 6496(%rax)
	je	.LBB7_7
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	6496(%rax), %rdi
	movl	$6, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	$0, 6496(%rax)
.LBB7_7:                                # %if.end14
	movq	-8(%rbp), %rax
	cmpq	$0, 6504(%rax)
	je	.LBB7_9
# %bb.8:                                # %if.then16
	movq	-8(%rbp), %rax
	movq	6504(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	movq	$0, 6504(%rax)
.LBB7_9:                                # %if.end19
	movq	-8(%rbp), %rax
	cmpq	$0, 6512(%rax)
	je	.LBB7_11
# %bb.10:                               # %if.then21
	movq	-8(%rbp), %rax
	movq	6512(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 6512(%rax)
.LBB7_11:                               # %if.end24
	movq	-8(%rbp), %rax
	cmpq	$0, 6520(%rax)
	je	.LBB7_13
# %bb.12:                               # %if.then26
	movq	-8(%rbp), %rax
	movq	6520(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 6520(%rax)
.LBB7_13:                               # %if.end29
	movq	-8(%rbp), %rax
	cmpq	$0, 6424(%rax)
	je	.LBB7_15
# %bb.14:                               # %if.then31
	movq	-8(%rbp), %rax
	movq	6424(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6424(%rax)
.LBB7_15:                               # %if.end34
	movq	-8(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB7_17
# %bb.16:                               # %if.then36
	movq	-8(%rbp), %rax
	movq	6432(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6432(%rax)
.LBB7_17:                               # %if.end39
	movq	-8(%rbp), %rax
	cmpq	$0, 6448(%rax)
	je	.LBB7_19
# %bb.18:                               # %if.then41
	movq	-8(%rbp), %rax
	movq	6448(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6448(%rax)
.LBB7_19:                               # %if.end44
	movq	-8(%rbp), %rax
	cmpq	$0, 6464(%rax)
	je	.LBB7_21
# %bb.20:                               # %if.then46
	movq	-8(%rbp), %rax
	movq	6464(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6464(%rax)
.LBB7_21:                               # %if.end49
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB7_24
# %bb.22:                               # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB7_24
# %bb.23:                               # %lor.lhs.false52
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB7_29
.LBB7_24:                               # %if.then54
	movq	-8(%rbp), %rax
	cmpq	$0, 6440(%rax)
	je	.LBB7_26
# %bb.25:                               # %if.then56
	movq	-8(%rbp), %rax
	movq	6440(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6440(%rax)
.LBB7_26:                               # %if.end59
	movq	-8(%rbp), %rax
	cmpq	$0, 6456(%rax)
	je	.LBB7_28
# %bb.27:                               # %if.then61
	movq	-8(%rbp), %rax
	movq	6456(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB7_28:                               # %if.end64
	jmp	.LBB7_29
.LBB7_29:                               # %if.end65
	movq	-8(%rbp), %rax
	cmpq	$0, 6472(%rax)
	je	.LBB7_31
# %bb.30:                               # %if.then67
	movq	-8(%rbp), %rax
	movq	6472(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6472(%rax)
.LBB7_31:                               # %if.end70
	movq	-8(%rbp), %rdi
	callq	free
	movq	$0, -8(%rbp)
.LBB7_32:                               # %if.end71
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end7:
	.size	free_storable_picture, .Lfunc_end7-free_storable_picture
	.cfi_endproc
                                        # -- End function
	.globl	is_short_ref            # -- Begin function is_short_ref
	.p2align	4, 0x90
	.type	is_short_ref,@function
is_short_ref:                           # @is_short_ref
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB8_2
# %bb.1:                                # %land.rhs
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	setne	%al
	xorb	$-1, %al
.LBB8_2:                                # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	is_short_ref, .Lfunc_end8-is_short_ref
	.cfi_endproc
                                        # -- End function
	.globl	is_long_ref             # -- Begin function is_long_ref
	.p2align	4, 0x90
	.type	is_long_ref,@function
is_long_ref:                            # @is_long_ref
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB9_2
# %bb.1:                                # %land.rhs
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	setne	%al
.LBB9_2:                                # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	is_long_ref, .Lfunc_end9-is_long_ref
	.cfi_endproc
                                        # -- End function
	.globl	init_lists              # -- Begin function init_lists
	.p2align	4, 0x90
	.type	init_lists,@function
init_lists:                             # @init_lists
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_init_lists.2
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_init_lists.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_init_lists.117
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.117
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_init_lists.124
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.124
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_init_lists.132
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.132
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_init_lists.139
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.139
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_init_lists.165
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.165
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_init_lists.172
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.172
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	init_lists, .Lfunc_end10-init_lists
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc
	.type	compare_pic_by_pic_num_desc,@function
compare_pic_by_pic_num_desc:            # @compare_pic_by_pic_num_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_7
# %bb.1:                                # %func_compare_pic_by_pic_num_desc.51
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.51
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_compare_pic_by_pic_num_desc.138
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.138
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_compare_pic_by_pic_num_desc.226
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.226
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_compare_pic_by_pic_num_desc.233
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.233
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %func_compare_pic_by_pic_num_desc.234
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.234
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_6:                               # %func_compare_pic_by_pic_num_desc.247
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.247
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB11_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB11_5
	jmp	.LBB11_6
.Lfunc_end11:
	.size	compare_pic_by_pic_num_desc, .Lfunc_end11-compare_pic_by_pic_num_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc
	.type	compare_pic_by_lt_pic_num_asc,@function
compare_pic_by_lt_pic_num_asc:          # @compare_pic_by_lt_pic_num_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_7
# %bb.1:                                # %func_compare_pic_by_lt_pic_num_asc.72
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.72
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_compare_pic_by_lt_pic_num_asc.156
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.156
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_compare_pic_by_lt_pic_num_asc.204
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.204
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_compare_pic_by_lt_pic_num_asc.205
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.205
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %func_compare_pic_by_lt_pic_num_asc.209
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.209
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_compare_pic_by_lt_pic_num_asc.228
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.228
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB12_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB12_5
	jmp	.LBB12_6
.Lfunc_end12:
	.size	compare_pic_by_lt_pic_num_asc, .Lfunc_end12-compare_pic_by_lt_pic_num_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc
	.type	compare_fs_by_frame_num_desc,@function
compare_fs_by_frame_num_desc:           # @compare_fs_by_frame_num_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_7
# %bb.1:                                # %func_compare_fs_by_frame_num_desc.18
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_compare_fs_by_frame_num_desc.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_compare_fs_by_frame_num_desc.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.92
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_compare_fs_by_frame_num_desc.133
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.133
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_compare_fs_by_frame_num_desc.149
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.149
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_compare_fs_by_frame_num_desc.158
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.158
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB13_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB13_5
	jmp	.LBB13_6
.Lfunc_end13:
	.size	compare_fs_by_frame_num_desc, .Lfunc_end13-compare_fs_by_frame_num_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list
	.type	gen_pic_list_from_frame_list,@function
gen_pic_list_from_frame_list:           # @gen_pic_list_from_frame_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movl	%edx, %ebx
	movq	%rsi, %r14
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_9
# %bb.1:                                # %func_gen_pic_list_from_frame_list.4
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	gen_pic_list_from_frame_list.4
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_gen_pic_list_from_frame_list.23
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_gen_pic_list_from_frame_list.105
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.105
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_gen_pic_list_from_frame_list.150
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.150
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %func_gen_pic_list_from_frame_list.163
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.163
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_6:                               # %func_gen_pic_list_from_frame_list.186
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.186
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_7:                               # %func_gen_pic_list_from_frame_list.235
	.cfi_def_cfa %rbp, 16
	callq	gen_pic_list_from_frame_list.235
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_8:                               # %func_gen_pic_list_from_frame_list.248
	.cfi_def_cfa %rbp, 16
	callq	gen_pic_list_from_frame_list.248
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB14_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB14_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB14_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movl	%ebx, %edx
	movq	%r14, %rsi
	movl	%r15d, %edi
	je	.LBB14_7
	jmp	.LBB14_8
.Lfunc_end14:
	.size	gen_pic_list_from_frame_list, .Lfunc_end14-gen_pic_list_from_frame_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc
	.type	compare_fs_by_lt_pic_idx_asc,@function
compare_fs_by_lt_pic_idx_asc:           # @compare_fs_by_lt_pic_idx_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_7
# %bb.1:                                # %func_compare_fs_by_lt_pic_idx_asc.19
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_compare_fs_by_lt_pic_idx_asc.32
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.32
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_compare_fs_by_lt_pic_idx_asc.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.70
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_compare_fs_by_lt_pic_idx_asc.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.128
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_compare_fs_by_lt_pic_idx_asc.131
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.131
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_compare_fs_by_lt_pic_idx_asc.159
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.159
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB15_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB15_5
	jmp	.LBB15_6
.Lfunc_end15:
	.size	compare_fs_by_lt_pic_idx_asc, .Lfunc_end15-compare_fs_by_lt_pic_idx_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc
	.type	compare_pic_by_poc_desc,@function
compare_pic_by_poc_desc:                # @compare_pic_by_poc_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_7
# %bb.1:                                # %func_compare_pic_by_poc_desc.152
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.152
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_compare_pic_by_poc_desc.169
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.169
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_compare_pic_by_poc_desc.174
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.174
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_compare_pic_by_poc_desc.207
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.207
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %func_compare_pic_by_poc_desc.236
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.236
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_6:                               # %func_compare_pic_by_poc_desc.264
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.264
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB16_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB16_5
	jmp	.LBB16_6
.Lfunc_end16:
	.size	compare_pic_by_poc_desc, .Lfunc_end16-compare_pic_by_poc_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc
	.type	compare_pic_by_poc_asc,@function
compare_pic_by_poc_asc:                 # @compare_pic_by_poc_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_7
# %bb.1:                                # %func_compare_pic_by_poc_asc.5
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_compare_pic_by_poc_asc.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_compare_pic_by_poc_asc.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_compare_pic_by_poc_asc.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.46
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %func_compare_pic_by_poc_asc.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_compare_pic_by_poc_asc.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.129
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB17_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB17_5
	jmp	.LBB17_6
.Lfunc_end17:
	.size	compare_pic_by_poc_asc, .Lfunc_end17-compare_pic_by_poc_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc
	.type	compare_fs_by_poc_desc,@function
compare_fs_by_poc_desc:                 # @compare_fs_by_poc_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_7
# %bb.1:                                # %func_compare_fs_by_poc_desc.65
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.65
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_compare_fs_by_poc_desc.110
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.110
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_compare_fs_by_poc_desc.145
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.145
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_compare_fs_by_poc_desc.147
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.147
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %func_compare_fs_by_poc_desc.210
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.210
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_compare_fs_by_poc_desc.243
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.243
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB18_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB18_5
	jmp	.LBB18_6
.Lfunc_end18:
	.size	compare_fs_by_poc_desc, .Lfunc_end18-compare_fs_by_poc_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc
	.type	compare_fs_by_poc_asc,@function
compare_fs_by_poc_asc:                  # @compare_fs_by_poc_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_7
# %bb.1:                                # %func_compare_fs_by_poc_asc.97
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.97
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_compare_fs_by_poc_asc.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.112
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_compare_fs_by_poc_asc.136
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.136
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_compare_fs_by_poc_asc.173
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.173
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_compare_fs_by_poc_asc.199
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.199
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_compare_fs_by_poc_asc.246
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.246
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB19_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB19_5
	jmp	.LBB19_6
.Lfunc_end19:
	.size	compare_fs_by_poc_asc, .Lfunc_end19-compare_fs_by_poc_asc
	.cfi_endproc
                                        # -- End function
	.globl	init_mbaff_lists        # -- Begin function init_mbaff_lists
	.p2align	4, 0x90
	.type	init_mbaff_lists,@function
init_mbaff_lists:                       # @init_mbaff_lists
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_2
# %bb.1:                                # %func_init_mbaff_lists.14
	callq	init_mbaff_lists.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_init_mbaff_lists.38
	.cfi_def_cfa %rbp, 16
	callq	init_mbaff_lists.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end20:
	.size	init_mbaff_lists, .Lfunc_end20-init_mbaff_lists
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list    # -- Begin function reorder_ref_pic_list
	.p2align	4, 0x90
	.type	reorder_ref_pic_list,@function
reorder_ref_pic_list:                   # @reorder_ref_pic_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_9
# %bb.1:                                # %func_reorder_ref_pic_list.25
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	reorder_ref_pic_list.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_reorder_ref_pic_list.68
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_reorder_ref_pic_list.106
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.106
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_reorder_ref_pic_list.113
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.113
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %func_reorder_ref_pic_list.161
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.161
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_reorder_ref_pic_list.181
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.181
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_7:                               # %func_reorder_ref_pic_list.195
	.cfi_def_cfa %rbp, 16
	callq	reorder_ref_pic_list.195
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_8:                               # %func_reorder_ref_pic_list.217
	.cfi_def_cfa %rbp, 16
	callq	reorder_ref_pic_list.217
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB21_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB21_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB21_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movl	%ebx, %edx
	movq	%r14, %rsi
	movq	%r15, %rdi
	je	.LBB21_7
	jmp	.LBB21_8
.Lfunc_end21:
	.size	reorder_ref_pic_list, .Lfunc_end21-reorder_ref_pic_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term
	.type	reorder_short_term,@function
reorder_short_term:                     # @reorder_short_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movl	%edx, %r15d
	movl	%esi, %r12d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_9
# %bb.1:                                # %func_reorder_short_term.7
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.7
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_reorder_short_term.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.69
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_reorder_short_term.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.71
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_reorder_short_term.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.86
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_reorder_short_term.98
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.98
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_reorder_short_term.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.111
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_7:                               # %func_reorder_short_term.223
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.223
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_8:                               # %func_reorder_short_term.229
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.229
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB22_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB22_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB22_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB22_7
	jmp	.LBB22_8
.Lfunc_end22:
	.size	reorder_short_term, .Lfunc_end22-reorder_short_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term
	.type	reorder_long_term,@function
reorder_long_term:                      # @reorder_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movl	%edx, %r15d
	movl	%esi, %r12d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_9
# %bb.1:                                # %func_reorder_long_term.79
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.79
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_reorder_long_term.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.91
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_reorder_long_term.99
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.99
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_reorder_long_term.114
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.114
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_reorder_long_term.191
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.191
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_reorder_long_term.251
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.251
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %func_reorder_long_term.255
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.255
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_8:                               # %func_reorder_long_term.257
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.257
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB23_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB23_7
	jmp	.LBB23_8
.Lfunc_end23:
	.size	reorder_long_term, .Lfunc_end23-reorder_long_term
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list         # -- Begin function update_ref_list
	.p2align	4, 0x90
	.type	update_ref_list,@function
update_ref_list:                        # @update_ref_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_2
# %bb.1:                                # %func_update_ref_list.37
	callq	update_ref_list.37
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_update_ref_list.84
	.cfi_def_cfa %rbp, 16
	callq	update_ref_list.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end24:
	.size	update_ref_list, .Lfunc_end24-update_ref_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_short_term_reference
	.type	is_short_term_reference,@function
is_short_term_reference:                # @is_short_term_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_2
# %bb.1:                                # %func_is_short_term_reference.12
	movq	%rbx, %rdi
	callq	is_short_term_reference.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_is_short_term_reference.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_short_term_reference.35
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end25:
	.size	is_short_term_reference, .Lfunc_end25-is_short_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	update_ltref_list       # -- Begin function update_ltref_list
	.p2align	4, 0x90
	.type	update_ltref_list,@function
update_ltref_list:                      # @update_ltref_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_2
# %bb.1:                                # %func_update_ltref_list.67
	callq	update_ltref_list.67
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_update_ltref_list.73
	.cfi_def_cfa %rbp, 16
	callq	update_ltref_list.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end26:
	.size	update_ltref_list, .Lfunc_end26-update_ltref_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference
	.type	is_long_term_reference,@function
is_long_term_reference:                 # @is_long_term_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB27_2
# %bb.1:                                # %func_is_long_term_reference.120
	movq	%rbx, %rdi
	callq	is_long_term_reference.120
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_is_long_term_reference.137
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_long_term_reference.137
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	is_long_term_reference, .Lfunc_end27-is_long_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx # -- Begin function mm_update_max_long_term_frame_idx
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx,@function
mm_update_max_long_term_frame_idx:      # @mm_update_max_long_term_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB28_2
# %bb.1:                                # %func_mm_update_max_long_term_frame_idx.16
	movl	%ebx, %edi
	callq	mm_update_max_long_term_frame_idx.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_mm_update_max_long_term_frame_idx.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	mm_update_max_long_term_frame_idx.83
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end28:
	.size	mm_update_max_long_term_frame_idx, .Lfunc_end28-mm_update_max_long_term_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_for_long_term_reference
	.type	unmark_for_long_term_reference,@function
unmark_for_long_term_reference:         # @unmark_for_long_term_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB29_6
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB29_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_3:                               # %if.end
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB29_5
# %bb.4:                                # %if.then7
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_5:                               # %if.end11
	jmp	.LBB29_6
.LBB29_6:                               # %if.end12
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB29_10
# %bb.7:                                # %if.then14
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB29_9
# %bb.8:                                # %if.then17
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_9:                               # %if.end26
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_10:                              # %if.end30
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	unmark_for_long_term_reference, .Lfunc_end29-unmark_for_long_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb    # -- Begin function store_picture_in_dpb
	.p2align	4, 0x90
	.type	store_picture_in_dpb,@function
store_picture_in_dpb:                   # @store_picture_in_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB30_9
# %bb.1:                                # %func_store_picture_in_dpb.6
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_store_picture_in_dpb.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.33
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_store_picture_in_dpb.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.103
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_store_picture_in_dpb.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.116
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_store_picture_in_dpb.168
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.168
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_store_picture_in_dpb.187
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.187
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_7:                               # %func_store_picture_in_dpb.200
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.200
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_store_picture_in_dpb.202
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.202
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB30_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB30_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB30_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB30_7
	jmp	.LBB30_8
.Lfunc_end30:
	.size	store_picture_in_dpb, .Lfunc_end30-store_picture_in_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management
	.type	idr_memory_management,@function
idr_memory_management:                  # @idr_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB31_2
# %bb.1:                                # %func_idr_memory_management.11
	movq	%rbx, %rdi
	callq	idr_memory_management.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_idr_memory_management.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	idr_memory_management.66
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end31:
	.size	idr_memory_management, .Lfunc_end31-idr_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management
	.type	adaptive_memory_management,@function
adaptive_memory_management:             # @adaptive_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB32_2
# %bb.1:                                # %func_adaptive_memory_management.39
	movq	%rbx, %rdi
	callq	adaptive_memory_management.39
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_adaptive_memory_management.143
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	adaptive_memory_management.143
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end32:
	.size	adaptive_memory_management, .Lfunc_end32-adaptive_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb
	.type	insert_picture_in_dpb,@function
insert_picture_in_dpb:                  # @insert_picture_in_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB33_2
# %bb.1:                                # %func_insert_picture_in_dpb.3
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	insert_picture_in_dpb.3
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_insert_picture_in_dpb.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	insert_picture_in_dpb.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end33:
	.size	insert_picture_in_dpb, .Lfunc_end33-insert_picture_in_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management
	.type	sliding_window_memory_management,@function
sliding_window_memory_management:       # @sliding_window_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB34_2
# %bb.1:                                # %func_sliding_window_memory_management.123
	movq	%rbx, %rdi
	callq	sliding_window_memory_management.123
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_sliding_window_memory_management.162
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	sliding_window_memory_management.162
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end34:
	.size	sliding_window_memory_management, .Lfunc_end34-sliding_window_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc
	.type	get_smallest_poc,@function
get_smallest_poc:                       # @get_smallest_poc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB35_7
# %bb.1:                                # %func_get_smallest_poc.17
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_2:                               # %func_get_smallest_poc.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.82
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_3:                               # %func_get_smallest_poc.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.85
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_4:                               # %func_get_smallest_poc.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.87
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_5:                               # %func_get_smallest_poc.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.94
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_get_smallest_poc.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.96
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB35_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB35_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB35_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB35_5
	jmp	.LBB35_6
.Lfunc_end35:
	.size	get_smallest_poc, .Lfunc_end35-get_smallest_poc
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame # -- Begin function replace_top_pic_with_frame
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame,@function
replace_top_pic_with_frame:             # @replace_top_pic_with_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB36_9
# %bb.1:                                # %func_replace_top_pic_with_frame.59
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.59
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_replace_top_pic_with_frame.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.80
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_replace_top_pic_with_frame.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.88
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_replace_top_pic_with_frame.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.101
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_replace_top_pic_with_frame.176
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.176
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_replace_top_pic_with_frame.179
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.179
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_replace_top_pic_with_frame.180
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.180
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_replace_top_pic_with_frame.194
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.194
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
	jmp	.LBB36_8
.Lfunc_end36:
	.size	replace_top_pic_with_frame, .Lfunc_end36-replace_top_pic_with_frame
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field         # -- Begin function dpb_split_field
	.p2align	4, 0x90
	.type	dpb_split_field,@function
dpb_split_field:                        # @dpb_split_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB37_9
# %bb.1:                                # %func_dpb_split_field.9
	movq	%rbx, %rdi
	callq	dpb_split_field.9
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_dpb_split_field.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_dpb_split_field.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.55
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_dpb_split_field.154
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.154
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %func_dpb_split_field.188
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.188
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_dpb_split_field.220
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.220
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_7:                               # %func_dpb_split_field.230
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.230
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_8:                               # %func_dpb_split_field.240
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.240
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB37_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB37_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB37_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB37_7
	jmp	.LBB37_8
.Lfunc_end37:
	.size	dpb_split_field, .Lfunc_end37-dpb_split_field
	.cfi_endproc
                                        # -- End function
	.globl	flush_dpb               # -- Begin function flush_dpb
	.p2align	4, 0x90
	.type	flush_dpb,@function
flush_dpb:                              # @flush_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB38_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_1
.LBB38_4:                               # %for.end
	jmp	.LBB38_5
.LBB38_5:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	callq	remove_unused_frame_from_dpb
	cmpl	$0, %eax
	je	.LBB38_7
# %bb.6:                                # %while.body
                                        #   in Loop: Header=BB38_5 Depth=1
	jmp	.LBB38_5
.LBB38_7:                               # %while.end
	jmp	.LBB38_8
.LBB38_8:                               # %while.cond1
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, dpb+28
	je	.LBB38_10
# %bb.9:                                # %while.body3
                                        #   in Loop: Header=BB38_8 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB38_8
.LBB38_10:                              # %while.end4
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end38:
	.size	flush_dpb, .Lfunc_end38-flush_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_for_reference
	.type	unmark_for_reference,@function
unmark_for_reference:                   # @unmark_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB39_6
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB39_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_3:                               # %if.end
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB39_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_5:                               # %if.end8
	jmp	.LBB39_6
.LBB39_6:                               # %if.end9
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB39_10
# %bb.7:                                # %if.then11
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB39_9
# %bb.8:                                # %if.then14
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_9:                               # %if.end19
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_10:                              # %if.end21
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6456(%rax)
	je	.LBB39_12
# %bb.11:                               # %if.then24
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6456(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6456(%rax)
.LBB39_12:                              # %if.end29
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6448(%rax)
	je	.LBB39_14
# %bb.13:                               # %if.then32
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6448(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6448(%rax)
.LBB39_14:                              # %if.end37
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6440(%rax)
	je	.LBB39_16
# %bb.15:                               # %if.then40
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6440(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6440(%rax)
.LBB39_16:                              # %if.end45
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end39:
	.size	unmark_for_reference, .Lfunc_end39-unmark_for_reference
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids       # -- Begin function gen_field_ref_ids
	.p2align	4, 0x90
	.type	gen_field_ref_ids,@function
gen_field_ref_ids:                      # @gen_field_ref_ids
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB40_9
# %bb.1:                                # %func_gen_field_ref_ids.56
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_gen_field_ref_ids.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_3:                               # %func_gen_field_ref_ids.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.95
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_4:                               # %func_gen_field_ref_ids.104
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.104
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_gen_field_ref_ids.115
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.115
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_6:                               # %func_gen_field_ref_ids.155
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.155
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_7:                               # %func_gen_field_ref_ids.160
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.160
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_8:                               # %func_gen_field_ref_ids.221
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.221
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB40_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB40_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB40_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB40_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB40_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB40_7
	jmp	.LBB40_8
.Lfunc_end40:
	.size	gen_field_ref_ids, .Lfunc_end40-gen_field_ref_ids
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field       # -- Begin function dpb_combine_field
	.p2align	4, 0x90
	.type	dpb_combine_field,@function
dpb_combine_field:                      # @dpb_combine_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB41_9
# %bb.1:                                # %func_dpb_combine_field.13
	movq	%rbx, %rdi
	callq	dpb_combine_field.13
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_2:                               # %func_dpb_combine_field.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.58
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_3:                               # %func_dpb_combine_field.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.119
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_4:                               # %func_dpb_combine_field.178
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.178
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %func_dpb_combine_field.185
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.185
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_6:                               # %func_dpb_combine_field.189
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.189
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_7:                               # %func_dpb_combine_field.218
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.218
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_8:                               # %func_dpb_combine_field.224
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.224
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB41_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB41_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB41_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB41_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB41_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB41_7
	jmp	.LBB41_8
.Lfunc_end41:
	.size	dpb_combine_field, .Lfunc_end41-dpb_combine_field
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ref_pic_list_reordering_buffer # -- Begin function alloc_ref_pic_list_reordering_buffer
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer,@function
alloc_ref_pic_list_reordering_buffer:   # @alloc_ref_pic_list_reordering_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB42_2
# %bb.1:                                # %func_alloc_ref_pic_list_reordering_buffer.164
	movq	%rbx, %rdi
	callq	alloc_ref_pic_list_reordering_buffer.164
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_2:                               # %func_alloc_ref_pic_list_reordering_buffer.167
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	alloc_ref_pic_list_reordering_buffer.167
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end42:
	.size	alloc_ref_pic_list_reordering_buffer, .Lfunc_end42-alloc_ref_pic_list_reordering_buffer
	.cfi_endproc
                                        # -- End function
	.globl	free_ref_pic_list_reordering_buffer # -- Begin function free_ref_pic_list_reordering_buffer
	.p2align	4, 0x90
	.type	free_ref_pic_list_reordering_buffer,@function
free_ref_pic_list_reordering_buffer:    # @free_ref_pic_list_reordering_buffer
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB43_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	callq	free
.LBB43_2:                               # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB43_4
# %bb.3:                                # %if.then3
	movq	-8(%rbp), %rax
	movq	72(%rax), %rdi
	callq	free
.LBB43_4:                               # %if.end5
	movq	-8(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB43_6
# %bb.5:                                # %if.then7
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	free
.LBB43_6:                               # %if.end9
	movq	-8(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB43_8
# %bb.7:                                # %if.then14
	movq	-8(%rbp), %rax
	movq	96(%rax), %rdi
	callq	free
.LBB43_8:                               # %if.end16
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB43_10
# %bb.9:                                # %if.then18
	movq	-8(%rbp), %rax
	movq	104(%rax), %rdi
	callq	free
.LBB43_10:                              # %if.end20
	movq	-8(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB43_12
# %bb.11:                               # %if.then22
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	callq	free
.LBB43_12:                              # %if.end24
	movq	-8(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 112(%rax)
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end43:
	.size	free_ref_pic_list_reordering_buffer, .Lfunc_end43-free_ref_pic_list_reordering_buffer
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap      # -- Begin function fill_frame_num_gap
	.p2align	4, 0x90
	.type	fill_frame_num_gap,@function
fill_frame_num_gap:                     # @fill_frame_num_gap
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB44_9
# %bb.1:                                # %func_fill_frame_num_gap.49
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.49
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_2:                               # %func_fill_frame_num_gap.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_3:                               # %func_fill_frame_num_gap.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.102
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_4:                               # %func_fill_frame_num_gap.118
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.118
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_5:                               # %func_fill_frame_num_gap.171
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.171
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_6:                               # %func_fill_frame_num_gap.196
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.196
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_7:                               # %func_fill_frame_num_gap.252
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.252
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_8:                               # %func_fill_frame_num_gap.261
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.261
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB44_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB44_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB44_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB44_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB44_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB44_7
	jmp	.LBB44_8
.Lfunc_end44:
	.size	fill_frame_num_gap, .Lfunc_end44-fill_frame_num_gap
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated         # -- Begin function alloc_colocated
	.p2align	4, 0x90
	.type	alloc_colocated,@function
alloc_colocated:                        # @alloc_colocated
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB45_9
# %bb.1:                                # %func_alloc_colocated.22
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.22
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_2:                               # %func_alloc_colocated.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_3:                               # %func_alloc_colocated.107
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.107
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_4:                               # %func_alloc_colocated.219
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.219
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_5:                               # %func_alloc_colocated.237
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.237
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_6:                               # %func_alloc_colocated.242
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.242
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_7:                               # %func_alloc_colocated.244
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.244
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_8:                               # %func_alloc_colocated.249
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.249
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB45_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB45_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB45_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB45_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB45_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB45_7
	jmp	.LBB45_8
.Lfunc_end45:
	.size	alloc_colocated, .Lfunc_end45-alloc_colocated
	.cfi_endproc
                                        # -- End function
	.globl	free_colocated          # -- Begin function free_colocated
	.p2align	4, 0x90
	.type	free_colocated,@function
free_colocated:                         # @free_colocated
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB46_12
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movq	1600(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	1608(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	1616(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 1624(%rax)
	je	.LBB46_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	1624(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 1624(%rax)
.LBB46_3:                               # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 4872(%rax)
	je	.LBB46_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	4872(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 4872(%rax)
.LBB46_5:                               # %if.end9
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB46_11
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	3216(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	3224(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	3232(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 3240(%rax)
	je	.LBB46_8
# %bb.7:                                # %if.then15
	movq	-8(%rbp), %rax
	movq	3240(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 3240(%rax)
.LBB46_8:                               # %if.end18
	movq	-8(%rbp), %rax
	movq	4832(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	4840(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	4848(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 4856(%rax)
	je	.LBB46_10
# %bb.9:                                # %if.then22
	movq	-8(%rbp), %rax
	movq	4856(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 4856(%rax)
.LBB46_10:                              # %if.end25
	jmp	.LBB46_11
.LBB46_11:                              # %if.end26
	movq	-8(%rbp), %rdi
	callq	free
	movq	$0, -8(%rbp)
.LBB46_12:                              # %if.end27
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end46:
	.size	free_colocated, .Lfunc_end46-free_colocated
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated       # -- Begin function compute_colocated
	.p2align	4, 0x90
	.type	compute_colocated,@function
compute_colocated:                      # @compute_colocated
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB47_9
# %bb.1:                                # %func_compute_colocated.78
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.78
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_2:                               # %func_compute_colocated.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.122
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_3:                               # %func_compute_colocated.141
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.141
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_4:                               # %func_compute_colocated.142
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.142
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_5:                               # %func_compute_colocated.170
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.170
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_6:                               # %func_compute_colocated.193
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.193
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_7:                               # %func_compute_colocated.213
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.213
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_8:                               # %func_compute_colocated.241
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.241
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB47_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB47_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB47_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB47_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB47_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB47_7
	jmp	.LBB47_8
.Lfunc_end47:
	.size	compute_colocated, .Lfunc_end47-compute_colocated
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic
	.type	get_short_term_pic,@function
get_short_term_pic:                     # @get_short_term_pic
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB48_7
# %bb.1:                                # %func_get_short_term_pic.41
	movl	%ebx, %edi
	callq	get_short_term_pic.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_2:                               # %func_get_short_term_pic.108
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.108
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_3:                               # %func_get_short_term_pic.121
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.121
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_4:                               # %func_get_short_term_pic.157
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.157
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_5:                               # %func_get_short_term_pic.192
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.192
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_6:                               # %func_get_short_term_pic.206
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.206
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB48_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB48_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB48_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB48_5
	jmp	.LBB48_6
.Lfunc_end48:
	.size	get_short_term_pic, .Lfunc_end48-get_short_term_pic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic
	.type	get_long_term_pic,@function
get_long_term_pic:                      # @get_long_term_pic
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB49_7
# %bb.1:                                # %func_get_long_term_pic.10
	movl	%ebx, %edi
	callq	get_long_term_pic.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_2:                               # %func_get_long_term_pic.21
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_3:                               # %func_get_long_term_pic.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.43
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_4:                               # %func_get_long_term_pic.100
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.100
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_5:                               # %func_get_long_term_pic.140
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.140
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_6:                               # %func_get_long_term_pic.198
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.198
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB49_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB49_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB49_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB49_5
	jmp	.LBB49_6
.Lfunc_end49:
	.size	get_long_term_pic, .Lfunc_end49-get_long_term_pic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference
	.type	mm_unmark_short_term_for_reference,@function
mm_unmark_short_term_for_reference:     # @mm_unmark_short_term_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB50_9
# %bb.1:                                # %func_mm_unmark_short_term_for_reference.45
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.45
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_2:                               # %func_mm_unmark_short_term_for_reference.144
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.144
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_3:                               # %func_mm_unmark_short_term_for_reference.166
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.166
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_4:                               # %func_mm_unmark_short_term_for_reference.190
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.190
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_5:                               # %func_mm_unmark_short_term_for_reference.231
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.231
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_6:                               # %func_mm_unmark_short_term_for_reference.232
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.232
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_7:                               # %func_mm_unmark_short_term_for_reference.239
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.239
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_8:                               # %func_mm_unmark_short_term_for_reference.245
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.245
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB50_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB50_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB50_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB50_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB50_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB50_7
	jmp	.LBB50_8
.Lfunc_end50:
	.size	mm_unmark_short_term_for_reference, .Lfunc_end50-mm_unmark_short_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference
	.type	mm_unmark_long_term_for_reference,@function
mm_unmark_long_term_for_reference:      # @mm_unmark_long_term_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB51_7
# %bb.1:                                # %func_mm_unmark_long_term_for_reference.61
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.61
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_2:                               # %func_mm_unmark_long_term_for_reference.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_3:                               # %func_mm_unmark_long_term_for_reference.134
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.134
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_4:                               # %func_mm_unmark_long_term_for_reference.211
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.211
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_5:                               # %func_mm_unmark_long_term_for_reference.212
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.212
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_6:                               # %func_mm_unmark_long_term_for_reference.222
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.222
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB51_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB51_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB51_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB51_5
	jmp	.LBB51_6
.Lfunc_end51:
	.size	mm_unmark_long_term_for_reference, .Lfunc_end51-mm_unmark_long_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx
	.type	mm_assign_long_term_frame_idx,@function
mm_assign_long_term_frame_idx:          # @mm_assign_long_term_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB52_9
# %bb.1:                                # %func_mm_assign_long_term_frame_idx.184
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.184
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_2:                               # %func_mm_assign_long_term_frame_idx.197
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.197
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_3:                               # %func_mm_assign_long_term_frame_idx.216
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.216
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_4:                               # %func_mm_assign_long_term_frame_idx.225
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.225
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_5:                               # %func_mm_assign_long_term_frame_idx.227
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.227
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_6:                               # %func_mm_assign_long_term_frame_idx.250
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.250
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_7:                               # %func_mm_assign_long_term_frame_idx.253
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.253
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_8:                               # %func_mm_assign_long_term_frame_idx.262
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.262
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB52_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB52_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB52_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB52_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB52_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB52_7
	jmp	.LBB52_8
.Lfunc_end52:
	.size	mm_assign_long_term_frame_idx, .Lfunc_end52-mm_assign_long_term_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term
	.type	mm_mark_current_picture_long_term,@function
mm_mark_current_picture_long_term:      # @mm_mark_current_picture_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB53_2
# %bb.1:                                # %func_mm_mark_current_picture_long_term.52
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_mark_current_picture_long_term.52
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_2:                               # %func_mm_mark_current_picture_long_term.109
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_mark_current_picture_long_term.109
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end53:
	.size	mm_mark_current_picture_long_term, .Lfunc_end53-mm_mark_current_picture_long_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x
	.type	get_pic_num_x,@function
get_pic_num_x:                          # @get_pic_num_x
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB54_7
# %bb.1:                                # %func_get_pic_num_x.24
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.24
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_2:                               # %func_get_pic_num_x.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_3:                               # %func_get_pic_num_x.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.60
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_4:                               # %func_get_pic_num_x.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.81
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_5:                               # %func_get_pic_num_x.182
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.182
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_6:                               # %func_get_pic_num_x.215
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.215
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB54_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB54_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB54_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB54_5
	jmp	.LBB54_6
.Lfunc_end54:
	.size	get_pic_num_x, .Lfunc_end54-get_pic_num_x
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx
	.type	unmark_long_term_frame_for_reference_by_frame_idx,@function
unmark_long_term_frame_for_reference_by_frame_idx: # @unmark_long_term_frame_for_reference_by_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB55_2
# %bb.1:                                # %func_unmark_long_term_frame_for_reference_by_frame_idx.8
	movl	%ebx, %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_2:                               # %func_unmark_long_term_frame_for_reference_by_frame_idx.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx.29
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end55:
	.size	unmark_long_term_frame_for_reference_by_frame_idx, .Lfunc_end55-unmark_long_term_frame_for_reference_by_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx
	.type	unmark_long_term_field_for_reference_by_frame_idx,@function
unmark_long_term_field_for_reference_by_frame_idx: # @unmark_long_term_field_for_reference_by_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB56_9
# %bb.1:                                # %func_unmark_long_term_field_for_reference_by_frame_idx.15
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_2:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.63
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_3:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.201
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.201
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_4:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.254
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.254
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_5:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.256
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.256
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_6:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.260
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.260
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_7:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.263
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.263
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_8:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.266
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.266
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB56_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB56_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB56_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB56_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB56_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB56_7
	jmp	.LBB56_8
.Lfunc_end56:
	.size	unmark_long_term_field_for_reference_by_frame_idx, .Lfunc_end56-unmark_long_term_field_for_reference_by_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term
	.type	mark_pic_long_term,@function
mark_pic_long_term:                     # @mark_pic_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB57_9
# %bb.1:                                # %func_mark_pic_long_term.36
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_2:                               # %func_mark_pic_long_term.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.127
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_3:                               # %func_mark_pic_long_term.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.130
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_4:                               # %func_mark_pic_long_term.146
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.146
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_5:                               # %func_mark_pic_long_term.148
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.148
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_6:                               # %func_mark_pic_long_term.177
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.177
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_7:                               # %func_mark_pic_long_term.208
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.208
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_8:                               # %func_mark_pic_long_term.214
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.214
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB57_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB57_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB57_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB57_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB57_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB57_7
	jmp	.LBB57_8
.Lfunc_end57:
	.size	mark_pic_long_term, .Lfunc_end57-mark_pic_long_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_all_short_term_for_reference
	.type	mm_unmark_all_short_term_for_reference,@function
mm_unmark_all_short_term_for_reference: # @mm_unmark_all_short_term_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB58_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_4:                               # %for.end
	callq	update_ref_list
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end58:
	.size	mm_unmark_all_short_term_for_reference, .Lfunc_end58-mm_unmark_all_short_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_all_long_term_for_reference
	.type	mm_unmark_all_long_term_for_reference,@function
mm_unmark_all_long_term_for_reference:  # @mm_unmark_all_long_term_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%edi, %edi
	callq	mm_update_max_long_term_frame_idx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end59:
	.size	mm_unmark_all_long_term_for_reference, .Lfunc_end59-mm_unmark_all_long_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb
	.type	remove_unused_frame_from_dpb,@function
remove_unused_frame_from_dpb:           # @remove_unused_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB60_2
# %bb.1:                                # %func_remove_unused_frame_from_dpb.48
	callq	remove_unused_frame_from_dpb.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_2:                               # %func_remove_unused_frame_from_dpb.74
	.cfi_def_cfa %rbp, 16
	callq	remove_unused_frame_from_dpb.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end60:
	.size	remove_unused_frame_from_dpb, .Lfunc_end60-remove_unused_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_used_for_reference
	.type	is_used_for_reference,@function
is_used_for_reference:                  # @is_used_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB61_2
# %bb.1:                                # %func_is_used_for_reference.1
	movq	%rbx, %rdi
	callq	is_used_for_reference.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_2:                               # %func_is_used_for_reference.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_used_for_reference.31
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end61:
	.size	is_used_for_reference, .Lfunc_end61-is_used_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb
	.type	remove_frame_from_dpb,@function
remove_frame_from_dpb:                  # @remove_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB62_9
# %bb.1:                                # %func_remove_frame_from_dpb.90
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.90
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_2:                               # %func_remove_frame_from_dpb.125
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.125
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_3:                               # %func_remove_frame_from_dpb.135
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.135
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_4:                               # %func_remove_frame_from_dpb.203
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.203
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_5:                               # %func_remove_frame_from_dpb.238
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.238
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_6:                               # %func_remove_frame_from_dpb.258
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.258
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_7:                               # %func_remove_frame_from_dpb.259
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.259
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_8:                               # %func_remove_frame_from_dpb.265
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.265
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB62_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB62_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB62_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB62_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB62_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB62_7
	jmp	.LBB62_8
.Lfunc_end62:
	.size	remove_frame_from_dpb, .Lfunc_end62-remove_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb
	.type	output_one_frame_from_dpb,@function
output_one_frame_from_dpb:              # @output_one_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB63_2
# %bb.1:                                # %func_output_one_frame_from_dpb.57
	callq	output_one_frame_from_dpb.57
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_2:                               # %func_output_one_frame_from_dpb.183
	.cfi_def_cfa %rbp, 16
	callq	output_one_frame_from_dpb.183
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end63:
	.size	output_one_frame_from_dpb, .Lfunc_end63-output_one_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_used_for_reference.1
	.type	is_used_for_reference.1,@function
is_used_for_reference.1:                # @is_used_for_reference.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$256795796, -28(%rbp)   # imm = 0xF4E6494
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	je	.LBB64_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB64_17
.LBB64_2:                               # %if.end
	movq	-24(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB64_6
# %bb.3:                                # %if.then1
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB64_5
# %bb.4:                                # %if.then3
	movl	$1, -12(%rbp)
	jmp	.LBB64_17
.LBB64_5:                               # %if.end4
	jmp	.LBB64_6
.LBB64_6:                               # %if.end5
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB64_16
# %bb.7:                                # %if.then7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB64_11
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB64_10
# %bb.9:                                # %if.then13
	movl	$1, -12(%rbp)
	jmp	.LBB64_17
.LBB64_10:                              # %if.end14
	jmp	.LBB64_11
.LBB64_11:                              # %if.end15
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB64_15
# %bb.12:                               # %if.then19
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB64_14
# %bb.13:                               # %if.then22
	movl	$1, -12(%rbp)
	jmp	.LBB64_17
.LBB64_14:                              # %if.end23
	jmp	.LBB64_15
.LBB64_15:                              # %if.end24
	jmp	.LBB64_16
.LBB64_16:                              # %if.end25
	movl	$0, -12(%rbp)
.LBB64_17:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$256795796, -28(%rbp)   # imm = 0xF4E6494
	jne	.LBB64_19
.LBB64_18:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_19:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_18
.Lfunc_end64:
	.size	is_used_for_reference.1, .Lfunc_end64-is_used_for_reference.1
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.2            # -- Begin function init_lists.2
	.p2align	4, 0x90
	.type	init_lists.2,@function
init_lists.2:                           # @init_lists.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$546291638, -76(%rbp)   # imm = 0x208FBFB6
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB65_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB65_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB65_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB65_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB65_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB65_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB65_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB65_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB65_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB65_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB65_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB65_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB65_9
.LBB65_8:                               # %if.else
                                        #   in Loop: Header=BB65_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB65_9:                               # %if.end
                                        #   in Loop: Header=BB65_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB65_10:                              # %if.end36
                                        #   in Loop: Header=BB65_2 Depth=1
	jmp	.LBB65_11
.LBB65_11:                              # %if.end37
                                        #   in Loop: Header=BB65_2 Depth=1
	jmp	.LBB65_12
.LBB65_12:                              # %for.inc
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_2
.LBB65_13:                              # %for.end
	jmp	.LBB65_31
.LBB65_14:                              # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB65_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB65_17
.LBB65_16:                              # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB65_17:                              # %if.end42
	movl	$0, -4(%rbp)
.LBB65_18:                              # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB65_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB65_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB65_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB65_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB65_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB65_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB65_23
.LBB65_22:                              # %if.else63
                                        #   in Loop: Header=BB65_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB65_23:                              # %if.end70
                                        #   in Loop: Header=BB65_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB65_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB65_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB65_25:                              # %if.end83
                                        #   in Loop: Header=BB65_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB65_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB65_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB65_27:                              # %if.end98
                                        #   in Loop: Header=BB65_18 Depth=1
	jmp	.LBB65_28
.LBB65_28:                              # %if.end99
                                        #   in Loop: Header=BB65_18 Depth=1
	jmp	.LBB65_29
.LBB65_29:                              # %for.inc100
                                        #   in Loop: Header=BB65_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_18
.LBB65_30:                              # %for.end102
	jmp	.LBB65_31
.LBB65_31:                              # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB65_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB65_34
.LBB65_33:                              # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB65_181
.LBB65_34:                              # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB65_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB65_75
.LBB65_36:                              # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB65_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB65_38:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB65_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB65_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB65_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB65_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB65_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB65_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB65_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB65_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB65_43:                              # %if.end140
                                        #   in Loop: Header=BB65_38 Depth=1
	jmp	.LBB65_44
.LBB65_44:                              # %if.end141
                                        #   in Loop: Header=BB65_38 Depth=1
	jmp	.LBB65_45
.LBB65_45:                              # %for.inc142
                                        #   in Loop: Header=BB65_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_38
.LBB65_46:                              # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB65_47:                              # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB65_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB65_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB65_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB65_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB65_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB65_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB65_51:                              # %if.end177
                                        #   in Loop: Header=BB65_47 Depth=1
	jmp	.LBB65_52
.LBB65_52:                              # %if.end178
                                        #   in Loop: Header=BB65_47 Depth=1
	jmp	.LBB65_53
.LBB65_53:                              # %for.inc179
                                        #   in Loop: Header=BB65_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_47
.LBB65_54:                              # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB65_74
.LBB65_55:                              # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB65_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB65_57:                              # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB65_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB65_59:                              # %if.end197
	movl	$0, -4(%rbp)
.LBB65_60:                              # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB65_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB65_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB65_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB65_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB65_63:                              # %if.end212
                                        #   in Loop: Header=BB65_60 Depth=1
	jmp	.LBB65_64
.LBB65_64:                              # %for.inc213
                                        #   in Loop: Header=BB65_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_60
.LBB65_65:                              # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB65_66:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB65_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB65_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB65_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB65_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB65_69:                              # %if.end242
                                        #   in Loop: Header=BB65_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB65_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB65_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB65_71:                              # %if.end259
                                        #   in Loop: Header=BB65_66 Depth=1
	jmp	.LBB65_72
.LBB65_72:                              # %for.inc260
                                        #   in Loop: Header=BB65_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_66
.LBB65_73:                              # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB65_74:                              # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB65_155
.LBB65_75:                              # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB65_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB65_77:                              # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB65_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB65_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB65_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB65_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB65_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB65_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB65_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB65_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB65_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB65_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB65_83:                              # %if.end307
                                        #   in Loop: Header=BB65_77 Depth=1
	jmp	.LBB65_84
.LBB65_84:                              # %if.end308
                                        #   in Loop: Header=BB65_77 Depth=1
	jmp	.LBB65_85
.LBB65_85:                              # %if.end309
                                        #   in Loop: Header=BB65_77 Depth=1
	jmp	.LBB65_86
.LBB65_86:                              # %for.inc310
                                        #   in Loop: Header=BB65_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_77
.LBB65_87:                              # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB65_88:                              # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB65_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB65_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB65_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB65_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB65_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB65_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB65_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB65_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB65_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB65_94:                              # %if.end354
                                        #   in Loop: Header=BB65_88 Depth=1
	jmp	.LBB65_95
.LBB65_95:                              # %if.end355
                                        #   in Loop: Header=BB65_88 Depth=1
	jmp	.LBB65_96
.LBB65_96:                              # %if.end356
                                        #   in Loop: Header=BB65_88 Depth=1
	jmp	.LBB65_97
.LBB65_97:                              # %for.inc357
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_88
.LBB65_98:                              # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB65_99:                              # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB65_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB65_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB65_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_99
.LBB65_102:                             # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_103:                             # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB65_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB65_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB65_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_103
.LBB65_106:                             # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB65_107:                             # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB65_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB65_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB65_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB65_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB65_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB65_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB65_111:                             # %if.end428
                                        #   in Loop: Header=BB65_107 Depth=1
	jmp	.LBB65_112
.LBB65_112:                             # %if.end429
                                        #   in Loop: Header=BB65_107 Depth=1
	jmp	.LBB65_113
.LBB65_113:                             # %for.inc430
                                        #   in Loop: Header=BB65_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_107
.LBB65_114:                             # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB65_154
.LBB65_115:                             # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB65_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB65_117:                             # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB65_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB65_119:                             # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB65_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB65_121:                             # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB65_122:                             # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB65_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB65_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB65_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB65_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB65_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB65_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB65_126:                             # %if.end480
                                        #   in Loop: Header=BB65_122 Depth=1
	jmp	.LBB65_127
.LBB65_127:                             # %if.end481
                                        #   in Loop: Header=BB65_122 Depth=1
	jmp	.LBB65_128
.LBB65_128:                             # %for.inc482
                                        #   in Loop: Header=BB65_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_122
.LBB65_129:                             # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB65_130:                             # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB65_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB65_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB65_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB65_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB65_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB65_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB65_134:                             # %if.end507
                                        #   in Loop: Header=BB65_130 Depth=1
	jmp	.LBB65_135
.LBB65_135:                             # %if.end508
                                        #   in Loop: Header=BB65_130 Depth=1
	jmp	.LBB65_136
.LBB65_136:                             # %for.inc509
                                        #   in Loop: Header=BB65_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_130
.LBB65_137:                             # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB65_138:                             # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB65_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB65_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB65_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_138
.LBB65_141:                             # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_142:                             # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB65_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB65_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB65_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_142
.LBB65_145:                             # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB65_146:                             # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB65_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB65_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB65_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB65_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB65_149:                             # %if.end566
                                        #   in Loop: Header=BB65_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB65_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB65_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB65_151:                             # %if.end583
                                        #   in Loop: Header=BB65_146 Depth=1
	jmp	.LBB65_152
.LBB65_152:                             # %for.inc584
                                        #   in Loop: Header=BB65_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_146
.LBB65_153:                             # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB65_154:                             # %if.end588
	jmp	.LBB65_155
.LBB65_155:                             # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB65_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB65_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB65_158:                             # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB65_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB65_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB65_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB65_158 Depth=1
	movl	$1, -72(%rbp)
.LBB65_161:                             # %if.end607
                                        #   in Loop: Header=BB65_158 Depth=1
	jmp	.LBB65_162
.LBB65_162:                             # %for.inc608
                                        #   in Loop: Header=BB65_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_158
.LBB65_163:                             # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB65_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB65_165:                             # %if.end617
	jmp	.LBB65_166
.LBB65_166:                             # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB65_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB65_169
.LBB65_168:                             # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB65_169:                             # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB65_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB65_172
.LBB65_171:                             # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB65_172:                             # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB65_173:                             # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB65_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB65_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB65_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_173
.LBB65_176:                             # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB65_177:                             # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB65_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB65_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB65_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_177
.LBB65_180:                             # %for.end646.loopexit
	jmp	.LBB65_181
.LBB65_181:                             # %for.end646
	cmpl	$546291638, -76(%rbp)   # imm = 0x208FBFB6
	jne	.LBB65_183
.LBB65_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_183:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_182
.Lfunc_end65:
	.size	init_lists.2, .Lfunc_end65-init_lists.2
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb.3
	.type	insert_picture_in_dpb.3,@function
insert_picture_in_dpb.3:                # @insert_picture_in_dpb.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1005706068, -20(%rbp)  # imm = 0x3BF1DB54
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB66_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB66_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB66_5
	jmp	.LBB66_3
.LBB66_3:                               # %if.end
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB66_10
	jmp	.LBB66_4
.LBB66_4:                               # %if.end
	subl	$2, %eax
	je	.LBB66_18
	jmp	.LBB66_26
.LBB66_5:                               # %sw.bb
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-8(%rbp), %rax
	movl	$3, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB66_9
# %bb.6:                                # %if.then3
	movq	-8(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB66_8
# %bb.7:                                # %if.then5
	movq	-8(%rbp), %rax
	movl	$3, 8(%rax)
.LBB66_8:                               # %if.end7
	jmp	.LBB66_9
.LBB66_9:                               # %if.end8
	movq	-8(%rbp), %rdi
	callq	dpb_split_field
	jmp	.LBB66_26
.LBB66_10:                              # %sw.bb9
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB66_14
# %bb.11:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB66_13
# %bb.12:                               # %if.then20
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB66_13:                              # %if.end24
	jmp	.LBB66_14
.LBB66_14:                              # %if.end25
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB66_16
# %bb.15:                               # %if.then27
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB66_17
.LBB66_16:                              # %if.else
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB66_17:                              # %if.end29
	jmp	.LBB66_26
.LBB66_18:                              # %sw.bb30
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB66_22
# %bb.19:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB66_21
# %bb.20:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB66_21:                              # %if.end47
	jmp	.LBB66_22
.LBB66_22:                              # %if.end48
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB66_24
# %bb.23:                               # %if.then51
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB66_25
.LBB66_24:                              # %if.else52
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB66_25:                              # %if.end55
	jmp	.LBB66_26
.LBB66_26:                              # %sw.epilog
	movq	-16(%rbp), %rax
	movl	6364(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	6384(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 32(%rcx)
	cmpl	$1005706068, -20(%rbp)  # imm = 0x3BF1DB54
	jne	.LBB66_28
.LBB66_27:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_27
.Lfunc_end66:
	.size	insert_picture_in_dpb.3, .Lfunc_end66-insert_picture_in_dpb.3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.4
	.type	gen_pic_list_from_frame_list.4,@function
gen_pic_list_from_frame_list.4:         # @gen_pic_list_from_frame_list.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$33105294, -60(%rbp)    # imm = 0x1F9258E
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -64(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB67_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB67_3
.LBB67_2:                               # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB67_3:                               # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB67_28
# %bb.4:                                # %if.then1
	jmp	.LBB67_5
.LBB67_5:                               # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_9 Depth 2
                                        #     Child Loop BB67_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB67_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB67_7:                               # %lor.end
                                        #   in Loop: Header=BB67_5 Depth=1
	testb	$1, %al
	jne	.LBB67_8
	jmp	.LBB67_27
.LBB67_8:                               # %while.body
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_9
.LBB67_9:                               # %for.cond
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB67_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB67_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB67_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB67_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB67_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_17
.LBB67_13:                              # %if.end17
                                        #   in Loop: Header=BB67_9 Depth=2
	jmp	.LBB67_14
.LBB67_14:                              # %if.end18
                                        #   in Loop: Header=BB67_9 Depth=2
	jmp	.LBB67_15
.LBB67_15:                              # %for.inc
                                        #   in Loop: Header=BB67_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_9
.LBB67_16:                              # %for.end.loopexit
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_17
.LBB67_17:                              # %for.end
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_18
.LBB67_18:                              # %for.cond20
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB67_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB67_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB67_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB67_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB67_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_26
.LBB67_22:                              # %if.end41
                                        #   in Loop: Header=BB67_18 Depth=2
	jmp	.LBB67_23
.LBB67_23:                              # %if.end42
                                        #   in Loop: Header=BB67_18 Depth=2
	jmp	.LBB67_24
.LBB67_24:                              # %for.inc43
                                        #   in Loop: Header=BB67_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_18
.LBB67_25:                              # %for.end45.loopexit
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_26
.LBB67_26:                              # %for.end45
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_5
.LBB67_27:                              # %while.end
	jmp	.LBB67_28
.LBB67_28:                              # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB67_53
# %bb.29:                               # %if.then48
	jmp	.LBB67_30
.LBB67_30:                              # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_34 Depth 2
                                        #     Child Loop BB67_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB67_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB67_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB67_32:                              # %lor.end53
                                        #   in Loop: Header=BB67_30 Depth=1
	testb	$1, %al
	jne	.LBB67_33
	jmp	.LBB67_52
.LBB67_33:                              # %while.body54
                                        #   in Loop: Header=BB67_30 Depth=1
	jmp	.LBB67_34
.LBB67_34:                              # %for.cond55
                                        #   Parent Loop BB67_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB67_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB67_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB67_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB67_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB67_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB67_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_42
.LBB67_38:                              # %if.end77
                                        #   in Loop: Header=BB67_34 Depth=2
	jmp	.LBB67_39
.LBB67_39:                              # %if.end78
                                        #   in Loop: Header=BB67_34 Depth=2
	jmp	.LBB67_40
.LBB67_40:                              # %for.inc79
                                        #   in Loop: Header=BB67_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_34
.LBB67_41:                              # %for.end81.loopexit
                                        #   in Loop: Header=BB67_30 Depth=1
	jmp	.LBB67_42
.LBB67_42:                              # %for.end81
                                        #   in Loop: Header=BB67_30 Depth=1
	jmp	.LBB67_43
.LBB67_43:                              # %for.cond82
                                        #   Parent Loop BB67_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB67_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB67_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB67_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB67_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB67_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB67_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_51
.LBB67_47:                              # %if.end104
                                        #   in Loop: Header=BB67_43 Depth=2
	jmp	.LBB67_48
.LBB67_48:                              # %if.end105
                                        #   in Loop: Header=BB67_43 Depth=2
	jmp	.LBB67_49
.LBB67_49:                              # %for.inc106
                                        #   in Loop: Header=BB67_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_43
.LBB67_50:                              # %for.end108.loopexit
                                        #   in Loop: Header=BB67_30 Depth=1
	jmp	.LBB67_51
.LBB67_51:                              # %for.end108
                                        #   in Loop: Header=BB67_30 Depth=1
	jmp	.LBB67_30
.LBB67_52:                              # %while.end109
	jmp	.LBB67_53
.LBB67_53:                              # %if.end110
	cmpl	$33105294, -60(%rbp)    # imm = 0x1F9258E
	jne	.LBB67_55
.LBB67_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_55:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_54
.Lfunc_end67:
	.size	gen_pic_list_from_frame_list.4, .Lfunc_end67-gen_pic_list_from_frame_list.4
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.5
	.type	compare_pic_by_poc_asc.5,@function
compare_pic_by_poc_asc.5:               # @compare_pic_by_poc_asc.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1833948203, -16(%rbp)  # imm = 0x6D4FD42B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB68_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB68_5
.LBB68_2:                               # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB68_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB68_5
.LBB68_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB68_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1833948203, -16(%rbp)  # imm = 0x6D4FD42B
	jne	.LBB68_7
.LBB68_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_6
.Lfunc_end68:
	.size	compare_pic_by_poc_asc.5, .Lfunc_end68-compare_pic_by_poc_asc.5
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.6  # -- Begin function store_picture_in_dpb.6
	.p2align	4, 0x90
	.type	store_picture_in_dpb.6,@function
store_picture_in_dpb.6:                 # @store_picture_in_dpb.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$519209507, -24(%rbp)   # imm = 0x1EF28223
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB69_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB69_6
.LBB69_2:                               # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB69_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB69_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB69_5:                               # %if.end
	jmp	.LBB69_6
.LBB69_6:                               # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB69_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB69_23
.LBB69_8:                               # %if.then14
	cmpq	$0, dpb+56
	je	.LBB69_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB69_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB69_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB69_14
.LBB69_12:                              # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB69_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB69_20
.LBB69_14:                              # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB69_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB69_18
.LBB69_16:                              # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB69_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB69_19
.LBB69_18:                              # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB69_50
.LBB69_19:                              # %if.end48
	jmp	.LBB69_20
.LBB69_20:                              # %if.end49
	jmp	.LBB69_21
.LBB69_21:                              # %if.end50
	jmp	.LBB69_22
.LBB69_22:                              # %if.end51
	jmp	.LBB69_23
.LBB69_23:                              # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB69_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB69_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB69_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB69_27:                              # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB69_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB69_29:                              # %if.end67
	jmp	.LBB69_30
.LBB69_30:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB69_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB69_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB69_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB69_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB69_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB69_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB69_35
.LBB69_34:                              # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB69_50
.LBB69_35:                              # %if.end80
                                        #   in Loop: Header=BB69_30 Depth=1
	jmp	.LBB69_36
.LBB69_36:                              # %if.end81
                                        #   in Loop: Header=BB69_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB69_30
.LBB69_37:                              # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB69_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB69_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB69_40:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB69_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB69_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB69_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB69_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB69_43:                              # %if.end94
                                        #   in Loop: Header=BB69_40 Depth=1
	jmp	.LBB69_44
.LBB69_44:                              # %for.inc
                                        #   in Loop: Header=BB69_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_40
.LBB69_45:                              # %for.end
	jmp	.LBB69_46
.LBB69_46:                              # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB69_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB69_49
.LBB69_48:                              # %if.else104
	movq	$0, dpb+56
.LBB69_49:                              # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB69_50:                              # %return
	cmpl	$519209507, -24(%rbp)   # imm = 0x1EF28223
	jne	.LBB69_52
.LBB69_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_51
.Lfunc_end69:
	.size	store_picture_in_dpb.6, .Lfunc_end69-store_picture_in_dpb.6
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.7
	.type	reorder_short_term.7,@function
reorder_short_term.7:                   # @reorder_short_term.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$198064106, -44(%rbp)   # imm = 0xBCE37EA
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB70_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_1
.LBB70_4:                               # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB70_5:                               # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB70_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB70_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB70_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB70_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB70_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB70_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB70_10
.LBB70_9:                               # %if.then17
                                        #   in Loop: Header=BB70_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB70_10:                              # %if.end
                                        #   in Loop: Header=BB70_5 Depth=1
	jmp	.LBB70_11
.LBB70_11:                              # %if.end23
                                        #   in Loop: Header=BB70_5 Depth=1
	jmp	.LBB70_12
.LBB70_12:                              # %for.inc24
                                        #   in Loop: Header=BB70_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_5
.LBB70_13:                              # %for.end26
	cmpl	$198064106, -44(%rbp)   # imm = 0xBCE37EA
	jne	.LBB70_15
.LBB70_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_15:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_14
.Lfunc_end70:
	.size	reorder_short_term.7, .Lfunc_end70-reorder_short_term.7
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx.8
	.type	unmark_long_term_frame_for_reference_by_frame_idx.8,@function
unmark_long_term_frame_for_reference_by_frame_idx.8: # @unmark_long_term_frame_for_reference_by_frame_idx.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1538348185, -12(%rbp)  # imm = 0x5BB15499
	movl	%edi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB71_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB71_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB71_4:                               # %if.end
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_5
.LBB71_5:                               # %for.inc
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_1
.LBB71_6:                               # %for.end
	cmpl	$1538348185, -12(%rbp)  # imm = 0x5BB15499
	jne	.LBB71_8
.LBB71_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_7
.Lfunc_end71:
	.size	unmark_long_term_frame_for_reference_by_frame_idx.8, .Lfunc_end71-unmark_long_term_frame_for_reference_by_frame_idx.8
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.9       # -- Begin function dpb_split_field.9
	.p2align	4, 0x90
	.type	dpb_split_field.9,@function
dpb_split_field.9:                      # @dpb_split_field.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$48718546, -76(%rbp)    # imm = 0x2E762D2
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB72_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB72_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB72_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB72_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_2
.LBB72_5:                               # %for.end
	movl	$0, -4(%rbp)
.LBB72_6:                               # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB72_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB72_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_6
.LBB72_9:                               # %for.end68
	movl	$0, -4(%rbp)
.LBB72_10:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB72_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB72_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_10
.LBB72_13:                              # %for.end91
	movl	$0, -4(%rbp)
.LBB72_14:                              # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB72_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB72_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_14
.LBB72_17:                              # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB72_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB72_19:                              # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB72_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB72_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB72_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_19
.LBB72_22:                              # %for.end269
	movl	$0, -4(%rbp)
.LBB72_23:                              # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB72_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB72_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB72_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_23
.LBB72_26:                              # %for.end328
	jmp	.LBB72_27
.LBB72_27:                              # %if.end
	jmp	.LBB72_29
.LBB72_28:                              # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB72_29:                              # %if.end335
	movl	$0, -8(%rbp)
.LBB72_30:                              # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB72_30 Depth=1
	movl	$0, -4(%rbp)
.LBB72_32:                              # %for.cond343
                                        #   Parent Loop BB72_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB72_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB72_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-32(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB72_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB72_32 Depth=2
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB72_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB72_38
.LBB72_37:                              # %cond.false
                                        #   in Loop: Header=BB72_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_38
.LBB72_38:                              # %cond.end
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB72_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB72_41
.LBB72_40:                              # %cond.false415
                                        #   in Loop: Header=BB72_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_41
.LBB72_41:                              # %cond.end416
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB72_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB72_44
.LBB72_43:                              # %cond.false436
                                        #   in Loop: Header=BB72_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_44
.LBB72_44:                              # %cond.end437
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB72_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB72_47
.LBB72_46:                              # %cond.false456
                                        #   in Loop: Header=BB72_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_47
.LBB72_47:                              # %cond.end457
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB72_55
.LBB72_48:                              # %if.else466
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB72_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB72_51
.LBB72_50:                              # %cond.false491
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB72_51
.LBB72_51:                              # %cond.end492
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB72_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB72_54
.LBB72_53:                              # %cond.false509
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB72_54
.LBB72_54:                              # %cond.end510
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB72_55:                              # %if.end519
                                        #   in Loop: Header=BB72_32 Depth=2
	jmp	.LBB72_56
.LBB72_56:                              # %for.inc520
                                        #   in Loop: Header=BB72_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_32
.LBB72_57:                              # %for.end522
                                        #   in Loop: Header=BB72_30 Depth=1
	jmp	.LBB72_58
.LBB72_58:                              # %for.inc523
                                        #   in Loop: Header=BB72_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_30
.LBB72_59:                              # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB72_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB72_73
.LBB72_61:                              # %if.then530
	movl	$0, -4(%rbp)
.LBB72_62:                              # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB72_62 Depth=1
	movl	$0, -8(%rbp)
.LBB72_64:                              # %for.cond538
                                        #   Parent Loop BB72_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB72_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB72_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB72_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB72_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB72_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB72_68:                              # %if.end908
                                        #   in Loop: Header=BB72_64 Depth=2
	jmp	.LBB72_69
.LBB72_69:                              # %for.inc909
                                        #   in Loop: Header=BB72_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_64
.LBB72_70:                              # %for.end911
                                        #   in Loop: Header=BB72_62 Depth=1
	jmp	.LBB72_71
.LBB72_71:                              # %for.inc912
                                        #   in Loop: Header=BB72_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_62
.LBB72_72:                              # %for.end914
	jmp	.LBB72_73
.LBB72_73:                              # %if.end915
	movl	$0, -4(%rbp)
.LBB72_74:                              # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB72_74 Depth=1
	movl	$0, -8(%rbp)
.LBB72_76:                              # %for.cond923
                                        #   Parent Loop BB72_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB72_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-64(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB72_148
.LBB72_79:                              # %if.then954
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB72_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_83
.LBB72_82:                              # %cond.false991
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_83:                              # %cond.end993
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_86
.LBB72_85:                              # %cond.false1001
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_86:                              # %cond.end1003
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_89
.LBB72_88:                              # %cond.false1032
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_89:                              # %cond.end1034
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_92
.LBB72_91:                              # %cond.false1042
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_92:                              # %cond.end1044
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_95
.LBB72_94:                              # %cond.false1073
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_95:                              # %cond.end1075
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_98
.LBB72_97:                              # %cond.false1083
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_98:                              # %cond.end1085
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_101
.LBB72_100:                             # %cond.false1114
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_101:                             # %cond.end1116
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_104
.LBB72_103:                             # %cond.false1124
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_104:                             # %cond.end1126
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_107
.LBB72_106:                             # %cond.false1155
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_107:                             # %cond.end1157
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_110
.LBB72_109:                             # %cond.false1165
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_110:                             # %cond.end1167
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB72_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB72_125
.LBB72_112:                             # %if.else1190
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_115
.LBB72_114:                             # %cond.false1198
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_115:                             # %cond.end1200
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_118
.LBB72_117:                             # %cond.false1208
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_118:                             # %cond.end1210
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB72_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB72_121
.LBB72_120:                             # %cond.false1237
                                        #   in Loop: Header=BB72_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_121
.LBB72_121:                             # %cond.end1238
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB72_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB72_124
.LBB72_123:                             # %cond.false1254
                                        #   in Loop: Header=BB72_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_124
.LBB72_124:                             # %cond.end1255
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB72_125:                             # %if.end1264
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_128
.LBB72_127:                             # %cond.false1272
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_128:                             # %cond.end1274
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_131
.LBB72_130:                             # %cond.false1282
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_131:                             # %cond.end1284
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB72_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB72_146
.LBB72_133:                             # %if.else1307
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_136
.LBB72_135:                             # %cond.false1315
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_136:                             # %cond.end1317
                                        #   in Loop: Header=BB72_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB72_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB72_139
.LBB72_138:                             # %cond.false1325
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB72_139:                             # %cond.end1327
                                        #   in Loop: Header=BB72_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB72_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB72_142
.LBB72_141:                             # %cond.false1355
                                        #   in Loop: Header=BB72_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_142
.LBB72_142:                             # %cond.end1356
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB72_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB72_145
.LBB72_144:                             # %cond.false1373
                                        #   in Loop: Header=BB72_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_145
.LBB72_145:                             # %cond.end1374
                                        #   in Loop: Header=BB72_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB72_146:                             # %if.end1383
                                        #   in Loop: Header=BB72_76 Depth=2
	jmp	.LBB72_147
.LBB72_147:                             # %if.end1384
                                        #   in Loop: Header=BB72_76 Depth=2
	jmp	.LBB72_148
.LBB72_148:                             # %if.end1385
                                        #   in Loop: Header=BB72_76 Depth=2
	jmp	.LBB72_149
.LBB72_149:                             # %for.inc1386
                                        #   in Loop: Header=BB72_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_76
.LBB72_150:                             # %for.end1388
                                        #   in Loop: Header=BB72_74 Depth=1
	jmp	.LBB72_151
.LBB72_151:                             # %for.inc1389
                                        #   in Loop: Header=BB72_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_74
.LBB72_152:                             # %for.end1391
	movl	$0, -8(%rbp)
.LBB72_153:                             # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB72_153 Depth=1
	movl	$0, -4(%rbp)
.LBB72_155:                             # %for.cond1399
                                        #   Parent Loop BB72_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB72_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB72_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_155
.LBB72_158:                             # %for.end1414
                                        #   in Loop: Header=BB72_153 Depth=1
	jmp	.LBB72_159
.LBB72_159:                             # %for.inc1415
                                        #   in Loop: Header=BB72_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_153
.LBB72_160:                             # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB72_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB72_174
.LBB72_162:                             # %if.then1423
	movl	$0, -8(%rbp)
.LBB72_163:                             # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB72_163 Depth=1
	movl	$0, -4(%rbp)
.LBB72_165:                             # %for.cond1431
                                        #   Parent Loop BB72_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB72_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB72_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB72_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB72_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-80(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB72_169
.LBB72_168:                             # %cond.false1462
                                        #   in Loop: Header=BB72_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB72_169
.LBB72_169:                             # %cond.end1463
                                        #   in Loop: Header=BB72_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB72_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_165
.LBB72_171:                             # %for.end1474
                                        #   in Loop: Header=BB72_163 Depth=1
	jmp	.LBB72_172
.LBB72_172:                             # %for.inc1475
                                        #   in Loop: Header=BB72_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_163
.LBB72_173:                             # %for.end1477
	jmp	.LBB72_174
.LBB72_174:                             # %if.end1478
	cmpl	$48718546, -76(%rbp)    # imm = 0x2E762D2
	jne	.LBB72_176
.LBB72_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_176:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_175
.Lfunc_end72:
	.size	dpb_split_field.9, .Lfunc_end72-dpb_split_field.9
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.10
	.type	get_long_term_pic.10,@function
get_long_term_pic.10:                   # @get_long_term_pic.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2086673894, -28(%rbp)  # imm = 0x7C601DE6
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB73_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB73_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB73_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB73_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB73_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB73_23
.LBB73_7:                               # %if.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_8
.LBB73_8:                               # %if.end14
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_20
.LBB73_9:                               # %if.else
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB73_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB73_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB73_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB73_23
.LBB73_13:                              # %if.end34
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_14
.LBB73_14:                              # %if.end35
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB73_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB73_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB73_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB73_23
.LBB73_18:                              # %if.end56
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_19
.LBB73_19:                              # %if.end57
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_20
.LBB73_20:                              # %if.end58
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_21
.LBB73_21:                              # %for.inc
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_1
.LBB73_22:                              # %for.end
	movq	$0, -24(%rbp)
.LBB73_23:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$2086673894, -28(%rbp)  # imm = 0x7C601DE6
	jne	.LBB73_25
.LBB73_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_25:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_24
.Lfunc_end73:
	.size	get_long_term_pic.10, .Lfunc_end73-get_long_term_pic.10
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management.11
	.type	idr_memory_management.11,@function
idr_memory_management.11:               # @idr_memory_management.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$339773837, -20(%rbp)   # imm = 0x1440898D
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72504(%rax)
	je	.LBB74_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB74_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB74_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB74_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB74_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_2
.LBB74_5:                               # %for.end
	movl	$0, -4(%rbp)
.LBB74_6:                               # %for.cond3
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB74_9
# %bb.7:                                # %for.body5
                                        #   in Loop: Header=BB74_6 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.8:                                # %for.inc8
                                        #   in Loop: Header=BB74_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_6
.LBB74_9:                               # %for.end10
	movl	$0, -4(%rbp)
.LBB74_10:                              # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB74_13
# %bb.11:                               # %for.body13
                                        #   in Loop: Header=BB74_10 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.12:                               # %for.inc16
                                        #   in Loop: Header=BB74_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_10
.LBB74_13:                              # %for.end18
	movl	$0, dpb+28
	jmp	.LBB74_15
.LBB74_14:                              # %if.else
	callq	flush_dpb
.LBB74_15:                              # %if.end
	movq	$0, dpb+56
	callq	update_ref_list
	callq	update_ltref_list
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	cmpl	$0, 72508(%rax)
	je	.LBB74_17
# %bb.16:                               # %if.then20
	movl	$0, dpb+44
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	jmp	.LBB74_18
.LBB74_17:                              # %if.else21
	movl	$-1, dpb+44
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
.LBB74_18:                              # %if.end23
	cmpl	$339773837, -20(%rbp)   # imm = 0x1440898D
	jne	.LBB74_20
.LBB74_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_19
.Lfunc_end74:
	.size	idr_memory_management.11, .Lfunc_end74-idr_memory_management.11
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_short_term_reference.12
	.type	is_short_term_reference.12,@function
is_short_term_reference.12:             # @is_short_term_reference.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$975219641, -24(%rbp)   # imm = 0x3A20ABB9
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB75_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB75_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB75_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB75_18
.LBB75_4:                               # %if.end
	jmp	.LBB75_5
.LBB75_5:                               # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB75_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB75_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB75_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB75_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB75_18
.LBB75_10:                              # %if.end17
	jmp	.LBB75_11
.LBB75_11:                              # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB75_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB75_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB75_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB75_18
.LBB75_15:                              # %if.end30
	jmp	.LBB75_16
.LBB75_16:                              # %if.end31
	jmp	.LBB75_17
.LBB75_17:                              # %if.end32
	movl	$0, -20(%rbp)
.LBB75_18:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$975219641, -24(%rbp)   # imm = 0x3A20ABB9
	jne	.LBB75_20
.LBB75_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_19
.Lfunc_end75:
	.size	is_short_term_reference.12, .Lfunc_end75-is_short_term_reference.12
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.13    # -- Begin function dpb_combine_field.13
	.p2align	4, 0x90
	.type	dpb_combine_field.13,@function
dpb_combine_field.13:                   # @dpb_combine_field.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$663248388, -32(%rbp)   # imm = 0x27885E04
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB76_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_1
.LBB76_4:                               # %for.end
	movl	$0, -4(%rbp)
.LBB76_5:                               # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB76_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB76_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB76_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_5
.LBB76_8:                               # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB76_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB76_11
.LBB76_10:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB76_11:                              # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB76_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB76_13:                              # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB76_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB76_15:                              # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB76_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB76_17:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB76_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB76_19:                              # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB76_20:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB76_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB76_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB76_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB76_24
.LBB76_23:                              # %cond.false217
                                        #   in Loop: Header=BB76_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB76_24:                              # %cond.end226
                                        #   in Loop: Header=BB76_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB76_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_20
.LBB76_26:                              # %for.end235
	movl	$0, -4(%rbp)
.LBB76_27:                              # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB76_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB76_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB76_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB76_31
.LBB76_30:                              # %cond.false269
                                        #   in Loop: Header=BB76_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB76_31:                              # %cond.end278
                                        #   in Loop: Header=BB76_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB76_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_27
.LBB76_33:                              # %for.end287
	movl	$0, -4(%rbp)
.LBB76_34:                              # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB76_34 Depth=1
	movl	$0, -20(%rbp)
.LBB76_36:                              # %for.cond295
                                        #   Parent Loop BB76_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB76_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB76_40
.LBB76_39:                              # %cond.false445
                                        #   in Loop: Header=BB76_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_40
.LBB76_40:                              # %cond.end446
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB76_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB76_43
.LBB76_42:                              # %cond.false462
                                        #   in Loop: Header=BB76_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_43
.LBB76_43:                              # %cond.end463
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB76_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB76_46
.LBB76_45:                              # %cond.false479
                                        #   in Loop: Header=BB76_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB76_46
.LBB76_46:                              # %cond.end480
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB76_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB76_49
.LBB76_48:                              # %cond.false501
                                        #   in Loop: Header=BB76_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB76_49
.LBB76_49:                              # %cond.end502
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB76_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB76_52
.LBB76_51:                              # %cond.false647
                                        #   in Loop: Header=BB76_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_52
.LBB76_52:                              # %cond.end648
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB76_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB76_55
.LBB76_54:                              # %cond.false665
                                        #   in Loop: Header=BB76_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_55
.LBB76_55:                              # %cond.end666
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB76_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB76_58
.LBB76_57:                              # %cond.false683
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB76_58
.LBB76_58:                              # %cond.end684
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB76_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB76_61
.LBB76_60:                              # %cond.false706
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB76_61
.LBB76_61:                              # %cond.end707
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_36
.LBB76_63:                              # %for.end723
                                        #   in Loop: Header=BB76_34 Depth=1
	jmp	.LBB76_64
.LBB76_64:                              # %for.inc724
                                        #   in Loop: Header=BB76_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_34
.LBB76_65:                              # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB76_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB76_76
.LBB76_67:                              # %if.then729
	movl	$0, -4(%rbp)
.LBB76_68:                              # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB76_68 Depth=1
	movl	$0, -20(%rbp)
.LBB76_70:                              # %for.cond737
                                        #   Parent Loop BB76_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB76_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB76_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_70
.LBB76_73:                              # %for.end758
                                        #   in Loop: Header=BB76_68 Depth=1
	jmp	.LBB76_74
.LBB76_74:                              # %for.inc759
                                        #   in Loop: Header=BB76_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_68
.LBB76_75:                              # %for.end761
	jmp	.LBB76_76
.LBB76_76:                              # %if.end762
	cmpl	$663248388, -32(%rbp)   # imm = 0x27885E04
	jne	.LBB76_78
.LBB76_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_78:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_77
.Lfunc_end76:
	.size	dpb_combine_field.13, .Lfunc_end76-dpb_combine_field.13
	.cfi_endproc
                                        # -- End function
	.globl	init_mbaff_lists.14     # -- Begin function init_mbaff_lists.14
	.p2align	4, 0x90
	.type	init_mbaff_lists.14,@function
init_mbaff_lists.14:                    # @init_mbaff_lists.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$384057961, -12(%rbp)   # imm = 0x16E44269
	movl	$2, -4(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
	cmpl	$6, -4(%rbp)
	jge	.LBB77_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_3:                               # %for.cond1
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -8(%rbp)
	jae	.LBB77_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB77_3 Depth=2
	movslq	-4(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movl	-8(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_3
.LBB77_6:                               # %for.end
                                        #   in Loop: Header=BB77_1 Depth=1
	movslq	-4(%rbp), %rax
	movl	$0, listXsize(,%rax,4)
# %bb.7:                                # %for.inc8
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_1
.LBB77_8:                               # %for.end10
	movl	$0, -4(%rbp)
.LBB77_9:                               # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB77_12
# %bb.10:                               # %for.body13
                                        #   in Loop: Header=BB77_9 Depth=1
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.11:                               # %for.inc36
                                        #   in Loop: Header=BB77_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_9
.LBB77_12:                              # %for.end38
	movl	listXsize, %eax
	shll	$1, %eax
	movl	%eax, listXsize+16
	movl	%eax, listXsize+8
	movl	$0, -4(%rbp)
.LBB77_13:                              # %for.cond40
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB77_16
# %bb.14:                               # %for.body42
                                        #   in Loop: Header=BB77_13 Depth=1
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB77_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_13
.LBB77_16:                              # %for.end71
	movl	listXsize+4, %eax
	shll	$1, %eax
	movl	%eax, listXsize+20
	movl	%eax, listXsize+12
	cmpl	$384057961, -12(%rbp)   # imm = 0x16E44269
	jne	.LBB77_18
.LBB77_17:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_17
.Lfunc_end77:
	.size	init_mbaff_lists.14, .Lfunc_end77-init_mbaff_lists.14
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.15
	.type	unmark_long_term_field_for_reference_by_frame_idx.15,@function
unmark_long_term_field_for_reference_by_frame_idx.15: # @unmark_long_term_field_for_reference_by_frame_idx.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1136718683, -28(%rbp)  # imm = 0x43C0F35B
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB78_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB78_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB78_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB78_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpl	$1, -16(%rbp)
	jne	.LBB78_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB78_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB78_23
.LBB78_8:                               # %if.else
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB78_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB78_22
.LBB78_10:                              # %if.else21
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB78_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB78_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB78_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB78_15
.LBB78_14:                              # %if.then29
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_15:                              # %if.end32
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_17
.LBB78_16:                              # %if.else33
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_17:                              # %if.end36
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_21
.LBB78_18:                              # %if.else37
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB78_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_20:                              # %if.end45
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_21
.LBB78_21:                              # %if.end46
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_22
.LBB78_22:                              # %if.end47
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_23
.LBB78_23:                              # %if.end48
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_24
.LBB78_24:                              # %if.end49
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpl	$2, -16(%rbp)
	jne	.LBB78_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB78_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB78_42
.LBB78_27:                              # %if.else59
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB78_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB78_41
.LBB78_29:                              # %if.else67
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB78_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB78_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB78_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB78_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB78_34
.LBB78_33:                              # %if.then78
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_34:                              # %if.end81
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_36
.LBB78_35:                              # %if.else82
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_36:                              # %if.end85
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_40
.LBB78_37:                              # %if.else86
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB78_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB78_39:                              # %if.end95
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_40
.LBB78_40:                              # %if.end96
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_41
.LBB78_41:                              # %if.end97
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_42
.LBB78_42:                              # %if.end98
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_43
.LBB78_43:                              # %if.end99
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_44
.LBB78_44:                              # %if.end100
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_45
.LBB78_45:                              # %for.inc
                                        #   in Loop: Header=BB78_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_3
.LBB78_46:                              # %for.end
	cmpl	$1136718683, -28(%rbp)  # imm = 0x43C0F35B
	jne	.LBB78_48
.LBB78_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_47
.Lfunc_end78:
	.size	unmark_long_term_field_for_reference_by_frame_idx.15, .Lfunc_end78-unmark_long_term_field_for_reference_by_frame_idx.15
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx.16 # -- Begin function mm_update_max_long_term_frame_idx.16
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx.16,@function
mm_update_max_long_term_frame_idx.16:   # @mm_update_max_long_term_frame_idx.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$542555833, -12(%rbp)   # imm = 0x2056BEB9
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, dpb+44
	movl	$0, -4(%rbp)
.LBB79_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB79_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	dpb+44, %eax
	jle	.LBB79_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB79_4:                               # %if.end
                                        #   in Loop: Header=BB79_1 Depth=1
	jmp	.LBB79_5
.LBB79_5:                               # %for.inc
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_1
.LBB79_6:                               # %for.end
	cmpl	$542555833, -12(%rbp)   # imm = 0x2056BEB9
	jne	.LBB79_8
.LBB79_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_7
.Lfunc_end79:
	.size	mm_update_max_long_term_frame_idx.16, .Lfunc_end79-mm_update_max_long_term_frame_idx.16
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.17
	.type	get_smallest_poc.17,@function
get_smallest_poc.17:                    # @get_smallest_poc.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$694071582, -20(%rbp)   # imm = 0x295EB11E
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB80_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB80_2:                               # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB80_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB80_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB80_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB80_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB80_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB80_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB80_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB80_7:                               # %if.end10
                                        #   in Loop: Header=BB80_3 Depth=1
	jmp	.LBB80_8
.LBB80_8:                               # %for.inc
                                        #   in Loop: Header=BB80_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_3
.LBB80_9:                               # %for.end
	cmpl	$694071582, -20(%rbp)   # imm = 0x295EB11E
	jne	.LBB80_11
.LBB80_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_10
.Lfunc_end80:
	.size	get_smallest_poc.17, .Lfunc_end80-get_smallest_poc.17
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.18
	.type	compare_fs_by_frame_num_desc.18,@function
compare_fs_by_frame_num_desc.18:        # @compare_fs_by_frame_num_desc.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1061625029, -16(%rbp)  # imm = 0x3F471CC5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB81_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB81_5
.LBB81_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB81_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB81_5
.LBB81_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB81_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1061625029, -16(%rbp)  # imm = 0x3F471CC5
	jne	.LBB81_7
.LBB81_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_6
.Lfunc_end81:
	.size	compare_fs_by_frame_num_desc.18, .Lfunc_end81-compare_fs_by_frame_num_desc.18
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.19
	.type	compare_fs_by_lt_pic_idx_asc.19,@function
compare_fs_by_lt_pic_idx_asc.19:        # @compare_fs_by_lt_pic_idx_asc.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2097199546, -16(%rbp)  # imm = 0x7D00B9BA
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB82_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB82_5
.LBB82_2:                               # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB82_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB82_5
.LBB82_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB82_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$2097199546, -16(%rbp)  # imm = 0x7D00B9BA
	jne	.LBB82_7
.LBB82_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_6
.Lfunc_end82:
	.size	compare_fs_by_lt_pic_idx_asc.19, .Lfunc_end82-compare_fs_by_lt_pic_idx_asc.19
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.20 # -- Begin function alloc_storable_picture.20
	.p2align	4, 0x90
	.type	alloc_storable_picture.20,@function
alloc_storable_picture.20:              # @alloc_storable_picture.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1363085672, -40(%rbp)  # imm = 0x513F0968
	movl	%edi, -36(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB83_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB83_2:                               # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB83_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB83_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB83_6
.LBB83_5:                               # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB83_6:                               # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB83_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB83_8:                               # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB83_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB83_10:                              # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1363085672, -40(%rbp)  # imm = 0x513F0968
	jne	.LBB83_12
.LBB83_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_11
.Lfunc_end83:
	.size	alloc_storable_picture.20, .Lfunc_end83-alloc_storable_picture.20
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.21
	.type	get_long_term_pic.21,@function
get_long_term_pic.21:                   # @get_long_term_pic.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$67635991, -28(%rbp)    # imm = 0x4080B17
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB84_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB84_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB84_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB84_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB84_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB84_23
.LBB84_7:                               # %if.end
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_8
.LBB84_8:                               # %if.end14
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_20
.LBB84_9:                               # %if.else
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB84_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB84_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB84_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB84_23
.LBB84_13:                              # %if.end34
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_14
.LBB84_14:                              # %if.end35
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB84_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB84_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB84_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB84_23
.LBB84_18:                              # %if.end56
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_19
.LBB84_19:                              # %if.end57
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_20
.LBB84_20:                              # %if.end58
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_21
.LBB84_21:                              # %for.inc
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_1
.LBB84_22:                              # %for.end
	movq	$0, -24(%rbp)
.LBB84_23:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$67635991, -28(%rbp)    # imm = 0x4080B17
	jne	.LBB84_25
.LBB84_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_25:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_24
.Lfunc_end84:
	.size	get_long_term_pic.21, .Lfunc_end84-get_long_term_pic.21
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.22      # -- Begin function alloc_colocated.22
	.p2align	4, 0x90
	.type	alloc_colocated.22,@function
alloc_colocated.22:                     # @alloc_colocated.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$571543738, -32(%rbp)   # imm = 0x221110BA
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB85_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB85_2:                               # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB85_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB85_4:                               # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$571543738, -32(%rbp)   # imm = 0x221110BA
	jne	.LBB85_6
.LBB85_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_5
.Lfunc_end85:
	.size	alloc_colocated.22, .Lfunc_end85-alloc_colocated.22
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.23
	.type	gen_pic_list_from_frame_list.23,@function
gen_pic_list_from_frame_list.23:        # @gen_pic_list_from_frame_list.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1869635553, -64(%rbp)  # imm = 0x6F705FE1
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB86_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB86_3
.LBB86_2:                               # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB86_3:                               # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB86_28
# %bb.4:                                # %if.then1
	jmp	.LBB86_5
.LBB86_5:                               # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_9 Depth 2
                                        #     Child Loop BB86_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB86_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB86_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB86_7:                               # %lor.end
                                        #   in Loop: Header=BB86_5 Depth=1
	testb	$1, %al
	jne	.LBB86_8
	jmp	.LBB86_27
.LBB86_8:                               # %while.body
                                        #   in Loop: Header=BB86_5 Depth=1
	jmp	.LBB86_9
.LBB86_9:                               # %for.cond
                                        #   Parent Loop BB86_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB86_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB86_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB86_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB86_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB86_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB86_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_17
.LBB86_13:                              # %if.end17
                                        #   in Loop: Header=BB86_9 Depth=2
	jmp	.LBB86_14
.LBB86_14:                              # %if.end18
                                        #   in Loop: Header=BB86_9 Depth=2
	jmp	.LBB86_15
.LBB86_15:                              # %for.inc
                                        #   in Loop: Header=BB86_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_9
.LBB86_16:                              # %for.end.loopexit
                                        #   in Loop: Header=BB86_5 Depth=1
	jmp	.LBB86_17
.LBB86_17:                              # %for.end
                                        #   in Loop: Header=BB86_5 Depth=1
	jmp	.LBB86_18
.LBB86_18:                              # %for.cond20
                                        #   Parent Loop BB86_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB86_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB86_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB86_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB86_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB86_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB86_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_26
.LBB86_22:                              # %if.end41
                                        #   in Loop: Header=BB86_18 Depth=2
	jmp	.LBB86_23
.LBB86_23:                              # %if.end42
                                        #   in Loop: Header=BB86_18 Depth=2
	jmp	.LBB86_24
.LBB86_24:                              # %for.inc43
                                        #   in Loop: Header=BB86_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_18
.LBB86_25:                              # %for.end45.loopexit
                                        #   in Loop: Header=BB86_5 Depth=1
	jmp	.LBB86_26
.LBB86_26:                              # %for.end45
                                        #   in Loop: Header=BB86_5 Depth=1
	jmp	.LBB86_5
.LBB86_27:                              # %while.end
	jmp	.LBB86_28
.LBB86_28:                              # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB86_53
# %bb.29:                               # %if.then48
	jmp	.LBB86_30
.LBB86_30:                              # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_34 Depth 2
                                        #     Child Loop BB86_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB86_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB86_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB86_32:                              # %lor.end53
                                        #   in Loop: Header=BB86_30 Depth=1
	testb	$1, %al
	jne	.LBB86_33
	jmp	.LBB86_52
.LBB86_33:                              # %while.body54
                                        #   in Loop: Header=BB86_30 Depth=1
	jmp	.LBB86_34
.LBB86_34:                              # %for.cond55
                                        #   Parent Loop BB86_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB86_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB86_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB86_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB86_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB86_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB86_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_42
.LBB86_38:                              # %if.end77
                                        #   in Loop: Header=BB86_34 Depth=2
	jmp	.LBB86_39
.LBB86_39:                              # %if.end78
                                        #   in Loop: Header=BB86_34 Depth=2
	jmp	.LBB86_40
.LBB86_40:                              # %for.inc79
                                        #   in Loop: Header=BB86_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_34
.LBB86_41:                              # %for.end81.loopexit
                                        #   in Loop: Header=BB86_30 Depth=1
	jmp	.LBB86_42
.LBB86_42:                              # %for.end81
                                        #   in Loop: Header=BB86_30 Depth=1
	jmp	.LBB86_43
.LBB86_43:                              # %for.cond82
                                        #   Parent Loop BB86_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB86_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB86_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB86_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB86_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB86_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB86_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_51
.LBB86_47:                              # %if.end104
                                        #   in Loop: Header=BB86_43 Depth=2
	jmp	.LBB86_48
.LBB86_48:                              # %if.end105
                                        #   in Loop: Header=BB86_43 Depth=2
	jmp	.LBB86_49
.LBB86_49:                              # %for.inc106
                                        #   in Loop: Header=BB86_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_43
.LBB86_50:                              # %for.end108.loopexit
                                        #   in Loop: Header=BB86_30 Depth=1
	jmp	.LBB86_51
.LBB86_51:                              # %for.end108
                                        #   in Loop: Header=BB86_30 Depth=1
	jmp	.LBB86_30
.LBB86_52:                              # %while.end109
	jmp	.LBB86_53
.LBB86_53:                              # %if.end110
	cmpl	$1869635553, -64(%rbp)  # imm = 0x6F705FE1
	jne	.LBB86_55
.LBB86_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_55:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_54
.Lfunc_end86:
	.size	gen_pic_list_from_frame_list.23, .Lfunc_end86-gen_pic_list_from_frame_list.23
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.24
	.type	get_pic_num_x.24,@function
get_pic_num_x.24:                       # @get_pic_num_x.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1794864091, -28(%rbp)  # imm = 0x6AFB73DB
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB87_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_3
.LBB87_2:                               # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB87_3:                               # %if.end
	movl	-12(%rbp), %ebx
	movl	-32(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1794864091, -28(%rbp)  # imm = 0x6AFB73DB
	jne	.LBB87_5
.LBB87_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_4
.Lfunc_end87:
	.size	get_pic_num_x.24, .Lfunc_end87-get_pic_num_x.24
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.25 # -- Begin function reorder_ref_pic_list.25
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.25,@function
reorder_ref_pic_list.25:                # @reorder_ref_pic_list.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1860414880, -60(%rbp)  # imm = 0x6EE3ADA0
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB88_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_3
.LBB88_2:                               # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB88_3:                               # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB88_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB88_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB88_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB88_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB88_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB88_7:                               # %if.end9
                                        #   in Loop: Header=BB88_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB88_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB88_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB88_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB88_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB88_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB88_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_12
.LBB88_11:                              # %if.else28
                                        #   in Loop: Header=BB88_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB88_12:                              # %if.end33
                                        #   in Loop: Header=BB88_4 Depth=1
	jmp	.LBB88_17
.LBB88_13:                              # %if.else34
                                        #   in Loop: Header=BB88_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB88_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB88_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_16
.LBB88_15:                              # %if.else46
                                        #   in Loop: Header=BB88_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB88_16:                              # %if.end51
                                        #   in Loop: Header=BB88_4 Depth=1
	jmp	.LBB88_17
.LBB88_17:                              # %if.end52
                                        #   in Loop: Header=BB88_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB88_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB88_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB88_20
.LBB88_19:                              # %if.else56
                                        #   in Loop: Header=BB88_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB88_20:                              # %if.end57
                                        #   in Loop: Header=BB88_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB88_22
.LBB88_21:                              # %if.else58
                                        #   in Loop: Header=BB88_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB88_22:                              # %if.end61
                                        #   in Loop: Header=BB88_4 Depth=1
	jmp	.LBB88_23
.LBB88_23:                              # %for.inc
                                        #   in Loop: Header=BB88_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_4
.LBB88_24:                              # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1860414880, -60(%rbp)  # imm = 0x6EE3ADA0
	jne	.LBB88_26
.LBB88_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_26:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_25
.Lfunc_end88:
	.size	reorder_ref_pic_list.25, .Lfunc_end88-reorder_ref_pic_list.25
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.26
	.type	compare_pic_by_poc_asc.26,@function
compare_pic_by_poc_asc.26:              # @compare_pic_by_poc_asc.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2001667133, -16(%rbp)  # imm = 0x774F043D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB89_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB89_5
.LBB89_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB89_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB89_5
.LBB89_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB89_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$2001667133, -16(%rbp)  # imm = 0x774F043D
	jne	.LBB89_7
.LBB89_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_6
.Lfunc_end89:
	.size	compare_pic_by_poc_asc.26, .Lfunc_end89-compare_pic_by_poc_asc.26
	.cfi_endproc
                                        # -- End function
	.globl	init_dpb.27             # -- Begin function init_dpb.27
	.p2align	4, 0x90
	.type	init_dpb.27,@function
init_dpb.27:                            # @init_dpb.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1825021205, -12(%rbp)  # imm = 0x6CC79D15
	cmpl	$0, dpb+48
	je	.LBB90_2
# %bb.1:                                # %if.then
	callq	free_dpb
.LBB90_2:                               # %if.end
	callq	getDpbSize
	movl	%eax, dpb+24
	movl	dpb+24, %eax
	movq	input, %rcx
	cmpl	36(%rcx), %eax
	jae	.LBB90_4
# %bb.3:                                # %if.then1
	movabsq	$.L.str.1, %rdi
	movl	$1000, %esi             # imm = 0x3E8
	callq	error
.LBB90_4:                               # %if.end2
	movl	$0, dpb+28
	movq	$0, dpb+56
	movl	$0, dpb+32
	movl	$0, dpb+36
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb
	cmpq	dpb, %rcx
	jne	.LBB90_6
# %bb.5:                                # %if.then6
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB90_6:                               # %if.end7
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+8
	cmpq	dpb+8, %rcx
	jne	.LBB90_8
# %bb.7:                                # %if.then12
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB90_8:                               # %if.end13
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+16
	cmpq	dpb+16, %rcx
	jne	.LBB90_10
# %bb.9:                                # %if.then18
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB90_10:                              # %if.end19
	movl	$0, -4(%rbp)
.LBB90_11:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB90_14
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB90_11 Depth=1
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB90_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_11
.LBB90_14:                              # %for.end
	movl	$0, -4(%rbp)
.LBB90_15:                              # %for.cond27
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB90_20
# %bb.16:                               # %for.body30
                                        #   in Loop: Header=BB90_15 Depth=1
	movl	$33, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movl	-4(%rbp), %edx
	movq	%rax, listX(,%rdx,8)
	movl	-4(%rbp), %eax
	cmpq	listX(,%rax,8), %rcx
	jne	.LBB90_18
# %bb.17:                               # %if.then38
                                        #   in Loop: Header=BB90_15 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB90_18:                              # %if.end39
                                        #   in Loop: Header=BB90_15 Depth=1
	jmp	.LBB90_19
.LBB90_19:                              # %for.inc40
                                        #   in Loop: Header=BB90_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_15
.LBB90_20:                              # %for.end42
	movl	$0, -8(%rbp)
.LBB90_21:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_23 Depth 2
	cmpl	$6, -8(%rbp)
	jae	.LBB90_28
# %bb.22:                               # %for.body46
                                        #   in Loop: Header=BB90_21 Depth=1
	movl	$0, -4(%rbp)
.LBB90_23:                              # %for.cond47
                                        #   Parent Loop BB90_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -4(%rbp)
	jae	.LBB90_26
# %bb.24:                               # %for.body50
                                        #   in Loop: Header=BB90_23 Depth=2
	movl	-8(%rbp), %eax
	movq	listX(,%rax,8), %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.25:                               # %for.inc55
                                        #   in Loop: Header=BB90_23 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_23
.LBB90_26:                              # %for.end57
                                        #   in Loop: Header=BB90_21 Depth=1
	movl	-8(%rbp), %eax
	movl	$0, listXsize(,%rax,4)
# %bb.27:                               # %for.inc60
                                        #   in Loop: Header=BB90_21 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_21
.LBB90_28:                              # %for.end62
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	movl	$0, 72644(%rax)
	movl	$1, dpb+48
	cmpl	$1825021205, -12(%rbp)  # imm = 0x6CC79D15
	jne	.LBB90_30
.LBB90_29:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_29
.Lfunc_end90:
	.size	init_dpb.27, .Lfunc_end90-init_dpb.27
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.28
	.type	compare_pic_by_poc_asc.28,@function
compare_pic_by_poc_asc.28:              # @compare_pic_by_poc_asc.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2060474218, -16(%rbp)  # imm = 0x7AD0576A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB91_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB91_5
.LBB91_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB91_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB91_5
.LBB91_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB91_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$2060474218, -16(%rbp)  # imm = 0x7AD0576A
	jne	.LBB91_7
.LBB91_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_6
.Lfunc_end91:
	.size	compare_pic_by_poc_asc.28, .Lfunc_end91-compare_pic_by_poc_asc.28
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx.29
	.type	unmark_long_term_frame_for_reference_by_frame_idx.29,@function
unmark_long_term_frame_for_reference_by_frame_idx.29: # @unmark_long_term_frame_for_reference_by_frame_idx.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$62898730, -8(%rbp)     # imm = 0x3BFC22A
	movl	%edi, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB92_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB92_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB92_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB92_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB92_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB92_4:                               # %if.end
                                        #   in Loop: Header=BB92_1 Depth=1
	jmp	.LBB92_5
.LBB92_5:                               # %for.inc
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_1
.LBB92_6:                               # %for.end
	cmpl	$62898730, -8(%rbp)     # imm = 0x3BFC22A
	jne	.LBB92_8
.LBB92_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_7
.Lfunc_end92:
	.size	unmark_long_term_frame_for_reference_by_frame_idx.29, .Lfunc_end92-unmark_long_term_frame_for_reference_by_frame_idx.29
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.30 # -- Begin function alloc_storable_picture.30
	.p2align	4, 0x90
	.type	alloc_storable_picture.30,@function
alloc_storable_picture.30:              # @alloc_storable_picture.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1823782871, -40(%rbp)  # imm = 0x6CB4B7D7
	movl	%edi, -36(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB93_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB93_2:                               # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB93_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB93_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB93_6
.LBB93_5:                               # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB93_6:                               # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB93_8:                               # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB93_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB93_10:                              # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1823782871, -40(%rbp)  # imm = 0x6CB4B7D7
	jne	.LBB93_12
.LBB93_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_11
.Lfunc_end93:
	.size	alloc_storable_picture.30, .Lfunc_end93-alloc_storable_picture.30
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_used_for_reference.31
	.type	is_used_for_reference.31,@function
is_used_for_reference.31:               # @is_used_for_reference.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$436966684, -28(%rbp)   # imm = 0x1A0B951C
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	je	.LBB94_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB94_17
.LBB94_2:                               # %if.end
	movq	-24(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB94_6
# %bb.3:                                # %if.then1
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB94_5
# %bb.4:                                # %if.then3
	movl	$1, -12(%rbp)
	jmp	.LBB94_17
.LBB94_5:                               # %if.end4
	jmp	.LBB94_6
.LBB94_6:                               # %if.end5
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB94_16
# %bb.7:                                # %if.then7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB94_11
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB94_10
# %bb.9:                                # %if.then13
	movl	$1, -12(%rbp)
	jmp	.LBB94_17
.LBB94_10:                              # %if.end14
	jmp	.LBB94_11
.LBB94_11:                              # %if.end15
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB94_15
# %bb.12:                               # %if.then19
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB94_14
# %bb.13:                               # %if.then22
	movl	$1, -12(%rbp)
	jmp	.LBB94_17
.LBB94_14:                              # %if.end23
	jmp	.LBB94_15
.LBB94_15:                              # %if.end24
	jmp	.LBB94_16
.LBB94_16:                              # %if.end25
	movl	$0, -12(%rbp)
.LBB94_17:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$436966684, -28(%rbp)   # imm = 0x1A0B951C
	jne	.LBB94_19
.LBB94_18:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_19:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_18
.Lfunc_end94:
	.size	is_used_for_reference.31, .Lfunc_end94-is_used_for_reference.31
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.32
	.type	compare_fs_by_lt_pic_idx_asc.32,@function
compare_fs_by_lt_pic_idx_asc.32:        # @compare_fs_by_lt_pic_idx_asc.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1762521348, -16(%rbp)  # imm = 0x690DF104
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB95_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB95_5
.LBB95_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB95_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB95_5
.LBB95_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB95_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1762521348, -16(%rbp)  # imm = 0x690DF104
	jne	.LBB95_7
.LBB95_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_6
.Lfunc_end95:
	.size	compare_fs_by_lt_pic_idx_asc.32, .Lfunc_end95-compare_fs_by_lt_pic_idx_asc.32
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.33 # -- Begin function store_picture_in_dpb.33
	.p2align	4, 0x90
	.type	store_picture_in_dpb.33,@function
store_picture_in_dpb.33:                # @store_picture_in_dpb.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1744673343, -16(%rbp)  # imm = 0x67FD9A3F
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB96_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB96_6
.LBB96_2:                               # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB96_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB96_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB96_5:                               # %if.end
	jmp	.LBB96_6
.LBB96_6:                               # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB96_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB96_23
.LBB96_8:                               # %if.then14
	cmpq	$0, dpb+56
	je	.LBB96_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB96_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB96_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB96_14
.LBB96_12:                              # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB96_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB96_20
.LBB96_14:                              # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB96_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB96_18
.LBB96_16:                              # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB96_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB96_19
.LBB96_18:                              # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB96_50
.LBB96_19:                              # %if.end48
	jmp	.LBB96_20
.LBB96_20:                              # %if.end49
	jmp	.LBB96_21
.LBB96_21:                              # %if.end50
	jmp	.LBB96_22
.LBB96_22:                              # %if.end51
	jmp	.LBB96_23
.LBB96_23:                              # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB96_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB96_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB96_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB96_27:                              # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB96_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB96_29:                              # %if.end67
	jmp	.LBB96_30
.LBB96_30:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB96_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB96_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB96_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB96_30 Depth=1
	leaq	-24(%rbp), %rdi
	leaq	-20(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-20(%rbp), %eax
	je	.LBB96_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB96_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB96_35
.LBB96_34:                              # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB96_50
.LBB96_35:                              # %if.end80
                                        #   in Loop: Header=BB96_30 Depth=1
	jmp	.LBB96_36
.LBB96_36:                              # %if.end81
                                        #   in Loop: Header=BB96_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB96_30
.LBB96_37:                              # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB96_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB96_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB96_40:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB96_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB96_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB96_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB96_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB96_43:                              # %if.end94
                                        #   in Loop: Header=BB96_40 Depth=1
	jmp	.LBB96_44
.LBB96_44:                              # %for.inc
                                        #   in Loop: Header=BB96_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_40
.LBB96_45:                              # %for.end
	jmp	.LBB96_46
.LBB96_46:                              # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB96_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB96_49
.LBB96_48:                              # %if.else104
	movq	$0, dpb+56
.LBB96_49:                              # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB96_50:                              # %return
	cmpl	$1744673343, -16(%rbp)  # imm = 0x67FD9A3F
	jne	.LBB96_52
.LBB96_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_51
.Lfunc_end96:
	.size	store_picture_in_dpb.33, .Lfunc_end96-store_picture_in_dpb.33
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize.34           # -- Begin function getDpbSize.34
	.p2align	4, 0x90
	.type	getDpbSize.34,@function
getDpbSize.34:                          # @getDpbSize.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1410425593, -16(%rbp)  # imm = 0x541162F9
	movq	active_sps(%rip), %rax
	movl	1140(%rax), %ecx
	movl	1144(%rax), %edx
	addl	$1, %ecx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	1148(%rax), %eax
	cmpl	$1, %eax
	movl	$2, %eax
	adcl	$-1, %eax
	imull	%eax, %ecx
	shll	$7, %ecx
	leal	(%rcx,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -12(%rbp)
	movq	active_sps(%rip), %rax
	movl	24(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$41, %ecx
	ja	.LBB97_17
# %bb.1:                                # %entry
	movq	.LJTI97_0(,%rax,8), %rax
	jmpq	*%rax
.LBB97_2:                               # %sw.bb
	movl	$152064, -12(%rbp)      # imm = 0x25200
	jmp	.LBB97_18
.LBB97_3:                               # %sw.bb4
	movl	$345600, -12(%rbp)      # imm = 0x54600
	jmp	.LBB97_18
.LBB97_4:                               # %sw.bb5
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB97_18
.LBB97_5:                               # %sw.bb6
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB97_18
.LBB97_6:                               # %sw.bb7
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB97_18
.LBB97_7:                               # %sw.bb8
	movl	$1824768, -12(%rbp)     # imm = 0x1BD800
	jmp	.LBB97_18
.LBB97_8:                               # %sw.bb9
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB97_18
.LBB97_9:                               # %sw.bb10
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB97_18
.LBB97_10:                              # %sw.bb11
	movl	$6912000, -12(%rbp)     # imm = 0x697800
	jmp	.LBB97_18
.LBB97_11:                              # %sw.bb12
	movl	$7864320, -12(%rbp)     # imm = 0x780000
	jmp	.LBB97_18
.LBB97_12:                              # %sw.bb13
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB97_18
.LBB97_13:                              # %sw.bb14
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB97_18
.LBB97_14:                              # %sw.bb15
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB97_18
.LBB97_15:                              # %sw.bb16
	movl	$42393600, -12(%rbp)    # imm = 0x286E000
	jmp	.LBB97_18
.LBB97_16:                              # %sw.bb17
	movl	$70778880, -12(%rbp)    # imm = 0x4380000
	jmp	.LBB97_18
.LBB97_17:                              # %sw.default
	movabsq	$.L.str, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB97_18:                              # %sw.epilog
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	cmpl	$16, -12(%rbp)
	jge	.LBB97_20
# %bb.19:                               # %cond.true
	movl	-12(%rbp), %ebx
	jmp	.LBB97_21
.LBB97_20:                              # %cond.false
	movl	$16, %ebx
	jmp	.LBB97_21
.LBB97_21:                              # %cond.end
	cmpl	$1410425593, -16(%rbp)  # imm = 0x541162F9
	jne	.LBB97_23
.LBB97_22:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_22
.Lfunc_end97:
	.size	getDpbSize.34, .Lfunc_end97-getDpbSize.34
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI97_0:
	.quad	.LBB97_2
	.quad	.LBB97_3
	.quad	.LBB97_4
	.quad	.LBB97_5
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_6
	.quad	.LBB97_7
	.quad	.LBB97_8
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_9
	.quad	.LBB97_10
	.quad	.LBB97_11
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_12
	.quad	.LBB97_13
	.quad	.LBB97_14
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_17
	.quad	.LBB97_15
	.quad	.LBB97_16
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function is_short_term_reference.35
	.type	is_short_term_reference.35,@function
is_short_term_reference.35:             # @is_short_term_reference.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$186520115, -24(%rbp)   # imm = 0xB1E1233
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB98_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB98_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB98_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB98_18
.LBB98_4:                               # %if.end
	jmp	.LBB98_5
.LBB98_5:                               # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB98_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB98_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB98_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB98_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB98_18
.LBB98_10:                              # %if.end17
	jmp	.LBB98_11
.LBB98_11:                              # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB98_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB98_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB98_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB98_18
.LBB98_15:                              # %if.end30
	jmp	.LBB98_16
.LBB98_16:                              # %if.end31
	jmp	.LBB98_17
.LBB98_17:                              # %if.end32
	movl	$0, -20(%rbp)
.LBB98_18:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$186520115, -24(%rbp)   # imm = 0xB1E1233
	jne	.LBB98_20
.LBB98_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_19
.Lfunc_end98:
	.size	is_short_term_reference.35, .Lfunc_end98-is_short_term_reference.35
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.36
	.type	mark_pic_long_term.36,@function
mark_pic_long_term.36:                  # @mark_pic_long_term.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$340932373, -24(%rbp)   # imm = 0x14523715
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB99_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB99_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB99_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB99_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB99_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB99_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB99_39
.LBB99_7:                               # %if.end
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_8
.LBB99_8:                               # %if.end50
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_9
.LBB99_9:                               # %for.inc
                                        #   in Loop: Header=BB99_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_2
.LBB99_10:                              # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB99_39
.LBB99_11:                              # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB99_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB99_14
.LBB99_13:                              # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -20(%rbp)
.LBB99_14:                              # %if.end55
	movl	$0, -4(%rbp)
.LBB99_15:                              # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB99_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB99_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB99_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB99_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB99_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB99_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB99_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB99_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB99_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB99_22:                              # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB99_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB99_24:                              # %if.end123
	jmp	.LBB99_39
.LBB99_25:                              # %if.end124
                                        #   in Loop: Header=BB99_15 Depth=1
	jmp	.LBB99_26
.LBB99_26:                              # %if.end125
                                        #   in Loop: Header=BB99_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB99_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB99_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB99_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB99_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB99_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB99_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB99_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB99_32:                              # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB99_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB99_34:                              # %if.end194
	jmp	.LBB99_39
.LBB99_35:                              # %if.end195
                                        #   in Loop: Header=BB99_15 Depth=1
	jmp	.LBB99_36
.LBB99_36:                              # %if.end196
                                        #   in Loop: Header=BB99_15 Depth=1
	jmp	.LBB99_37
.LBB99_37:                              # %for.inc197
                                        #   in Loop: Header=BB99_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_15
.LBB99_38:                              # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB99_39:                              # %if.end201
	cmpl	$340932373, -24(%rbp)   # imm = 0x14523715
	jne	.LBB99_41
.LBB99_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_40
.Lfunc_end99:
	.size	mark_pic_long_term.36, .Lfunc_end99-mark_pic_long_term.36
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list.37      # -- Begin function update_ref_list.37
	.p2align	4, 0x90
	.type	update_ref_list.37,@function
update_ref_list.37:                     # @update_ref_list.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2006046501, -12(%rbp)  # imm = 0x7791D725
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB100_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_short_term_reference
	cmpl	$0, %eax
	je	.LBB100_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB100_4:                              # %if.end
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_5
.LBB100_5:                              # %for.inc
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_1
.LBB100_6:                              # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+32
.LBB100_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB100_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB100_7 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB100_7
.LBB100_9:                              # %while.end
	cmpl	$2006046501, -12(%rbp)  # imm = 0x7791D725
	jne	.LBB100_11
.LBB100_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_10
.Lfunc_end100:
	.size	update_ref_list.37, .Lfunc_end100-update_ref_list.37
	.cfi_endproc
                                        # -- End function
	.globl	init_mbaff_lists.38     # -- Begin function init_mbaff_lists.38
	.p2align	4, 0x90
	.type	init_mbaff_lists.38,@function
init_mbaff_lists.38:                    # @init_mbaff_lists.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1670963245, -12(%rbp)  # imm = 0x6398E02D
	movl	$2, -4(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_3 Depth 2
	cmpl	$6, -4(%rbp)
	jge	.LBB101_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	$0, -8(%rbp)
.LBB101_3:                              # %for.cond1
                                        #   Parent Loop BB101_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -8(%rbp)
	jae	.LBB101_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB101_3 Depth=2
	movslq	-4(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movl	-8(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_3
.LBB101_6:                              # %for.end
                                        #   in Loop: Header=BB101_1 Depth=1
	movslq	-4(%rbp), %rax
	movl	$0, listXsize(,%rax,4)
# %bb.7:                                # %for.inc8
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_1
.LBB101_8:                              # %for.end10
	movl	$0, -4(%rbp)
.LBB101_9:                              # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB101_12
# %bb.10:                               # %for.body13
                                        #   in Loop: Header=BB101_9 Depth=1
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.11:                               # %for.inc36
                                        #   in Loop: Header=BB101_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_9
.LBB101_12:                             # %for.end38
	movl	listXsize, %eax
	shll	$1, %eax
	movl	%eax, listXsize+16
	movl	%eax, listXsize+8
	movl	$0, -4(%rbp)
.LBB101_13:                             # %for.cond40
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB101_16
# %bb.14:                               # %for.body42
                                        #   in Loop: Header=BB101_13 Depth=1
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB101_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_13
.LBB101_16:                             # %for.end71
	movl	listXsize+4, %eax
	shll	$1, %eax
	movl	%eax, listXsize+20
	movl	%eax, listXsize+12
	cmpl	$1670963245, -12(%rbp)  # imm = 0x6398E02D
	jne	.LBB101_18
.LBB101_17:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_17
.Lfunc_end101:
	.size	init_mbaff_lists.38, .Lfunc_end101-init_mbaff_lists.38
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management.39
	.type	adaptive_memory_management.39,@function
adaptive_memory_management.39:          # @adaptive_memory_management.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1584045532, -20(%rbp)  # imm = 0x5E6A9DDC
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	$0, 72644(%rax)
.LBB102_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	img, %rax
	cmpq	$0, 72512(%rax)
	je	.LBB102_15
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB102_1 Depth=1
	movq	img(%rip), %rax
	movq	72512(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$6, %rcx
	ja	.LBB102_13
# %bb.3:                                # %while.body
                                        #   in Loop: Header=BB102_1 Depth=1
	movq	.LJTI102_0(,%rax,8), %rax
	jmpq	*%rax
.LBB102_4:                              # %sw.bb
                                        #   in Loop: Header=BB102_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB102_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB102_1 Depth=1
	movabsq	$.L.str.22, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB102_6:                              # %if.end
                                        #   in Loop: Header=BB102_1 Depth=1
	jmp	.LBB102_14
.LBB102_7:                              # %sw.bb2
                                        #   in Loop: Header=BB102_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	callq	mm_unmark_short_term_for_reference
	callq	update_ref_list
	jmp	.LBB102_14
.LBB102_8:                              # %sw.bb3
                                        #   in Loop: Header=BB102_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	callq	mm_unmark_long_term_for_reference
	callq	update_ltref_list
	jmp	.LBB102_14
.LBB102_9:                              # %sw.bb4
                                        #   in Loop: Header=BB102_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	movq	-8(%rbp), %rax
	movl	12(%rax), %edx
	callq	mm_assign_long_term_frame_idx
	callq	update_ref_list
	callq	update_ltref_list
	jmp	.LBB102_14
.LBB102_10:                             # %sw.bb6
                                        #   in Loop: Header=BB102_1 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %edi
	callq	mm_update_max_long_term_frame_idx
	callq	update_ltref_list
	jmp	.LBB102_14
.LBB102_11:                             # %sw.bb7
                                        #   in Loop: Header=BB102_1 Depth=1
	callq	mm_unmark_all_short_term_for_reference
	callq	mm_unmark_all_long_term_for_reference
	movq	img, %rax
	movl	$1, 72644(%rax)
	jmp	.LBB102_14
.LBB102_12:                             # %sw.bb9
                                        #   in Loop: Header=BB102_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	12(%rax), %esi
	callq	mm_mark_current_picture_long_term
	jmp	.LBB102_14
.LBB102_13:                             # %sw.default
                                        #   in Loop: Header=BB102_1 Depth=1
	movabsq	$.L.str.23, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB102_14:                             # %sw.epilog
                                        #   in Loop: Header=BB102_1 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	img, %rcx
	movq	%rax, 72512(%rcx)
	movq	-8(%rbp), %rdi
	callq	free
	jmp	.LBB102_1
.LBB102_15:                             # %while.end
	movq	img, %rax
	cmpl	$0, 72644(%rax)
	je	.LBB102_23
# %bb.16:                               # %if.then15
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 4(%rax)
	movq	img(%rip), %rax
	movl	$0, 72460(%rax)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB102_21
	jmp	.LBB102_17
.LBB102_17:                             # %if.then15
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB102_19
	jmp	.LBB102_18
.LBB102_18:                             # %if.then15
	subl	$2, %eax
	je	.LBB102_20
	jmp	.LBB102_22
.LBB102_19:                             # %sw.bb16
	movq	img, %rax
	movl	$0, 72448(%rax)
	jmp	.LBB102_22
.LBB102_20:                             # %sw.bb17
	movq	img, %rax
	movl	$0, 72452(%rax)
	jmp	.LBB102_22
.LBB102_21:                             # %sw.bb18
	movq	img, %rax
	movl	$0, 72456(%rax)
.LBB102_22:                             # %sw.epilog19
	callq	flush_dpb
.LBB102_23:                             # %if.end20
	cmpl	$1584045532, -20(%rbp)  # imm = 0x5E6A9DDC
	jne	.LBB102_25
.LBB102_24:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_24
.Lfunc_end102:
	.size	adaptive_memory_management.39, .Lfunc_end102-adaptive_memory_management.39
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI102_0:
	.quad	.LBB102_4
	.quad	.LBB102_7
	.quad	.LBB102_8
	.quad	.LBB102_9
	.quad	.LBB102_10
	.quad	.LBB102_11
	.quad	.LBB102_12
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.40
	.type	compare_fs_by_frame_num_desc.40,@function
compare_fs_by_frame_num_desc.40:        # @compare_fs_by_frame_num_desc.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$423254581, -16(%rbp)   # imm = 0x193A5A35
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB103_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB103_5
.LBB103_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB103_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB103_5
.LBB103_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB103_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$423254581, -16(%rbp)   # imm = 0x193A5A35
	jne	.LBB103_7
.LBB103_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_6
.Lfunc_end103:
	.size	compare_fs_by_frame_num_desc.40, .Lfunc_end103-compare_fs_by_frame_num_desc.40
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.41
	.type	get_short_term_pic.41,@function
get_short_term_pic.41:                  # @get_short_term_pic.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$280175296, -28(%rbp)   # imm = 0x10B322C0
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB104_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB104_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB104_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB104_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB104_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB104_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB104_23
.LBB104_7:                              # %if.end
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_8
.LBB104_8:                              # %if.end14
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_20
.LBB104_9:                              # %if.else
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB104_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB104_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB104_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB104_23
.LBB104_13:                             # %if.end34
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_14
.LBB104_14:                             # %if.end35
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB104_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB104_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB104_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB104_23
.LBB104_18:                             # %if.end56
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_19
.LBB104_19:                             # %if.end57
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_20
.LBB104_20:                             # %if.end58
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_21
.LBB104_21:                             # %for.inc
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_1
.LBB104_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB104_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$280175296, -28(%rbp)   # imm = 0x10B322C0
	jne	.LBB104_25
.LBB104_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_24
.Lfunc_end104:
	.size	get_short_term_pic.41, .Lfunc_end104-get_short_term_pic.41
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.42
	.type	get_pic_num_x.42,@function
get_pic_num_x.42:                       # @get_pic_num_x.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$614748009, -32(%rbp)   # imm = 0x24A44F69
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB105_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_3
.LBB105_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB105_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$614748009, -32(%rbp)   # imm = 0x24A44F69
	jne	.LBB105_5
.LBB105_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_4
.Lfunc_end105:
	.size	get_pic_num_x.42, .Lfunc_end105-get_pic_num_x.42
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.43
	.type	get_long_term_pic.43,@function
get_long_term_pic.43:                   # @get_long_term_pic.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1782239159, -28(%rbp)  # imm = 0x6A3ACFB7
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB106_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB106_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB106_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB106_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB106_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB106_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB106_23
.LBB106_7:                              # %if.end
                                        #   in Loop: Header=BB106_1 Depth=1
	jmp	.LBB106_8
.LBB106_8:                              # %if.end14
                                        #   in Loop: Header=BB106_1 Depth=1
	jmp	.LBB106_20
.LBB106_9:                              # %if.else
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB106_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB106_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB106_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB106_23
.LBB106_13:                             # %if.end34
                                        #   in Loop: Header=BB106_1 Depth=1
	jmp	.LBB106_14
.LBB106_14:                             # %if.end35
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB106_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB106_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB106_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB106_23
.LBB106_18:                             # %if.end56
                                        #   in Loop: Header=BB106_1 Depth=1
	jmp	.LBB106_19
.LBB106_19:                             # %if.end57
                                        #   in Loop: Header=BB106_1 Depth=1
	jmp	.LBB106_20
.LBB106_20:                             # %if.end58
                                        #   in Loop: Header=BB106_1 Depth=1
	jmp	.LBB106_21
.LBB106_21:                             # %for.inc
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_1
.LBB106_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB106_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1782239159, -28(%rbp)  # imm = 0x6A3ACFB7
	jne	.LBB106_25
.LBB106_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_24
.Lfunc_end106:
	.size	get_long_term_pic.43, .Lfunc_end106-get_long_term_pic.43
	.cfi_endproc
                                        # -- End function
	.globl	init_dpb.44             # -- Begin function init_dpb.44
	.p2align	4, 0x90
	.type	init_dpb.44,@function
init_dpb.44:                            # @init_dpb.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1045670429, -12(%rbp)  # imm = 0x3E53AA1D
	cmpl	$0, dpb+48
	je	.LBB107_2
# %bb.1:                                # %if.then
	callq	free_dpb
.LBB107_2:                              # %if.end
	callq	getDpbSize
	movl	%eax, dpb+24
	movl	dpb+24, %eax
	movq	input, %rcx
	cmpl	36(%rcx), %eax
	jae	.LBB107_4
# %bb.3:                                # %if.then1
	movabsq	$.L.str.1, %rdi
	movl	$1000, %esi             # imm = 0x3E8
	callq	error
.LBB107_4:                              # %if.end2
	movl	$0, dpb+28
	movq	$0, dpb+56
	movl	$0, dpb+32
	movl	$0, dpb+36
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb
	cmpq	dpb, %rcx
	jne	.LBB107_6
# %bb.5:                                # %if.then6
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB107_6:                              # %if.end7
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+8
	cmpq	dpb+8, %rcx
	jne	.LBB107_8
# %bb.7:                                # %if.then12
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB107_8:                              # %if.end13
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+16
	cmpq	dpb+16, %rcx
	jne	.LBB107_10
# %bb.9:                                # %if.then18
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB107_10:                             # %if.end19
	movl	$0, -4(%rbp)
.LBB107_11:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB107_14
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB107_11 Depth=1
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB107_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_11
.LBB107_14:                             # %for.end
	movl	$0, -4(%rbp)
.LBB107_15:                             # %for.cond27
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB107_20
# %bb.16:                               # %for.body30
                                        #   in Loop: Header=BB107_15 Depth=1
	movl	$33, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movl	-4(%rbp), %edx
	movq	%rax, listX(,%rdx,8)
	movl	-4(%rbp), %eax
	cmpq	listX(,%rax,8), %rcx
	jne	.LBB107_18
# %bb.17:                               # %if.then38
                                        #   in Loop: Header=BB107_15 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB107_18:                             # %if.end39
                                        #   in Loop: Header=BB107_15 Depth=1
	jmp	.LBB107_19
.LBB107_19:                             # %for.inc40
                                        #   in Loop: Header=BB107_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_15
.LBB107_20:                             # %for.end42
	movl	$0, -8(%rbp)
.LBB107_21:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_23 Depth 2
	cmpl	$6, -8(%rbp)
	jae	.LBB107_28
# %bb.22:                               # %for.body46
                                        #   in Loop: Header=BB107_21 Depth=1
	movl	$0, -4(%rbp)
.LBB107_23:                             # %for.cond47
                                        #   Parent Loop BB107_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -4(%rbp)
	jae	.LBB107_26
# %bb.24:                               # %for.body50
                                        #   in Loop: Header=BB107_23 Depth=2
	movl	-8(%rbp), %eax
	movq	listX(,%rax,8), %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.25:                               # %for.inc55
                                        #   in Loop: Header=BB107_23 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_23
.LBB107_26:                             # %for.end57
                                        #   in Loop: Header=BB107_21 Depth=1
	movl	-8(%rbp), %eax
	movl	$0, listXsize(,%rax,4)
# %bb.27:                               # %for.inc60
                                        #   in Loop: Header=BB107_21 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_21
.LBB107_28:                             # %for.end62
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	movl	$0, 72644(%rax)
	movl	$1, dpb+48
	cmpl	$1045670429, -12(%rbp)  # imm = 0x3E53AA1D
	jne	.LBB107_30
.LBB107_29:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_29
.Lfunc_end107:
	.size	init_dpb.44, .Lfunc_end107-init_dpb.44
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.45
	.type	mm_unmark_short_term_for_reference.45,@function
mm_unmark_short_term_for_reference.45:  # @mm_unmark_short_term_for_reference.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$582530219, -16(%rbp)   # imm = 0x22B8B4AB
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB108_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB108_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB108_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB108_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB108_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB108_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB108_27
.LBB108_7:                              # %if.end
                                        #   in Loop: Header=BB108_1 Depth=1
	jmp	.LBB108_8
.LBB108_8:                              # %if.end13
                                        #   in Loop: Header=BB108_1 Depth=1
	jmp	.LBB108_24
.LBB108_9:                              # %if.else
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB108_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB108_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB108_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB108_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB108_14:                             # %if.end44
	jmp	.LBB108_27
.LBB108_15:                             # %if.end45
                                        #   in Loop: Header=BB108_1 Depth=1
	jmp	.LBB108_16
.LBB108_16:                             # %if.end46
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB108_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB108_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB108_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB108_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB108_21:                             # %if.end81
	jmp	.LBB108_27
.LBB108_22:                             # %if.end82
                                        #   in Loop: Header=BB108_1 Depth=1
	jmp	.LBB108_23
.LBB108_23:                             # %if.end83
                                        #   in Loop: Header=BB108_1 Depth=1
	jmp	.LBB108_24
.LBB108_24:                             # %if.end84
                                        #   in Loop: Header=BB108_1 Depth=1
	jmp	.LBB108_25
.LBB108_25:                             # %for.inc
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_1
.LBB108_26:                             # %for.end.loopexit
	jmp	.LBB108_27
.LBB108_27:                             # %for.end
	cmpl	$582530219, -16(%rbp)   # imm = 0x22B8B4AB
	jne	.LBB108_29
.LBB108_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_28
.Lfunc_end108:
	.size	mm_unmark_short_term_for_reference.45, .Lfunc_end108-mm_unmark_short_term_for_reference.45
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.46
	.type	compare_pic_by_poc_asc.46,@function
compare_pic_by_poc_asc.46:              # @compare_pic_by_poc_asc.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1388880562, -16(%rbp)  # imm = 0x52C8A2B2
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB109_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB109_5
.LBB109_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB109_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB109_5
.LBB109_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB109_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1388880562, -16(%rbp)  # imm = 0x52C8A2B2
	jne	.LBB109_7
.LBB109_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_6
.Lfunc_end109:
	.size	compare_pic_by_poc_asc.46, .Lfunc_end109-compare_pic_by_poc_asc.46
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.47      # -- Begin function dpb_split_field.47
	.p2align	4, 0x90
	.type	dpb_split_field.47,@function
dpb_split_field.47:                     # @dpb_split_field.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1268162559, -68(%rbp)  # imm = 0x4B969FFF
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB110_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB110_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB110_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB110_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_2
.LBB110_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB110_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB110_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB110_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_6
.LBB110_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB110_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB110_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB110_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_10
.LBB110_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB110_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB110_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB110_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_14
.LBB110_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB110_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB110_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB110_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB110_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB110_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_19
.LBB110_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB110_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB110_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB110_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB110_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_23
.LBB110_26:                             # %for.end328
	jmp	.LBB110_27
.LBB110_27:                             # %if.end
	jmp	.LBB110_29
.LBB110_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB110_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB110_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB110_30 Depth=1
	movl	$0, -4(%rbp)
.LBB110_32:                             # %for.cond343
                                        #   Parent Loop BB110_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB110_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB110_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB110_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB110_32 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB110_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB110_38
.LBB110_37:                             # %cond.false
                                        #   in Loop: Header=BB110_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_38
.LBB110_38:                             # %cond.end
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB110_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB110_41
.LBB110_40:                             # %cond.false415
                                        #   in Loop: Header=BB110_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_41
.LBB110_41:                             # %cond.end416
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB110_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB110_44
.LBB110_43:                             # %cond.false436
                                        #   in Loop: Header=BB110_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_44
.LBB110_44:                             # %cond.end437
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB110_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB110_47
.LBB110_46:                             # %cond.false456
                                        #   in Loop: Header=BB110_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_47
.LBB110_47:                             # %cond.end457
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB110_55
.LBB110_48:                             # %if.else466
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB110_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB110_51
.LBB110_50:                             # %cond.false491
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB110_51
.LBB110_51:                             # %cond.end492
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB110_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB110_54
.LBB110_53:                             # %cond.false509
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB110_54
.LBB110_54:                             # %cond.end510
                                        #   in Loop: Header=BB110_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB110_55:                             # %if.end519
                                        #   in Loop: Header=BB110_32 Depth=2
	jmp	.LBB110_56
.LBB110_56:                             # %for.inc520
                                        #   in Loop: Header=BB110_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_32
.LBB110_57:                             # %for.end522
                                        #   in Loop: Header=BB110_30 Depth=1
	jmp	.LBB110_58
.LBB110_58:                             # %for.inc523
                                        #   in Loop: Header=BB110_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_30
.LBB110_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB110_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB110_73
.LBB110_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB110_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB110_62 Depth=1
	movl	$0, -8(%rbp)
.LBB110_64:                             # %for.cond538
                                        #   Parent Loop BB110_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB110_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB110_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB110_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB110_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB110_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB110_68:                             # %if.end908
                                        #   in Loop: Header=BB110_64 Depth=2
	jmp	.LBB110_69
.LBB110_69:                             # %for.inc909
                                        #   in Loop: Header=BB110_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_64
.LBB110_70:                             # %for.end911
                                        #   in Loop: Header=BB110_62 Depth=1
	jmp	.LBB110_71
.LBB110_71:                             # %for.inc912
                                        #   in Loop: Header=BB110_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_62
.LBB110_72:                             # %for.end914
	jmp	.LBB110_73
.LBB110_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB110_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB110_74 Depth=1
	movl	$0, -8(%rbp)
.LBB110_76:                             # %for.cond923
                                        #   Parent Loop BB110_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB110_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB110_148
.LBB110_79:                             # %if.then954
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB110_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_83
.LBB110_82:                             # %cond.false991
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_83:                             # %cond.end993
                                        #   in Loop: Header=BB110_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_86
.LBB110_85:                             # %cond.false1001
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_86:                             # %cond.end1003
                                        #   in Loop: Header=BB110_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_89
.LBB110_88:                             # %cond.false1032
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_89:                             # %cond.end1034
                                        #   in Loop: Header=BB110_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_92
.LBB110_91:                             # %cond.false1042
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_92:                             # %cond.end1044
                                        #   in Loop: Header=BB110_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_95
.LBB110_94:                             # %cond.false1073
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_95:                             # %cond.end1075
                                        #   in Loop: Header=BB110_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_98
.LBB110_97:                             # %cond.false1083
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_98:                             # %cond.end1085
                                        #   in Loop: Header=BB110_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_101
.LBB110_100:                            # %cond.false1114
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_101:                            # %cond.end1116
                                        #   in Loop: Header=BB110_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_104
.LBB110_103:                            # %cond.false1124
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_104:                            # %cond.end1126
                                        #   in Loop: Header=BB110_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_107
.LBB110_106:                            # %cond.false1155
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_107:                            # %cond.end1157
                                        #   in Loop: Header=BB110_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_110
.LBB110_109:                            # %cond.false1165
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_110:                            # %cond.end1167
                                        #   in Loop: Header=BB110_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB110_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB110_125
.LBB110_112:                            # %if.else1190
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_115
.LBB110_114:                            # %cond.false1198
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_115:                            # %cond.end1200
                                        #   in Loop: Header=BB110_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_118
.LBB110_117:                            # %cond.false1208
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_118:                            # %cond.end1210
                                        #   in Loop: Header=BB110_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB110_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB110_121
.LBB110_120:                            # %cond.false1237
                                        #   in Loop: Header=BB110_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_121
.LBB110_121:                            # %cond.end1238
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB110_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB110_124
.LBB110_123:                            # %cond.false1254
                                        #   in Loop: Header=BB110_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_124
.LBB110_124:                            # %cond.end1255
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB110_125:                            # %if.end1264
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_128
.LBB110_127:                            # %cond.false1272
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_128:                            # %cond.end1274
                                        #   in Loop: Header=BB110_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_131
.LBB110_130:                            # %cond.false1282
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_131:                            # %cond.end1284
                                        #   in Loop: Header=BB110_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB110_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB110_146
.LBB110_133:                            # %if.else1307
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_136
.LBB110_135:                            # %cond.false1315
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_136:                            # %cond.end1317
                                        #   in Loop: Header=BB110_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB110_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB110_139
.LBB110_138:                            # %cond.false1325
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB110_139:                            # %cond.end1327
                                        #   in Loop: Header=BB110_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB110_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB110_142
.LBB110_141:                            # %cond.false1355
                                        #   in Loop: Header=BB110_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_142
.LBB110_142:                            # %cond.end1356
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB110_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB110_145
.LBB110_144:                            # %cond.false1373
                                        #   in Loop: Header=BB110_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_145
.LBB110_145:                            # %cond.end1374
                                        #   in Loop: Header=BB110_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB110_146:                            # %if.end1383
                                        #   in Loop: Header=BB110_76 Depth=2
	jmp	.LBB110_147
.LBB110_147:                            # %if.end1384
                                        #   in Loop: Header=BB110_76 Depth=2
	jmp	.LBB110_148
.LBB110_148:                            # %if.end1385
                                        #   in Loop: Header=BB110_76 Depth=2
	jmp	.LBB110_149
.LBB110_149:                            # %for.inc1386
                                        #   in Loop: Header=BB110_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_76
.LBB110_150:                            # %for.end1388
                                        #   in Loop: Header=BB110_74 Depth=1
	jmp	.LBB110_151
.LBB110_151:                            # %for.inc1389
                                        #   in Loop: Header=BB110_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_74
.LBB110_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB110_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB110_153 Depth=1
	movl	$0, -4(%rbp)
.LBB110_155:                            # %for.cond1399
                                        #   Parent Loop BB110_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB110_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB110_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_155
.LBB110_158:                            # %for.end1414
                                        #   in Loop: Header=BB110_153 Depth=1
	jmp	.LBB110_159
.LBB110_159:                            # %for.inc1415
                                        #   in Loop: Header=BB110_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_153
.LBB110_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB110_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB110_174
.LBB110_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB110_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB110_163 Depth=1
	movl	$0, -4(%rbp)
.LBB110_165:                            # %for.cond1431
                                        #   Parent Loop BB110_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB110_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB110_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB110_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB110_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB110_169
.LBB110_168:                            # %cond.false1462
                                        #   in Loop: Header=BB110_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_169
.LBB110_169:                            # %cond.end1463
                                        #   in Loop: Header=BB110_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB110_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_165
.LBB110_171:                            # %for.end1474
                                        #   in Loop: Header=BB110_163 Depth=1
	jmp	.LBB110_172
.LBB110_172:                            # %for.inc1475
                                        #   in Loop: Header=BB110_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_163
.LBB110_173:                            # %for.end1477
	jmp	.LBB110_174
.LBB110_174:                            # %if.end1478
	cmpl	$1268162559, -68(%rbp)  # imm = 0x4B969FFF
	jne	.LBB110_176
.LBB110_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_175
.Lfunc_end110:
	.size	dpb_split_field.47, .Lfunc_end110-dpb_split_field.47
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb.48
	.type	remove_unused_frame_from_dpb.48,@function
remove_unused_frame_from_dpb.48:        # @remove_unused_frame_from_dpb.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$111752914, -20(%rbp)   # imm = 0x6A936D2
	movl	$0, -12(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB111_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	je	.LBB111_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB111_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB111_5
# %bb.4:                                # %if.then
	movl	-12(%rbp), %edi
	callq	remove_frame_from_dpb
	movl	$1, -16(%rbp)
	jmp	.LBB111_8
.LBB111_5:                              # %if.end
                                        #   in Loop: Header=BB111_1 Depth=1
	jmp	.LBB111_6
.LBB111_6:                              # %for.inc
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_1
.LBB111_7:                              # %for.end
	movl	$0, -16(%rbp)
.LBB111_8:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$111752914, -20(%rbp)   # imm = 0x6A936D2
	jne	.LBB111_10
.LBB111_9:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_9
.Lfunc_end111:
	.size	remove_unused_frame_from_dpb.48, .Lfunc_end111-remove_unused_frame_from_dpb.48
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.49   # -- Begin function fill_frame_num_gap.49
	.p2align	4, 0x90
	.type	fill_frame_num_gap.49,@function
fill_frame_num_gap.49:                  # @fill_frame_num_gap.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$35092081, -36(%rbp)    # imm = 0x2177671
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB112_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB112_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB112_1
.LBB112_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$35092081, -36(%rbp)    # imm = 0x2177671
	jne	.LBB112_5
.LBB112_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_4
.Lfunc_end112:
	.size	fill_frame_num_gap.49, .Lfunc_end112-fill_frame_num_gap.49
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.50   # -- Begin function fill_frame_num_gap.50
	.p2align	4, 0x90
	.type	fill_frame_num_gap.50,@function
fill_frame_num_gap.50:                  # @fill_frame_num_gap.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1702953967, -36(%rbp)  # imm = 0x658103EF
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB113_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB113_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB113_1
.LBB113_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1702953967, -36(%rbp)  # imm = 0x658103EF
	jne	.LBB113_5
.LBB113_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_4
.Lfunc_end113:
	.size	fill_frame_num_gap.50, .Lfunc_end113-fill_frame_num_gap.50
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.51
	.type	compare_pic_by_pic_num_desc.51,@function
compare_pic_by_pic_num_desc.51:         # @compare_pic_by_pic_num_desc.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$571153603, -16(%rbp)   # imm = 0x220B1CC3
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB114_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB114_5
.LBB114_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB114_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB114_5
.LBB114_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB114_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$571153603, -16(%rbp)   # imm = 0x220B1CC3
	jne	.LBB114_7
.LBB114_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_6
.Lfunc_end114:
	.size	compare_pic_by_pic_num_desc.51, .Lfunc_end114-compare_pic_by_pic_num_desc.51
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term.52
	.type	mm_mark_current_picture_long_term.52,@function
mm_mark_current_picture_long_term.52:   # @mm_mark_current_picture_long_term.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$770681317, -20(%rbp)   # imm = 0x2DEFA9E5
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB115_2
# %bb.1:                                # %if.then
	movl	-4(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB115_3
.LBB115_2:                              # %if.else
	movq	-16(%rbp), %rax
	movl	(%rax), %edi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rax
	movl	6364(%rax), %ecx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB115_3:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6372(%rcx)
	cmpl	$770681317, -20(%rbp)   # imm = 0x2DEFA9E5
	jne	.LBB115_5
.LBB115_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_4
.Lfunc_end115:
	.size	mm_mark_current_picture_long_term.52, .Lfunc_end115-mm_mark_current_picture_long_term.52
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb.53
	.type	insert_picture_in_dpb.53,@function
insert_picture_in_dpb.53:               # @insert_picture_in_dpb.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$741914432, -20(%rbp)   # imm = 0x2C38B740
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB116_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB116_2:                              # %if.end
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB116_5
	jmp	.LBB116_3
.LBB116_3:                              # %if.end
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB116_10
	jmp	.LBB116_4
.LBB116_4:                              # %if.end
	subl	$2, %eax
	je	.LBB116_18
	jmp	.LBB116_26
.LBB116_5:                              # %sw.bb
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-8(%rbp), %rax
	movl	$3, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB116_9
# %bb.6:                                # %if.then3
	movq	-8(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB116_8
# %bb.7:                                # %if.then5
	movq	-8(%rbp), %rax
	movl	$3, 8(%rax)
.LBB116_8:                              # %if.end7
	jmp	.LBB116_9
.LBB116_9:                              # %if.end8
	movq	-8(%rbp), %rdi
	callq	dpb_split_field
	jmp	.LBB116_26
.LBB116_10:                             # %sw.bb9
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB116_14
# %bb.11:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB116_13
# %bb.12:                               # %if.then20
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB116_13:                             # %if.end24
	jmp	.LBB116_14
.LBB116_14:                             # %if.end25
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB116_16
# %bb.15:                               # %if.then27
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB116_17
.LBB116_16:                             # %if.else
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB116_17:                             # %if.end29
	jmp	.LBB116_26
.LBB116_18:                             # %sw.bb30
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB116_22
# %bb.19:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB116_21
# %bb.20:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB116_21:                             # %if.end47
	jmp	.LBB116_22
.LBB116_22:                             # %if.end48
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB116_24
# %bb.23:                               # %if.then51
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB116_25
.LBB116_24:                             # %if.else52
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB116_25:                             # %if.end55
	jmp	.LBB116_26
.LBB116_26:                             # %sw.epilog
	movq	-16(%rbp), %rax
	movl	6364(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	6384(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 32(%rcx)
	cmpl	$741914432, -20(%rbp)   # imm = 0x2C38B740
	jne	.LBB116_28
.LBB116_27:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_27
.Lfunc_end116:
	.size	insert_picture_in_dpb.53, .Lfunc_end116-insert_picture_in_dpb.53
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.54           # -- Begin function init_lists.54
	.p2align	4, 0x90
	.type	init_lists.54,@function
init_lists.54:                          # @init_lists.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$2015732586, -76(%rbp)  # imm = 0x7825A36A
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB117_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB117_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB117_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB117_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB117_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB117_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB117_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB117_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB117_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB117_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB117_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB117_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB117_9
.LBB117_8:                              # %if.else
                                        #   in Loop: Header=BB117_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB117_9:                              # %if.end
                                        #   in Loop: Header=BB117_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB117_10:                             # %if.end36
                                        #   in Loop: Header=BB117_2 Depth=1
	jmp	.LBB117_11
.LBB117_11:                             # %if.end37
                                        #   in Loop: Header=BB117_2 Depth=1
	jmp	.LBB117_12
.LBB117_12:                             # %for.inc
                                        #   in Loop: Header=BB117_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_2
.LBB117_13:                             # %for.end
	jmp	.LBB117_31
.LBB117_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB117_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB117_17
.LBB117_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB117_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB117_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB117_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB117_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB117_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB117_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB117_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB117_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB117_23
.LBB117_22:                             # %if.else63
                                        #   in Loop: Header=BB117_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB117_23:                             # %if.end70
                                        #   in Loop: Header=BB117_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB117_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB117_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB117_25:                             # %if.end83
                                        #   in Loop: Header=BB117_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB117_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB117_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB117_27:                             # %if.end98
                                        #   in Loop: Header=BB117_18 Depth=1
	jmp	.LBB117_28
.LBB117_28:                             # %if.end99
                                        #   in Loop: Header=BB117_18 Depth=1
	jmp	.LBB117_29
.LBB117_29:                             # %for.inc100
                                        #   in Loop: Header=BB117_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_18
.LBB117_30:                             # %for.end102
	jmp	.LBB117_31
.LBB117_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB117_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB117_34
.LBB117_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB117_181
.LBB117_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB117_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB117_75
.LBB117_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB117_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB117_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB117_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB117_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB117_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB117_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB117_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB117_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB117_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB117_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB117_43:                             # %if.end140
                                        #   in Loop: Header=BB117_38 Depth=1
	jmp	.LBB117_44
.LBB117_44:                             # %if.end141
                                        #   in Loop: Header=BB117_38 Depth=1
	jmp	.LBB117_45
.LBB117_45:                             # %for.inc142
                                        #   in Loop: Header=BB117_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_38
.LBB117_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB117_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB117_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB117_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB117_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB117_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB117_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB117_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB117_51:                             # %if.end177
                                        #   in Loop: Header=BB117_47 Depth=1
	jmp	.LBB117_52
.LBB117_52:                             # %if.end178
                                        #   in Loop: Header=BB117_47 Depth=1
	jmp	.LBB117_53
.LBB117_53:                             # %for.inc179
                                        #   in Loop: Header=BB117_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_47
.LBB117_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB117_74
.LBB117_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB117_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB117_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB117_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB117_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB117_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB117_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB117_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB117_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB117_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB117_63:                             # %if.end212
                                        #   in Loop: Header=BB117_60 Depth=1
	jmp	.LBB117_64
.LBB117_64:                             # %for.inc213
                                        #   in Loop: Header=BB117_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_60
.LBB117_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB117_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB117_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB117_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB117_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB117_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB117_69:                             # %if.end242
                                        #   in Loop: Header=BB117_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB117_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB117_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB117_71:                             # %if.end259
                                        #   in Loop: Header=BB117_66 Depth=1
	jmp	.LBB117_72
.LBB117_72:                             # %for.inc260
                                        #   in Loop: Header=BB117_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_66
.LBB117_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB117_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB117_155
.LBB117_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB117_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB117_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB117_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB117_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB117_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB117_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB117_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB117_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB117_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB117_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB117_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB117_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB117_83:                             # %if.end307
                                        #   in Loop: Header=BB117_77 Depth=1
	jmp	.LBB117_84
.LBB117_84:                             # %if.end308
                                        #   in Loop: Header=BB117_77 Depth=1
	jmp	.LBB117_85
.LBB117_85:                             # %if.end309
                                        #   in Loop: Header=BB117_77 Depth=1
	jmp	.LBB117_86
.LBB117_86:                             # %for.inc310
                                        #   in Loop: Header=BB117_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_77
.LBB117_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB117_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB117_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB117_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB117_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB117_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB117_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB117_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB117_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB117_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB117_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB117_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB117_94:                             # %if.end354
                                        #   in Loop: Header=BB117_88 Depth=1
	jmp	.LBB117_95
.LBB117_95:                             # %if.end355
                                        #   in Loop: Header=BB117_88 Depth=1
	jmp	.LBB117_96
.LBB117_96:                             # %if.end356
                                        #   in Loop: Header=BB117_88 Depth=1
	jmp	.LBB117_97
.LBB117_97:                             # %for.inc357
                                        #   in Loop: Header=BB117_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_88
.LBB117_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB117_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB117_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB117_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB117_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_99
.LBB117_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB117_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB117_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB117_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB117_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_103
.LBB117_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB117_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB117_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB117_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB117_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB117_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB117_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB117_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB117_111:                            # %if.end428
                                        #   in Loop: Header=BB117_107 Depth=1
	jmp	.LBB117_112
.LBB117_112:                            # %if.end429
                                        #   in Loop: Header=BB117_107 Depth=1
	jmp	.LBB117_113
.LBB117_113:                            # %for.inc430
                                        #   in Loop: Header=BB117_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_107
.LBB117_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB117_154
.LBB117_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB117_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB117_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB117_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB117_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB117_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB117_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB117_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB117_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB117_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB117_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB117_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB117_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB117_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB117_126:                            # %if.end480
                                        #   in Loop: Header=BB117_122 Depth=1
	jmp	.LBB117_127
.LBB117_127:                            # %if.end481
                                        #   in Loop: Header=BB117_122 Depth=1
	jmp	.LBB117_128
.LBB117_128:                            # %for.inc482
                                        #   in Loop: Header=BB117_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_122
.LBB117_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB117_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB117_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB117_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB117_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB117_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB117_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB117_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB117_134:                            # %if.end507
                                        #   in Loop: Header=BB117_130 Depth=1
	jmp	.LBB117_135
.LBB117_135:                            # %if.end508
                                        #   in Loop: Header=BB117_130 Depth=1
	jmp	.LBB117_136
.LBB117_136:                            # %for.inc509
                                        #   in Loop: Header=BB117_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_130
.LBB117_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB117_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB117_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB117_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB117_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_138
.LBB117_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB117_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB117_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB117_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB117_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_142
.LBB117_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB117_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB117_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB117_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB117_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB117_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB117_149:                            # %if.end566
                                        #   in Loop: Header=BB117_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB117_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB117_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB117_151:                            # %if.end583
                                        #   in Loop: Header=BB117_146 Depth=1
	jmp	.LBB117_152
.LBB117_152:                            # %for.inc584
                                        #   in Loop: Header=BB117_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_146
.LBB117_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB117_154:                            # %if.end588
	jmp	.LBB117_155
.LBB117_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB117_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB117_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB117_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB117_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB117_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB117_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB117_158 Depth=1
	movl	$1, -68(%rbp)
.LBB117_161:                            # %if.end607
                                        #   in Loop: Header=BB117_158 Depth=1
	jmp	.LBB117_162
.LBB117_162:                            # %for.inc608
                                        #   in Loop: Header=BB117_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_158
.LBB117_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB117_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB117_165:                            # %if.end617
	jmp	.LBB117_166
.LBB117_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB117_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB117_169
.LBB117_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB117_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB117_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB117_172
.LBB117_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB117_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB117_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB117_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB117_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB117_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_173
.LBB117_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB117_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB117_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB117_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB117_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_177
.LBB117_180:                            # %for.end646.loopexit
	jmp	.LBB117_181
.LBB117_181:                            # %for.end646
	cmpl	$2015732586, -76(%rbp)  # imm = 0x7825A36A
	jne	.LBB117_183
.LBB117_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_182
.Lfunc_end117:
	.size	init_lists.54, .Lfunc_end117-init_lists.54
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.55      # -- Begin function dpb_split_field.55
	.p2align	4, 0x90
	.type	dpb_split_field.55,@function
dpb_split_field.55:                     # @dpb_split_field.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$96628290, -52(%rbp)    # imm = 0x5C26E42
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB118_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB118_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB118_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB118_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_2
.LBB118_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB118_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB118_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB118_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_6
.LBB118_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB118_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB118_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB118_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_10
.LBB118_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB118_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB118_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB118_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_14
.LBB118_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB118_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB118_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB118_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB118_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB118_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_19
.LBB118_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB118_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB118_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB118_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB118_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_23
.LBB118_26:                             # %for.end328
	jmp	.LBB118_27
.LBB118_27:                             # %if.end
	jmp	.LBB118_29
.LBB118_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB118_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB118_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB118_30 Depth=1
	movl	$0, -4(%rbp)
.LBB118_32:                             # %for.cond343
                                        #   Parent Loop BB118_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB118_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB118_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB118_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB118_32 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB118_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB118_38
.LBB118_37:                             # %cond.false
                                        #   in Loop: Header=BB118_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_38
.LBB118_38:                             # %cond.end
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB118_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB118_41
.LBB118_40:                             # %cond.false415
                                        #   in Loop: Header=BB118_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_41
.LBB118_41:                             # %cond.end416
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB118_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB118_44
.LBB118_43:                             # %cond.false436
                                        #   in Loop: Header=BB118_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_44
.LBB118_44:                             # %cond.end437
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB118_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB118_47
.LBB118_46:                             # %cond.false456
                                        #   in Loop: Header=BB118_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_47
.LBB118_47:                             # %cond.end457
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB118_55
.LBB118_48:                             # %if.else466
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB118_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB118_51
.LBB118_50:                             # %cond.false491
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB118_51
.LBB118_51:                             # %cond.end492
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB118_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB118_54
.LBB118_53:                             # %cond.false509
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB118_54
.LBB118_54:                             # %cond.end510
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB118_55:                             # %if.end519
                                        #   in Loop: Header=BB118_32 Depth=2
	jmp	.LBB118_56
.LBB118_56:                             # %for.inc520
                                        #   in Loop: Header=BB118_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_32
.LBB118_57:                             # %for.end522
                                        #   in Loop: Header=BB118_30 Depth=1
	jmp	.LBB118_58
.LBB118_58:                             # %for.inc523
                                        #   in Loop: Header=BB118_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_30
.LBB118_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB118_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB118_73
.LBB118_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB118_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB118_62 Depth=1
	movl	$0, -8(%rbp)
.LBB118_64:                             # %for.cond538
                                        #   Parent Loop BB118_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB118_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB118_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB118_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB118_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB118_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB118_68:                             # %if.end908
                                        #   in Loop: Header=BB118_64 Depth=2
	jmp	.LBB118_69
.LBB118_69:                             # %for.inc909
                                        #   in Loop: Header=BB118_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_64
.LBB118_70:                             # %for.end911
                                        #   in Loop: Header=BB118_62 Depth=1
	jmp	.LBB118_71
.LBB118_71:                             # %for.inc912
                                        #   in Loop: Header=BB118_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_62
.LBB118_72:                             # %for.end914
	jmp	.LBB118_73
.LBB118_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB118_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB118_74 Depth=1
	movl	$0, -8(%rbp)
.LBB118_76:                             # %for.cond923
                                        #   Parent Loop BB118_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB118_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-64(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB118_148
.LBB118_79:                             # %if.then954
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB118_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_83
.LBB118_82:                             # %cond.false991
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_83:                             # %cond.end993
                                        #   in Loop: Header=BB118_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_86
.LBB118_85:                             # %cond.false1001
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_86:                             # %cond.end1003
                                        #   in Loop: Header=BB118_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_89
.LBB118_88:                             # %cond.false1032
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_89:                             # %cond.end1034
                                        #   in Loop: Header=BB118_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_92
.LBB118_91:                             # %cond.false1042
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_92:                             # %cond.end1044
                                        #   in Loop: Header=BB118_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_95
.LBB118_94:                             # %cond.false1073
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_95:                             # %cond.end1075
                                        #   in Loop: Header=BB118_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_98
.LBB118_97:                             # %cond.false1083
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_98:                             # %cond.end1085
                                        #   in Loop: Header=BB118_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_101
.LBB118_100:                            # %cond.false1114
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_101:                            # %cond.end1116
                                        #   in Loop: Header=BB118_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_104
.LBB118_103:                            # %cond.false1124
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_104:                            # %cond.end1126
                                        #   in Loop: Header=BB118_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_107
.LBB118_106:                            # %cond.false1155
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_107:                            # %cond.end1157
                                        #   in Loop: Header=BB118_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_110
.LBB118_109:                            # %cond.false1165
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_110:                            # %cond.end1167
                                        #   in Loop: Header=BB118_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB118_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB118_125
.LBB118_112:                            # %if.else1190
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_115
.LBB118_114:                            # %cond.false1198
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_115:                            # %cond.end1200
                                        #   in Loop: Header=BB118_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_118
.LBB118_117:                            # %cond.false1208
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_118:                            # %cond.end1210
                                        #   in Loop: Header=BB118_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB118_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB118_121
.LBB118_120:                            # %cond.false1237
                                        #   in Loop: Header=BB118_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_121
.LBB118_121:                            # %cond.end1238
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB118_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB118_124
.LBB118_123:                            # %cond.false1254
                                        #   in Loop: Header=BB118_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_124
.LBB118_124:                            # %cond.end1255
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB118_125:                            # %if.end1264
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_128
.LBB118_127:                            # %cond.false1272
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_128:                            # %cond.end1274
                                        #   in Loop: Header=BB118_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_131
.LBB118_130:                            # %cond.false1282
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_131:                            # %cond.end1284
                                        #   in Loop: Header=BB118_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB118_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB118_146
.LBB118_133:                            # %if.else1307
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_136
.LBB118_135:                            # %cond.false1315
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_136:                            # %cond.end1317
                                        #   in Loop: Header=BB118_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB118_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB118_139
.LBB118_138:                            # %cond.false1325
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB118_139:                            # %cond.end1327
                                        #   in Loop: Header=BB118_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB118_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB118_142
.LBB118_141:                            # %cond.false1355
                                        #   in Loop: Header=BB118_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_142
.LBB118_142:                            # %cond.end1356
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB118_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB118_145
.LBB118_144:                            # %cond.false1373
                                        #   in Loop: Header=BB118_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_145
.LBB118_145:                            # %cond.end1374
                                        #   in Loop: Header=BB118_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB118_146:                            # %if.end1383
                                        #   in Loop: Header=BB118_76 Depth=2
	jmp	.LBB118_147
.LBB118_147:                            # %if.end1384
                                        #   in Loop: Header=BB118_76 Depth=2
	jmp	.LBB118_148
.LBB118_148:                            # %if.end1385
                                        #   in Loop: Header=BB118_76 Depth=2
	jmp	.LBB118_149
.LBB118_149:                            # %for.inc1386
                                        #   in Loop: Header=BB118_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_76
.LBB118_150:                            # %for.end1388
                                        #   in Loop: Header=BB118_74 Depth=1
	jmp	.LBB118_151
.LBB118_151:                            # %for.inc1389
                                        #   in Loop: Header=BB118_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_74
.LBB118_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB118_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB118_153 Depth=1
	movl	$0, -4(%rbp)
.LBB118_155:                            # %for.cond1399
                                        #   Parent Loop BB118_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB118_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB118_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_155
.LBB118_158:                            # %for.end1414
                                        #   in Loop: Header=BB118_153 Depth=1
	jmp	.LBB118_159
.LBB118_159:                            # %for.inc1415
                                        #   in Loop: Header=BB118_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_153
.LBB118_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB118_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB118_174
.LBB118_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB118_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB118_163 Depth=1
	movl	$0, -4(%rbp)
.LBB118_165:                            # %for.cond1431
                                        #   Parent Loop BB118_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB118_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB118_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB118_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB118_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-80(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB118_169
.LBB118_168:                            # %cond.false1462
                                        #   in Loop: Header=BB118_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_169
.LBB118_169:                            # %cond.end1463
                                        #   in Loop: Header=BB118_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB118_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_165
.LBB118_171:                            # %for.end1474
                                        #   in Loop: Header=BB118_163 Depth=1
	jmp	.LBB118_172
.LBB118_172:                            # %for.inc1475
                                        #   in Loop: Header=BB118_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_163
.LBB118_173:                            # %for.end1477
	jmp	.LBB118_174
.LBB118_174:                            # %if.end1478
	cmpl	$96628290, -52(%rbp)    # imm = 0x5C26E42
	jne	.LBB118_176
.LBB118_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_175
.Lfunc_end118:
	.size	dpb_split_field.55, .Lfunc_end118-dpb_split_field.55
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.56    # -- Begin function gen_field_ref_ids.56
	.p2align	4, 0x90
	.type	gen_field_ref_ids.56,@function
gen_field_ref_ids.56:                   # @gen_field_ref_ids.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$180530415, -28(%rbp)   # imm = 0xAC2ACEF
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB119_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	$0, -8(%rbp)
.LBB119_3:                              # %for.cond1
                                        #   Parent Loop BB119_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB119_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB119_7
.LBB119_6:                              # %cond.false
                                        #   in Loop: Header=BB119_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_7
.LBB119_7:                              # %cond.end
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB119_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB119_10
.LBB119_9:                              # %cond.false32
                                        #   in Loop: Header=BB119_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_10
.LBB119_10:                             # %cond.end33
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB119_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_3
.LBB119_12:                             # %for.end
                                        #   in Loop: Header=BB119_1 Depth=1
	jmp	.LBB119_13
.LBB119_13:                             # %for.inc45
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_1
.LBB119_14:                             # %for.end47
	cmpl	$180530415, -28(%rbp)   # imm = 0xAC2ACEF
	jne	.LBB119_16
.LBB119_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_15
.Lfunc_end119:
	.size	gen_field_ref_ids.56, .Lfunc_end119-gen_field_ref_ids.56
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb.57
	.type	output_one_frame_from_dpb.57,@function
output_one_frame_from_dpb.57:           # @output_one_frame_from_dpb.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$151943656, -12(%rbp)   # imm = 0x90E79E8
	cmpl	$1, dpb+28
	jae	.LBB120_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.30, %rdi
	movl	$150, %esi
	callq	error
.LBB120_2:                              # %if.end
	leaq	-8(%rbp), %rdi
	leaq	-4(%rbp), %rsi
	callq	get_smallest_poc
	cmpl	$-1, -4(%rbp)
	jne	.LBB120_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.31, %rdi
	movl	$150, %esi
	callq	error
.LBB120_4:                              # %if.end3
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	p_dec, %esi
	callq	write_stored_frame
	movl	dpb+40, %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB120_6
# %bb.5:                                # %if.then5
	movabsq	$.L.str.32, %rdi
	movl	$150, %esi
	callq	error
.LBB120_6:                              # %if.end6
	movl	-8(%rbp), %eax
	movl	%eax, dpb+40
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB120_8
# %bb.7:                                # %if.then9
	movl	-4(%rbp), %edi
	callq	remove_frame_from_dpb
.LBB120_8:                              # %if.end10
	cmpl	$151943656, -12(%rbp)   # imm = 0x90E79E8
	jne	.LBB120_10
.LBB120_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_9
.Lfunc_end120:
	.size	output_one_frame_from_dpb.57, .Lfunc_end120-output_one_frame_from_dpb.57
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.58    # -- Begin function dpb_combine_field.58
	.p2align	4, 0x90
	.type	dpb_combine_field.58,@function
dpb_combine_field.58:                   # @dpb_combine_field.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1652509461, -32(%rbp)  # imm = 0x627F4B15
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB121_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_1
.LBB121_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB121_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB121_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB121_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB121_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_5
.LBB121_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB121_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB121_11
.LBB121_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB121_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB121_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB121_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB121_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB121_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB121_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB121_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB121_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB121_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB121_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB121_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB121_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB121_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB121_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB121_24
.LBB121_23:                             # %cond.false217
                                        #   in Loop: Header=BB121_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB121_24:                             # %cond.end226
                                        #   in Loop: Header=BB121_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB121_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_20
.LBB121_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB121_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB121_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB121_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB121_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB121_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB121_31
.LBB121_30:                             # %cond.false269
                                        #   in Loop: Header=BB121_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB121_31:                             # %cond.end278
                                        #   in Loop: Header=BB121_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB121_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_27
.LBB121_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB121_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB121_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB121_34 Depth=1
	movl	$0, -20(%rbp)
.LBB121_36:                             # %for.cond295
                                        #   Parent Loop BB121_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB121_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB121_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB121_40
.LBB121_39:                             # %cond.false445
                                        #   in Loop: Header=BB121_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB121_40
.LBB121_40:                             # %cond.end446
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB121_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB121_43
.LBB121_42:                             # %cond.false462
                                        #   in Loop: Header=BB121_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB121_43
.LBB121_43:                             # %cond.end463
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB121_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB121_46
.LBB121_45:                             # %cond.false479
                                        #   in Loop: Header=BB121_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB121_46
.LBB121_46:                             # %cond.end480
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB121_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB121_49
.LBB121_48:                             # %cond.false501
                                        #   in Loop: Header=BB121_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB121_49
.LBB121_49:                             # %cond.end502
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB121_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB121_52
.LBB121_51:                             # %cond.false647
                                        #   in Loop: Header=BB121_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB121_52
.LBB121_52:                             # %cond.end648
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB121_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB121_55
.LBB121_54:                             # %cond.false665
                                        #   in Loop: Header=BB121_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB121_55
.LBB121_55:                             # %cond.end666
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB121_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB121_58
.LBB121_57:                             # %cond.false683
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB121_58
.LBB121_58:                             # %cond.end684
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB121_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB121_61
.LBB121_60:                             # %cond.false706
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB121_61
.LBB121_61:                             # %cond.end707
                                        #   in Loop: Header=BB121_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB121_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_36
.LBB121_63:                             # %for.end723
                                        #   in Loop: Header=BB121_34 Depth=1
	jmp	.LBB121_64
.LBB121_64:                             # %for.inc724
                                        #   in Loop: Header=BB121_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_34
.LBB121_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB121_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB121_76
.LBB121_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB121_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB121_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB121_68 Depth=1
	movl	$0, -20(%rbp)
.LBB121_70:                             # %for.cond737
                                        #   Parent Loop BB121_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB121_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB121_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB121_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_70
.LBB121_73:                             # %for.end758
                                        #   in Loop: Header=BB121_68 Depth=1
	jmp	.LBB121_74
.LBB121_74:                             # %for.inc759
                                        #   in Loop: Header=BB121_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_68
.LBB121_75:                             # %for.end761
	jmp	.LBB121_76
.LBB121_76:                             # %if.end762
	cmpl	$1652509461, -32(%rbp)  # imm = 0x627F4B15
	jne	.LBB121_78
.LBB121_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_77
.Lfunc_end121:
	.size	dpb_combine_field.58, .Lfunc_end121-dpb_combine_field.58
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.59 # -- Begin function replace_top_pic_with_frame.59
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.59,@function
replace_top_pic_with_frame.59:          # @replace_top_pic_with_frame.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$769912214, -32(%rbp)   # imm = 0x2DE3ED96
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB122_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB122_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB122_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB122_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB122_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB122_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB122_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB122_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB122_10
.LBB122_7:                              # %if.end14
                                        #   in Loop: Header=BB122_3 Depth=1
	jmp	.LBB122_8
.LBB122_8:                              # %for.inc
                                        #   in Loop: Header=BB122_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_3
.LBB122_9:                              # %for.end.loopexit
	jmp	.LBB122_10
.LBB122_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB122_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB122_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB122_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB122_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB122_15:                             # %if.end26
	jmp	.LBB122_16
.LBB122_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$769912214, -32(%rbp)   # imm = 0x2DE3ED96
	jne	.LBB122_18
.LBB122_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_17
.Lfunc_end122:
	.size	replace_top_pic_with_frame.59, .Lfunc_end122-replace_top_pic_with_frame.59
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.60
	.type	get_pic_num_x.60,@function
get_pic_num_x.60:                       # @get_pic_num_x.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1688507617, -32(%rbp)  # imm = 0x64A494E1
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB123_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_3
.LBB123_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB123_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1688507617, -32(%rbp)  # imm = 0x64A494E1
	jne	.LBB123_5
.LBB123_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_4
.Lfunc_end123:
	.size	get_pic_num_x.60, .Lfunc_end123-get_pic_num_x.60
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.61
	.type	mm_unmark_long_term_for_reference.61,@function
mm_unmark_long_term_for_reference.61:   # @mm_unmark_long_term_for_reference.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2057883473, -12(%rbp)  # imm = 0x7AA8CF51
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB124_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB124_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB124_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB124_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB124_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB124_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB124_7:                              # %if.end
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_8
.LBB124_8:                              # %if.end14
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_24
.LBB124_9:                              # %if.else
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB124_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB124_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB124_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB124_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB124_14:                             # %if.end57
	jmp	.LBB124_27
.LBB124_15:                             # %if.end58
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_16
.LBB124_16:                             # %if.end59
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB124_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB124_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB124_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB124_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB124_21:                             # %if.end106
	jmp	.LBB124_27
.LBB124_22:                             # %if.end107
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_23
.LBB124_23:                             # %if.end108
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_24
.LBB124_24:                             # %if.end109
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_25
.LBB124_25:                             # %for.inc
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_1
.LBB124_26:                             # %for.end.loopexit
	jmp	.LBB124_27
.LBB124_27:                             # %for.end
	cmpl	$2057883473, -12(%rbp)  # imm = 0x7AA8CF51
	jne	.LBB124_29
.LBB124_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_28
.Lfunc_end124:
	.size	mm_unmark_long_term_for_reference.61, .Lfunc_end124-mm_unmark_long_term_for_reference.61
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize.62           # -- Begin function getDpbSize.62
	.p2align	4, 0x90
	.type	getDpbSize.62,@function
getDpbSize.62:                          # @getDpbSize.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1229206654, -20(%rbp)  # imm = 0x4944347E
	movq	active_sps(%rip), %rax
	movl	1140(%rax), %ecx
	movl	1144(%rax), %edx
	addl	$1, %ecx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	1148(%rax), %eax
	cmpl	$1, %eax
	movl	$2, %eax
	adcl	$-1, %eax
	imull	%eax, %ecx
	shll	$7, %ecx
	leal	(%rcx,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -12(%rbp)
	movq	active_sps(%rip), %rax
	movl	24(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$41, %ecx
	ja	.LBB125_17
# %bb.1:                                # %entry
	movq	.LJTI125_0(,%rax,8), %rax
	jmpq	*%rax
.LBB125_2:                              # %sw.bb
	movl	$152064, -12(%rbp)      # imm = 0x25200
	jmp	.LBB125_18
.LBB125_3:                              # %sw.bb4
	movl	$345600, -12(%rbp)      # imm = 0x54600
	jmp	.LBB125_18
.LBB125_4:                              # %sw.bb5
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB125_18
.LBB125_5:                              # %sw.bb6
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB125_18
.LBB125_6:                              # %sw.bb7
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB125_18
.LBB125_7:                              # %sw.bb8
	movl	$1824768, -12(%rbp)     # imm = 0x1BD800
	jmp	.LBB125_18
.LBB125_8:                              # %sw.bb9
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB125_18
.LBB125_9:                              # %sw.bb10
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB125_18
.LBB125_10:                             # %sw.bb11
	movl	$6912000, -12(%rbp)     # imm = 0x697800
	jmp	.LBB125_18
.LBB125_11:                             # %sw.bb12
	movl	$7864320, -12(%rbp)     # imm = 0x780000
	jmp	.LBB125_18
.LBB125_12:                             # %sw.bb13
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB125_18
.LBB125_13:                             # %sw.bb14
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB125_18
.LBB125_14:                             # %sw.bb15
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB125_18
.LBB125_15:                             # %sw.bb16
	movl	$42393600, -12(%rbp)    # imm = 0x286E000
	jmp	.LBB125_18
.LBB125_16:                             # %sw.bb17
	movl	$70778880, -12(%rbp)    # imm = 0x4380000
	jmp	.LBB125_18
.LBB125_17:                             # %sw.default
	movabsq	$.L.str, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB125_18:                             # %sw.epilog
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	cmpl	$16, -12(%rbp)
	jge	.LBB125_20
# %bb.19:                               # %cond.true
	movl	-12(%rbp), %ebx
	jmp	.LBB125_21
.LBB125_20:                             # %cond.false
	movl	$16, %ebx
	jmp	.LBB125_21
.LBB125_21:                             # %cond.end
	cmpl	$1229206654, -20(%rbp)  # imm = 0x4944347E
	jne	.LBB125_23
.LBB125_22:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_22
.Lfunc_end125:
	.size	getDpbSize.62, .Lfunc_end125-getDpbSize.62
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI125_0:
	.quad	.LBB125_2
	.quad	.LBB125_3
	.quad	.LBB125_4
	.quad	.LBB125_5
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_6
	.quad	.LBB125_7
	.quad	.LBB125_8
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_9
	.quad	.LBB125_10
	.quad	.LBB125_11
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_12
	.quad	.LBB125_13
	.quad	.LBB125_14
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_17
	.quad	.LBB125_15
	.quad	.LBB125_16
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.63
	.type	unmark_long_term_field_for_reference_by_frame_idx.63,@function
unmark_long_term_field_for_reference_by_frame_idx.63: # @unmark_long_term_field_for_reference_by_frame_idx.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1386501871, -32(%rbp)  # imm = 0x52A456EF
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB126_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB126_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB126_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB126_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB126_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB126_3 Depth=1
	cmpl	$1, -20(%rbp)
	jne	.LBB126_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB126_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB126_23
.LBB126_8:                              # %if.else
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB126_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB126_22
.LBB126_10:                             # %if.else21
                                        #   in Loop: Header=BB126_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB126_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB126_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB126_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB126_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB126_15
.LBB126_14:                             # %if.then29
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB126_15:                             # %if.end32
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_17
.LBB126_16:                             # %if.else33
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB126_17:                             # %if.end36
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_21
.LBB126_18:                             # %if.else37
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB126_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB126_20:                             # %if.end45
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_21
.LBB126_21:                             # %if.end46
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_22
.LBB126_22:                             # %if.end47
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_23
.LBB126_23:                             # %if.end48
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_24
.LBB126_24:                             # %if.end49
                                        #   in Loop: Header=BB126_3 Depth=1
	cmpl	$2, -20(%rbp)
	jne	.LBB126_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB126_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB126_42
.LBB126_27:                             # %if.else59
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB126_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB126_41
.LBB126_29:                             # %if.else67
                                        #   in Loop: Header=BB126_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB126_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB126_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB126_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB126_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB126_34
.LBB126_33:                             # %if.then78
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB126_34:                             # %if.end81
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_36
.LBB126_35:                             # %if.else82
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB126_36:                             # %if.end85
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_40
.LBB126_37:                             # %if.else86
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB126_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB126_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB126_39:                             # %if.end95
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_40
.LBB126_40:                             # %if.end96
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_41
.LBB126_41:                             # %if.end97
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_42
.LBB126_42:                             # %if.end98
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_43
.LBB126_43:                             # %if.end99
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_44
.LBB126_44:                             # %if.end100
                                        #   in Loop: Header=BB126_3 Depth=1
	jmp	.LBB126_45
.LBB126_45:                             # %for.inc
                                        #   in Loop: Header=BB126_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_3
.LBB126_46:                             # %for.end
	cmpl	$1386501871, -32(%rbp)  # imm = 0x52A456EF
	jne	.LBB126_48
.LBB126_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_47
.Lfunc_end126:
	.size	unmark_long_term_field_for_reference_by_frame_idx.63, .Lfunc_end126-unmark_long_term_field_for_reference_by_frame_idx.63
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.64
	.type	compare_pic_by_poc_asc.64,@function
compare_pic_by_poc_asc.64:              # @compare_pic_by_poc_asc.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1669813723, -16(%rbp)  # imm = 0x638755DB
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB127_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB127_5
.LBB127_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB127_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB127_5
.LBB127_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB127_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1669813723, -16(%rbp)  # imm = 0x638755DB
	jne	.LBB127_7
.LBB127_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_6
.Lfunc_end127:
	.size	compare_pic_by_poc_asc.64, .Lfunc_end127-compare_pic_by_poc_asc.64
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.65
	.type	compare_fs_by_poc_desc.65,@function
compare_fs_by_poc_desc.65:              # @compare_fs_by_poc_desc.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$216083465, -16(%rbp)   # imm = 0xCE12C09
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB128_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB128_5
.LBB128_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB128_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB128_5
.LBB128_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB128_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$216083465, -16(%rbp)   # imm = 0xCE12C09
	jne	.LBB128_7
.LBB128_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_6
.Lfunc_end128:
	.size	compare_fs_by_poc_desc.65, .Lfunc_end128-compare_fs_by_poc_desc.65
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management.66
	.type	idr_memory_management.66,@function
idr_memory_management.66:               # @idr_memory_management.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1935680955, -20(%rbp)  # imm = 0x736025BB
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72504(%rax)
	je	.LBB129_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB129_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB129_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB129_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_2
.LBB129_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB129_6:                              # %for.cond3
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB129_9
# %bb.7:                                # %for.body5
                                        #   in Loop: Header=BB129_6 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.8:                                # %for.inc8
                                        #   in Loop: Header=BB129_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_6
.LBB129_9:                              # %for.end10
	movl	$0, -4(%rbp)
.LBB129_10:                             # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB129_13
# %bb.11:                               # %for.body13
                                        #   in Loop: Header=BB129_10 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.12:                               # %for.inc16
                                        #   in Loop: Header=BB129_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_10
.LBB129_13:                             # %for.end18
	movl	$0, dpb+28
	jmp	.LBB129_15
.LBB129_14:                             # %if.else
	callq	flush_dpb
.LBB129_15:                             # %if.end
	movq	$0, dpb+56
	callq	update_ref_list
	callq	update_ltref_list
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	cmpl	$0, 72508(%rax)
	je	.LBB129_17
# %bb.16:                               # %if.then20
	movl	$0, dpb+44
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	jmp	.LBB129_18
.LBB129_17:                             # %if.else21
	movl	$-1, dpb+44
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
.LBB129_18:                             # %if.end23
	cmpl	$1935680955, -20(%rbp)  # imm = 0x736025BB
	jne	.LBB129_20
.LBB129_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_19
.Lfunc_end129:
	.size	idr_memory_management.66, .Lfunc_end129-idr_memory_management.66
	.cfi_endproc
                                        # -- End function
	.globl	update_ltref_list.67    # -- Begin function update_ltref_list.67
	.p2align	4, 0x90
	.type	update_ltref_list.67,@function
update_ltref_list.67:                   # @update_ltref_list.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1631969550, -12(%rbp)  # imm = 0x6145E10E
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB130_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB130_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB130_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_long_term_reference
	cmpl	$0, %eax
	je	.LBB130_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB130_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB130_4:                              # %if.end
                                        #   in Loop: Header=BB130_1 Depth=1
	jmp	.LBB130_5
.LBB130_5:                              # %for.inc
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_1
.LBB130_6:                              # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+36
.LBB130_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB130_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB130_7 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB130_7
.LBB130_9:                              # %while.end
	cmpl	$1631969550, -12(%rbp)  # imm = 0x6145E10E
	jne	.LBB130_11
.LBB130_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_10
.Lfunc_end130:
	.size	update_ltref_list.67, .Lfunc_end130-update_ltref_list.67
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.68 # -- Begin function reorder_ref_pic_list.68
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.68,@function
reorder_ref_pic_list.68:                # @reorder_ref_pic_list.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$895620753, -60(%rbp)   # imm = 0x35621691
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB131_2
# %bb.1:                                # %if.then
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB131_3
.LBB131_2:                              # %if.else
	movl	-44(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB131_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB131_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB131_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB131_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB131_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB131_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB131_7:                              # %if.end9
                                        #   in Loop: Header=BB131_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB131_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB131_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB131_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB131_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_12
.LBB131_11:                             # %if.else28
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB131_12:                             # %if.end33
                                        #   in Loop: Header=BB131_4 Depth=1
	jmp	.LBB131_17
.LBB131_13:                             # %if.else34
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB131_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_16
.LBB131_15:                             # %if.else46
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB131_16:                             # %if.end51
                                        #   in Loop: Header=BB131_4 Depth=1
	jmp	.LBB131_17
.LBB131_17:                             # %if.end52
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB131_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB131_20
.LBB131_19:                             # %if.else56
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB131_20:                             # %if.end57
                                        #   in Loop: Header=BB131_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB131_22
.LBB131_21:                             # %if.else58
                                        #   in Loop: Header=BB131_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB131_22:                             # %if.end61
                                        #   in Loop: Header=BB131_4 Depth=1
	jmp	.LBB131_23
.LBB131_23:                             # %for.inc
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_4
.LBB131_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$895620753, -60(%rbp)   # imm = 0x35621691
	jne	.LBB131_26
.LBB131_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_25
.Lfunc_end131:
	.size	reorder_ref_pic_list.68, .Lfunc_end131-reorder_ref_pic_list.68
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.69
	.type	reorder_short_term.69,@function
reorder_short_term.69:                  # @reorder_short_term.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1246113590, -44(%rbp)  # imm = 0x4A462F36
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB132_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB132_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_1
.LBB132_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB132_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB132_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB132_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB132_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB132_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB132_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB132_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB132_10
.LBB132_9:                              # %if.then17
                                        #   in Loop: Header=BB132_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB132_10:                             # %if.end
                                        #   in Loop: Header=BB132_5 Depth=1
	jmp	.LBB132_11
.LBB132_11:                             # %if.end23
                                        #   in Loop: Header=BB132_5 Depth=1
	jmp	.LBB132_12
.LBB132_12:                             # %for.inc24
                                        #   in Loop: Header=BB132_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_5
.LBB132_13:                             # %for.end26
	cmpl	$1246113590, -44(%rbp)  # imm = 0x4A462F36
	jne	.LBB132_15
.LBB132_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_14
.Lfunc_end132:
	.size	reorder_short_term.69, .Lfunc_end132-reorder_short_term.69
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.70
	.type	compare_fs_by_lt_pic_idx_asc.70,@function
compare_fs_by_lt_pic_idx_asc.70:        # @compare_fs_by_lt_pic_idx_asc.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$4397602, -16(%rbp)     # imm = 0x431A22
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB133_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB133_5
.LBB133_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB133_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB133_5
.LBB133_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB133_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$4397602, -16(%rbp)     # imm = 0x431A22
	jne	.LBB133_7
.LBB133_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_6
.Lfunc_end133:
	.size	compare_fs_by_lt_pic_idx_asc.70, .Lfunc_end133-compare_fs_by_lt_pic_idx_asc.70
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.71
	.type	reorder_short_term.71,@function
reorder_short_term.71:                  # @reorder_short_term.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1364491893, -44(%rbp)  # imm = 0x51547E75
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB134_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB134_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB134_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB134_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_1
.LBB134_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB134_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB134_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB134_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB134_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB134_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB134_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB134_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB134_10
.LBB134_9:                              # %if.then17
                                        #   in Loop: Header=BB134_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB134_10:                             # %if.end
                                        #   in Loop: Header=BB134_5 Depth=1
	jmp	.LBB134_11
.LBB134_11:                             # %if.end23
                                        #   in Loop: Header=BB134_5 Depth=1
	jmp	.LBB134_12
.LBB134_12:                             # %for.inc24
                                        #   in Loop: Header=BB134_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_5
.LBB134_13:                             # %for.end26
	cmpl	$1364491893, -44(%rbp)  # imm = 0x51547E75
	jne	.LBB134_15
.LBB134_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_14
.Lfunc_end134:
	.size	reorder_short_term.71, .Lfunc_end134-reorder_short_term.71
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.72
	.type	compare_pic_by_lt_pic_num_asc.72,@function
compare_pic_by_lt_pic_num_asc.72:       # @compare_pic_by_lt_pic_num_asc.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1606764447, -16(%rbp)  # imm = 0x5FC5479F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB135_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB135_5
.LBB135_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB135_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB135_5
.LBB135_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB135_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1606764447, -16(%rbp)  # imm = 0x5FC5479F
	jne	.LBB135_7
.LBB135_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_6
.Lfunc_end135:
	.size	compare_pic_by_lt_pic_num_asc.72, .Lfunc_end135-compare_pic_by_lt_pic_num_asc.72
	.cfi_endproc
                                        # -- End function
	.globl	update_ltref_list.73    # -- Begin function update_ltref_list.73
	.p2align	4, 0x90
	.type	update_ltref_list.73,@function
update_ltref_list.73:                   # @update_ltref_list.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1919836426, -12(%rbp)  # imm = 0x726E610A
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB136_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB136_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_long_term_reference
	cmpl	$0, %eax
	je	.LBB136_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB136_4:                              # %if.end
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_5
.LBB136_5:                              # %for.inc
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_1
.LBB136_6:                              # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+36
.LBB136_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB136_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB136_7 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB136_7
.LBB136_9:                              # %while.end
	cmpl	$1919836426, -12(%rbp)  # imm = 0x726E610A
	jne	.LBB136_11
.LBB136_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_10
.Lfunc_end136:
	.size	update_ltref_list.73, .Lfunc_end136-update_ltref_list.73
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb.74
	.type	remove_unused_frame_from_dpb.74,@function
remove_unused_frame_from_dpb.74:        # @remove_unused_frame_from_dpb.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$641263965, -20(%rbp)   # imm = 0x2638E95D
	movl	$0, -12(%rbp)
.LBB137_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB137_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	je	.LBB137_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB137_5
# %bb.4:                                # %if.then
	movl	-12(%rbp), %edi
	callq	remove_frame_from_dpb
	movl	$1, -16(%rbp)
	jmp	.LBB137_8
.LBB137_5:                              # %if.end
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_6
.LBB137_6:                              # %for.inc
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_1
.LBB137_7:                              # %for.end
	movl	$0, -16(%rbp)
.LBB137_8:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$641263965, -20(%rbp)   # imm = 0x2638E95D
	jne	.LBB137_10
.LBB137_9:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_9
.Lfunc_end137:
	.size	remove_unused_frame_from_dpb.74, .Lfunc_end137-remove_unused_frame_from_dpb.74
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.75 # -- Begin function alloc_storable_picture.75
	.p2align	4, 0x90
	.type	alloc_storable_picture.75,@function
alloc_storable_picture.75:              # @alloc_storable_picture.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$606583074, -40(%rbp)   # imm = 0x2427B922
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB138_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB138_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB138_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB138_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB138_6
.LBB138_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB138_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB138_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB138_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB138_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB138_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$606583074, -40(%rbp)   # imm = 0x2427B922
	jne	.LBB138_12
.LBB138_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_11
.Lfunc_end138:
	.size	alloc_storable_picture.75, .Lfunc_end138-alloc_storable_picture.75
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.76
	.type	mm_unmark_long_term_for_reference.76,@function
mm_unmark_long_term_for_reference.76:   # @mm_unmark_long_term_for_reference.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1474614997, -12(%rbp)  # imm = 0x57E4D6D5
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB139_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB139_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB139_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB139_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB139_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB139_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB139_7:                              # %if.end
                                        #   in Loop: Header=BB139_1 Depth=1
	jmp	.LBB139_8
.LBB139_8:                              # %if.end14
                                        #   in Loop: Header=BB139_1 Depth=1
	jmp	.LBB139_24
.LBB139_9:                              # %if.else
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB139_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB139_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB139_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB139_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB139_14:                             # %if.end57
	jmp	.LBB139_27
.LBB139_15:                             # %if.end58
                                        #   in Loop: Header=BB139_1 Depth=1
	jmp	.LBB139_16
.LBB139_16:                             # %if.end59
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB139_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB139_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB139_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB139_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB139_21:                             # %if.end106
	jmp	.LBB139_27
.LBB139_22:                             # %if.end107
                                        #   in Loop: Header=BB139_1 Depth=1
	jmp	.LBB139_23
.LBB139_23:                             # %if.end108
                                        #   in Loop: Header=BB139_1 Depth=1
	jmp	.LBB139_24
.LBB139_24:                             # %if.end109
                                        #   in Loop: Header=BB139_1 Depth=1
	jmp	.LBB139_25
.LBB139_25:                             # %for.inc
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_1
.LBB139_26:                             # %for.end.loopexit
	jmp	.LBB139_27
.LBB139_27:                             # %for.end
	cmpl	$1474614997, -12(%rbp)  # imm = 0x57E4D6D5
	jne	.LBB139_29
.LBB139_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_28
.Lfunc_end139:
	.size	mm_unmark_long_term_for_reference.76, .Lfunc_end139-mm_unmark_long_term_for_reference.76
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.77    # -- Begin function gen_field_ref_ids.77
	.p2align	4, 0x90
	.type	gen_field_ref_ids.77,@function
gen_field_ref_ids.77:                   # @gen_field_ref_ids.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1768904360, -28(%rbp)  # imm = 0x696F56A8
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB140_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	$0, -4(%rbp)
.LBB140_3:                              # %for.cond1
                                        #   Parent Loop BB140_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB140_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB140_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB140_7
.LBB140_6:                              # %cond.false
                                        #   in Loop: Header=BB140_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB140_7
.LBB140_7:                              # %cond.end
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB140_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB140_10
.LBB140_9:                              # %cond.false32
                                        #   in Loop: Header=BB140_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB140_10
.LBB140_10:                             # %cond.end33
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_3
.LBB140_12:                             # %for.end
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_13
.LBB140_13:                             # %for.inc45
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB140_1
.LBB140_14:                             # %for.end47
	cmpl	$1768904360, -28(%rbp)  # imm = 0x696F56A8
	jne	.LBB140_16
.LBB140_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_15
.Lfunc_end140:
	.size	gen_field_ref_ids.77, .Lfunc_end140-gen_field_ref_ids.77
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.78    # -- Begin function compute_colocated.78
	.p2align	4, 0x90
	.type	compute_colocated.78,@function
compute_colocated.78:                   # @compute_colocated.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$526434255, -72(%rbp)   # imm = 0x1F60BFCF
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB141_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB141_11
.LBB141_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB141_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB141_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB141_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB141_7
# %bb.6:                                # %if.then14
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB141_8
.LBB141_7:                              # %if.else17
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
.LBB141_8:                              # %if.end
	jmp	.LBB141_9
.LBB141_9:                              # %if.end20
	jmp	.LBB141_10
.LBB141_10:                             # %if.end21
	jmp	.LBB141_11
.LBB141_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB141_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB141_29
.LBB141_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB141_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB141_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB141_14 Depth=1
	movl	$0, -16(%rbp)
.LBB141_16:                             # %for.cond27
                                        #   Parent Loop BB141_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB141_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB141_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB141_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB141_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB141_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB141_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB141_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB141_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB141_22
.LBB141_21:                             # %if.else160
                                        #   in Loop: Header=BB141_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB141_22:                             # %if.end283
                                        #   in Loop: Header=BB141_16 Depth=2
	jmp	.LBB141_24
.LBB141_23:                             # %if.else284
                                        #   in Loop: Header=BB141_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB141_24:                             # %if.end391
                                        #   in Loop: Header=BB141_16 Depth=2
	jmp	.LBB141_25
.LBB141_25:                             # %for.inc
                                        #   in Loop: Header=BB141_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_16
.LBB141_26:                             # %for.end
                                        #   in Loop: Header=BB141_14 Depth=1
	jmp	.LBB141_27
.LBB141_27:                             # %for.inc392
                                        #   in Loop: Header=BB141_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_14
.LBB141_28:                             # %for.end394
	jmp	.LBB141_29
.LBB141_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB141_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB141_241
.LBB141_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB141_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB141_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB141_32 Depth=1
	movl	$0, -12(%rbp)
.LBB141_34:                             # %for.cond408
                                        #   Parent Loop BB141_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB141_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB141_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_39
.LBB141_38:                             # %cond.false
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_39:                             # %cond.end
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_42
.LBB141_41:                             # %cond.false427
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_42:                             # %cond.end429
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_45
.LBB141_44:                             # %cond.false447
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_45:                             # %cond.end449
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_48
.LBB141_47:                             # %cond.false457
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_48:                             # %cond.end459
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_51
.LBB141_50:                             # %cond.false477
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_51:                             # %cond.end479
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_54
.LBB141_53:                             # %cond.false487
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_54:                             # %cond.end489
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_57
.LBB141_56:                             # %cond.false507
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_57:                             # %cond.end509
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_60
.LBB141_59:                             # %cond.false517
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_60:                             # %cond.end519
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_63
.LBB141_62:                             # %cond.false537
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_63:                             # %cond.end539
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_66
.LBB141_65:                             # %cond.false547
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_66:                             # %cond.end549
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB141_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB141_81
.LBB141_68:                             # %if.else569
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_71
.LBB141_70:                             # %cond.false576
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_71:                             # %cond.end578
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_74
.LBB141_73:                             # %cond.false586
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_74:                             # %cond.end588
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_77
.LBB141_76:                             # %cond.false604
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_77:                             # %cond.end606
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_80
.LBB141_79:                             # %cond.false614
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_80:                             # %cond.end616
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB141_81:                             # %if.end626
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_84
.LBB141_83:                             # %cond.false633
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_84:                             # %cond.end635
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_87
.LBB141_86:                             # %cond.false643
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_87:                             # %cond.end645
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB141_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB141_102
.LBB141_89:                             # %if.else665
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_92
.LBB141_91:                             # %cond.false672
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_92:                             # %cond.end674
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_95
.LBB141_94:                             # %cond.false682
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_95:                             # %cond.end684
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_98
.LBB141_97:                             # %cond.false700
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_98:                             # %cond.end702
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_101
.LBB141_100:                            # %cond.false710
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_101:                            # %cond.end712
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB141_102:                            # %if.end722
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB141_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB141_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB141_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB141_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB141_112
.LBB141_107:                            # %lor.rhs
                                        #   in Loop: Header=BB141_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB141_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB141_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB141_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB141_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB141_111:                            # %land.end
                                        #   in Loop: Header=BB141_34 Depth=2
.LBB141_112:                            # %lor.end
                                        #   in Loop: Header=BB141_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB141_113:                            # %if.end814
                                        #   in Loop: Header=BB141_34 Depth=2
	jmp	.LBB141_236
.LBB141_114:                            # %if.else815
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_117
.LBB141_116:                            # %cond.false822
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_117:                            # %cond.end824
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_120
.LBB141_119:                            # %cond.false832
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_120:                            # %cond.end834
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_123
.LBB141_122:                            # %cond.false851
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_123:                            # %cond.end853
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_126
.LBB141_125:                            # %cond.false861
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_126:                            # %cond.end863
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_129
.LBB141_128:                            # %cond.false881
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_129:                            # %cond.end883
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_132
.LBB141_131:                            # %cond.false891
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_132:                            # %cond.end893
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_135
.LBB141_134:                            # %cond.false911
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_135:                            # %cond.end913
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_138
.LBB141_137:                            # %cond.false921
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_138:                            # %cond.end923
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_141
.LBB141_140:                            # %cond.false941
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_141:                            # %cond.end943
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_144
.LBB141_143:                            # %cond.false951
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_144:                            # %cond.end953
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_147
.LBB141_146:                            # %cond.false968
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_147:                            # %cond.end970
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_150
.LBB141_149:                            # %cond.false978
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_150:                            # %cond.end980
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_153
.LBB141_152:                            # %cond.false996
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_153:                            # %cond.end998
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_156
.LBB141_155:                            # %cond.false1006
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_156:                            # %cond.end1008
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_159
.LBB141_158:                            # %cond.false1023
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_159:                            # %cond.end1025
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_162
.LBB141_161:                            # %cond.false1033
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_162:                            # %cond.end1035
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB141_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB141_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB141_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB141_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB141_172
.LBB141_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB141_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB141_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB141_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB141_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB141_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB141_171:                            # %land.end1133
                                        #   in Loop: Header=BB141_34 Depth=2
.LBB141_172:                            # %lor.end1134
                                        #   in Loop: Header=BB141_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB141_173:                            # %if.end1142
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_176
.LBB141_175:                            # %cond.false1149
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_176:                            # %cond.end1151
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_179
.LBB141_178:                            # %cond.false1159
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_179:                            # %cond.end1161
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_182
.LBB141_181:                            # %cond.false1178
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_182:                            # %cond.end1180
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_185
.LBB141_184:                            # %cond.false1188
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_185:                            # %cond.end1190
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_188
.LBB141_187:                            # %cond.false1208
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_188:                            # %cond.end1210
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_191
.LBB141_190:                            # %cond.false1218
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_191:                            # %cond.end1220
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_194
.LBB141_193:                            # %cond.false1238
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_194:                            # %cond.end1240
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_197
.LBB141_196:                            # %cond.false1248
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_197:                            # %cond.end1250
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_200
.LBB141_199:                            # %cond.false1268
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_200:                            # %cond.end1270
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_203
.LBB141_202:                            # %cond.false1278
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_203:                            # %cond.end1280
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_206
.LBB141_205:                            # %cond.false1295
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_206:                            # %cond.end1297
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_209
.LBB141_208:                            # %cond.false1305
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_209:                            # %cond.end1307
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_212
.LBB141_211:                            # %cond.false1323
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_212:                            # %cond.end1325
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_215
.LBB141_214:                            # %cond.false1333
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_215:                            # %cond.end1335
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_218
.LBB141_217:                            # %cond.false1350
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_218:                            # %cond.end1352
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_221
.LBB141_220:                            # %cond.false1360
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_221:                            # %cond.end1362
                                        #   in Loop: Header=BB141_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB141_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB141_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB141_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB141_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB141_231
.LBB141_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB141_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB141_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB141_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB141_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB141_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB141_230:                            # %land.end1460
                                        #   in Loop: Header=BB141_34 Depth=2
.LBB141_231:                            # %lor.end1461
                                        #   in Loop: Header=BB141_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB141_232:                            # %if.end1469
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB141_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB141_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB141_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB141_235:                            # %if.end1522
                                        #   in Loop: Header=BB141_34 Depth=2
	jmp	.LBB141_236
.LBB141_236:                            # %if.end1523
                                        #   in Loop: Header=BB141_34 Depth=2
	jmp	.LBB141_237
.LBB141_237:                            # %for.inc1524
                                        #   in Loop: Header=BB141_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_34
.LBB141_238:                            # %for.end1526
                                        #   in Loop: Header=BB141_32 Depth=1
	jmp	.LBB141_239
.LBB141_239:                            # %for.inc1527
                                        #   in Loop: Header=BB141_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_32
.LBB141_240:                            # %for.end1529
	jmp	.LBB141_241
.LBB141_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB141_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB141_259
.LBB141_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB141_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB141_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB141_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB141_245 Depth=1
	movl	$0, -16(%rbp)
.LBB141_247:                            # %for.cond1546
                                        #   Parent Loop BB141_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB141_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB141_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB141_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB141_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB141_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB141_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB141_252
.LBB141_251:                            # %if.else1699
                                        #   in Loop: Header=BB141_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB141_252:                            # %if.end1829
                                        #   in Loop: Header=BB141_247 Depth=2
	jmp	.LBB141_253
.LBB141_253:                            # %if.end1830
                                        #   in Loop: Header=BB141_247 Depth=2
	jmp	.LBB141_254
.LBB141_254:                            # %for.inc1831
                                        #   in Loop: Header=BB141_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_247
.LBB141_255:                            # %for.end1833
                                        #   in Loop: Header=BB141_245 Depth=1
	jmp	.LBB141_256
.LBB141_256:                            # %for.inc1834
                                        #   in Loop: Header=BB141_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_245
.LBB141_257:                            # %for.end1836
	jmp	.LBB141_258
.LBB141_258:                            # %if.end1837
	jmp	.LBB141_259
.LBB141_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB141_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB141_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB141_260 Depth=1
	movl	$0, -16(%rbp)
.LBB141_262:                            # %for.cond1845
                                        #   Parent Loop BB141_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB141_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB141_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB141_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB141_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB141_314
.LBB141_265:                            # %if.then1856
                                        #   in Loop: Header=BB141_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_268
.LBB141_267:                            # %cond.false1863
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_268:                            # %cond.end1865
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_271
.LBB141_270:                            # %cond.false1873
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_271:                            # %cond.end1875
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_274
.LBB141_273:                            # %cond.false1893
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_274:                            # %cond.end1895
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_277
.LBB141_276:                            # %cond.false1903
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_277:                            # %cond.end1905
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_280
.LBB141_279:                            # %cond.false1923
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_280:                            # %cond.end1925
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_283
.LBB141_282:                            # %cond.false1933
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_283:                            # %cond.end1935
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_286
.LBB141_285:                            # %cond.false1953
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_286:                            # %cond.end1955
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_289
.LBB141_288:                            # %cond.false1963
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_289:                            # %cond.end1965
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_292
.LBB141_291:                            # %cond.false1983
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_292:                            # %cond.end1985
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_295
.LBB141_294:                            # %cond.false1993
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_295:                            # %cond.end1995
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_298
.LBB141_297:                            # %cond.false2011
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_298:                            # %cond.end2013
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_301
.LBB141_300:                            # %cond.false2021
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_301:                            # %cond.end2023
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_304
.LBB141_303:                            # %cond.false2039
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_304:                            # %cond.end2041
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_307
.LBB141_306:                            # %cond.false2049
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_307:                            # %cond.end2051
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_310
.LBB141_309:                            # %cond.false2067
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_310:                            # %cond.end2069
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB141_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB141_313
.LBB141_312:                            # %cond.false2077
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB141_313:                            # %cond.end2079
                                        #   in Loop: Header=BB141_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB141_315
.LBB141_314:                            # %if.else2089
                                        #   in Loop: Header=BB141_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB141_315:                            # %if.end2194
                                        #   in Loop: Header=BB141_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB141_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB141_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB141_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB141_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB141_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB141_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB141_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB141_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB141_325
.LBB141_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB141_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB141_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB141_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB141_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB141_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB141_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB141_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB141_324:                            # %land.end2285
                                        #   in Loop: Header=BB141_262 Depth=2
.LBB141_325:                            # %lor.end2286
                                        #   in Loop: Header=BB141_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB141_326:                            # %if.end2295
                                        #   in Loop: Header=BB141_262 Depth=2
	jmp	.LBB141_327
.LBB141_327:                            # %for.inc2296
                                        #   in Loop: Header=BB141_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_262
.LBB141_328:                            # %for.end2298
                                        #   in Loop: Header=BB141_260 Depth=1
	jmp	.LBB141_329
.LBB141_329:                            # %for.inc2299
                                        #   in Loop: Header=BB141_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_260
.LBB141_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB141_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB141_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB141_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB141_332 Depth=1
	movl	$0, -16(%rbp)
.LBB141_334:                            # %for.cond2312
                                        #   Parent Loop BB141_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB141_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB141_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB141_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB141_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB141_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB141_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB141_340
.LBB141_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB141_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB141_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB141_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB141_341
.LBB141_340:                            # %if.then2342
                                        #   in Loop: Header=BB141_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB141_345
.LBB141_341:                            # %if.else2363
                                        #   in Loop: Header=BB141_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB141_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB141_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB141_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB141_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB141_344:                            # %if.end2394
                                        #   in Loop: Header=BB141_334 Depth=2
	jmp	.LBB141_345
.LBB141_345:                            # %if.end2395
                                        #   in Loop: Header=BB141_334 Depth=2
	jmp	.LBB141_346
.LBB141_346:                            # %for.inc2396
                                        #   in Loop: Header=BB141_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_334
.LBB141_347:                            # %for.end2398
                                        #   in Loop: Header=BB141_332 Depth=1
	jmp	.LBB141_348
.LBB141_348:                            # %for.inc2399
                                        #   in Loop: Header=BB141_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_332
.LBB141_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB141_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB141_350 Depth=1
	movl	$0, -16(%rbp)
.LBB141_352:                            # %for.cond2409
                                        #   Parent Loop BB141_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB141_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB141_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB141_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB141_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB141_360
.LBB141_356:                            # %cond.false2429
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB141_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	$127, %eax
	jmp	.LBB141_359
.LBB141_358:                            # %cond.false2441
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB141_359:                            # %cond.end2450
                                        #   in Loop: Header=BB141_352 Depth=2
.LBB141_360:                            # %cond.end2452
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB141_377
.LBB141_361:                            # %if.else2454
                                        #   in Loop: Header=BB141_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB141_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB141_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB141_368
.LBB141_364:                            # %cond.false2468
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB141_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	$127, %eax
	jmp	.LBB141_367
.LBB141_366:                            # %cond.false2480
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB141_367:                            # %cond.end2489
                                        #   in Loop: Header=BB141_352 Depth=2
.LBB141_368:                            # %cond.end2491
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB141_376
.LBB141_369:                            # %if.else2493
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB141_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB141_375
.LBB141_371:                            # %cond.false2504
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB141_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	$127, %eax
	jmp	.LBB141_374
.LBB141_373:                            # %cond.false2516
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB141_374:                            # %cond.end2525
                                        #   in Loop: Header=BB141_352 Depth=2
.LBB141_375:                            # %cond.end2527
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB141_376:                            # %if.end2529
                                        #   in Loop: Header=BB141_352 Depth=2
	jmp	.LBB141_377
.LBB141_377:                            # %if.end2530
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB141_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB141_383
.LBB141_379:                            # %cond.false2546
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB141_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	$127, %eax
	jmp	.LBB141_382
.LBB141_381:                            # %cond.false2562
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB141_382:                            # %cond.end2575
                                        #   in Loop: Header=BB141_352 Depth=2
.LBB141_383:                            # %cond.end2577
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB141_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB141_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB141_390
.LBB141_386:                            # %cond.false2592
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB141_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB141_389
.LBB141_388:                            # %cond.false2599
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB141_389:                            # %cond.end2603
                                        #   in Loop: Header=BB141_352 Depth=2
.LBB141_390:                            # %cond.end2605
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB141_392
.LBB141_391:                            # %if.else2611
                                        #   in Loop: Header=BB141_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB141_392:                            # %if.end2617
                                        #   in Loop: Header=BB141_352 Depth=2
	jmp	.LBB141_393
.LBB141_393:                            # %for.inc2618
                                        #   in Loop: Header=BB141_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_352
.LBB141_394:                            # %for.end2620
                                        #   in Loop: Header=BB141_350 Depth=1
	jmp	.LBB141_395
.LBB141_395:                            # %for.inc2621
                                        #   in Loop: Header=BB141_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_350
.LBB141_396:                            # %for.end2623
	jmp	.LBB141_397
.LBB141_397:                            # %if.end2624
	cmpl	$526434255, -72(%rbp)   # imm = 0x1F60BFCF
	jne	.LBB141_399
.LBB141_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_398
.Lfunc_end141:
	.size	compute_colocated.78, .Lfunc_end141-compute_colocated.78
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.79
	.type	reorder_long_term.79,@function
reorder_long_term.79:                   # @reorder_long_term.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$329662161, -44(%rbp)   # imm = 0x13A63ED1
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB142_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB142_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB142_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB142_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_1
.LBB142_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB142_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB142_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB142_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB142_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB142_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB142_9
.LBB142_8:                              # %if.then
                                        #   in Loop: Header=BB142_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB142_9:                              # %if.end
                                        #   in Loop: Header=BB142_5 Depth=1
	jmp	.LBB142_10
.LBB142_10:                             # %for.inc19
                                        #   in Loop: Header=BB142_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_5
.LBB142_11:                             # %for.end21
	cmpl	$329662161, -44(%rbp)   # imm = 0x13A63ED1
	jne	.LBB142_13
.LBB142_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_12
.Lfunc_end142:
	.size	reorder_long_term.79, .Lfunc_end142-reorder_long_term.79
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.80 # -- Begin function replace_top_pic_with_frame.80
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.80,@function
replace_top_pic_with_frame.80:          # @replace_top_pic_with_frame.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1867340111, -32(%rbp)  # imm = 0x6F4D594F
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB143_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB143_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB143_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB143_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB143_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB143_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB143_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB143_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB143_10
.LBB143_7:                              # %if.end14
                                        #   in Loop: Header=BB143_3 Depth=1
	jmp	.LBB143_8
.LBB143_8:                              # %for.inc
                                        #   in Loop: Header=BB143_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB143_3
.LBB143_9:                              # %for.end.loopexit
	jmp	.LBB143_10
.LBB143_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB143_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB143_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB143_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB143_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB143_15:                             # %if.end26
	jmp	.LBB143_16
.LBB143_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1867340111, -32(%rbp)  # imm = 0x6F4D594F
	jne	.LBB143_18
.LBB143_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_17
.Lfunc_end143:
	.size	replace_top_pic_with_frame.80, .Lfunc_end143-replace_top_pic_with_frame.80
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.81
	.type	get_pic_num_x.81,@function
get_pic_num_x.81:                       # @get_pic_num_x.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1630292331, -32(%rbp)  # imm = 0x612C496B
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB144_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB144_3
.LBB144_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB144_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1630292331, -32(%rbp)  # imm = 0x612C496B
	jne	.LBB144_5
.LBB144_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_4
.Lfunc_end144:
	.size	get_pic_num_x.81, .Lfunc_end144-get_pic_num_x.81
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.82
	.type	get_smallest_poc.82,@function
get_smallest_poc.82:                    # @get_smallest_poc.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$303288280, -20(%rbp)   # imm = 0x1213CFD8
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB145_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB145_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB145_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB145_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB145_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB145_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB145_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB145_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB145_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB145_7:                              # %if.end10
                                        #   in Loop: Header=BB145_3 Depth=1
	jmp	.LBB145_8
.LBB145_8:                              # %for.inc
                                        #   in Loop: Header=BB145_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB145_3
.LBB145_9:                              # %for.end
	cmpl	$303288280, -20(%rbp)   # imm = 0x1213CFD8
	jne	.LBB145_11
.LBB145_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_10
.Lfunc_end145:
	.size	get_smallest_poc.82, .Lfunc_end145-get_smallest_poc.82
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx.83 # -- Begin function mm_update_max_long_term_frame_idx.83
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx.83,@function
mm_update_max_long_term_frame_idx.83:   # @mm_update_max_long_term_frame_idx.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1391585182, -8(%rbp)   # imm = 0x52F1E79E
	movl	%edi, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movl	%eax, dpb+44
	movl	$0, -4(%rbp)
.LBB146_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB146_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB146_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	dpb+44, %eax
	jle	.LBB146_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB146_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB146_4:                              # %if.end
                                        #   in Loop: Header=BB146_1 Depth=1
	jmp	.LBB146_5
.LBB146_5:                              # %for.inc
                                        #   in Loop: Header=BB146_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB146_1
.LBB146_6:                              # %for.end
	cmpl	$1391585182, -8(%rbp)   # imm = 0x52F1E79E
	jne	.LBB146_8
.LBB146_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_7
.Lfunc_end146:
	.size	mm_update_max_long_term_frame_idx.83, .Lfunc_end146-mm_update_max_long_term_frame_idx.83
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list.84      # -- Begin function update_ref_list.84
	.p2align	4, 0x90
	.type	update_ref_list.84,@function
update_ref_list.84:                     # @update_ref_list.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$376306028, -12(%rbp)   # imm = 0x166DF96C
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB147_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB147_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB147_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_short_term_reference
	cmpl	$0, %eax
	je	.LBB147_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB147_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB147_4:                              # %if.end
                                        #   in Loop: Header=BB147_1 Depth=1
	jmp	.LBB147_5
.LBB147_5:                              # %for.inc
                                        #   in Loop: Header=BB147_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB147_1
.LBB147_6:                              # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+32
.LBB147_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB147_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB147_7
.LBB147_9:                              # %while.end
	cmpl	$376306028, -12(%rbp)   # imm = 0x166DF96C
	jne	.LBB147_11
.LBB147_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_10
.Lfunc_end147:
	.size	update_ref_list.84, .Lfunc_end147-update_ref_list.84
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.85
	.type	get_smallest_poc.85,@function
get_smallest_poc.85:                    # @get_smallest_poc.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1974063282, -20(%rbp)  # imm = 0x75A9D0B2
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB148_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB148_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB148_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB148_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB148_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB148_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB148_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB148_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB148_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB148_7:                              # %if.end10
                                        #   in Loop: Header=BB148_3 Depth=1
	jmp	.LBB148_8
.LBB148_8:                              # %for.inc
                                        #   in Loop: Header=BB148_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_3
.LBB148_9:                              # %for.end
	cmpl	$1974063282, -20(%rbp)  # imm = 0x75A9D0B2
	jne	.LBB148_11
.LBB148_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_10
.Lfunc_end148:
	.size	get_smallest_poc.85, .Lfunc_end148-get_smallest_poc.85
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.86
	.type	reorder_short_term.86,@function
reorder_short_term.86:                  # @reorder_short_term.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$666541279, -44(%rbp)   # imm = 0x27BA9CDF
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB149_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB149_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB149_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB149_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB149_1
.LBB149_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB149_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB149_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB149_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB149_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB149_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB149_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB149_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB149_10
.LBB149_9:                              # %if.then17
                                        #   in Loop: Header=BB149_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB149_10:                             # %if.end
                                        #   in Loop: Header=BB149_5 Depth=1
	jmp	.LBB149_11
.LBB149_11:                             # %if.end23
                                        #   in Loop: Header=BB149_5 Depth=1
	jmp	.LBB149_12
.LBB149_12:                             # %for.inc24
                                        #   in Loop: Header=BB149_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB149_5
.LBB149_13:                             # %for.end26
	cmpl	$666541279, -44(%rbp)   # imm = 0x27BA9CDF
	jne	.LBB149_15
.LBB149_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_14
.Lfunc_end149:
	.size	reorder_short_term.86, .Lfunc_end149-reorder_short_term.86
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.87
	.type	get_smallest_poc.87,@function
get_smallest_poc.87:                    # @get_smallest_poc.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$883926667, -20(%rbp)   # imm = 0x34AFA68B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB150_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB150_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB150_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB150_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB150_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB150_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB150_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB150_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB150_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB150_7:                              # %if.end10
                                        #   in Loop: Header=BB150_3 Depth=1
	jmp	.LBB150_8
.LBB150_8:                              # %for.inc
                                        #   in Loop: Header=BB150_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_3
.LBB150_9:                              # %for.end
	cmpl	$883926667, -20(%rbp)   # imm = 0x34AFA68B
	jne	.LBB150_11
.LBB150_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_10
.Lfunc_end150:
	.size	get_smallest_poc.87, .Lfunc_end150-get_smallest_poc.87
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.88 # -- Begin function replace_top_pic_with_frame.88
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.88,@function
replace_top_pic_with_frame.88:          # @replace_top_pic_with_frame.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1022915656, -32(%rbp)  # imm = 0x3CF87448
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB151_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB151_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB151_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB151_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB151_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB151_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB151_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB151_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB151_10
.LBB151_7:                              # %if.end14
                                        #   in Loop: Header=BB151_3 Depth=1
	jmp	.LBB151_8
.LBB151_8:                              # %for.inc
                                        #   in Loop: Header=BB151_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_3
.LBB151_9:                              # %for.end.loopexit
	jmp	.LBB151_10
.LBB151_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB151_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB151_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB151_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB151_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB151_15:                             # %if.end26
	jmp	.LBB151_16
.LBB151_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1022915656, -32(%rbp)  # imm = 0x3CF87448
	jne	.LBB151_18
.LBB151_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_17
.Lfunc_end151:
	.size	replace_top_pic_with_frame.88, .Lfunc_end151-replace_top_pic_with_frame.88
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.89 # -- Begin function alloc_storable_picture.89
	.p2align	4, 0x90
	.type	alloc_storable_picture.89,@function
alloc_storable_picture.89:              # @alloc_storable_picture.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1559611500, -36(%rbp)  # imm = 0x5CF5C86C
	movl	%edi, -40(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB152_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB152_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB152_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB152_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB152_6
.LBB152_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB152_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB152_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB152_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB152_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB152_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1559611500, -36(%rbp)  # imm = 0x5CF5C86C
	jne	.LBB152_12
.LBB152_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_11
.Lfunc_end152:
	.size	alloc_storable_picture.89, .Lfunc_end152-alloc_storable_picture.89
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.90
	.type	remove_frame_from_dpb.90,@function
remove_frame_from_dpb.90:               # @remove_frame_from_dpb.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$318353724, -20(%rbp)   # imm = 0x12F9B13C
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB153_6
# %bb.1:                                # %entry
	movq	.LJTI153_0(,%rax,8), %rax
	jmpq	*%rax
.LBB153_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB153_7
.LBB153_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB153_7
.LBB153_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB153_7
.LBB153_5:                              # %sw.bb10
	jmp	.LBB153_7
.LBB153_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB153_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB153_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB153_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB153_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB153_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_8
.LBB153_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$318353724, -20(%rbp)   # imm = 0x12F9B13C
	jne	.LBB153_13
.LBB153_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_12
.Lfunc_end153:
	.size	remove_frame_from_dpb.90, .Lfunc_end153-remove_frame_from_dpb.90
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI153_0:
	.quad	.LBB153_5
	.quad	.LBB153_4
	.quad	.LBB153_3
	.quad	.LBB153_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function reorder_long_term.91
	.type	reorder_long_term.91,@function
reorder_long_term.91:                   # @reorder_long_term.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1077191804, -44(%rbp)  # imm = 0x4034A47C
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB154_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB154_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB154_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_1
.LBB154_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB154_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB154_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB154_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB154_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB154_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB154_9
.LBB154_8:                              # %if.then
                                        #   in Loop: Header=BB154_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB154_9:                              # %if.end
                                        #   in Loop: Header=BB154_5 Depth=1
	jmp	.LBB154_10
.LBB154_10:                             # %for.inc19
                                        #   in Loop: Header=BB154_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_5
.LBB154_11:                             # %for.end21
	cmpl	$1077191804, -44(%rbp)  # imm = 0x4034A47C
	jne	.LBB154_13
.LBB154_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_12
.Lfunc_end154:
	.size	reorder_long_term.91, .Lfunc_end154-reorder_long_term.91
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.92
	.type	compare_fs_by_frame_num_desc.92,@function
compare_fs_by_frame_num_desc.92:        # @compare_fs_by_frame_num_desc.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1086667080, -16(%rbp)  # imm = 0x40C53948
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB155_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB155_5
.LBB155_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB155_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB155_5
.LBB155_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB155_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1086667080, -16(%rbp)  # imm = 0x40C53948
	jne	.LBB155_7
.LBB155_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_6
.Lfunc_end155:
	.size	compare_fs_by_frame_num_desc.92, .Lfunc_end155-compare_fs_by_frame_num_desc.92
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.93      # -- Begin function alloc_colocated.93
	.p2align	4, 0x90
	.type	alloc_colocated.93,@function
alloc_colocated.93:                     # @alloc_colocated.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2098223003, -32(%rbp)  # imm = 0x7D10579B
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB156_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB156_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB156_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB156_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$2098223003, -32(%rbp)  # imm = 0x7D10579B
	jne	.LBB156_6
.LBB156_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_5
.Lfunc_end156:
	.size	alloc_colocated.93, .Lfunc_end156-alloc_colocated.93
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.94
	.type	get_smallest_poc.94,@function
get_smallest_poc.94:                    # @get_smallest_poc.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1680961796, -20(%rbp)  # imm = 0x64317104
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB157_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB157_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB157_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB157_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB157_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB157_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB157_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB157_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB157_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB157_7:                              # %if.end10
                                        #   in Loop: Header=BB157_3 Depth=1
	jmp	.LBB157_8
.LBB157_8:                              # %for.inc
                                        #   in Loop: Header=BB157_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_3
.LBB157_9:                              # %for.end
	cmpl	$1680961796, -20(%rbp)  # imm = 0x64317104
	jne	.LBB157_11
.LBB157_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_10
.Lfunc_end157:
	.size	get_smallest_poc.94, .Lfunc_end157-get_smallest_poc.94
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.95    # -- Begin function gen_field_ref_ids.95
	.p2align	4, 0x90
	.type	gen_field_ref_ids.95,@function
gen_field_ref_ids.95:                   # @gen_field_ref_ids.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1128265384, -28(%rbp)  # imm = 0x433FF6A8
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB158_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB158_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB158_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB158_1 Depth=1
	movl	$0, -4(%rbp)
.LBB158_3:                              # %for.cond1
                                        #   Parent Loop BB158_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB158_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB158_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB158_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB158_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB158_7
.LBB158_6:                              # %cond.false
                                        #   in Loop: Header=BB158_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB158_7
.LBB158_7:                              # %cond.end
                                        #   in Loop: Header=BB158_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB158_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB158_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB158_10
.LBB158_9:                              # %cond.false32
                                        #   in Loop: Header=BB158_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB158_10
.LBB158_10:                             # %cond.end33
                                        #   in Loop: Header=BB158_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB158_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB158_3
.LBB158_12:                             # %for.end
                                        #   in Loop: Header=BB158_1 Depth=1
	jmp	.LBB158_13
.LBB158_13:                             # %for.inc45
                                        #   in Loop: Header=BB158_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB158_1
.LBB158_14:                             # %for.end47
	cmpl	$1128265384, -28(%rbp)  # imm = 0x433FF6A8
	jne	.LBB158_16
.LBB158_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_15
.Lfunc_end158:
	.size	gen_field_ref_ids.95, .Lfunc_end158-gen_field_ref_ids.95
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.96
	.type	get_smallest_poc.96,@function
get_smallest_poc.96:                    # @get_smallest_poc.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1283052905, -20(%rbp)  # imm = 0x4C79D569
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB159_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB159_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB159_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB159_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB159_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB159_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB159_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB159_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB159_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB159_7:                              # %if.end10
                                        #   in Loop: Header=BB159_3 Depth=1
	jmp	.LBB159_8
.LBB159_8:                              # %for.inc
                                        #   in Loop: Header=BB159_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB159_3
.LBB159_9:                              # %for.end
	cmpl	$1283052905, -20(%rbp)  # imm = 0x4C79D569
	jne	.LBB159_11
.LBB159_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_10
.Lfunc_end159:
	.size	get_smallest_poc.96, .Lfunc_end159-get_smallest_poc.96
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.97
	.type	compare_fs_by_poc_asc.97,@function
compare_fs_by_poc_asc.97:               # @compare_fs_by_poc_asc.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1047818188, -16(%rbp)  # imm = 0x3E746FCC
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB160_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB160_5
.LBB160_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB160_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB160_5
.LBB160_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB160_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1047818188, -16(%rbp)  # imm = 0x3E746FCC
	jne	.LBB160_7
.LBB160_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_6
.Lfunc_end160:
	.size	compare_fs_by_poc_asc.97, .Lfunc_end160-compare_fs_by_poc_asc.97
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.98
	.type	reorder_short_term.98,@function
reorder_short_term.98:                  # @reorder_short_term.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$661684904, -44(%rbp)   # imm = 0x277082A8
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB161_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB161_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB161_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB161_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_1
.LBB161_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB161_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB161_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB161_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB161_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB161_10
.LBB161_9:                              # %if.then17
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB161_10:                             # %if.end
                                        #   in Loop: Header=BB161_5 Depth=1
	jmp	.LBB161_11
.LBB161_11:                             # %if.end23
                                        #   in Loop: Header=BB161_5 Depth=1
	jmp	.LBB161_12
.LBB161_12:                             # %for.inc24
                                        #   in Loop: Header=BB161_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_5
.LBB161_13:                             # %for.end26
	cmpl	$661684904, -44(%rbp)   # imm = 0x277082A8
	jne	.LBB161_15
.LBB161_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_14
.Lfunc_end161:
	.size	reorder_short_term.98, .Lfunc_end161-reorder_short_term.98
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.99
	.type	reorder_long_term.99,@function
reorder_long_term.99:                   # @reorder_long_term.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2035066247, -44(%rbp)  # imm = 0x794CA587
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB162_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB162_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB162_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB162_1
.LBB162_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB162_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB162_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB162_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB162_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB162_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB162_9
.LBB162_8:                              # %if.then
                                        #   in Loop: Header=BB162_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB162_9:                              # %if.end
                                        #   in Loop: Header=BB162_5 Depth=1
	jmp	.LBB162_10
.LBB162_10:                             # %for.inc19
                                        #   in Loop: Header=BB162_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB162_5
.LBB162_11:                             # %for.end21
	cmpl	$2035066247, -44(%rbp)  # imm = 0x794CA587
	jne	.LBB162_13
.LBB162_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_12
.Lfunc_end162:
	.size	reorder_long_term.99, .Lfunc_end162-reorder_long_term.99
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.100
	.type	get_long_term_pic.100,@function
get_long_term_pic.100:                  # @get_long_term_pic.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1817654143, -28(%rbp)  # imm = 0x6C57337F
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB163_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB163_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB163_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB163_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB163_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB163_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB163_23
.LBB163_7:                              # %if.end
                                        #   in Loop: Header=BB163_1 Depth=1
	jmp	.LBB163_8
.LBB163_8:                              # %if.end14
                                        #   in Loop: Header=BB163_1 Depth=1
	jmp	.LBB163_20
.LBB163_9:                              # %if.else
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB163_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB163_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB163_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB163_23
.LBB163_13:                             # %if.end34
                                        #   in Loop: Header=BB163_1 Depth=1
	jmp	.LBB163_14
.LBB163_14:                             # %if.end35
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB163_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB163_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB163_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB163_23
.LBB163_18:                             # %if.end56
                                        #   in Loop: Header=BB163_1 Depth=1
	jmp	.LBB163_19
.LBB163_19:                             # %if.end57
                                        #   in Loop: Header=BB163_1 Depth=1
	jmp	.LBB163_20
.LBB163_20:                             # %if.end58
                                        #   in Loop: Header=BB163_1 Depth=1
	jmp	.LBB163_21
.LBB163_21:                             # %for.inc
                                        #   in Loop: Header=BB163_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_1
.LBB163_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB163_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1817654143, -28(%rbp)  # imm = 0x6C57337F
	jne	.LBB163_25
.LBB163_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_24
.Lfunc_end163:
	.size	get_long_term_pic.100, .Lfunc_end163-get_long_term_pic.100
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.101 # -- Begin function replace_top_pic_with_frame.101
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.101,@function
replace_top_pic_with_frame.101:         # @replace_top_pic_with_frame.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2083325331, -32(%rbp)  # imm = 0x7C2D0593
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB164_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB164_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB164_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB164_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB164_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB164_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB164_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB164_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB164_10
.LBB164_7:                              # %if.end14
                                        #   in Loop: Header=BB164_3 Depth=1
	jmp	.LBB164_8
.LBB164_8:                              # %for.inc
                                        #   in Loop: Header=BB164_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB164_3
.LBB164_9:                              # %for.end.loopexit
	jmp	.LBB164_10
.LBB164_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB164_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB164_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB164_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB164_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB164_15:                             # %if.end26
	jmp	.LBB164_16
.LBB164_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$2083325331, -32(%rbp)  # imm = 0x7C2D0593
	jne	.LBB164_18
.LBB164_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_17
.Lfunc_end164:
	.size	replace_top_pic_with_frame.101, .Lfunc_end164-replace_top_pic_with_frame.101
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.102  # -- Begin function fill_frame_num_gap.102
	.p2align	4, 0x90
	.type	fill_frame_num_gap.102,@function
fill_frame_num_gap.102:                 # @fill_frame_num_gap.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$341657298, -32(%rbp)   # imm = 0x145D46D2
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -36(%rbp)
.LBB165_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB165_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB165_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB165_1
.LBB165_3:                              # %while.end
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$341657298, -32(%rbp)   # imm = 0x145D46D2
	jne	.LBB165_5
.LBB165_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_4
.Lfunc_end165:
	.size	fill_frame_num_gap.102, .Lfunc_end165-fill_frame_num_gap.102
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.103 # -- Begin function store_picture_in_dpb.103
	.p2align	4, 0x90
	.type	store_picture_in_dpb.103,@function
store_picture_in_dpb.103:               # @store_picture_in_dpb.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2127167882, -20(%rbp)  # imm = 0x7ECA018A
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB166_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB166_6
.LBB166_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB166_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB166_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB166_5:                              # %if.end
	jmp	.LBB166_6
.LBB166_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB166_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB166_23
.LBB166_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB166_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB166_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB166_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB166_14
.LBB166_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB166_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB166_20
.LBB166_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB166_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB166_18
.LBB166_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB166_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB166_19
.LBB166_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB166_50
.LBB166_19:                             # %if.end48
	jmp	.LBB166_20
.LBB166_20:                             # %if.end49
	jmp	.LBB166_21
.LBB166_21:                             # %if.end50
	jmp	.LBB166_22
.LBB166_22:                             # %if.end51
	jmp	.LBB166_23
.LBB166_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB166_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB166_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB166_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB166_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB166_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB166_29:                             # %if.end67
	jmp	.LBB166_30
.LBB166_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB166_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB166_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB166_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB166_30 Depth=1
	leaq	-16(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-24(%rbp), %eax
	je	.LBB166_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB166_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB166_35
.LBB166_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB166_50
.LBB166_35:                             # %if.end80
                                        #   in Loop: Header=BB166_30 Depth=1
	jmp	.LBB166_36
.LBB166_36:                             # %if.end81
                                        #   in Loop: Header=BB166_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB166_30
.LBB166_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB166_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB166_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB166_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB166_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB166_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB166_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB166_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB166_43:                             # %if.end94
                                        #   in Loop: Header=BB166_40 Depth=1
	jmp	.LBB166_44
.LBB166_44:                             # %for.inc
                                        #   in Loop: Header=BB166_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_40
.LBB166_45:                             # %for.end
	jmp	.LBB166_46
.LBB166_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB166_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB166_49
.LBB166_48:                             # %if.else104
	movq	$0, dpb+56
.LBB166_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB166_50:                             # %return
	cmpl	$2127167882, -20(%rbp)  # imm = 0x7ECA018A
	jne	.LBB166_52
.LBB166_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_51
.Lfunc_end166:
	.size	store_picture_in_dpb.103, .Lfunc_end166-store_picture_in_dpb.103
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.104   # -- Begin function gen_field_ref_ids.104
	.p2align	4, 0x90
	.type	gen_field_ref_ids.104,@function
gen_field_ref_ids.104:                  # @gen_field_ref_ids.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2084773465, -28(%rbp)  # imm = 0x7C431E59
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB167_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB167_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB167_1 Depth=1
	movl	$0, -8(%rbp)
.LBB167_3:                              # %for.cond1
                                        #   Parent Loop BB167_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB167_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB167_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB167_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB167_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB167_7
.LBB167_6:                              # %cond.false
                                        #   in Loop: Header=BB167_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB167_7
.LBB167_7:                              # %cond.end
                                        #   in Loop: Header=BB167_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB167_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB167_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB167_10
.LBB167_9:                              # %cond.false32
                                        #   in Loop: Header=BB167_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB167_10
.LBB167_10:                             # %cond.end33
                                        #   in Loop: Header=BB167_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB167_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_3
.LBB167_12:                             # %for.end
                                        #   in Loop: Header=BB167_1 Depth=1
	jmp	.LBB167_13
.LBB167_13:                             # %for.inc45
                                        #   in Loop: Header=BB167_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_1
.LBB167_14:                             # %for.end47
	cmpl	$2084773465, -28(%rbp)  # imm = 0x7C431E59
	jne	.LBB167_16
.LBB167_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_15
.Lfunc_end167:
	.size	gen_field_ref_ids.104, .Lfunc_end167-gen_field_ref_ids.104
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.105
	.type	gen_pic_list_from_frame_list.105,@function
gen_pic_list_from_frame_list.105:       # @gen_pic_list_from_frame_list.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$473060565, -64(%rbp)   # imm = 0x1C3254D5
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB168_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB168_3
.LBB168_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB168_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB168_28
# %bb.4:                                # %if.then1
	jmp	.LBB168_5
.LBB168_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB168_9 Depth 2
                                        #     Child Loop BB168_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB168_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB168_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB168_7:                              # %lor.end
                                        #   in Loop: Header=BB168_5 Depth=1
	testb	$1, %al
	jne	.LBB168_8
	jmp	.LBB168_27
.LBB168_8:                              # %while.body
                                        #   in Loop: Header=BB168_5 Depth=1
	jmp	.LBB168_9
.LBB168_9:                              # %for.cond
                                        #   Parent Loop BB168_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB168_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB168_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB168_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB168_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB168_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB168_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB168_17
.LBB168_13:                             # %if.end17
                                        #   in Loop: Header=BB168_9 Depth=2
	jmp	.LBB168_14
.LBB168_14:                             # %if.end18
                                        #   in Loop: Header=BB168_9 Depth=2
	jmp	.LBB168_15
.LBB168_15:                             # %for.inc
                                        #   in Loop: Header=BB168_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB168_9
.LBB168_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB168_5 Depth=1
	jmp	.LBB168_17
.LBB168_17:                             # %for.end
                                        #   in Loop: Header=BB168_5 Depth=1
	jmp	.LBB168_18
.LBB168_18:                             # %for.cond20
                                        #   Parent Loop BB168_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB168_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB168_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB168_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB168_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB168_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB168_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB168_26
.LBB168_22:                             # %if.end41
                                        #   in Loop: Header=BB168_18 Depth=2
	jmp	.LBB168_23
.LBB168_23:                             # %if.end42
                                        #   in Loop: Header=BB168_18 Depth=2
	jmp	.LBB168_24
.LBB168_24:                             # %for.inc43
                                        #   in Loop: Header=BB168_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB168_18
.LBB168_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB168_5 Depth=1
	jmp	.LBB168_26
.LBB168_26:                             # %for.end45
                                        #   in Loop: Header=BB168_5 Depth=1
	jmp	.LBB168_5
.LBB168_27:                             # %while.end
	jmp	.LBB168_28
.LBB168_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB168_53
# %bb.29:                               # %if.then48
	jmp	.LBB168_30
.LBB168_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB168_34 Depth 2
                                        #     Child Loop BB168_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB168_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB168_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB168_32:                             # %lor.end53
                                        #   in Loop: Header=BB168_30 Depth=1
	testb	$1, %al
	jne	.LBB168_33
	jmp	.LBB168_52
.LBB168_33:                             # %while.body54
                                        #   in Loop: Header=BB168_30 Depth=1
	jmp	.LBB168_34
.LBB168_34:                             # %for.cond55
                                        #   Parent Loop BB168_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB168_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB168_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB168_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB168_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB168_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB168_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB168_42
.LBB168_38:                             # %if.end77
                                        #   in Loop: Header=BB168_34 Depth=2
	jmp	.LBB168_39
.LBB168_39:                             # %if.end78
                                        #   in Loop: Header=BB168_34 Depth=2
	jmp	.LBB168_40
.LBB168_40:                             # %for.inc79
                                        #   in Loop: Header=BB168_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB168_34
.LBB168_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB168_30 Depth=1
	jmp	.LBB168_42
.LBB168_42:                             # %for.end81
                                        #   in Loop: Header=BB168_30 Depth=1
	jmp	.LBB168_43
.LBB168_43:                             # %for.cond82
                                        #   Parent Loop BB168_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB168_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB168_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB168_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB168_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB168_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB168_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB168_51
.LBB168_47:                             # %if.end104
                                        #   in Loop: Header=BB168_43 Depth=2
	jmp	.LBB168_48
.LBB168_48:                             # %if.end105
                                        #   in Loop: Header=BB168_43 Depth=2
	jmp	.LBB168_49
.LBB168_49:                             # %for.inc106
                                        #   in Loop: Header=BB168_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB168_43
.LBB168_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB168_30 Depth=1
	jmp	.LBB168_51
.LBB168_51:                             # %for.end108
                                        #   in Loop: Header=BB168_30 Depth=1
	jmp	.LBB168_30
.LBB168_52:                             # %while.end109
	jmp	.LBB168_53
.LBB168_53:                             # %if.end110
	cmpl	$473060565, -64(%rbp)   # imm = 0x1C3254D5
	jne	.LBB168_55
.LBB168_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_54
.Lfunc_end168:
	.size	gen_pic_list_from_frame_list.105, .Lfunc_end168-gen_pic_list_from_frame_list.105
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.106 # -- Begin function reorder_ref_pic_list.106
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.106,@function
reorder_ref_pic_list.106:               # @reorder_ref_pic_list.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$863489917, -60(%rbp)   # imm = 0x3377CF7D
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB169_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB169_3
.LBB169_2:                              # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB169_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB169_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB169_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB169_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB169_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB169_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB169_7:                              # %if.end9
                                        #   in Loop: Header=BB169_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB169_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB169_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB169_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB169_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB169_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB169_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB169_12
.LBB169_11:                             # %if.else28
                                        #   in Loop: Header=BB169_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB169_12:                             # %if.end33
                                        #   in Loop: Header=BB169_4 Depth=1
	jmp	.LBB169_17
.LBB169_13:                             # %if.else34
                                        #   in Loop: Header=BB169_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB169_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB169_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB169_16
.LBB169_15:                             # %if.else46
                                        #   in Loop: Header=BB169_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB169_16:                             # %if.end51
                                        #   in Loop: Header=BB169_4 Depth=1
	jmp	.LBB169_17
.LBB169_17:                             # %if.end52
                                        #   in Loop: Header=BB169_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB169_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB169_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB169_20
.LBB169_19:                             # %if.else56
                                        #   in Loop: Header=BB169_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB169_20:                             # %if.end57
                                        #   in Loop: Header=BB169_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB169_22
.LBB169_21:                             # %if.else58
                                        #   in Loop: Header=BB169_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB169_22:                             # %if.end61
                                        #   in Loop: Header=BB169_4 Depth=1
	jmp	.LBB169_23
.LBB169_23:                             # %for.inc
                                        #   in Loop: Header=BB169_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_4
.LBB169_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$863489917, -60(%rbp)   # imm = 0x3377CF7D
	jne	.LBB169_26
.LBB169_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_25
.Lfunc_end169:
	.size	reorder_ref_pic_list.106, .Lfunc_end169-reorder_ref_pic_list.106
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.107     # -- Begin function alloc_colocated.107
	.p2align	4, 0x90
	.type	alloc_colocated.107,@function
alloc_colocated.107:                    # @alloc_colocated.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$637494563, -32(%rbp)   # imm = 0x25FF6523
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB170_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB170_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB170_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB170_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$637494563, -32(%rbp)   # imm = 0x25FF6523
	jne	.LBB170_6
.LBB170_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_5
.Lfunc_end170:
	.size	alloc_colocated.107, .Lfunc_end170-alloc_colocated.107
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.108
	.type	get_short_term_pic.108,@function
get_short_term_pic.108:                 # @get_short_term_pic.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$370606806, -28(%rbp)   # imm = 0x161702D6
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB171_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB171_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB171_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB171_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB171_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB171_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB171_23
.LBB171_7:                              # %if.end
                                        #   in Loop: Header=BB171_1 Depth=1
	jmp	.LBB171_8
.LBB171_8:                              # %if.end14
                                        #   in Loop: Header=BB171_1 Depth=1
	jmp	.LBB171_20
.LBB171_9:                              # %if.else
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB171_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB171_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB171_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB171_23
.LBB171_13:                             # %if.end34
                                        #   in Loop: Header=BB171_1 Depth=1
	jmp	.LBB171_14
.LBB171_14:                             # %if.end35
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB171_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB171_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB171_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB171_23
.LBB171_18:                             # %if.end56
                                        #   in Loop: Header=BB171_1 Depth=1
	jmp	.LBB171_19
.LBB171_19:                             # %if.end57
                                        #   in Loop: Header=BB171_1 Depth=1
	jmp	.LBB171_20
.LBB171_20:                             # %if.end58
                                        #   in Loop: Header=BB171_1 Depth=1
	jmp	.LBB171_21
.LBB171_21:                             # %for.inc
                                        #   in Loop: Header=BB171_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB171_1
.LBB171_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB171_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$370606806, -28(%rbp)   # imm = 0x161702D6
	jne	.LBB171_25
.LBB171_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_24
.Lfunc_end171:
	.size	get_short_term_pic.108, .Lfunc_end171-get_short_term_pic.108
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term.109
	.type	mm_mark_current_picture_long_term.109,@function
mm_mark_current_picture_long_term.109:  # @mm_mark_current_picture_long_term.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1060023939, -20(%rbp)  # imm = 0x3F2EAE83
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB172_2
# %bb.1:                                # %if.then
	movl	-4(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB172_3
.LBB172_2:                              # %if.else
	movq	-16(%rbp), %rax
	movl	(%rax), %edi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rax
	movl	6364(%rax), %ecx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB172_3:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6372(%rcx)
	cmpl	$1060023939, -20(%rbp)  # imm = 0x3F2EAE83
	jne	.LBB172_5
.LBB172_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_4
.Lfunc_end172:
	.size	mm_mark_current_picture_long_term.109, .Lfunc_end172-mm_mark_current_picture_long_term.109
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.110
	.type	compare_fs_by_poc_desc.110,@function
compare_fs_by_poc_desc.110:             # @compare_fs_by_poc_desc.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1690281214, -16(%rbp)  # imm = 0x64BFA4FE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB173_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB173_5
.LBB173_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB173_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB173_5
.LBB173_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB173_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1690281214, -16(%rbp)  # imm = 0x64BFA4FE
	jne	.LBB173_7
.LBB173_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_6
.Lfunc_end173:
	.size	compare_fs_by_poc_desc.110, .Lfunc_end173-compare_fs_by_poc_desc.110
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.111
	.type	reorder_short_term.111,@function
reorder_short_term.111:                 # @reorder_short_term.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1322300951, -44(%rbp)  # imm = 0x4ED0B617
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB174_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB174_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB174_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB174_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB174_1
.LBB174_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB174_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB174_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB174_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB174_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB174_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB174_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB174_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB174_10
.LBB174_9:                              # %if.then17
                                        #   in Loop: Header=BB174_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB174_10:                             # %if.end
                                        #   in Loop: Header=BB174_5 Depth=1
	jmp	.LBB174_11
.LBB174_11:                             # %if.end23
                                        #   in Loop: Header=BB174_5 Depth=1
	jmp	.LBB174_12
.LBB174_12:                             # %for.inc24
                                        #   in Loop: Header=BB174_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB174_5
.LBB174_13:                             # %for.end26
	cmpl	$1322300951, -44(%rbp)  # imm = 0x4ED0B617
	jne	.LBB174_15
.LBB174_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_14
.Lfunc_end174:
	.size	reorder_short_term.111, .Lfunc_end174-reorder_short_term.111
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.112
	.type	compare_fs_by_poc_asc.112,@function
compare_fs_by_poc_asc.112:              # @compare_fs_by_poc_asc.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$499235460, -16(%rbp)   # imm = 0x1DC1BA84
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB175_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB175_5
.LBB175_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB175_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB175_5
.LBB175_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB175_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$499235460, -16(%rbp)   # imm = 0x1DC1BA84
	jne	.LBB175_7
.LBB175_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_6
.Lfunc_end175:
	.size	compare_fs_by_poc_asc.112, .Lfunc_end175-compare_fs_by_poc_asc.112
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.113 # -- Begin function reorder_ref_pic_list.113
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.113,@function
reorder_ref_pic_list.113:               # @reorder_ref_pic_list.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1626478464, -60(%rbp)  # imm = 0x60F21780
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB176_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB176_3
.LBB176_2:                              # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB176_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB176_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB176_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB176_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB176_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB176_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB176_7:                              # %if.end9
                                        #   in Loop: Header=BB176_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB176_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB176_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB176_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB176_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB176_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB176_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB176_12
.LBB176_11:                             # %if.else28
                                        #   in Loop: Header=BB176_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB176_12:                             # %if.end33
                                        #   in Loop: Header=BB176_4 Depth=1
	jmp	.LBB176_17
.LBB176_13:                             # %if.else34
                                        #   in Loop: Header=BB176_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB176_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB176_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB176_16
.LBB176_15:                             # %if.else46
                                        #   in Loop: Header=BB176_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB176_16:                             # %if.end51
                                        #   in Loop: Header=BB176_4 Depth=1
	jmp	.LBB176_17
.LBB176_17:                             # %if.end52
                                        #   in Loop: Header=BB176_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB176_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB176_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB176_20
.LBB176_19:                             # %if.else56
                                        #   in Loop: Header=BB176_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB176_20:                             # %if.end57
                                        #   in Loop: Header=BB176_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB176_22
.LBB176_21:                             # %if.else58
                                        #   in Loop: Header=BB176_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_long_term
.LBB176_22:                             # %if.end61
                                        #   in Loop: Header=BB176_4 Depth=1
	jmp	.LBB176_23
.LBB176_23:                             # %for.inc
                                        #   in Loop: Header=BB176_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_4
.LBB176_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1626478464, -60(%rbp)  # imm = 0x60F21780
	jne	.LBB176_26
.LBB176_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_25
.Lfunc_end176:
	.size	reorder_ref_pic_list.113, .Lfunc_end176-reorder_ref_pic_list.113
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.114
	.type	reorder_long_term.114,@function
reorder_long_term.114:                  # @reorder_long_term.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$292229491, -44(%rbp)   # imm = 0x116B1173
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB177_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB177_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB177_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB177_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_1
.LBB177_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB177_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB177_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB177_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB177_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB177_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB177_9
.LBB177_8:                              # %if.then
                                        #   in Loop: Header=BB177_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB177_9:                              # %if.end
                                        #   in Loop: Header=BB177_5 Depth=1
	jmp	.LBB177_10
.LBB177_10:                             # %for.inc19
                                        #   in Loop: Header=BB177_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_5
.LBB177_11:                             # %for.end21
	cmpl	$292229491, -44(%rbp)   # imm = 0x116B1173
	jne	.LBB177_13
.LBB177_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_12
.Lfunc_end177:
	.size	reorder_long_term.114, .Lfunc_end177-reorder_long_term.114
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.115   # -- Begin function gen_field_ref_ids.115
	.p2align	4, 0x90
	.type	gen_field_ref_ids.115,@function
gen_field_ref_ids.115:                  # @gen_field_ref_ids.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1499677109, -28(%rbp)  # imm = 0x596341B5
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB178_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB178_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB178_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB178_1 Depth=1
	movl	$0, -8(%rbp)
.LBB178_3:                              # %for.cond1
                                        #   Parent Loop BB178_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB178_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB178_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB178_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB178_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB178_7
.LBB178_6:                              # %cond.false
                                        #   in Loop: Header=BB178_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB178_7
.LBB178_7:                              # %cond.end
                                        #   in Loop: Header=BB178_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB178_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB178_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB178_10
.LBB178_9:                              # %cond.false32
                                        #   in Loop: Header=BB178_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB178_10
.LBB178_10:                             # %cond.end33
                                        #   in Loop: Header=BB178_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB178_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB178_3
.LBB178_12:                             # %for.end
                                        #   in Loop: Header=BB178_1 Depth=1
	jmp	.LBB178_13
.LBB178_13:                             # %for.inc45
                                        #   in Loop: Header=BB178_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB178_1
.LBB178_14:                             # %for.end47
	cmpl	$1499677109, -28(%rbp)  # imm = 0x596341B5
	jne	.LBB178_16
.LBB178_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_15
.Lfunc_end178:
	.size	gen_field_ref_ids.115, .Lfunc_end178-gen_field_ref_ids.115
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.116 # -- Begin function store_picture_in_dpb.116
	.p2align	4, 0x90
	.type	store_picture_in_dpb.116,@function
store_picture_in_dpb.116:               # @store_picture_in_dpb.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$54707031, -24(%rbp)    # imm = 0x342C357
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB179_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB179_6
.LBB179_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB179_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB179_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB179_5:                              # %if.end
	jmp	.LBB179_6
.LBB179_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB179_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB179_23
.LBB179_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB179_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB179_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB179_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB179_14
.LBB179_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB179_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB179_20
.LBB179_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB179_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB179_18
.LBB179_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB179_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB179_19
.LBB179_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB179_50
.LBB179_19:                             # %if.end48
	jmp	.LBB179_20
.LBB179_20:                             # %if.end49
	jmp	.LBB179_21
.LBB179_21:                             # %if.end50
	jmp	.LBB179_22
.LBB179_22:                             # %if.end51
	jmp	.LBB179_23
.LBB179_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB179_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB179_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB179_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB179_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB179_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB179_29:                             # %if.end67
	jmp	.LBB179_30
.LBB179_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB179_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB179_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB179_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB179_30 Depth=1
	leaq	-16(%rbp), %rdi
	leaq	-20(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-20(%rbp), %eax
	je	.LBB179_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB179_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB179_35
.LBB179_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB179_50
.LBB179_35:                             # %if.end80
                                        #   in Loop: Header=BB179_30 Depth=1
	jmp	.LBB179_36
.LBB179_36:                             # %if.end81
                                        #   in Loop: Header=BB179_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB179_30
.LBB179_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB179_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB179_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB179_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB179_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB179_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB179_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB179_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB179_43:                             # %if.end94
                                        #   in Loop: Header=BB179_40 Depth=1
	jmp	.LBB179_44
.LBB179_44:                             # %for.inc
                                        #   in Loop: Header=BB179_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB179_40
.LBB179_45:                             # %for.end
	jmp	.LBB179_46
.LBB179_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB179_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB179_49
.LBB179_48:                             # %if.else104
	movq	$0, dpb+56
.LBB179_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB179_50:                             # %return
	cmpl	$54707031, -24(%rbp)    # imm = 0x342C357
	jne	.LBB179_52
.LBB179_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_51
.Lfunc_end179:
	.size	store_picture_in_dpb.116, .Lfunc_end179-store_picture_in_dpb.116
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.117          # -- Begin function init_lists.117
	.p2align	4, 0x90
	.type	init_lists.117,@function
init_lists.117:                         # @init_lists.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1123662036, -76(%rbp)  # imm = 0x42F9B8D4
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB180_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB180_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB180_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB180_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB180_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB180_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB180_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB180_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB180_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB180_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB180_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB180_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB180_9
.LBB180_8:                              # %if.else
                                        #   in Loop: Header=BB180_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB180_9:                              # %if.end
                                        #   in Loop: Header=BB180_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB180_10:                             # %if.end36
                                        #   in Loop: Header=BB180_2 Depth=1
	jmp	.LBB180_11
.LBB180_11:                             # %if.end37
                                        #   in Loop: Header=BB180_2 Depth=1
	jmp	.LBB180_12
.LBB180_12:                             # %for.inc
                                        #   in Loop: Header=BB180_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_2
.LBB180_13:                             # %for.end
	jmp	.LBB180_31
.LBB180_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB180_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB180_17
.LBB180_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB180_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB180_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB180_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB180_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB180_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB180_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB180_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB180_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB180_23
.LBB180_22:                             # %if.else63
                                        #   in Loop: Header=BB180_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB180_23:                             # %if.end70
                                        #   in Loop: Header=BB180_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB180_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB180_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB180_25:                             # %if.end83
                                        #   in Loop: Header=BB180_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB180_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB180_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB180_27:                             # %if.end98
                                        #   in Loop: Header=BB180_18 Depth=1
	jmp	.LBB180_28
.LBB180_28:                             # %if.end99
                                        #   in Loop: Header=BB180_18 Depth=1
	jmp	.LBB180_29
.LBB180_29:                             # %for.inc100
                                        #   in Loop: Header=BB180_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_18
.LBB180_30:                             # %for.end102
	jmp	.LBB180_31
.LBB180_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB180_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB180_34
.LBB180_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB180_181
.LBB180_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB180_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB180_75
.LBB180_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB180_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB180_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB180_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB180_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB180_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB180_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB180_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB180_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB180_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB180_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB180_43:                             # %if.end140
                                        #   in Loop: Header=BB180_38 Depth=1
	jmp	.LBB180_44
.LBB180_44:                             # %if.end141
                                        #   in Loop: Header=BB180_38 Depth=1
	jmp	.LBB180_45
.LBB180_45:                             # %for.inc142
                                        #   in Loop: Header=BB180_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_38
.LBB180_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB180_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB180_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB180_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB180_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB180_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB180_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB180_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB180_51:                             # %if.end177
                                        #   in Loop: Header=BB180_47 Depth=1
	jmp	.LBB180_52
.LBB180_52:                             # %if.end178
                                        #   in Loop: Header=BB180_47 Depth=1
	jmp	.LBB180_53
.LBB180_53:                             # %for.inc179
                                        #   in Loop: Header=BB180_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_47
.LBB180_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB180_74
.LBB180_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB180_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB180_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB180_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB180_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB180_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB180_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB180_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB180_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB180_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB180_63:                             # %if.end212
                                        #   in Loop: Header=BB180_60 Depth=1
	jmp	.LBB180_64
.LBB180_64:                             # %for.inc213
                                        #   in Loop: Header=BB180_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_60
.LBB180_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB180_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB180_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB180_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB180_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB180_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB180_69:                             # %if.end242
                                        #   in Loop: Header=BB180_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB180_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB180_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB180_71:                             # %if.end259
                                        #   in Loop: Header=BB180_66 Depth=1
	jmp	.LBB180_72
.LBB180_72:                             # %for.inc260
                                        #   in Loop: Header=BB180_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_66
.LBB180_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB180_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB180_155
.LBB180_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB180_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB180_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB180_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB180_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB180_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB180_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB180_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB180_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB180_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB180_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB180_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB180_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB180_83:                             # %if.end307
                                        #   in Loop: Header=BB180_77 Depth=1
	jmp	.LBB180_84
.LBB180_84:                             # %if.end308
                                        #   in Loop: Header=BB180_77 Depth=1
	jmp	.LBB180_85
.LBB180_85:                             # %if.end309
                                        #   in Loop: Header=BB180_77 Depth=1
	jmp	.LBB180_86
.LBB180_86:                             # %for.inc310
                                        #   in Loop: Header=BB180_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_77
.LBB180_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB180_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB180_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB180_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB180_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB180_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB180_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB180_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB180_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB180_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB180_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB180_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB180_94:                             # %if.end354
                                        #   in Loop: Header=BB180_88 Depth=1
	jmp	.LBB180_95
.LBB180_95:                             # %if.end355
                                        #   in Loop: Header=BB180_88 Depth=1
	jmp	.LBB180_96
.LBB180_96:                             # %if.end356
                                        #   in Loop: Header=BB180_88 Depth=1
	jmp	.LBB180_97
.LBB180_97:                             # %for.inc357
                                        #   in Loop: Header=BB180_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_88
.LBB180_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB180_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB180_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB180_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB180_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_99
.LBB180_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB180_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB180_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB180_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB180_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_103
.LBB180_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB180_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB180_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB180_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB180_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB180_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB180_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB180_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB180_111:                            # %if.end428
                                        #   in Loop: Header=BB180_107 Depth=1
	jmp	.LBB180_112
.LBB180_112:                            # %if.end429
                                        #   in Loop: Header=BB180_107 Depth=1
	jmp	.LBB180_113
.LBB180_113:                            # %for.inc430
                                        #   in Loop: Header=BB180_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_107
.LBB180_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB180_154
.LBB180_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB180_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB180_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB180_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB180_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB180_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB180_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB180_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB180_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB180_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB180_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB180_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB180_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB180_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB180_126:                            # %if.end480
                                        #   in Loop: Header=BB180_122 Depth=1
	jmp	.LBB180_127
.LBB180_127:                            # %if.end481
                                        #   in Loop: Header=BB180_122 Depth=1
	jmp	.LBB180_128
.LBB180_128:                            # %for.inc482
                                        #   in Loop: Header=BB180_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_122
.LBB180_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB180_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB180_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB180_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB180_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB180_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB180_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB180_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB180_134:                            # %if.end507
                                        #   in Loop: Header=BB180_130 Depth=1
	jmp	.LBB180_135
.LBB180_135:                            # %if.end508
                                        #   in Loop: Header=BB180_130 Depth=1
	jmp	.LBB180_136
.LBB180_136:                            # %for.inc509
                                        #   in Loop: Header=BB180_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_130
.LBB180_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB180_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB180_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB180_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB180_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_138
.LBB180_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB180_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB180_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB180_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB180_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_142
.LBB180_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB180_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB180_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB180_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB180_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB180_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB180_149:                            # %if.end566
                                        #   in Loop: Header=BB180_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB180_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB180_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB180_151:                            # %if.end583
                                        #   in Loop: Header=BB180_146 Depth=1
	jmp	.LBB180_152
.LBB180_152:                            # %for.inc584
                                        #   in Loop: Header=BB180_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_146
.LBB180_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB180_154:                            # %if.end588
	jmp	.LBB180_155
.LBB180_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB180_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB180_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB180_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB180_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB180_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB180_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB180_158 Depth=1
	movl	$1, -72(%rbp)
.LBB180_161:                            # %if.end607
                                        #   in Loop: Header=BB180_158 Depth=1
	jmp	.LBB180_162
.LBB180_162:                            # %for.inc608
                                        #   in Loop: Header=BB180_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_158
.LBB180_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB180_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB180_165:                            # %if.end617
	jmp	.LBB180_166
.LBB180_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB180_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB180_169
.LBB180_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB180_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB180_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB180_172
.LBB180_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB180_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB180_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB180_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB180_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB180_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_173
.LBB180_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB180_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB180_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB180_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB180_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_177
.LBB180_180:                            # %for.end646.loopexit
	jmp	.LBB180_181
.LBB180_181:                            # %for.end646
	cmpl	$1123662036, -76(%rbp)  # imm = 0x42F9B8D4
	jne	.LBB180_183
.LBB180_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_182
.Lfunc_end180:
	.size	init_lists.117, .Lfunc_end180-init_lists.117
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.118  # -- Begin function fill_frame_num_gap.118
	.p2align	4, 0x90
	.type	fill_frame_num_gap.118,@function
fill_frame_num_gap.118:                 # @fill_frame_num_gap.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1921729301, -32(%rbp)  # imm = 0x728B4315
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -36(%rbp)
.LBB181_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB181_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB181_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB181_1
.LBB181_3:                              # %while.end
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1921729301, -32(%rbp)  # imm = 0x728B4315
	jne	.LBB181_5
.LBB181_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_4
.Lfunc_end181:
	.size	fill_frame_num_gap.118, .Lfunc_end181-fill_frame_num_gap.118
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.119   # -- Begin function dpb_combine_field.119
	.p2align	4, 0x90
	.type	dpb_combine_field.119,@function
dpb_combine_field.119:                  # @dpb_combine_field.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$153711041, -32(%rbp)   # imm = 0x92971C1
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB182_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB182_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB182_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB182_1
.LBB182_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB182_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB182_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB182_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB182_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB182_5
.LBB182_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB182_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB182_11
.LBB182_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB182_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB182_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB182_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB182_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB182_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB182_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB182_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB182_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB182_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB182_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB182_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB182_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB182_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB182_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB182_24
.LBB182_23:                             # %cond.false217
                                        #   in Loop: Header=BB182_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB182_24:                             # %cond.end226
                                        #   in Loop: Header=BB182_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB182_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB182_20
.LBB182_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB182_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB182_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB182_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB182_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB182_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB182_31
.LBB182_30:                             # %cond.false269
                                        #   in Loop: Header=BB182_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB182_31:                             # %cond.end278
                                        #   in Loop: Header=BB182_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB182_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB182_27
.LBB182_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB182_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB182_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB182_34 Depth=1
	movl	$0, -20(%rbp)
.LBB182_36:                             # %for.cond295
                                        #   Parent Loop BB182_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB182_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB182_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB182_40
.LBB182_39:                             # %cond.false445
                                        #   in Loop: Header=BB182_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB182_40
.LBB182_40:                             # %cond.end446
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB182_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB182_43
.LBB182_42:                             # %cond.false462
                                        #   in Loop: Header=BB182_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB182_43
.LBB182_43:                             # %cond.end463
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB182_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB182_46
.LBB182_45:                             # %cond.false479
                                        #   in Loop: Header=BB182_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB182_46
.LBB182_46:                             # %cond.end480
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB182_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB182_49
.LBB182_48:                             # %cond.false501
                                        #   in Loop: Header=BB182_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB182_49
.LBB182_49:                             # %cond.end502
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB182_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB182_52
.LBB182_51:                             # %cond.false647
                                        #   in Loop: Header=BB182_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB182_52
.LBB182_52:                             # %cond.end648
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB182_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB182_55
.LBB182_54:                             # %cond.false665
                                        #   in Loop: Header=BB182_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB182_55
.LBB182_55:                             # %cond.end666
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB182_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB182_58
.LBB182_57:                             # %cond.false683
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB182_58
.LBB182_58:                             # %cond.end684
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB182_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB182_61
.LBB182_60:                             # %cond.false706
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB182_61
.LBB182_61:                             # %cond.end707
                                        #   in Loop: Header=BB182_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB182_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB182_36
.LBB182_63:                             # %for.end723
                                        #   in Loop: Header=BB182_34 Depth=1
	jmp	.LBB182_64
.LBB182_64:                             # %for.inc724
                                        #   in Loop: Header=BB182_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB182_34
.LBB182_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB182_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB182_76
.LBB182_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB182_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB182_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB182_68 Depth=1
	movl	$0, -20(%rbp)
.LBB182_70:                             # %for.cond737
                                        #   Parent Loop BB182_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB182_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB182_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB182_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB182_70
.LBB182_73:                             # %for.end758
                                        #   in Loop: Header=BB182_68 Depth=1
	jmp	.LBB182_74
.LBB182_74:                             # %for.inc759
                                        #   in Loop: Header=BB182_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB182_68
.LBB182_75:                             # %for.end761
	jmp	.LBB182_76
.LBB182_76:                             # %if.end762
	cmpl	$153711041, -32(%rbp)   # imm = 0x92971C1
	jne	.LBB182_78
.LBB182_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_77
.Lfunc_end182:
	.size	dpb_combine_field.119, .Lfunc_end182-dpb_combine_field.119
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference.120
	.type	is_long_term_reference.120,@function
is_long_term_reference.120:             # @is_long_term_reference.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1840952007, -24(%rbp)  # imm = 0x6DBAB2C7
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB183_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB183_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB183_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB183_18
.LBB183_4:                              # %if.end
	jmp	.LBB183_5
.LBB183_5:                              # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB183_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB183_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB183_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB183_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB183_18
.LBB183_10:                             # %if.end17
	jmp	.LBB183_11
.LBB183_11:                             # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB183_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB183_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB183_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB183_18
.LBB183_15:                             # %if.end30
	jmp	.LBB183_16
.LBB183_16:                             # %if.end31
	jmp	.LBB183_17
.LBB183_17:                             # %if.end32
	movl	$0, -20(%rbp)
.LBB183_18:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1840952007, -24(%rbp)  # imm = 0x6DBAB2C7
	jne	.LBB183_20
.LBB183_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_19
.Lfunc_end183:
	.size	is_long_term_reference.120, .Lfunc_end183-is_long_term_reference.120
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.121
	.type	get_short_term_pic.121,@function
get_short_term_pic.121:                 # @get_short_term_pic.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1307249233, -28(%rbp)  # imm = 0x4DEB0A51
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB184_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB184_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB184_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB184_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB184_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB184_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB184_23
.LBB184_7:                              # %if.end
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_8
.LBB184_8:                              # %if.end14
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_20
.LBB184_9:                              # %if.else
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB184_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB184_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB184_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB184_23
.LBB184_13:                             # %if.end34
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_14
.LBB184_14:                             # %if.end35
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB184_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB184_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB184_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB184_23
.LBB184_18:                             # %if.end56
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_19
.LBB184_19:                             # %if.end57
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_20
.LBB184_20:                             # %if.end58
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_21
.LBB184_21:                             # %for.inc
                                        #   in Loop: Header=BB184_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_1
.LBB184_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB184_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1307249233, -28(%rbp)  # imm = 0x4DEB0A51
	jne	.LBB184_25
.LBB184_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_24
.Lfunc_end184:
	.size	get_short_term_pic.121, .Lfunc_end184-get_short_term_pic.121
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.122   # -- Begin function compute_colocated.122
	.p2align	4, 0x90
	.type	compute_colocated.122,@function
compute_colocated.122:                  # @compute_colocated.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$708231723, -72(%rbp)   # imm = 0x2A36C22B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB185_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB185_11
.LBB185_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB185_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB185_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB185_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB185_7
# %bb.6:                                # %if.then14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB185_8
.LBB185_7:                              # %if.else17
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
.LBB185_8:                              # %if.end
	jmp	.LBB185_9
.LBB185_9:                              # %if.end20
	jmp	.LBB185_10
.LBB185_10:                             # %if.end21
	jmp	.LBB185_11
.LBB185_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB185_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB185_29
.LBB185_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB185_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB185_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB185_14 Depth=1
	movl	$0, -16(%rbp)
.LBB185_16:                             # %for.cond27
                                        #   Parent Loop BB185_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB185_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB185_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB185_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB185_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB185_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB185_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB185_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB185_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB185_22
.LBB185_21:                             # %if.else160
                                        #   in Loop: Header=BB185_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB185_22:                             # %if.end283
                                        #   in Loop: Header=BB185_16 Depth=2
	jmp	.LBB185_24
.LBB185_23:                             # %if.else284
                                        #   in Loop: Header=BB185_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB185_24:                             # %if.end391
                                        #   in Loop: Header=BB185_16 Depth=2
	jmp	.LBB185_25
.LBB185_25:                             # %for.inc
                                        #   in Loop: Header=BB185_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB185_16
.LBB185_26:                             # %for.end
                                        #   in Loop: Header=BB185_14 Depth=1
	jmp	.LBB185_27
.LBB185_27:                             # %for.inc392
                                        #   in Loop: Header=BB185_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_14
.LBB185_28:                             # %for.end394
	jmp	.LBB185_29
.LBB185_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB185_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB185_241
.LBB185_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB185_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB185_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB185_32 Depth=1
	movl	$0, -12(%rbp)
.LBB185_34:                             # %for.cond408
                                        #   Parent Loop BB185_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB185_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB185_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_39
.LBB185_38:                             # %cond.false
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_39:                             # %cond.end
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_42
.LBB185_41:                             # %cond.false427
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_42:                             # %cond.end429
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_45
.LBB185_44:                             # %cond.false447
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_45:                             # %cond.end449
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_48
.LBB185_47:                             # %cond.false457
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_48:                             # %cond.end459
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_51
.LBB185_50:                             # %cond.false477
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_51:                             # %cond.end479
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_54
.LBB185_53:                             # %cond.false487
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_54:                             # %cond.end489
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_57
.LBB185_56:                             # %cond.false507
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_57:                             # %cond.end509
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_60
.LBB185_59:                             # %cond.false517
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_60:                             # %cond.end519
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_63
.LBB185_62:                             # %cond.false537
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_63:                             # %cond.end539
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_66
.LBB185_65:                             # %cond.false547
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_66:                             # %cond.end549
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB185_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB185_81
.LBB185_68:                             # %if.else569
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_71
.LBB185_70:                             # %cond.false576
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_71:                             # %cond.end578
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_74
.LBB185_73:                             # %cond.false586
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_74:                             # %cond.end588
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_77
.LBB185_76:                             # %cond.false604
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_77:                             # %cond.end606
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_80
.LBB185_79:                             # %cond.false614
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_80:                             # %cond.end616
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB185_81:                             # %if.end626
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_84
.LBB185_83:                             # %cond.false633
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_84:                             # %cond.end635
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_87
.LBB185_86:                             # %cond.false643
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_87:                             # %cond.end645
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB185_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB185_102
.LBB185_89:                             # %if.else665
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_92
.LBB185_91:                             # %cond.false672
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_92:                             # %cond.end674
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_95
.LBB185_94:                             # %cond.false682
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_95:                             # %cond.end684
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_98
.LBB185_97:                             # %cond.false700
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_98:                             # %cond.end702
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_101
.LBB185_100:                            # %cond.false710
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_101:                            # %cond.end712
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB185_102:                            # %if.end722
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB185_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB185_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB185_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB185_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB185_112
.LBB185_107:                            # %lor.rhs
                                        #   in Loop: Header=BB185_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB185_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB185_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB185_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB185_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB185_111:                            # %land.end
                                        #   in Loop: Header=BB185_34 Depth=2
.LBB185_112:                            # %lor.end
                                        #   in Loop: Header=BB185_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB185_113:                            # %if.end814
                                        #   in Loop: Header=BB185_34 Depth=2
	jmp	.LBB185_236
.LBB185_114:                            # %if.else815
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_117
.LBB185_116:                            # %cond.false822
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_117:                            # %cond.end824
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_120
.LBB185_119:                            # %cond.false832
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_120:                            # %cond.end834
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_123
.LBB185_122:                            # %cond.false851
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_123:                            # %cond.end853
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_126
.LBB185_125:                            # %cond.false861
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_126:                            # %cond.end863
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_129
.LBB185_128:                            # %cond.false881
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_129:                            # %cond.end883
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_132
.LBB185_131:                            # %cond.false891
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_132:                            # %cond.end893
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_135
.LBB185_134:                            # %cond.false911
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_135:                            # %cond.end913
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_138
.LBB185_137:                            # %cond.false921
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_138:                            # %cond.end923
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_141
.LBB185_140:                            # %cond.false941
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_141:                            # %cond.end943
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_144
.LBB185_143:                            # %cond.false951
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_144:                            # %cond.end953
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_147
.LBB185_146:                            # %cond.false968
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_147:                            # %cond.end970
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_150
.LBB185_149:                            # %cond.false978
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_150:                            # %cond.end980
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_153
.LBB185_152:                            # %cond.false996
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_153:                            # %cond.end998
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_156
.LBB185_155:                            # %cond.false1006
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_156:                            # %cond.end1008
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_159
.LBB185_158:                            # %cond.false1023
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_159:                            # %cond.end1025
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_162
.LBB185_161:                            # %cond.false1033
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_162:                            # %cond.end1035
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB185_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB185_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB185_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB185_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB185_172
.LBB185_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB185_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB185_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB185_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB185_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB185_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB185_171:                            # %land.end1133
                                        #   in Loop: Header=BB185_34 Depth=2
.LBB185_172:                            # %lor.end1134
                                        #   in Loop: Header=BB185_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB185_173:                            # %if.end1142
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_176
.LBB185_175:                            # %cond.false1149
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_176:                            # %cond.end1151
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_179
.LBB185_178:                            # %cond.false1159
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_179:                            # %cond.end1161
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_182
.LBB185_181:                            # %cond.false1178
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_182:                            # %cond.end1180
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_185
.LBB185_184:                            # %cond.false1188
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_185:                            # %cond.end1190
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_188
.LBB185_187:                            # %cond.false1208
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_188:                            # %cond.end1210
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_191
.LBB185_190:                            # %cond.false1218
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_191:                            # %cond.end1220
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_194
.LBB185_193:                            # %cond.false1238
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_194:                            # %cond.end1240
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_197
.LBB185_196:                            # %cond.false1248
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_197:                            # %cond.end1250
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_200
.LBB185_199:                            # %cond.false1268
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_200:                            # %cond.end1270
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_203
.LBB185_202:                            # %cond.false1278
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_203:                            # %cond.end1280
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_206
.LBB185_205:                            # %cond.false1295
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_206:                            # %cond.end1297
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_209
.LBB185_208:                            # %cond.false1305
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_209:                            # %cond.end1307
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_212
.LBB185_211:                            # %cond.false1323
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_212:                            # %cond.end1325
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_215
.LBB185_214:                            # %cond.false1333
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_215:                            # %cond.end1335
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_218
.LBB185_217:                            # %cond.false1350
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_218:                            # %cond.end1352
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_221
.LBB185_220:                            # %cond.false1360
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_221:                            # %cond.end1362
                                        #   in Loop: Header=BB185_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB185_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB185_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB185_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB185_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB185_231
.LBB185_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB185_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB185_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB185_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB185_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB185_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB185_230:                            # %land.end1460
                                        #   in Loop: Header=BB185_34 Depth=2
.LBB185_231:                            # %lor.end1461
                                        #   in Loop: Header=BB185_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB185_232:                            # %if.end1469
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB185_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB185_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB185_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB185_235:                            # %if.end1522
                                        #   in Loop: Header=BB185_34 Depth=2
	jmp	.LBB185_236
.LBB185_236:                            # %if.end1523
                                        #   in Loop: Header=BB185_34 Depth=2
	jmp	.LBB185_237
.LBB185_237:                            # %for.inc1524
                                        #   in Loop: Header=BB185_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_34
.LBB185_238:                            # %for.end1526
                                        #   in Loop: Header=BB185_32 Depth=1
	jmp	.LBB185_239
.LBB185_239:                            # %for.inc1527
                                        #   in Loop: Header=BB185_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB185_32
.LBB185_240:                            # %for.end1529
	jmp	.LBB185_241
.LBB185_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB185_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB185_259
.LBB185_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB185_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB185_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB185_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB185_245 Depth=1
	movl	$0, -16(%rbp)
.LBB185_247:                            # %for.cond1546
                                        #   Parent Loop BB185_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB185_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB185_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB185_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB185_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB185_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB185_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB185_252
.LBB185_251:                            # %if.else1699
                                        #   in Loop: Header=BB185_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB185_252:                            # %if.end1829
                                        #   in Loop: Header=BB185_247 Depth=2
	jmp	.LBB185_253
.LBB185_253:                            # %if.end1830
                                        #   in Loop: Header=BB185_247 Depth=2
	jmp	.LBB185_254
.LBB185_254:                            # %for.inc1831
                                        #   in Loop: Header=BB185_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB185_247
.LBB185_255:                            # %for.end1833
                                        #   in Loop: Header=BB185_245 Depth=1
	jmp	.LBB185_256
.LBB185_256:                            # %for.inc1834
                                        #   in Loop: Header=BB185_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_245
.LBB185_257:                            # %for.end1836
	jmp	.LBB185_258
.LBB185_258:                            # %if.end1837
	jmp	.LBB185_259
.LBB185_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB185_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB185_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB185_260 Depth=1
	movl	$0, -16(%rbp)
.LBB185_262:                            # %for.cond1845
                                        #   Parent Loop BB185_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB185_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB185_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB185_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB185_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB185_314
.LBB185_265:                            # %if.then1856
                                        #   in Loop: Header=BB185_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_268
.LBB185_267:                            # %cond.false1863
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_268:                            # %cond.end1865
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_271
.LBB185_270:                            # %cond.false1873
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_271:                            # %cond.end1875
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_274
.LBB185_273:                            # %cond.false1893
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_274:                            # %cond.end1895
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_277
.LBB185_276:                            # %cond.false1903
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_277:                            # %cond.end1905
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_280
.LBB185_279:                            # %cond.false1923
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_280:                            # %cond.end1925
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_283
.LBB185_282:                            # %cond.false1933
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_283:                            # %cond.end1935
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_286
.LBB185_285:                            # %cond.false1953
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_286:                            # %cond.end1955
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_289
.LBB185_288:                            # %cond.false1963
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_289:                            # %cond.end1965
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_292
.LBB185_291:                            # %cond.false1983
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_292:                            # %cond.end1985
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_295
.LBB185_294:                            # %cond.false1993
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_295:                            # %cond.end1995
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_298
.LBB185_297:                            # %cond.false2011
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_298:                            # %cond.end2013
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_301
.LBB185_300:                            # %cond.false2021
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_301:                            # %cond.end2023
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_304
.LBB185_303:                            # %cond.false2039
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_304:                            # %cond.end2041
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_307
.LBB185_306:                            # %cond.false2049
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_307:                            # %cond.end2051
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_310
.LBB185_309:                            # %cond.false2067
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_310:                            # %cond.end2069
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB185_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB185_313
.LBB185_312:                            # %cond.false2077
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB185_313:                            # %cond.end2079
                                        #   in Loop: Header=BB185_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB185_315
.LBB185_314:                            # %if.else2089
                                        #   in Loop: Header=BB185_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB185_315:                            # %if.end2194
                                        #   in Loop: Header=BB185_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB185_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB185_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB185_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB185_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB185_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB185_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB185_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB185_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB185_325
.LBB185_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB185_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB185_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB185_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB185_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB185_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB185_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB185_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB185_324:                            # %land.end2285
                                        #   in Loop: Header=BB185_262 Depth=2
.LBB185_325:                            # %lor.end2286
                                        #   in Loop: Header=BB185_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB185_326:                            # %if.end2295
                                        #   in Loop: Header=BB185_262 Depth=2
	jmp	.LBB185_327
.LBB185_327:                            # %for.inc2296
                                        #   in Loop: Header=BB185_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB185_262
.LBB185_328:                            # %for.end2298
                                        #   in Loop: Header=BB185_260 Depth=1
	jmp	.LBB185_329
.LBB185_329:                            # %for.inc2299
                                        #   in Loop: Header=BB185_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_260
.LBB185_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB185_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB185_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB185_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB185_332 Depth=1
	movl	$0, -16(%rbp)
.LBB185_334:                            # %for.cond2312
                                        #   Parent Loop BB185_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB185_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB185_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB185_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB185_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB185_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB185_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB185_340
.LBB185_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB185_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB185_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB185_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB185_341
.LBB185_340:                            # %if.then2342
                                        #   in Loop: Header=BB185_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB185_345
.LBB185_341:                            # %if.else2363
                                        #   in Loop: Header=BB185_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB185_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB185_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB185_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB185_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB185_344:                            # %if.end2394
                                        #   in Loop: Header=BB185_334 Depth=2
	jmp	.LBB185_345
.LBB185_345:                            # %if.end2395
                                        #   in Loop: Header=BB185_334 Depth=2
	jmp	.LBB185_346
.LBB185_346:                            # %for.inc2396
                                        #   in Loop: Header=BB185_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB185_334
.LBB185_347:                            # %for.end2398
                                        #   in Loop: Header=BB185_332 Depth=1
	jmp	.LBB185_348
.LBB185_348:                            # %for.inc2399
                                        #   in Loop: Header=BB185_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_332
.LBB185_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB185_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB185_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB185_350 Depth=1
	movl	$0, -16(%rbp)
.LBB185_352:                            # %for.cond2409
                                        #   Parent Loop BB185_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB185_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB185_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB185_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB185_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB185_360
.LBB185_356:                            # %cond.false2429
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB185_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	$127, %eax
	jmp	.LBB185_359
.LBB185_358:                            # %cond.false2441
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB185_359:                            # %cond.end2450
                                        #   in Loop: Header=BB185_352 Depth=2
.LBB185_360:                            # %cond.end2452
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB185_377
.LBB185_361:                            # %if.else2454
                                        #   in Loop: Header=BB185_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB185_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB185_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB185_368
.LBB185_364:                            # %cond.false2468
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB185_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	$127, %eax
	jmp	.LBB185_367
.LBB185_366:                            # %cond.false2480
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB185_367:                            # %cond.end2489
                                        #   in Loop: Header=BB185_352 Depth=2
.LBB185_368:                            # %cond.end2491
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB185_376
.LBB185_369:                            # %if.else2493
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB185_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB185_375
.LBB185_371:                            # %cond.false2504
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB185_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	$127, %eax
	jmp	.LBB185_374
.LBB185_373:                            # %cond.false2516
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB185_374:                            # %cond.end2525
                                        #   in Loop: Header=BB185_352 Depth=2
.LBB185_375:                            # %cond.end2527
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB185_376:                            # %if.end2529
                                        #   in Loop: Header=BB185_352 Depth=2
	jmp	.LBB185_377
.LBB185_377:                            # %if.end2530
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB185_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB185_383
.LBB185_379:                            # %cond.false2546
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB185_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	$127, %eax
	jmp	.LBB185_382
.LBB185_381:                            # %cond.false2562
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB185_382:                            # %cond.end2575
                                        #   in Loop: Header=BB185_352 Depth=2
.LBB185_383:                            # %cond.end2577
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB185_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB185_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB185_390
.LBB185_386:                            # %cond.false2592
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB185_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB185_389
.LBB185_388:                            # %cond.false2599
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB185_389:                            # %cond.end2603
                                        #   in Loop: Header=BB185_352 Depth=2
.LBB185_390:                            # %cond.end2605
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB185_392
.LBB185_391:                            # %if.else2611
                                        #   in Loop: Header=BB185_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB185_392:                            # %if.end2617
                                        #   in Loop: Header=BB185_352 Depth=2
	jmp	.LBB185_393
.LBB185_393:                            # %for.inc2618
                                        #   in Loop: Header=BB185_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB185_352
.LBB185_394:                            # %for.end2620
                                        #   in Loop: Header=BB185_350 Depth=1
	jmp	.LBB185_395
.LBB185_395:                            # %for.inc2621
                                        #   in Loop: Header=BB185_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_350
.LBB185_396:                            # %for.end2623
	jmp	.LBB185_397
.LBB185_397:                            # %if.end2624
	cmpl	$708231723, -72(%rbp)   # imm = 0x2A36C22B
	jne	.LBB185_399
.LBB185_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_398
.Lfunc_end185:
	.size	compute_colocated.122, .Lfunc_end185-compute_colocated.122
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management.123
	.type	sliding_window_memory_management.123,@function
sliding_window_memory_management.123:   # @sliding_window_memory_management.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1294417057, -8(%rbp)   # imm = 0x4D273CA1
	movq	%rdi, -16(%rbp)
	movl	dpb+32, %eax
	movq	active_sps, %rcx
	movl	1132(%rcx), %ecx
	subl	dpb+36, %ecx
	cmpl	%ecx, %eax
	jne	.LBB186_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB186_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB186_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB186_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB186_6
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB186_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB186_6
# %bb.5:                                # %if.then5
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	callq	update_ref_list
	jmp	.LBB186_9
.LBB186_6:                              # %if.end
                                        #   in Loop: Header=BB186_2 Depth=1
	jmp	.LBB186_7
.LBB186_7:                              # %for.inc
                                        #   in Loop: Header=BB186_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_2
.LBB186_8:                              # %for.end.loopexit
	jmp	.LBB186_9
.LBB186_9:                              # %for.end
	jmp	.LBB186_10
.LBB186_10:                             # %if.end8
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	cmpl	$1294417057, -8(%rbp)   # imm = 0x4D273CA1
	jne	.LBB186_12
.LBB186_11:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_11
.Lfunc_end186:
	.size	sliding_window_memory_management.123, .Lfunc_end186-sliding_window_memory_management.123
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.124          # -- Begin function init_lists.124
	.p2align	4, 0x90
	.type	init_lists.124,@function
init_lists.124:                         # @init_lists.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1805589769, -76(%rbp)  # imm = 0x6B9F1D09
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB187_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB187_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB187_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB187_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB187_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB187_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB187_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB187_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB187_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB187_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB187_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB187_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB187_9
.LBB187_8:                              # %if.else
                                        #   in Loop: Header=BB187_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB187_9:                              # %if.end
                                        #   in Loop: Header=BB187_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB187_10:                             # %if.end36
                                        #   in Loop: Header=BB187_2 Depth=1
	jmp	.LBB187_11
.LBB187_11:                             # %if.end37
                                        #   in Loop: Header=BB187_2 Depth=1
	jmp	.LBB187_12
.LBB187_12:                             # %for.inc
                                        #   in Loop: Header=BB187_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_2
.LBB187_13:                             # %for.end
	jmp	.LBB187_31
.LBB187_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB187_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB187_17
.LBB187_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB187_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB187_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB187_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB187_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB187_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB187_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB187_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB187_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB187_23
.LBB187_22:                             # %if.else63
                                        #   in Loop: Header=BB187_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB187_23:                             # %if.end70
                                        #   in Loop: Header=BB187_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB187_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB187_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB187_25:                             # %if.end83
                                        #   in Loop: Header=BB187_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB187_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB187_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB187_27:                             # %if.end98
                                        #   in Loop: Header=BB187_18 Depth=1
	jmp	.LBB187_28
.LBB187_28:                             # %if.end99
                                        #   in Loop: Header=BB187_18 Depth=1
	jmp	.LBB187_29
.LBB187_29:                             # %for.inc100
                                        #   in Loop: Header=BB187_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_18
.LBB187_30:                             # %for.end102
	jmp	.LBB187_31
.LBB187_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB187_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB187_34
.LBB187_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB187_181
.LBB187_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB187_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB187_75
.LBB187_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB187_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB187_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB187_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB187_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB187_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB187_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB187_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB187_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB187_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB187_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB187_43:                             # %if.end140
                                        #   in Loop: Header=BB187_38 Depth=1
	jmp	.LBB187_44
.LBB187_44:                             # %if.end141
                                        #   in Loop: Header=BB187_38 Depth=1
	jmp	.LBB187_45
.LBB187_45:                             # %for.inc142
                                        #   in Loop: Header=BB187_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_38
.LBB187_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB187_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB187_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB187_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB187_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB187_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB187_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB187_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB187_51:                             # %if.end177
                                        #   in Loop: Header=BB187_47 Depth=1
	jmp	.LBB187_52
.LBB187_52:                             # %if.end178
                                        #   in Loop: Header=BB187_47 Depth=1
	jmp	.LBB187_53
.LBB187_53:                             # %for.inc179
                                        #   in Loop: Header=BB187_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_47
.LBB187_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB187_74
.LBB187_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB187_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB187_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB187_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB187_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB187_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB187_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB187_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB187_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB187_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB187_63:                             # %if.end212
                                        #   in Loop: Header=BB187_60 Depth=1
	jmp	.LBB187_64
.LBB187_64:                             # %for.inc213
                                        #   in Loop: Header=BB187_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_60
.LBB187_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB187_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB187_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB187_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB187_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB187_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB187_69:                             # %if.end242
                                        #   in Loop: Header=BB187_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB187_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB187_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB187_71:                             # %if.end259
                                        #   in Loop: Header=BB187_66 Depth=1
	jmp	.LBB187_72
.LBB187_72:                             # %for.inc260
                                        #   in Loop: Header=BB187_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_66
.LBB187_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB187_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB187_155
.LBB187_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB187_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB187_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB187_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB187_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB187_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB187_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB187_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB187_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB187_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB187_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB187_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB187_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB187_83:                             # %if.end307
                                        #   in Loop: Header=BB187_77 Depth=1
	jmp	.LBB187_84
.LBB187_84:                             # %if.end308
                                        #   in Loop: Header=BB187_77 Depth=1
	jmp	.LBB187_85
.LBB187_85:                             # %if.end309
                                        #   in Loop: Header=BB187_77 Depth=1
	jmp	.LBB187_86
.LBB187_86:                             # %for.inc310
                                        #   in Loop: Header=BB187_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_77
.LBB187_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB187_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB187_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB187_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB187_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB187_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB187_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB187_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB187_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB187_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB187_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB187_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB187_94:                             # %if.end354
                                        #   in Loop: Header=BB187_88 Depth=1
	jmp	.LBB187_95
.LBB187_95:                             # %if.end355
                                        #   in Loop: Header=BB187_88 Depth=1
	jmp	.LBB187_96
.LBB187_96:                             # %if.end356
                                        #   in Loop: Header=BB187_88 Depth=1
	jmp	.LBB187_97
.LBB187_97:                             # %for.inc357
                                        #   in Loop: Header=BB187_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_88
.LBB187_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB187_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB187_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB187_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB187_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB187_99
.LBB187_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB187_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB187_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB187_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB187_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB187_103
.LBB187_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB187_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB187_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB187_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB187_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB187_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB187_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB187_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB187_111:                            # %if.end428
                                        #   in Loop: Header=BB187_107 Depth=1
	jmp	.LBB187_112
.LBB187_112:                            # %if.end429
                                        #   in Loop: Header=BB187_107 Depth=1
	jmp	.LBB187_113
.LBB187_113:                            # %for.inc430
                                        #   in Loop: Header=BB187_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_107
.LBB187_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB187_154
.LBB187_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB187_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB187_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB187_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB187_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB187_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB187_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB187_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB187_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB187_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB187_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB187_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB187_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB187_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB187_126:                            # %if.end480
                                        #   in Loop: Header=BB187_122 Depth=1
	jmp	.LBB187_127
.LBB187_127:                            # %if.end481
                                        #   in Loop: Header=BB187_122 Depth=1
	jmp	.LBB187_128
.LBB187_128:                            # %for.inc482
                                        #   in Loop: Header=BB187_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_122
.LBB187_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB187_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB187_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB187_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB187_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB187_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB187_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB187_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB187_134:                            # %if.end507
                                        #   in Loop: Header=BB187_130 Depth=1
	jmp	.LBB187_135
.LBB187_135:                            # %if.end508
                                        #   in Loop: Header=BB187_130 Depth=1
	jmp	.LBB187_136
.LBB187_136:                            # %for.inc509
                                        #   in Loop: Header=BB187_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_130
.LBB187_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB187_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB187_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB187_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB187_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB187_138
.LBB187_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB187_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB187_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB187_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB187_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB187_142
.LBB187_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB187_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB187_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB187_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB187_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB187_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB187_149:                            # %if.end566
                                        #   in Loop: Header=BB187_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB187_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB187_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB187_151:                            # %if.end583
                                        #   in Loop: Header=BB187_146 Depth=1
	jmp	.LBB187_152
.LBB187_152:                            # %for.inc584
                                        #   in Loop: Header=BB187_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_146
.LBB187_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB187_154:                            # %if.end588
	jmp	.LBB187_155
.LBB187_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB187_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB187_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB187_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB187_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB187_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB187_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB187_158 Depth=1
	movl	$1, -68(%rbp)
.LBB187_161:                            # %if.end607
                                        #   in Loop: Header=BB187_158 Depth=1
	jmp	.LBB187_162
.LBB187_162:                            # %for.inc608
                                        #   in Loop: Header=BB187_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB187_158
.LBB187_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB187_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB187_165:                            # %if.end617
	jmp	.LBB187_166
.LBB187_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB187_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB187_169
.LBB187_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB187_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB187_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB187_172
.LBB187_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB187_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB187_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB187_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB187_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB187_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_173
.LBB187_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB187_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB187_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB187_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB187_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_177
.LBB187_180:                            # %for.end646.loopexit
	jmp	.LBB187_181
.LBB187_181:                            # %for.end646
	cmpl	$1805589769, -76(%rbp)  # imm = 0x6B9F1D09
	jne	.LBB187_183
.LBB187_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_182
.Lfunc_end187:
	.size	init_lists.124, .Lfunc_end187-init_lists.124
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.125
	.type	remove_frame_from_dpb.125,@function
remove_frame_from_dpb.125:              # @remove_frame_from_dpb.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1460956004, -20(%rbp)  # imm = 0x57146B64
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB188_6
# %bb.1:                                # %entry
	movq	.LJTI188_0(,%rax,8), %rax
	jmpq	*%rax
.LBB188_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB188_7
.LBB188_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB188_7
.LBB188_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB188_7
.LBB188_5:                              # %sw.bb10
	jmp	.LBB188_7
.LBB188_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB188_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB188_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB188_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB188_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB188_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB188_8
.LBB188_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1460956004, -20(%rbp)  # imm = 0x57146B64
	jne	.LBB188_13
.LBB188_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_12
.Lfunc_end188:
	.size	remove_frame_from_dpb.125, .Lfunc_end188-remove_frame_from_dpb.125
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI188_0:
	.quad	.LBB188_5
	.quad	.LBB188_4
	.quad	.LBB188_3
	.quad	.LBB188_2
                                        # -- End function
	.text
	.globl	alloc_storable_picture.126 # -- Begin function alloc_storable_picture.126
	.p2align	4, 0x90
	.type	alloc_storable_picture.126,@function
alloc_storable_picture.126:             # @alloc_storable_picture.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$840752217, -40(%rbp)   # imm = 0x321CDC59
	movl	%edi, -36(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB189_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB189_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB189_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB189_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB189_6
.LBB189_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB189_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB189_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB189_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB189_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB189_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$840752217, -40(%rbp)   # imm = 0x321CDC59
	jne	.LBB189_12
.LBB189_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_11
.Lfunc_end189:
	.size	alloc_storable_picture.126, .Lfunc_end189-alloc_storable_picture.126
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.127
	.type	mark_pic_long_term.127,@function
mark_pic_long_term.127:                 # @mark_pic_long_term.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1773493010, -20(%rbp)  # imm = 0x69B55B12
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB190_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB190_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB190_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB190_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB190_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB190_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB190_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB190_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB190_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB190_39
.LBB190_7:                              # %if.end
                                        #   in Loop: Header=BB190_2 Depth=1
	jmp	.LBB190_8
.LBB190_8:                              # %if.end50
                                        #   in Loop: Header=BB190_2 Depth=1
	jmp	.LBB190_9
.LBB190_9:                              # %for.inc
                                        #   in Loop: Header=BB190_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_2
.LBB190_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB190_39
.LBB190_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB190_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB190_14
.LBB190_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -24(%rbp)
.LBB190_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB190_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB190_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB190_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB190_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB190_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB190_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB190_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB190_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB190_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB190_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB190_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB190_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB190_24:                             # %if.end123
	jmp	.LBB190_39
.LBB190_25:                             # %if.end124
                                        #   in Loop: Header=BB190_15 Depth=1
	jmp	.LBB190_26
.LBB190_26:                             # %if.end125
                                        #   in Loop: Header=BB190_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB190_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB190_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB190_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB190_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB190_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB190_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB190_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB190_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB190_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB190_34:                             # %if.end194
	jmp	.LBB190_39
.LBB190_35:                             # %if.end195
                                        #   in Loop: Header=BB190_15 Depth=1
	jmp	.LBB190_36
.LBB190_36:                             # %if.end196
                                        #   in Loop: Header=BB190_15 Depth=1
	jmp	.LBB190_37
.LBB190_37:                             # %for.inc197
                                        #   in Loop: Header=BB190_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_15
.LBB190_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB190_39:                             # %if.end201
	cmpl	$1773493010, -20(%rbp)  # imm = 0x69B55B12
	jne	.LBB190_41
.LBB190_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_40
.Lfunc_end190:
	.size	mark_pic_long_term.127, .Lfunc_end190-mark_pic_long_term.127
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.128
	.type	compare_fs_by_lt_pic_idx_asc.128,@function
compare_fs_by_lt_pic_idx_asc.128:       # @compare_fs_by_lt_pic_idx_asc.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1974793548, -16(%rbp)  # imm = 0x75B4F54C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB191_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB191_5
.LBB191_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB191_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB191_5
.LBB191_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB191_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1974793548, -16(%rbp)  # imm = 0x75B4F54C
	jne	.LBB191_7
.LBB191_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_6
.Lfunc_end191:
	.size	compare_fs_by_lt_pic_idx_asc.128, .Lfunc_end191-compare_fs_by_lt_pic_idx_asc.128
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.129
	.type	compare_pic_by_poc_asc.129,@function
compare_pic_by_poc_asc.129:             # @compare_pic_by_poc_asc.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$307004111, -16(%rbp)   # imm = 0x124C82CF
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB192_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB192_5
.LBB192_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB192_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB192_5
.LBB192_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB192_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$307004111, -16(%rbp)   # imm = 0x124C82CF
	jne	.LBB192_7
.LBB192_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_6
.Lfunc_end192:
	.size	compare_pic_by_poc_asc.129, .Lfunc_end192-compare_pic_by_poc_asc.129
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.130
	.type	mark_pic_long_term.130,@function
mark_pic_long_term.130:                 # @mark_pic_long_term.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1880061644, -20(%rbp)  # imm = 0x700F76CC
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB193_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB193_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB193_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB193_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB193_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB193_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB193_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB193_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB193_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB193_39
.LBB193_7:                              # %if.end
                                        #   in Loop: Header=BB193_2 Depth=1
	jmp	.LBB193_8
.LBB193_8:                              # %if.end50
                                        #   in Loop: Header=BB193_2 Depth=1
	jmp	.LBB193_9
.LBB193_9:                              # %for.inc
                                        #   in Loop: Header=BB193_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_2
.LBB193_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB193_39
.LBB193_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB193_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB193_14
.LBB193_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -24(%rbp)
.LBB193_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB193_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB193_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB193_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB193_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB193_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB193_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB193_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB193_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB193_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB193_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB193_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB193_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB193_24:                             # %if.end123
	jmp	.LBB193_39
.LBB193_25:                             # %if.end124
                                        #   in Loop: Header=BB193_15 Depth=1
	jmp	.LBB193_26
.LBB193_26:                             # %if.end125
                                        #   in Loop: Header=BB193_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB193_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB193_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB193_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB193_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB193_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB193_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB193_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB193_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB193_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB193_34:                             # %if.end194
	jmp	.LBB193_39
.LBB193_35:                             # %if.end195
                                        #   in Loop: Header=BB193_15 Depth=1
	jmp	.LBB193_36
.LBB193_36:                             # %if.end196
                                        #   in Loop: Header=BB193_15 Depth=1
	jmp	.LBB193_37
.LBB193_37:                             # %for.inc197
                                        #   in Loop: Header=BB193_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_15
.LBB193_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB193_39:                             # %if.end201
	cmpl	$1880061644, -20(%rbp)  # imm = 0x700F76CC
	jne	.LBB193_41
.LBB193_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_40
.Lfunc_end193:
	.size	mark_pic_long_term.130, .Lfunc_end193-mark_pic_long_term.130
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.131
	.type	compare_fs_by_lt_pic_idx_asc.131,@function
compare_fs_by_lt_pic_idx_asc.131:       # @compare_fs_by_lt_pic_idx_asc.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2132621000, -16(%rbp)  # imm = 0x7F1D36C8
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB194_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB194_5
.LBB194_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB194_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB194_5
.LBB194_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB194_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2132621000, -16(%rbp)  # imm = 0x7F1D36C8
	jne	.LBB194_7
.LBB194_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_6
.Lfunc_end194:
	.size	compare_fs_by_lt_pic_idx_asc.131, .Lfunc_end194-compare_fs_by_lt_pic_idx_asc.131
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.132          # -- Begin function init_lists.132
	.p2align	4, 0x90
	.type	init_lists.132,@function
init_lists.132:                         # @init_lists.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$300795988, -76(%rbp)   # imm = 0x11EDC854
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB195_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB195_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB195_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB195_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB195_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB195_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB195_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB195_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB195_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB195_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB195_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB195_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB195_9
.LBB195_8:                              # %if.else
                                        #   in Loop: Header=BB195_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB195_9:                              # %if.end
                                        #   in Loop: Header=BB195_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB195_10:                             # %if.end36
                                        #   in Loop: Header=BB195_2 Depth=1
	jmp	.LBB195_11
.LBB195_11:                             # %if.end37
                                        #   in Loop: Header=BB195_2 Depth=1
	jmp	.LBB195_12
.LBB195_12:                             # %for.inc
                                        #   in Loop: Header=BB195_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_2
.LBB195_13:                             # %for.end
	jmp	.LBB195_31
.LBB195_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB195_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB195_17
.LBB195_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB195_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB195_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB195_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB195_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB195_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB195_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB195_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB195_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB195_23
.LBB195_22:                             # %if.else63
                                        #   in Loop: Header=BB195_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB195_23:                             # %if.end70
                                        #   in Loop: Header=BB195_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB195_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB195_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB195_25:                             # %if.end83
                                        #   in Loop: Header=BB195_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB195_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB195_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB195_27:                             # %if.end98
                                        #   in Loop: Header=BB195_18 Depth=1
	jmp	.LBB195_28
.LBB195_28:                             # %if.end99
                                        #   in Loop: Header=BB195_18 Depth=1
	jmp	.LBB195_29
.LBB195_29:                             # %for.inc100
                                        #   in Loop: Header=BB195_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_18
.LBB195_30:                             # %for.end102
	jmp	.LBB195_31
.LBB195_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB195_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB195_34
.LBB195_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB195_181
.LBB195_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB195_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB195_75
.LBB195_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB195_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB195_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB195_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB195_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB195_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB195_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB195_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB195_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB195_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB195_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB195_43:                             # %if.end140
                                        #   in Loop: Header=BB195_38 Depth=1
	jmp	.LBB195_44
.LBB195_44:                             # %if.end141
                                        #   in Loop: Header=BB195_38 Depth=1
	jmp	.LBB195_45
.LBB195_45:                             # %for.inc142
                                        #   in Loop: Header=BB195_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_38
.LBB195_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB195_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB195_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB195_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB195_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB195_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB195_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB195_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB195_51:                             # %if.end177
                                        #   in Loop: Header=BB195_47 Depth=1
	jmp	.LBB195_52
.LBB195_52:                             # %if.end178
                                        #   in Loop: Header=BB195_47 Depth=1
	jmp	.LBB195_53
.LBB195_53:                             # %for.inc179
                                        #   in Loop: Header=BB195_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_47
.LBB195_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB195_74
.LBB195_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB195_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB195_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB195_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB195_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB195_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB195_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB195_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB195_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB195_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB195_63:                             # %if.end212
                                        #   in Loop: Header=BB195_60 Depth=1
	jmp	.LBB195_64
.LBB195_64:                             # %for.inc213
                                        #   in Loop: Header=BB195_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_60
.LBB195_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB195_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB195_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB195_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB195_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB195_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB195_69:                             # %if.end242
                                        #   in Loop: Header=BB195_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB195_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB195_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB195_71:                             # %if.end259
                                        #   in Loop: Header=BB195_66 Depth=1
	jmp	.LBB195_72
.LBB195_72:                             # %for.inc260
                                        #   in Loop: Header=BB195_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_66
.LBB195_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB195_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB195_155
.LBB195_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB195_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB195_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB195_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB195_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB195_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB195_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB195_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB195_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB195_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB195_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB195_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB195_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB195_83:                             # %if.end307
                                        #   in Loop: Header=BB195_77 Depth=1
	jmp	.LBB195_84
.LBB195_84:                             # %if.end308
                                        #   in Loop: Header=BB195_77 Depth=1
	jmp	.LBB195_85
.LBB195_85:                             # %if.end309
                                        #   in Loop: Header=BB195_77 Depth=1
	jmp	.LBB195_86
.LBB195_86:                             # %for.inc310
                                        #   in Loop: Header=BB195_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_77
.LBB195_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB195_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB195_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB195_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB195_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB195_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB195_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB195_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB195_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB195_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB195_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB195_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB195_94:                             # %if.end354
                                        #   in Loop: Header=BB195_88 Depth=1
	jmp	.LBB195_95
.LBB195_95:                             # %if.end355
                                        #   in Loop: Header=BB195_88 Depth=1
	jmp	.LBB195_96
.LBB195_96:                             # %if.end356
                                        #   in Loop: Header=BB195_88 Depth=1
	jmp	.LBB195_97
.LBB195_97:                             # %for.inc357
                                        #   in Loop: Header=BB195_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_88
.LBB195_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB195_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB195_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB195_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB195_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_99
.LBB195_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB195_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB195_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB195_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB195_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_103
.LBB195_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB195_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB195_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB195_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB195_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB195_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB195_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB195_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB195_111:                            # %if.end428
                                        #   in Loop: Header=BB195_107 Depth=1
	jmp	.LBB195_112
.LBB195_112:                            # %if.end429
                                        #   in Loop: Header=BB195_107 Depth=1
	jmp	.LBB195_113
.LBB195_113:                            # %for.inc430
                                        #   in Loop: Header=BB195_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_107
.LBB195_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB195_154
.LBB195_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB195_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB195_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB195_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB195_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB195_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB195_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB195_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB195_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB195_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB195_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB195_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB195_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB195_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB195_126:                            # %if.end480
                                        #   in Loop: Header=BB195_122 Depth=1
	jmp	.LBB195_127
.LBB195_127:                            # %if.end481
                                        #   in Loop: Header=BB195_122 Depth=1
	jmp	.LBB195_128
.LBB195_128:                            # %for.inc482
                                        #   in Loop: Header=BB195_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_122
.LBB195_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB195_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB195_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB195_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB195_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB195_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB195_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB195_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB195_134:                            # %if.end507
                                        #   in Loop: Header=BB195_130 Depth=1
	jmp	.LBB195_135
.LBB195_135:                            # %if.end508
                                        #   in Loop: Header=BB195_130 Depth=1
	jmp	.LBB195_136
.LBB195_136:                            # %for.inc509
                                        #   in Loop: Header=BB195_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_130
.LBB195_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB195_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB195_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB195_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB195_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_138
.LBB195_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB195_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB195_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB195_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB195_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_142
.LBB195_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB195_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB195_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB195_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB195_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB195_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB195_149:                            # %if.end566
                                        #   in Loop: Header=BB195_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB195_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB195_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB195_151:                            # %if.end583
                                        #   in Loop: Header=BB195_146 Depth=1
	jmp	.LBB195_152
.LBB195_152:                            # %for.inc584
                                        #   in Loop: Header=BB195_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_146
.LBB195_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB195_154:                            # %if.end588
	jmp	.LBB195_155
.LBB195_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB195_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB195_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB195_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB195_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB195_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB195_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB195_158 Depth=1
	movl	$1, -68(%rbp)
.LBB195_161:                            # %if.end607
                                        #   in Loop: Header=BB195_158 Depth=1
	jmp	.LBB195_162
.LBB195_162:                            # %for.inc608
                                        #   in Loop: Header=BB195_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_158
.LBB195_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB195_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB195_165:                            # %if.end617
	jmp	.LBB195_166
.LBB195_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB195_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB195_169
.LBB195_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB195_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB195_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB195_172
.LBB195_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB195_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB195_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB195_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB195_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB195_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_173
.LBB195_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB195_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB195_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB195_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB195_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_177
.LBB195_180:                            # %for.end646.loopexit
	jmp	.LBB195_181
.LBB195_181:                            # %for.end646
	cmpl	$300795988, -76(%rbp)   # imm = 0x11EDC854
	jne	.LBB195_183
.LBB195_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_182
.Lfunc_end195:
	.size	init_lists.132, .Lfunc_end195-init_lists.132
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.133
	.type	compare_fs_by_frame_num_desc.133,@function
compare_fs_by_frame_num_desc.133:       # @compare_fs_by_frame_num_desc.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$989252489, -16(%rbp)   # imm = 0x3AF6CB89
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB196_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB196_5
.LBB196_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB196_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB196_5
.LBB196_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB196_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$989252489, -16(%rbp)   # imm = 0x3AF6CB89
	jne	.LBB196_7
.LBB196_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_6
.Lfunc_end196:
	.size	compare_fs_by_frame_num_desc.133, .Lfunc_end196-compare_fs_by_frame_num_desc.133
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.134
	.type	mm_unmark_long_term_for_reference.134,@function
mm_unmark_long_term_for_reference.134:  # @mm_unmark_long_term_for_reference.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1292014749, -12(%rbp)  # imm = 0x4D02949D
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB197_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB197_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB197_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB197_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB197_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB197_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB197_7:                              # %if.end
                                        #   in Loop: Header=BB197_1 Depth=1
	jmp	.LBB197_8
.LBB197_8:                              # %if.end14
                                        #   in Loop: Header=BB197_1 Depth=1
	jmp	.LBB197_24
.LBB197_9:                              # %if.else
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB197_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB197_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB197_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB197_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB197_14:                             # %if.end57
	jmp	.LBB197_27
.LBB197_15:                             # %if.end58
                                        #   in Loop: Header=BB197_1 Depth=1
	jmp	.LBB197_16
.LBB197_16:                             # %if.end59
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB197_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB197_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB197_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB197_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB197_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB197_21:                             # %if.end106
	jmp	.LBB197_27
.LBB197_22:                             # %if.end107
                                        #   in Loop: Header=BB197_1 Depth=1
	jmp	.LBB197_23
.LBB197_23:                             # %if.end108
                                        #   in Loop: Header=BB197_1 Depth=1
	jmp	.LBB197_24
.LBB197_24:                             # %if.end109
                                        #   in Loop: Header=BB197_1 Depth=1
	jmp	.LBB197_25
.LBB197_25:                             # %for.inc
                                        #   in Loop: Header=BB197_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_1
.LBB197_26:                             # %for.end.loopexit
	jmp	.LBB197_27
.LBB197_27:                             # %for.end
	cmpl	$1292014749, -12(%rbp)  # imm = 0x4D02949D
	jne	.LBB197_29
.LBB197_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_28
.Lfunc_end197:
	.size	mm_unmark_long_term_for_reference.134, .Lfunc_end197-mm_unmark_long_term_for_reference.134
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.135
	.type	remove_frame_from_dpb.135,@function
remove_frame_from_dpb.135:              # @remove_frame_from_dpb.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$895539884, -20(%rbp)   # imm = 0x3560DAAC
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB198_6
# %bb.1:                                # %entry
	movq	.LJTI198_0(,%rax,8), %rax
	jmpq	*%rax
.LBB198_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB198_7
.LBB198_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB198_7
.LBB198_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB198_7
.LBB198_5:                              # %sw.bb10
	jmp	.LBB198_7
.LBB198_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB198_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB198_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB198_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB198_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB198_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_8
.LBB198_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$895539884, -20(%rbp)   # imm = 0x3560DAAC
	jne	.LBB198_13
.LBB198_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_12
.Lfunc_end198:
	.size	remove_frame_from_dpb.135, .Lfunc_end198-remove_frame_from_dpb.135
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI198_0:
	.quad	.LBB198_5
	.quad	.LBB198_4
	.quad	.LBB198_3
	.quad	.LBB198_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.136
	.type	compare_fs_by_poc_asc.136,@function
compare_fs_by_poc_asc.136:              # @compare_fs_by_poc_asc.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2088880966, -16(%rbp)  # imm = 0x7C81CB46
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB199_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB199_5
.LBB199_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB199_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB199_5
.LBB199_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB199_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2088880966, -16(%rbp)  # imm = 0x7C81CB46
	jne	.LBB199_7
.LBB199_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_6
.Lfunc_end199:
	.size	compare_fs_by_poc_asc.136, .Lfunc_end199-compare_fs_by_poc_asc.136
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference.137
	.type	is_long_term_reference.137,@function
is_long_term_reference.137:             # @is_long_term_reference.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$844079603, -24(%rbp)   # imm = 0x324FA1F3
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB200_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB200_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB200_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB200_18
.LBB200_4:                              # %if.end
	jmp	.LBB200_5
.LBB200_5:                              # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB200_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB200_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB200_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB200_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB200_18
.LBB200_10:                             # %if.end17
	jmp	.LBB200_11
.LBB200_11:                             # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB200_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB200_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB200_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB200_18
.LBB200_15:                             # %if.end30
	jmp	.LBB200_16
.LBB200_16:                             # %if.end31
	jmp	.LBB200_17
.LBB200_17:                             # %if.end32
	movl	$0, -20(%rbp)
.LBB200_18:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$844079603, -24(%rbp)   # imm = 0x324FA1F3
	jne	.LBB200_20
.LBB200_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_19
.Lfunc_end200:
	.size	is_long_term_reference.137, .Lfunc_end200-is_long_term_reference.137
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.138
	.type	compare_pic_by_pic_num_desc.138,@function
compare_pic_by_pic_num_desc.138:        # @compare_pic_by_pic_num_desc.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$199593875, -16(%rbp)   # imm = 0xBE58F93
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB201_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB201_5
.LBB201_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB201_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB201_5
.LBB201_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB201_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$199593875, -16(%rbp)   # imm = 0xBE58F93
	jne	.LBB201_7
.LBB201_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_6
.Lfunc_end201:
	.size	compare_pic_by_pic_num_desc.138, .Lfunc_end201-compare_pic_by_pic_num_desc.138
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.139          # -- Begin function init_lists.139
	.p2align	4, 0x90
	.type	init_lists.139,@function
init_lists.139:                         # @init_lists.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1036978681, -76(%rbp)  # imm = 0x3DCF09F9
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB202_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB202_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB202_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB202_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB202_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB202_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB202_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB202_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB202_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB202_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB202_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB202_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB202_9
.LBB202_8:                              # %if.else
                                        #   in Loop: Header=BB202_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB202_9:                              # %if.end
                                        #   in Loop: Header=BB202_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB202_10:                             # %if.end36
                                        #   in Loop: Header=BB202_2 Depth=1
	jmp	.LBB202_11
.LBB202_11:                             # %if.end37
                                        #   in Loop: Header=BB202_2 Depth=1
	jmp	.LBB202_12
.LBB202_12:                             # %for.inc
                                        #   in Loop: Header=BB202_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_2
.LBB202_13:                             # %for.end
	jmp	.LBB202_31
.LBB202_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB202_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB202_17
.LBB202_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB202_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB202_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB202_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB202_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB202_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB202_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB202_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB202_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB202_23
.LBB202_22:                             # %if.else63
                                        #   in Loop: Header=BB202_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB202_23:                             # %if.end70
                                        #   in Loop: Header=BB202_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB202_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB202_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB202_25:                             # %if.end83
                                        #   in Loop: Header=BB202_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB202_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB202_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB202_27:                             # %if.end98
                                        #   in Loop: Header=BB202_18 Depth=1
	jmp	.LBB202_28
.LBB202_28:                             # %if.end99
                                        #   in Loop: Header=BB202_18 Depth=1
	jmp	.LBB202_29
.LBB202_29:                             # %for.inc100
                                        #   in Loop: Header=BB202_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_18
.LBB202_30:                             # %for.end102
	jmp	.LBB202_31
.LBB202_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB202_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB202_34
.LBB202_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB202_181
.LBB202_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB202_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB202_75
.LBB202_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB202_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB202_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB202_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB202_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB202_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB202_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB202_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB202_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB202_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB202_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB202_43:                             # %if.end140
                                        #   in Loop: Header=BB202_38 Depth=1
	jmp	.LBB202_44
.LBB202_44:                             # %if.end141
                                        #   in Loop: Header=BB202_38 Depth=1
	jmp	.LBB202_45
.LBB202_45:                             # %for.inc142
                                        #   in Loop: Header=BB202_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_38
.LBB202_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB202_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB202_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB202_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB202_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB202_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB202_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB202_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB202_51:                             # %if.end177
                                        #   in Loop: Header=BB202_47 Depth=1
	jmp	.LBB202_52
.LBB202_52:                             # %if.end178
                                        #   in Loop: Header=BB202_47 Depth=1
	jmp	.LBB202_53
.LBB202_53:                             # %for.inc179
                                        #   in Loop: Header=BB202_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_47
.LBB202_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB202_74
.LBB202_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB202_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB202_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB202_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB202_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB202_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB202_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB202_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB202_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB202_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB202_63:                             # %if.end212
                                        #   in Loop: Header=BB202_60 Depth=1
	jmp	.LBB202_64
.LBB202_64:                             # %for.inc213
                                        #   in Loop: Header=BB202_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_60
.LBB202_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB202_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB202_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB202_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB202_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB202_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB202_69:                             # %if.end242
                                        #   in Loop: Header=BB202_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB202_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB202_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB202_71:                             # %if.end259
                                        #   in Loop: Header=BB202_66 Depth=1
	jmp	.LBB202_72
.LBB202_72:                             # %for.inc260
                                        #   in Loop: Header=BB202_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_66
.LBB202_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB202_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB202_155
.LBB202_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB202_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB202_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB202_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB202_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB202_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB202_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB202_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB202_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB202_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB202_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB202_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB202_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB202_83:                             # %if.end307
                                        #   in Loop: Header=BB202_77 Depth=1
	jmp	.LBB202_84
.LBB202_84:                             # %if.end308
                                        #   in Loop: Header=BB202_77 Depth=1
	jmp	.LBB202_85
.LBB202_85:                             # %if.end309
                                        #   in Loop: Header=BB202_77 Depth=1
	jmp	.LBB202_86
.LBB202_86:                             # %for.inc310
                                        #   in Loop: Header=BB202_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_77
.LBB202_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB202_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB202_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB202_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB202_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB202_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB202_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB202_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB202_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB202_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB202_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB202_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB202_94:                             # %if.end354
                                        #   in Loop: Header=BB202_88 Depth=1
	jmp	.LBB202_95
.LBB202_95:                             # %if.end355
                                        #   in Loop: Header=BB202_88 Depth=1
	jmp	.LBB202_96
.LBB202_96:                             # %if.end356
                                        #   in Loop: Header=BB202_88 Depth=1
	jmp	.LBB202_97
.LBB202_97:                             # %for.inc357
                                        #   in Loop: Header=BB202_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_88
.LBB202_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB202_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB202_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB202_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB202_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB202_99
.LBB202_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB202_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB202_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB202_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB202_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB202_103
.LBB202_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB202_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB202_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB202_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB202_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB202_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB202_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB202_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB202_111:                            # %if.end428
                                        #   in Loop: Header=BB202_107 Depth=1
	jmp	.LBB202_112
.LBB202_112:                            # %if.end429
                                        #   in Loop: Header=BB202_107 Depth=1
	jmp	.LBB202_113
.LBB202_113:                            # %for.inc430
                                        #   in Loop: Header=BB202_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_107
.LBB202_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB202_154
.LBB202_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB202_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB202_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB202_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB202_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB202_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB202_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB202_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB202_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB202_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB202_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB202_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB202_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB202_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB202_126:                            # %if.end480
                                        #   in Loop: Header=BB202_122 Depth=1
	jmp	.LBB202_127
.LBB202_127:                            # %if.end481
                                        #   in Loop: Header=BB202_122 Depth=1
	jmp	.LBB202_128
.LBB202_128:                            # %for.inc482
                                        #   in Loop: Header=BB202_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_122
.LBB202_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB202_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB202_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB202_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB202_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB202_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB202_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB202_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB202_134:                            # %if.end507
                                        #   in Loop: Header=BB202_130 Depth=1
	jmp	.LBB202_135
.LBB202_135:                            # %if.end508
                                        #   in Loop: Header=BB202_130 Depth=1
	jmp	.LBB202_136
.LBB202_136:                            # %for.inc509
                                        #   in Loop: Header=BB202_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_130
.LBB202_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB202_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB202_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB202_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB202_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB202_138
.LBB202_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB202_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB202_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB202_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB202_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB202_142
.LBB202_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB202_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB202_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB202_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB202_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB202_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB202_149:                            # %if.end566
                                        #   in Loop: Header=BB202_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB202_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB202_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB202_151:                            # %if.end583
                                        #   in Loop: Header=BB202_146 Depth=1
	jmp	.LBB202_152
.LBB202_152:                            # %for.inc584
                                        #   in Loop: Header=BB202_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_146
.LBB202_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB202_154:                            # %if.end588
	jmp	.LBB202_155
.LBB202_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB202_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB202_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB202_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB202_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB202_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB202_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB202_158 Depth=1
	movl	$1, -72(%rbp)
.LBB202_161:                            # %if.end607
                                        #   in Loop: Header=BB202_158 Depth=1
	jmp	.LBB202_162
.LBB202_162:                            # %for.inc608
                                        #   in Loop: Header=BB202_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB202_158
.LBB202_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB202_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB202_165:                            # %if.end617
	jmp	.LBB202_166
.LBB202_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB202_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB202_169
.LBB202_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB202_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB202_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB202_172
.LBB202_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB202_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB202_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB202_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB202_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB202_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_173
.LBB202_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB202_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB202_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB202_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB202_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_177
.LBB202_180:                            # %for.end646.loopexit
	jmp	.LBB202_181
.LBB202_181:                            # %for.end646
	cmpl	$1036978681, -76(%rbp)  # imm = 0x3DCF09F9
	jne	.LBB202_183
.LBB202_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_182
.Lfunc_end202:
	.size	init_lists.139, .Lfunc_end202-init_lists.139
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.140
	.type	get_long_term_pic.140,@function
get_long_term_pic.140:                  # @get_long_term_pic.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$782191029, -28(%rbp)   # imm = 0x2E9F49B5
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB203_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB203_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB203_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB203_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB203_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB203_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB203_23
.LBB203_7:                              # %if.end
                                        #   in Loop: Header=BB203_1 Depth=1
	jmp	.LBB203_8
.LBB203_8:                              # %if.end14
                                        #   in Loop: Header=BB203_1 Depth=1
	jmp	.LBB203_20
.LBB203_9:                              # %if.else
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB203_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB203_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB203_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB203_23
.LBB203_13:                             # %if.end34
                                        #   in Loop: Header=BB203_1 Depth=1
	jmp	.LBB203_14
.LBB203_14:                             # %if.end35
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB203_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB203_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB203_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB203_23
.LBB203_18:                             # %if.end56
                                        #   in Loop: Header=BB203_1 Depth=1
	jmp	.LBB203_19
.LBB203_19:                             # %if.end57
                                        #   in Loop: Header=BB203_1 Depth=1
	jmp	.LBB203_20
.LBB203_20:                             # %if.end58
                                        #   in Loop: Header=BB203_1 Depth=1
	jmp	.LBB203_21
.LBB203_21:                             # %for.inc
                                        #   in Loop: Header=BB203_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB203_1
.LBB203_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB203_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$782191029, -28(%rbp)   # imm = 0x2E9F49B5
	jne	.LBB203_25
.LBB203_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_24
.Lfunc_end203:
	.size	get_long_term_pic.140, .Lfunc_end203-get_long_term_pic.140
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.141   # -- Begin function compute_colocated.141
	.p2align	4, 0x90
	.type	compute_colocated.141,@function
compute_colocated.141:                  # @compute_colocated.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$128883962, -72(%rbp)   # imm = 0x7AE9CFA
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB204_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB204_11
.LBB204_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB204_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB204_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB204_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB204_7
# %bb.6:                                # %if.then14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB204_8
.LBB204_7:                              # %if.else17
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
.LBB204_8:                              # %if.end
	jmp	.LBB204_9
.LBB204_9:                              # %if.end20
	jmp	.LBB204_10
.LBB204_10:                             # %if.end21
	jmp	.LBB204_11
.LBB204_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB204_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB204_29
.LBB204_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB204_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB204_14 Depth=1
	movl	$0, -16(%rbp)
.LBB204_16:                             # %for.cond27
                                        #   Parent Loop BB204_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB204_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB204_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB204_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB204_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB204_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB204_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB204_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB204_22
.LBB204_21:                             # %if.else160
                                        #   in Loop: Header=BB204_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB204_22:                             # %if.end283
                                        #   in Loop: Header=BB204_16 Depth=2
	jmp	.LBB204_24
.LBB204_23:                             # %if.else284
                                        #   in Loop: Header=BB204_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB204_24:                             # %if.end391
                                        #   in Loop: Header=BB204_16 Depth=2
	jmp	.LBB204_25
.LBB204_25:                             # %for.inc
                                        #   in Loop: Header=BB204_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB204_16
.LBB204_26:                             # %for.end
                                        #   in Loop: Header=BB204_14 Depth=1
	jmp	.LBB204_27
.LBB204_27:                             # %for.inc392
                                        #   in Loop: Header=BB204_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_14
.LBB204_28:                             # %for.end394
	jmp	.LBB204_29
.LBB204_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB204_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB204_241
.LBB204_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB204_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB204_32 Depth=1
	movl	$0, -12(%rbp)
.LBB204_34:                             # %for.cond408
                                        #   Parent Loop BB204_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB204_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_39
.LBB204_38:                             # %cond.false
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_39:                             # %cond.end
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_42
.LBB204_41:                             # %cond.false427
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_42:                             # %cond.end429
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_45
.LBB204_44:                             # %cond.false447
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_45:                             # %cond.end449
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_48
.LBB204_47:                             # %cond.false457
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_48:                             # %cond.end459
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_51
.LBB204_50:                             # %cond.false477
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_51:                             # %cond.end479
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_54
.LBB204_53:                             # %cond.false487
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_54:                             # %cond.end489
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_57
.LBB204_56:                             # %cond.false507
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_57:                             # %cond.end509
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_60
.LBB204_59:                             # %cond.false517
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_60:                             # %cond.end519
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_63
.LBB204_62:                             # %cond.false537
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_63:                             # %cond.end539
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_66
.LBB204_65:                             # %cond.false547
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_66:                             # %cond.end549
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB204_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB204_81
.LBB204_68:                             # %if.else569
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_71
.LBB204_70:                             # %cond.false576
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_71:                             # %cond.end578
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_74
.LBB204_73:                             # %cond.false586
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_74:                             # %cond.end588
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_77
.LBB204_76:                             # %cond.false604
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_77:                             # %cond.end606
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_80
.LBB204_79:                             # %cond.false614
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_80:                             # %cond.end616
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB204_81:                             # %if.end626
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_84
.LBB204_83:                             # %cond.false633
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_84:                             # %cond.end635
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_87
.LBB204_86:                             # %cond.false643
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_87:                             # %cond.end645
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB204_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB204_102
.LBB204_89:                             # %if.else665
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_92
.LBB204_91:                             # %cond.false672
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_92:                             # %cond.end674
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_95
.LBB204_94:                             # %cond.false682
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_95:                             # %cond.end684
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_98
.LBB204_97:                             # %cond.false700
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_98:                             # %cond.end702
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_101
.LBB204_100:                            # %cond.false710
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_101:                            # %cond.end712
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB204_102:                            # %if.end722
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB204_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB204_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB204_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB204_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB204_112
.LBB204_107:                            # %lor.rhs
                                        #   in Loop: Header=BB204_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB204_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB204_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB204_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB204_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB204_111:                            # %land.end
                                        #   in Loop: Header=BB204_34 Depth=2
.LBB204_112:                            # %lor.end
                                        #   in Loop: Header=BB204_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB204_113:                            # %if.end814
                                        #   in Loop: Header=BB204_34 Depth=2
	jmp	.LBB204_236
.LBB204_114:                            # %if.else815
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_117
.LBB204_116:                            # %cond.false822
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_117:                            # %cond.end824
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_120
.LBB204_119:                            # %cond.false832
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_120:                            # %cond.end834
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_123
.LBB204_122:                            # %cond.false851
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_123:                            # %cond.end853
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_126
.LBB204_125:                            # %cond.false861
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_126:                            # %cond.end863
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_129
.LBB204_128:                            # %cond.false881
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_129:                            # %cond.end883
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_132
.LBB204_131:                            # %cond.false891
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_132:                            # %cond.end893
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_135
.LBB204_134:                            # %cond.false911
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_135:                            # %cond.end913
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_138
.LBB204_137:                            # %cond.false921
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_138:                            # %cond.end923
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_141
.LBB204_140:                            # %cond.false941
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_141:                            # %cond.end943
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_144
.LBB204_143:                            # %cond.false951
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_144:                            # %cond.end953
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_147
.LBB204_146:                            # %cond.false968
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_147:                            # %cond.end970
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_150
.LBB204_149:                            # %cond.false978
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_150:                            # %cond.end980
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_153
.LBB204_152:                            # %cond.false996
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_153:                            # %cond.end998
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_156
.LBB204_155:                            # %cond.false1006
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_156:                            # %cond.end1008
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_159
.LBB204_158:                            # %cond.false1023
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_159:                            # %cond.end1025
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_162
.LBB204_161:                            # %cond.false1033
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_162:                            # %cond.end1035
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB204_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB204_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB204_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB204_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB204_172
.LBB204_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB204_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB204_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB204_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB204_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB204_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB204_171:                            # %land.end1133
                                        #   in Loop: Header=BB204_34 Depth=2
.LBB204_172:                            # %lor.end1134
                                        #   in Loop: Header=BB204_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB204_173:                            # %if.end1142
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_176
.LBB204_175:                            # %cond.false1149
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_176:                            # %cond.end1151
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_179
.LBB204_178:                            # %cond.false1159
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_179:                            # %cond.end1161
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_182
.LBB204_181:                            # %cond.false1178
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_182:                            # %cond.end1180
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_185
.LBB204_184:                            # %cond.false1188
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_185:                            # %cond.end1190
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_188
.LBB204_187:                            # %cond.false1208
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_188:                            # %cond.end1210
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_191
.LBB204_190:                            # %cond.false1218
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_191:                            # %cond.end1220
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_194
.LBB204_193:                            # %cond.false1238
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_194:                            # %cond.end1240
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_197
.LBB204_196:                            # %cond.false1248
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_197:                            # %cond.end1250
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_200
.LBB204_199:                            # %cond.false1268
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_200:                            # %cond.end1270
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_203
.LBB204_202:                            # %cond.false1278
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_203:                            # %cond.end1280
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_206
.LBB204_205:                            # %cond.false1295
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_206:                            # %cond.end1297
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_209
.LBB204_208:                            # %cond.false1305
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_209:                            # %cond.end1307
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_212
.LBB204_211:                            # %cond.false1323
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_212:                            # %cond.end1325
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_215
.LBB204_214:                            # %cond.false1333
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_215:                            # %cond.end1335
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_218
.LBB204_217:                            # %cond.false1350
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_218:                            # %cond.end1352
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_221
.LBB204_220:                            # %cond.false1360
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_221:                            # %cond.end1362
                                        #   in Loop: Header=BB204_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB204_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB204_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB204_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB204_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB204_231
.LBB204_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB204_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB204_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB204_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB204_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB204_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB204_230:                            # %land.end1460
                                        #   in Loop: Header=BB204_34 Depth=2
.LBB204_231:                            # %lor.end1461
                                        #   in Loop: Header=BB204_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB204_232:                            # %if.end1469
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB204_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB204_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB204_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB204_235:                            # %if.end1522
                                        #   in Loop: Header=BB204_34 Depth=2
	jmp	.LBB204_236
.LBB204_236:                            # %if.end1523
                                        #   in Loop: Header=BB204_34 Depth=2
	jmp	.LBB204_237
.LBB204_237:                            # %for.inc1524
                                        #   in Loop: Header=BB204_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_34
.LBB204_238:                            # %for.end1526
                                        #   in Loop: Header=BB204_32 Depth=1
	jmp	.LBB204_239
.LBB204_239:                            # %for.inc1527
                                        #   in Loop: Header=BB204_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB204_32
.LBB204_240:                            # %for.end1529
	jmp	.LBB204_241
.LBB204_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB204_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB204_259
.LBB204_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB204_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB204_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB204_245 Depth=1
	movl	$0, -16(%rbp)
.LBB204_247:                            # %for.cond1546
                                        #   Parent Loop BB204_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB204_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB204_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB204_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB204_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB204_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB204_252
.LBB204_251:                            # %if.else1699
                                        #   in Loop: Header=BB204_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB204_252:                            # %if.end1829
                                        #   in Loop: Header=BB204_247 Depth=2
	jmp	.LBB204_253
.LBB204_253:                            # %if.end1830
                                        #   in Loop: Header=BB204_247 Depth=2
	jmp	.LBB204_254
.LBB204_254:                            # %for.inc1831
                                        #   in Loop: Header=BB204_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB204_247
.LBB204_255:                            # %for.end1833
                                        #   in Loop: Header=BB204_245 Depth=1
	jmp	.LBB204_256
.LBB204_256:                            # %for.inc1834
                                        #   in Loop: Header=BB204_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_245
.LBB204_257:                            # %for.end1836
	jmp	.LBB204_258
.LBB204_258:                            # %if.end1837
	jmp	.LBB204_259
.LBB204_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB204_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB204_260 Depth=1
	movl	$0, -16(%rbp)
.LBB204_262:                            # %for.cond1845
                                        #   Parent Loop BB204_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB204_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB204_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB204_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB204_314
.LBB204_265:                            # %if.then1856
                                        #   in Loop: Header=BB204_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_268
.LBB204_267:                            # %cond.false1863
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_268:                            # %cond.end1865
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_271
.LBB204_270:                            # %cond.false1873
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_271:                            # %cond.end1875
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_274
.LBB204_273:                            # %cond.false1893
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_274:                            # %cond.end1895
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_277
.LBB204_276:                            # %cond.false1903
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_277:                            # %cond.end1905
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_280
.LBB204_279:                            # %cond.false1923
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_280:                            # %cond.end1925
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_283
.LBB204_282:                            # %cond.false1933
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_283:                            # %cond.end1935
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_286
.LBB204_285:                            # %cond.false1953
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_286:                            # %cond.end1955
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_289
.LBB204_288:                            # %cond.false1963
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_289:                            # %cond.end1965
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_292
.LBB204_291:                            # %cond.false1983
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_292:                            # %cond.end1985
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_295
.LBB204_294:                            # %cond.false1993
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_295:                            # %cond.end1995
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_298
.LBB204_297:                            # %cond.false2011
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_298:                            # %cond.end2013
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_301
.LBB204_300:                            # %cond.false2021
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_301:                            # %cond.end2023
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_304
.LBB204_303:                            # %cond.false2039
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_304:                            # %cond.end2041
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_307
.LBB204_306:                            # %cond.false2049
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_307:                            # %cond.end2051
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_310
.LBB204_309:                            # %cond.false2067
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_310:                            # %cond.end2069
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_313
.LBB204_312:                            # %cond.false2077
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_313:                            # %cond.end2079
                                        #   in Loop: Header=BB204_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB204_315
.LBB204_314:                            # %if.else2089
                                        #   in Loop: Header=BB204_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB204_315:                            # %if.end2194
                                        #   in Loop: Header=BB204_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB204_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB204_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB204_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB204_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB204_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB204_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB204_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB204_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB204_325
.LBB204_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB204_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB204_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB204_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB204_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB204_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB204_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB204_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB204_324:                            # %land.end2285
                                        #   in Loop: Header=BB204_262 Depth=2
.LBB204_325:                            # %lor.end2286
                                        #   in Loop: Header=BB204_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB204_326:                            # %if.end2295
                                        #   in Loop: Header=BB204_262 Depth=2
	jmp	.LBB204_327
.LBB204_327:                            # %for.inc2296
                                        #   in Loop: Header=BB204_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB204_262
.LBB204_328:                            # %for.end2298
                                        #   in Loop: Header=BB204_260 Depth=1
	jmp	.LBB204_329
.LBB204_329:                            # %for.inc2299
                                        #   in Loop: Header=BB204_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_260
.LBB204_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB204_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB204_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB204_332 Depth=1
	movl	$0, -16(%rbp)
.LBB204_334:                            # %for.cond2312
                                        #   Parent Loop BB204_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB204_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB204_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB204_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB204_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB204_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB204_340
.LBB204_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB204_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB204_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB204_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB204_341
.LBB204_340:                            # %if.then2342
                                        #   in Loop: Header=BB204_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB204_345
.LBB204_341:                            # %if.else2363
                                        #   in Loop: Header=BB204_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB204_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB204_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB204_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB204_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB204_344:                            # %if.end2394
                                        #   in Loop: Header=BB204_334 Depth=2
	jmp	.LBB204_345
.LBB204_345:                            # %if.end2395
                                        #   in Loop: Header=BB204_334 Depth=2
	jmp	.LBB204_346
.LBB204_346:                            # %for.inc2396
                                        #   in Loop: Header=BB204_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB204_334
.LBB204_347:                            # %for.end2398
                                        #   in Loop: Header=BB204_332 Depth=1
	jmp	.LBB204_348
.LBB204_348:                            # %for.inc2399
                                        #   in Loop: Header=BB204_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_332
.LBB204_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB204_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB204_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB204_350 Depth=1
	movl	$0, -16(%rbp)
.LBB204_352:                            # %for.cond2409
                                        #   Parent Loop BB204_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB204_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB204_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB204_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB204_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB204_360
.LBB204_356:                            # %cond.false2429
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB204_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	$127, %eax
	jmp	.LBB204_359
.LBB204_358:                            # %cond.false2441
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB204_359:                            # %cond.end2450
                                        #   in Loop: Header=BB204_352 Depth=2
.LBB204_360:                            # %cond.end2452
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB204_377
.LBB204_361:                            # %if.else2454
                                        #   in Loop: Header=BB204_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB204_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB204_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB204_368
.LBB204_364:                            # %cond.false2468
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB204_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	$127, %eax
	jmp	.LBB204_367
.LBB204_366:                            # %cond.false2480
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB204_367:                            # %cond.end2489
                                        #   in Loop: Header=BB204_352 Depth=2
.LBB204_368:                            # %cond.end2491
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB204_376
.LBB204_369:                            # %if.else2493
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB204_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB204_375
.LBB204_371:                            # %cond.false2504
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB204_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	$127, %eax
	jmp	.LBB204_374
.LBB204_373:                            # %cond.false2516
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB204_374:                            # %cond.end2525
                                        #   in Loop: Header=BB204_352 Depth=2
.LBB204_375:                            # %cond.end2527
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB204_376:                            # %if.end2529
                                        #   in Loop: Header=BB204_352 Depth=2
	jmp	.LBB204_377
.LBB204_377:                            # %if.end2530
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB204_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB204_383
.LBB204_379:                            # %cond.false2546
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB204_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	$127, %eax
	jmp	.LBB204_382
.LBB204_381:                            # %cond.false2562
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB204_382:                            # %cond.end2575
                                        #   in Loop: Header=BB204_352 Depth=2
.LBB204_383:                            # %cond.end2577
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB204_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB204_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB204_390
.LBB204_386:                            # %cond.false2592
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB204_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB204_389
.LBB204_388:                            # %cond.false2599
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB204_389:                            # %cond.end2603
                                        #   in Loop: Header=BB204_352 Depth=2
.LBB204_390:                            # %cond.end2605
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB204_392
.LBB204_391:                            # %if.else2611
                                        #   in Loop: Header=BB204_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB204_392:                            # %if.end2617
                                        #   in Loop: Header=BB204_352 Depth=2
	jmp	.LBB204_393
.LBB204_393:                            # %for.inc2618
                                        #   in Loop: Header=BB204_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB204_352
.LBB204_394:                            # %for.end2620
                                        #   in Loop: Header=BB204_350 Depth=1
	jmp	.LBB204_395
.LBB204_395:                            # %for.inc2621
                                        #   in Loop: Header=BB204_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_350
.LBB204_396:                            # %for.end2623
	jmp	.LBB204_397
.LBB204_397:                            # %if.end2624
	cmpl	$128883962, -72(%rbp)   # imm = 0x7AE9CFA
	jne	.LBB204_399
.LBB204_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_398
.Lfunc_end204:
	.size	compute_colocated.141, .Lfunc_end204-compute_colocated.141
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.142   # -- Begin function compute_colocated.142
	.p2align	4, 0x90
	.type	compute_colocated.142,@function
compute_colocated.142:                  # @compute_colocated.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$909668638, -72(%rbp)   # imm = 0x3638711E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB205_2
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB205_11
.LBB205_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB205_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB205_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB205_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB205_7
# %bb.6:                                # %if.then14
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB205_8
.LBB205_7:                              # %if.else17
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
.LBB205_8:                              # %if.end
	jmp	.LBB205_9
.LBB205_9:                              # %if.end20
	jmp	.LBB205_10
.LBB205_10:                             # %if.end21
	jmp	.LBB205_11
.LBB205_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB205_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB205_29
.LBB205_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB205_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB205_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB205_14 Depth=1
	movl	$0, -16(%rbp)
.LBB205_16:                             # %for.cond27
                                        #   Parent Loop BB205_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB205_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB205_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB205_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB205_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB205_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB205_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB205_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB205_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB205_22
.LBB205_21:                             # %if.else160
                                        #   in Loop: Header=BB205_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB205_22:                             # %if.end283
                                        #   in Loop: Header=BB205_16 Depth=2
	jmp	.LBB205_24
.LBB205_23:                             # %if.else284
                                        #   in Loop: Header=BB205_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB205_24:                             # %if.end391
                                        #   in Loop: Header=BB205_16 Depth=2
	jmp	.LBB205_25
.LBB205_25:                             # %for.inc
                                        #   in Loop: Header=BB205_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_16
.LBB205_26:                             # %for.end
                                        #   in Loop: Header=BB205_14 Depth=1
	jmp	.LBB205_27
.LBB205_27:                             # %for.inc392
                                        #   in Loop: Header=BB205_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_14
.LBB205_28:                             # %for.end394
	jmp	.LBB205_29
.LBB205_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB205_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB205_241
.LBB205_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB205_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB205_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB205_32 Depth=1
	movl	$0, -12(%rbp)
.LBB205_34:                             # %for.cond408
                                        #   Parent Loop BB205_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB205_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB205_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_39
.LBB205_38:                             # %cond.false
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_39:                             # %cond.end
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_42
.LBB205_41:                             # %cond.false427
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_42:                             # %cond.end429
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_45
.LBB205_44:                             # %cond.false447
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_45:                             # %cond.end449
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_48
.LBB205_47:                             # %cond.false457
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_48:                             # %cond.end459
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_51
.LBB205_50:                             # %cond.false477
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_51:                             # %cond.end479
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_54
.LBB205_53:                             # %cond.false487
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_54:                             # %cond.end489
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_57
.LBB205_56:                             # %cond.false507
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_57:                             # %cond.end509
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_60
.LBB205_59:                             # %cond.false517
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_60:                             # %cond.end519
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_63
.LBB205_62:                             # %cond.false537
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_63:                             # %cond.end539
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_66
.LBB205_65:                             # %cond.false547
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_66:                             # %cond.end549
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB205_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB205_81
.LBB205_68:                             # %if.else569
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_71
.LBB205_70:                             # %cond.false576
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_71:                             # %cond.end578
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_74
.LBB205_73:                             # %cond.false586
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_74:                             # %cond.end588
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_77
.LBB205_76:                             # %cond.false604
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_77:                             # %cond.end606
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_80
.LBB205_79:                             # %cond.false614
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_80:                             # %cond.end616
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB205_81:                             # %if.end626
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_84
.LBB205_83:                             # %cond.false633
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_84:                             # %cond.end635
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_87
.LBB205_86:                             # %cond.false643
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_87:                             # %cond.end645
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB205_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB205_102
.LBB205_89:                             # %if.else665
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_92
.LBB205_91:                             # %cond.false672
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_92:                             # %cond.end674
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_95
.LBB205_94:                             # %cond.false682
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_95:                             # %cond.end684
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_98
.LBB205_97:                             # %cond.false700
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_98:                             # %cond.end702
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_101
.LBB205_100:                            # %cond.false710
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_101:                            # %cond.end712
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB205_102:                            # %if.end722
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB205_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB205_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB205_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB205_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB205_112
.LBB205_107:                            # %lor.rhs
                                        #   in Loop: Header=BB205_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB205_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB205_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB205_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB205_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB205_111:                            # %land.end
                                        #   in Loop: Header=BB205_34 Depth=2
.LBB205_112:                            # %lor.end
                                        #   in Loop: Header=BB205_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB205_113:                            # %if.end814
                                        #   in Loop: Header=BB205_34 Depth=2
	jmp	.LBB205_236
.LBB205_114:                            # %if.else815
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_117
.LBB205_116:                            # %cond.false822
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_117:                            # %cond.end824
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_120
.LBB205_119:                            # %cond.false832
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_120:                            # %cond.end834
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_123
.LBB205_122:                            # %cond.false851
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_123:                            # %cond.end853
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_126
.LBB205_125:                            # %cond.false861
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_126:                            # %cond.end863
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_129
.LBB205_128:                            # %cond.false881
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_129:                            # %cond.end883
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_132
.LBB205_131:                            # %cond.false891
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_132:                            # %cond.end893
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_135
.LBB205_134:                            # %cond.false911
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_135:                            # %cond.end913
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_138
.LBB205_137:                            # %cond.false921
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_138:                            # %cond.end923
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_141
.LBB205_140:                            # %cond.false941
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_141:                            # %cond.end943
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_144
.LBB205_143:                            # %cond.false951
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_144:                            # %cond.end953
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_147
.LBB205_146:                            # %cond.false968
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_147:                            # %cond.end970
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_150
.LBB205_149:                            # %cond.false978
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_150:                            # %cond.end980
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_153
.LBB205_152:                            # %cond.false996
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_153:                            # %cond.end998
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_156
.LBB205_155:                            # %cond.false1006
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_156:                            # %cond.end1008
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_159
.LBB205_158:                            # %cond.false1023
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_159:                            # %cond.end1025
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_162
.LBB205_161:                            # %cond.false1033
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_162:                            # %cond.end1035
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB205_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB205_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB205_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB205_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB205_172
.LBB205_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB205_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB205_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB205_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB205_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB205_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB205_171:                            # %land.end1133
                                        #   in Loop: Header=BB205_34 Depth=2
.LBB205_172:                            # %lor.end1134
                                        #   in Loop: Header=BB205_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB205_173:                            # %if.end1142
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_176
.LBB205_175:                            # %cond.false1149
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_176:                            # %cond.end1151
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_179
.LBB205_178:                            # %cond.false1159
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_179:                            # %cond.end1161
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_182
.LBB205_181:                            # %cond.false1178
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_182:                            # %cond.end1180
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_185
.LBB205_184:                            # %cond.false1188
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_185:                            # %cond.end1190
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_188
.LBB205_187:                            # %cond.false1208
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_188:                            # %cond.end1210
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_191
.LBB205_190:                            # %cond.false1218
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_191:                            # %cond.end1220
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_194
.LBB205_193:                            # %cond.false1238
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_194:                            # %cond.end1240
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_197
.LBB205_196:                            # %cond.false1248
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_197:                            # %cond.end1250
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_200
.LBB205_199:                            # %cond.false1268
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_200:                            # %cond.end1270
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_203
.LBB205_202:                            # %cond.false1278
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_203:                            # %cond.end1280
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_206
.LBB205_205:                            # %cond.false1295
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_206:                            # %cond.end1297
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_209
.LBB205_208:                            # %cond.false1305
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_209:                            # %cond.end1307
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_212
.LBB205_211:                            # %cond.false1323
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_212:                            # %cond.end1325
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_215
.LBB205_214:                            # %cond.false1333
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_215:                            # %cond.end1335
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_218
.LBB205_217:                            # %cond.false1350
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_218:                            # %cond.end1352
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_221
.LBB205_220:                            # %cond.false1360
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_221:                            # %cond.end1362
                                        #   in Loop: Header=BB205_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB205_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB205_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB205_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB205_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB205_231
.LBB205_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB205_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB205_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB205_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB205_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB205_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB205_230:                            # %land.end1460
                                        #   in Loop: Header=BB205_34 Depth=2
.LBB205_231:                            # %lor.end1461
                                        #   in Loop: Header=BB205_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB205_232:                            # %if.end1469
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB205_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB205_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB205_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB205_235:                            # %if.end1522
                                        #   in Loop: Header=BB205_34 Depth=2
	jmp	.LBB205_236
.LBB205_236:                            # %if.end1523
                                        #   in Loop: Header=BB205_34 Depth=2
	jmp	.LBB205_237
.LBB205_237:                            # %for.inc1524
                                        #   in Loop: Header=BB205_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_34
.LBB205_238:                            # %for.end1526
                                        #   in Loop: Header=BB205_32 Depth=1
	jmp	.LBB205_239
.LBB205_239:                            # %for.inc1527
                                        #   in Loop: Header=BB205_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_32
.LBB205_240:                            # %for.end1529
	jmp	.LBB205_241
.LBB205_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB205_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB205_259
.LBB205_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB205_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB205_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB205_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB205_245 Depth=1
	movl	$0, -16(%rbp)
.LBB205_247:                            # %for.cond1546
                                        #   Parent Loop BB205_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB205_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB205_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB205_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB205_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB205_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB205_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB205_252
.LBB205_251:                            # %if.else1699
                                        #   in Loop: Header=BB205_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB205_252:                            # %if.end1829
                                        #   in Loop: Header=BB205_247 Depth=2
	jmp	.LBB205_253
.LBB205_253:                            # %if.end1830
                                        #   in Loop: Header=BB205_247 Depth=2
	jmp	.LBB205_254
.LBB205_254:                            # %for.inc1831
                                        #   in Loop: Header=BB205_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_247
.LBB205_255:                            # %for.end1833
                                        #   in Loop: Header=BB205_245 Depth=1
	jmp	.LBB205_256
.LBB205_256:                            # %for.inc1834
                                        #   in Loop: Header=BB205_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_245
.LBB205_257:                            # %for.end1836
	jmp	.LBB205_258
.LBB205_258:                            # %if.end1837
	jmp	.LBB205_259
.LBB205_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB205_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB205_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB205_260 Depth=1
	movl	$0, -16(%rbp)
.LBB205_262:                            # %for.cond1845
                                        #   Parent Loop BB205_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB205_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB205_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB205_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB205_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB205_314
.LBB205_265:                            # %if.then1856
                                        #   in Loop: Header=BB205_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_268
.LBB205_267:                            # %cond.false1863
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_268:                            # %cond.end1865
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_271
.LBB205_270:                            # %cond.false1873
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_271:                            # %cond.end1875
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_274
.LBB205_273:                            # %cond.false1893
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_274:                            # %cond.end1895
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_277
.LBB205_276:                            # %cond.false1903
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_277:                            # %cond.end1905
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_280
.LBB205_279:                            # %cond.false1923
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_280:                            # %cond.end1925
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_283
.LBB205_282:                            # %cond.false1933
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_283:                            # %cond.end1935
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_286
.LBB205_285:                            # %cond.false1953
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_286:                            # %cond.end1955
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_289
.LBB205_288:                            # %cond.false1963
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_289:                            # %cond.end1965
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_292
.LBB205_291:                            # %cond.false1983
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_292:                            # %cond.end1985
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_295
.LBB205_294:                            # %cond.false1993
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_295:                            # %cond.end1995
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_298
.LBB205_297:                            # %cond.false2011
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_298:                            # %cond.end2013
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_301
.LBB205_300:                            # %cond.false2021
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_301:                            # %cond.end2023
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_304
.LBB205_303:                            # %cond.false2039
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_304:                            # %cond.end2041
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_307
.LBB205_306:                            # %cond.false2049
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_307:                            # %cond.end2051
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_310
.LBB205_309:                            # %cond.false2067
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_310:                            # %cond.end2069
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB205_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB205_313
.LBB205_312:                            # %cond.false2077
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB205_313:                            # %cond.end2079
                                        #   in Loop: Header=BB205_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB205_315
.LBB205_314:                            # %if.else2089
                                        #   in Loop: Header=BB205_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB205_315:                            # %if.end2194
                                        #   in Loop: Header=BB205_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB205_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB205_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB205_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB205_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB205_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB205_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB205_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB205_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB205_325
.LBB205_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB205_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB205_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB205_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB205_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB205_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB205_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB205_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB205_324:                            # %land.end2285
                                        #   in Loop: Header=BB205_262 Depth=2
.LBB205_325:                            # %lor.end2286
                                        #   in Loop: Header=BB205_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB205_326:                            # %if.end2295
                                        #   in Loop: Header=BB205_262 Depth=2
	jmp	.LBB205_327
.LBB205_327:                            # %for.inc2296
                                        #   in Loop: Header=BB205_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_262
.LBB205_328:                            # %for.end2298
                                        #   in Loop: Header=BB205_260 Depth=1
	jmp	.LBB205_329
.LBB205_329:                            # %for.inc2299
                                        #   in Loop: Header=BB205_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_260
.LBB205_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB205_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB205_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB205_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB205_332 Depth=1
	movl	$0, -16(%rbp)
.LBB205_334:                            # %for.cond2312
                                        #   Parent Loop BB205_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB205_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB205_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB205_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB205_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB205_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB205_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB205_340
.LBB205_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB205_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB205_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB205_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB205_341
.LBB205_340:                            # %if.then2342
                                        #   in Loop: Header=BB205_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB205_345
.LBB205_341:                            # %if.else2363
                                        #   in Loop: Header=BB205_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB205_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB205_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB205_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB205_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB205_344:                            # %if.end2394
                                        #   in Loop: Header=BB205_334 Depth=2
	jmp	.LBB205_345
.LBB205_345:                            # %if.end2395
                                        #   in Loop: Header=BB205_334 Depth=2
	jmp	.LBB205_346
.LBB205_346:                            # %for.inc2396
                                        #   in Loop: Header=BB205_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_334
.LBB205_347:                            # %for.end2398
                                        #   in Loop: Header=BB205_332 Depth=1
	jmp	.LBB205_348
.LBB205_348:                            # %for.inc2399
                                        #   in Loop: Header=BB205_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_332
.LBB205_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB205_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB205_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB205_350 Depth=1
	movl	$0, -16(%rbp)
.LBB205_352:                            # %for.cond2409
                                        #   Parent Loop BB205_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB205_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB205_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB205_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB205_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB205_360
.LBB205_356:                            # %cond.false2429
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB205_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	$127, %eax
	jmp	.LBB205_359
.LBB205_358:                            # %cond.false2441
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB205_359:                            # %cond.end2450
                                        #   in Loop: Header=BB205_352 Depth=2
.LBB205_360:                            # %cond.end2452
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB205_377
.LBB205_361:                            # %if.else2454
                                        #   in Loop: Header=BB205_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB205_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB205_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB205_368
.LBB205_364:                            # %cond.false2468
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB205_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	$127, %eax
	jmp	.LBB205_367
.LBB205_366:                            # %cond.false2480
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB205_367:                            # %cond.end2489
                                        #   in Loop: Header=BB205_352 Depth=2
.LBB205_368:                            # %cond.end2491
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB205_376
.LBB205_369:                            # %if.else2493
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB205_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB205_375
.LBB205_371:                            # %cond.false2504
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB205_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	$127, %eax
	jmp	.LBB205_374
.LBB205_373:                            # %cond.false2516
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB205_374:                            # %cond.end2525
                                        #   in Loop: Header=BB205_352 Depth=2
.LBB205_375:                            # %cond.end2527
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB205_376:                            # %if.end2529
                                        #   in Loop: Header=BB205_352 Depth=2
	jmp	.LBB205_377
.LBB205_377:                            # %if.end2530
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB205_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB205_383
.LBB205_379:                            # %cond.false2546
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB205_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	$127, %eax
	jmp	.LBB205_382
.LBB205_381:                            # %cond.false2562
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB205_382:                            # %cond.end2575
                                        #   in Loop: Header=BB205_352 Depth=2
.LBB205_383:                            # %cond.end2577
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB205_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB205_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB205_390
.LBB205_386:                            # %cond.false2592
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB205_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB205_389
.LBB205_388:                            # %cond.false2599
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB205_389:                            # %cond.end2603
                                        #   in Loop: Header=BB205_352 Depth=2
.LBB205_390:                            # %cond.end2605
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB205_392
.LBB205_391:                            # %if.else2611
                                        #   in Loop: Header=BB205_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB205_392:                            # %if.end2617
                                        #   in Loop: Header=BB205_352 Depth=2
	jmp	.LBB205_393
.LBB205_393:                            # %for.inc2618
                                        #   in Loop: Header=BB205_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_352
.LBB205_394:                            # %for.end2620
                                        #   in Loop: Header=BB205_350 Depth=1
	jmp	.LBB205_395
.LBB205_395:                            # %for.inc2621
                                        #   in Loop: Header=BB205_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_350
.LBB205_396:                            # %for.end2623
	jmp	.LBB205_397
.LBB205_397:                            # %if.end2624
	cmpl	$909668638, -72(%rbp)   # imm = 0x3638711E
	jne	.LBB205_399
.LBB205_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_398
.Lfunc_end205:
	.size	compute_colocated.142, .Lfunc_end205-compute_colocated.142
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management.143
	.type	adaptive_memory_management.143,@function
adaptive_memory_management.143:         # @adaptive_memory_management.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$735362060, -20(%rbp)   # imm = 0x2BD4BC0C
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	$0, 72644(%rax)
.LBB206_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	img, %rax
	cmpq	$0, 72512(%rax)
	je	.LBB206_15
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	img(%rip), %rax
	movq	72512(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$6, %rcx
	ja	.LBB206_13
# %bb.3:                                # %while.body
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	.LJTI206_0(,%rax,8), %rax
	jmpq	*%rax
.LBB206_4:                              # %sw.bb
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB206_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB206_1 Depth=1
	movabsq	$.L.str.22, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB206_6:                              # %if.end
                                        #   in Loop: Header=BB206_1 Depth=1
	jmp	.LBB206_14
.LBB206_7:                              # %sw.bb2
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	callq	mm_unmark_short_term_for_reference
	callq	update_ref_list
	jmp	.LBB206_14
.LBB206_8:                              # %sw.bb3
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	callq	mm_unmark_long_term_for_reference
	callq	update_ltref_list
	jmp	.LBB206_14
.LBB206_9:                              # %sw.bb4
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	movq	-8(%rbp), %rax
	movl	12(%rax), %edx
	callq	mm_assign_long_term_frame_idx
	callq	update_ref_list
	callq	update_ltref_list
	jmp	.LBB206_14
.LBB206_10:                             # %sw.bb6
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %edi
	callq	mm_update_max_long_term_frame_idx
	callq	update_ltref_list
	jmp	.LBB206_14
.LBB206_11:                             # %sw.bb7
                                        #   in Loop: Header=BB206_1 Depth=1
	callq	mm_unmark_all_short_term_for_reference
	callq	mm_unmark_all_long_term_for_reference
	movq	img, %rax
	movl	$1, 72644(%rax)
	jmp	.LBB206_14
.LBB206_12:                             # %sw.bb9
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	12(%rax), %esi
	callq	mm_mark_current_picture_long_term
	jmp	.LBB206_14
.LBB206_13:                             # %sw.default
                                        #   in Loop: Header=BB206_1 Depth=1
	movabsq	$.L.str.23, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB206_14:                             # %sw.epilog
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	img, %rcx
	movq	%rax, 72512(%rcx)
	movq	-8(%rbp), %rdi
	callq	free
	jmp	.LBB206_1
.LBB206_15:                             # %while.end
	movq	img, %rax
	cmpl	$0, 72644(%rax)
	je	.LBB206_23
# %bb.16:                               # %if.then15
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 4(%rax)
	movq	img(%rip), %rax
	movl	$0, 72460(%rax)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB206_21
	jmp	.LBB206_17
.LBB206_17:                             # %if.then15
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB206_19
	jmp	.LBB206_18
.LBB206_18:                             # %if.then15
	subl	$2, %eax
	je	.LBB206_20
	jmp	.LBB206_22
.LBB206_19:                             # %sw.bb16
	movq	img, %rax
	movl	$0, 72448(%rax)
	jmp	.LBB206_22
.LBB206_20:                             # %sw.bb17
	movq	img, %rax
	movl	$0, 72452(%rax)
	jmp	.LBB206_22
.LBB206_21:                             # %sw.bb18
	movq	img, %rax
	movl	$0, 72456(%rax)
.LBB206_22:                             # %sw.epilog19
	callq	flush_dpb
.LBB206_23:                             # %if.end20
	cmpl	$735362060, -20(%rbp)   # imm = 0x2BD4BC0C
	jne	.LBB206_25
.LBB206_24:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_24
.Lfunc_end206:
	.size	adaptive_memory_management.143, .Lfunc_end206-adaptive_memory_management.143
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI206_0:
	.quad	.LBB206_4
	.quad	.LBB206_7
	.quad	.LBB206_8
	.quad	.LBB206_9
	.quad	.LBB206_10
	.quad	.LBB206_11
	.quad	.LBB206_12
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.144
	.type	mm_unmark_short_term_for_reference.144,@function
mm_unmark_short_term_for_reference.144: # @mm_unmark_short_term_for_reference.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$573079271, -16(%rbp)   # imm = 0x22287EE7
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB207_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB207_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB207_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB207_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB207_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB207_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB207_27
.LBB207_7:                              # %if.end
                                        #   in Loop: Header=BB207_1 Depth=1
	jmp	.LBB207_8
.LBB207_8:                              # %if.end13
                                        #   in Loop: Header=BB207_1 Depth=1
	jmp	.LBB207_24
.LBB207_9:                              # %if.else
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB207_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB207_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB207_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB207_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB207_14:                             # %if.end44
	jmp	.LBB207_27
.LBB207_15:                             # %if.end45
                                        #   in Loop: Header=BB207_1 Depth=1
	jmp	.LBB207_16
.LBB207_16:                             # %if.end46
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB207_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB207_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB207_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB207_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB207_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB207_21:                             # %if.end81
	jmp	.LBB207_27
.LBB207_22:                             # %if.end82
                                        #   in Loop: Header=BB207_1 Depth=1
	jmp	.LBB207_23
.LBB207_23:                             # %if.end83
                                        #   in Loop: Header=BB207_1 Depth=1
	jmp	.LBB207_24
.LBB207_24:                             # %if.end84
                                        #   in Loop: Header=BB207_1 Depth=1
	jmp	.LBB207_25
.LBB207_25:                             # %for.inc
                                        #   in Loop: Header=BB207_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_1
.LBB207_26:                             # %for.end.loopexit
	jmp	.LBB207_27
.LBB207_27:                             # %for.end
	cmpl	$573079271, -16(%rbp)   # imm = 0x22287EE7
	jne	.LBB207_29
.LBB207_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_28
.Lfunc_end207:
	.size	mm_unmark_short_term_for_reference.144, .Lfunc_end207-mm_unmark_short_term_for_reference.144
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.145
	.type	compare_fs_by_poc_desc.145,@function
compare_fs_by_poc_desc.145:             # @compare_fs_by_poc_desc.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$342027563, -16(%rbp)   # imm = 0x1462ED2B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB208_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB208_5
.LBB208_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB208_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB208_5
.LBB208_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB208_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$342027563, -16(%rbp)   # imm = 0x1462ED2B
	jne	.LBB208_7
.LBB208_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_6
.Lfunc_end208:
	.size	compare_fs_by_poc_desc.145, .Lfunc_end208-compare_fs_by_poc_desc.145
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.146
	.type	mark_pic_long_term.146,@function
mark_pic_long_term.146:                 # @mark_pic_long_term.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1730138927, -24(%rbp)  # imm = 0x671FD32F
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB209_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB209_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB209_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB209_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB209_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB209_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB209_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB209_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB209_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB209_39
.LBB209_7:                              # %if.end
                                        #   in Loop: Header=BB209_2 Depth=1
	jmp	.LBB209_8
.LBB209_8:                              # %if.end50
                                        #   in Loop: Header=BB209_2 Depth=1
	jmp	.LBB209_9
.LBB209_9:                              # %for.inc
                                        #   in Loop: Header=BB209_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB209_2
.LBB209_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB209_39
.LBB209_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB209_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB209_14
.LBB209_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -20(%rbp)
.LBB209_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB209_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB209_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB209_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB209_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB209_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB209_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB209_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB209_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB209_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB209_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB209_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB209_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB209_24:                             # %if.end123
	jmp	.LBB209_39
.LBB209_25:                             # %if.end124
                                        #   in Loop: Header=BB209_15 Depth=1
	jmp	.LBB209_26
.LBB209_26:                             # %if.end125
                                        #   in Loop: Header=BB209_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB209_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB209_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB209_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB209_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB209_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB209_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB209_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB209_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB209_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB209_34:                             # %if.end194
	jmp	.LBB209_39
.LBB209_35:                             # %if.end195
                                        #   in Loop: Header=BB209_15 Depth=1
	jmp	.LBB209_36
.LBB209_36:                             # %if.end196
                                        #   in Loop: Header=BB209_15 Depth=1
	jmp	.LBB209_37
.LBB209_37:                             # %for.inc197
                                        #   in Loop: Header=BB209_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB209_15
.LBB209_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB209_39:                             # %if.end201
	cmpl	$1730138927, -24(%rbp)  # imm = 0x671FD32F
	jne	.LBB209_41
.LBB209_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_40
.Lfunc_end209:
	.size	mark_pic_long_term.146, .Lfunc_end209-mark_pic_long_term.146
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.147
	.type	compare_fs_by_poc_desc.147,@function
compare_fs_by_poc_desc.147:             # @compare_fs_by_poc_desc.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1099773017, -16(%rbp)  # imm = 0x418D3459
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB210_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB210_5
.LBB210_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB210_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB210_5
.LBB210_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB210_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1099773017, -16(%rbp)  # imm = 0x418D3459
	jne	.LBB210_7
.LBB210_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_6
.Lfunc_end210:
	.size	compare_fs_by_poc_desc.147, .Lfunc_end210-compare_fs_by_poc_desc.147
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.148
	.type	mark_pic_long_term.148,@function
mark_pic_long_term.148:                 # @mark_pic_long_term.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1621123086, -24(%rbp)  # imm = 0x60A0600E
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB211_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB211_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB211_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB211_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB211_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB211_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB211_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB211_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB211_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB211_39
.LBB211_7:                              # %if.end
                                        #   in Loop: Header=BB211_2 Depth=1
	jmp	.LBB211_8
.LBB211_8:                              # %if.end50
                                        #   in Loop: Header=BB211_2 Depth=1
	jmp	.LBB211_9
.LBB211_9:                              # %for.inc
                                        #   in Loop: Header=BB211_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_2
.LBB211_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB211_39
.LBB211_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB211_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB211_14
.LBB211_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -20(%rbp)
.LBB211_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB211_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB211_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB211_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB211_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB211_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB211_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB211_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB211_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB211_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB211_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB211_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB211_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB211_24:                             # %if.end123
	jmp	.LBB211_39
.LBB211_25:                             # %if.end124
                                        #   in Loop: Header=BB211_15 Depth=1
	jmp	.LBB211_26
.LBB211_26:                             # %if.end125
                                        #   in Loop: Header=BB211_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB211_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB211_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB211_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB211_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB211_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB211_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB211_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB211_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB211_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB211_34:                             # %if.end194
	jmp	.LBB211_39
.LBB211_35:                             # %if.end195
                                        #   in Loop: Header=BB211_15 Depth=1
	jmp	.LBB211_36
.LBB211_36:                             # %if.end196
                                        #   in Loop: Header=BB211_15 Depth=1
	jmp	.LBB211_37
.LBB211_37:                             # %for.inc197
                                        #   in Loop: Header=BB211_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_15
.LBB211_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB211_39:                             # %if.end201
	cmpl	$1621123086, -24(%rbp)  # imm = 0x60A0600E
	jne	.LBB211_41
.LBB211_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_40
.Lfunc_end211:
	.size	mark_pic_long_term.148, .Lfunc_end211-mark_pic_long_term.148
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.149
	.type	compare_fs_by_frame_num_desc.149,@function
compare_fs_by_frame_num_desc.149:       # @compare_fs_by_frame_num_desc.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$456262157, -16(%rbp)   # imm = 0x1B32020D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB212_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB212_5
.LBB212_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB212_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB212_5
.LBB212_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB212_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$456262157, -16(%rbp)   # imm = 0x1B32020D
	jne	.LBB212_7
.LBB212_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_6
.Lfunc_end212:
	.size	compare_fs_by_frame_num_desc.149, .Lfunc_end212-compare_fs_by_frame_num_desc.149
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.150
	.type	gen_pic_list_from_frame_list.150,@function
gen_pic_list_from_frame_list.150:       # @gen_pic_list_from_frame_list.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1222389913, -64(%rbp)  # imm = 0x48DC3099
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB213_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB213_3
.LBB213_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB213_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB213_28
# %bb.4:                                # %if.then1
	jmp	.LBB213_5
.LBB213_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_9 Depth 2
                                        #     Child Loop BB213_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB213_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB213_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB213_7:                              # %lor.end
                                        #   in Loop: Header=BB213_5 Depth=1
	testb	$1, %al
	jne	.LBB213_8
	jmp	.LBB213_27
.LBB213_8:                              # %while.body
                                        #   in Loop: Header=BB213_5 Depth=1
	jmp	.LBB213_9
.LBB213_9:                              # %for.cond
                                        #   Parent Loop BB213_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB213_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB213_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB213_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB213_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB213_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB213_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB213_17
.LBB213_13:                             # %if.end17
                                        #   in Loop: Header=BB213_9 Depth=2
	jmp	.LBB213_14
.LBB213_14:                             # %if.end18
                                        #   in Loop: Header=BB213_9 Depth=2
	jmp	.LBB213_15
.LBB213_15:                             # %for.inc
                                        #   in Loop: Header=BB213_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB213_9
.LBB213_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB213_5 Depth=1
	jmp	.LBB213_17
.LBB213_17:                             # %for.end
                                        #   in Loop: Header=BB213_5 Depth=1
	jmp	.LBB213_18
.LBB213_18:                             # %for.cond20
                                        #   Parent Loop BB213_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB213_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB213_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB213_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB213_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB213_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB213_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_26
.LBB213_22:                             # %if.end41
                                        #   in Loop: Header=BB213_18 Depth=2
	jmp	.LBB213_23
.LBB213_23:                             # %if.end42
                                        #   in Loop: Header=BB213_18 Depth=2
	jmp	.LBB213_24
.LBB213_24:                             # %for.inc43
                                        #   in Loop: Header=BB213_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_18
.LBB213_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB213_5 Depth=1
	jmp	.LBB213_26
.LBB213_26:                             # %for.end45
                                        #   in Loop: Header=BB213_5 Depth=1
	jmp	.LBB213_5
.LBB213_27:                             # %while.end
	jmp	.LBB213_28
.LBB213_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB213_53
# %bb.29:                               # %if.then48
	jmp	.LBB213_30
.LBB213_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_34 Depth 2
                                        #     Child Loop BB213_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB213_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB213_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB213_32:                             # %lor.end53
                                        #   in Loop: Header=BB213_30 Depth=1
	testb	$1, %al
	jne	.LBB213_33
	jmp	.LBB213_52
.LBB213_33:                             # %while.body54
                                        #   in Loop: Header=BB213_30 Depth=1
	jmp	.LBB213_34
.LBB213_34:                             # %for.cond55
                                        #   Parent Loop BB213_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB213_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB213_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB213_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB213_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB213_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB213_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_42
.LBB213_38:                             # %if.end77
                                        #   in Loop: Header=BB213_34 Depth=2
	jmp	.LBB213_39
.LBB213_39:                             # %if.end78
                                        #   in Loop: Header=BB213_34 Depth=2
	jmp	.LBB213_40
.LBB213_40:                             # %for.inc79
                                        #   in Loop: Header=BB213_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_34
.LBB213_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB213_30 Depth=1
	jmp	.LBB213_42
.LBB213_42:                             # %for.end81
                                        #   in Loop: Header=BB213_30 Depth=1
	jmp	.LBB213_43
.LBB213_43:                             # %for.cond82
                                        #   Parent Loop BB213_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB213_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB213_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB213_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB213_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB213_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB213_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB213_51
.LBB213_47:                             # %if.end104
                                        #   in Loop: Header=BB213_43 Depth=2
	jmp	.LBB213_48
.LBB213_48:                             # %if.end105
                                        #   in Loop: Header=BB213_43 Depth=2
	jmp	.LBB213_49
.LBB213_49:                             # %for.inc106
                                        #   in Loop: Header=BB213_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB213_43
.LBB213_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB213_30 Depth=1
	jmp	.LBB213_51
.LBB213_51:                             # %for.end108
                                        #   in Loop: Header=BB213_30 Depth=1
	jmp	.LBB213_30
.LBB213_52:                             # %while.end109
	jmp	.LBB213_53
.LBB213_53:                             # %if.end110
	cmpl	$1222389913, -64(%rbp)  # imm = 0x48DC3099
	jne	.LBB213_55
.LBB213_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_54
.Lfunc_end213:
	.size	gen_pic_list_from_frame_list.150, .Lfunc_end213-gen_pic_list_from_frame_list.150
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.151 # -- Begin function alloc_storable_picture.151
	.p2align	4, 0x90
	.type	alloc_storable_picture.151,@function
alloc_storable_picture.151:             # @alloc_storable_picture.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$714211512, -40(%rbp)   # imm = 0x2A9200B8
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB214_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB214_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB214_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB214_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB214_6
.LBB214_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB214_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB214_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB214_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB214_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB214_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$714211512, -40(%rbp)   # imm = 0x2A9200B8
	jne	.LBB214_12
.LBB214_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_11
.Lfunc_end214:
	.size	alloc_storable_picture.151, .Lfunc_end214-alloc_storable_picture.151
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.152
	.type	compare_pic_by_poc_desc.152,@function
compare_pic_by_poc_desc.152:            # @compare_pic_by_poc_desc.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1604950202, -16(%rbp)  # imm = 0x5FA998BA
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB215_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB215_5
.LBB215_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB215_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB215_5
.LBB215_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB215_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1604950202, -16(%rbp)  # imm = 0x5FA998BA
	jne	.LBB215_7
.LBB215_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_6
.Lfunc_end215:
	.size	compare_pic_by_poc_desc.152, .Lfunc_end215-compare_pic_by_poc_desc.152
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.153 # -- Begin function alloc_storable_picture.153
	.p2align	4, 0x90
	.type	alloc_storable_picture.153,@function
alloc_storable_picture.153:             # @alloc_storable_picture.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$596204825, -40(%rbp)   # imm = 0x23895D19
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB216_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB216_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB216_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB216_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB216_6
.LBB216_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB216_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB216_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB216_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB216_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB216_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$596204825, -40(%rbp)   # imm = 0x23895D19
	jne	.LBB216_12
.LBB216_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_11
.Lfunc_end216:
	.size	alloc_storable_picture.153, .Lfunc_end216-alloc_storable_picture.153
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.154     # -- Begin function dpb_split_field.154
	.p2align	4, 0x90
	.type	dpb_split_field.154,@function
dpb_split_field.154:                    # @dpb_split_field.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$680556495, -68(%rbp)   # imm = 0x289077CF
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB217_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB217_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB217_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB217_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_2
.LBB217_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB217_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB217_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB217_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_6
.LBB217_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB217_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB217_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB217_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_10
.LBB217_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB217_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB217_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB217_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_14
.LBB217_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB217_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB217_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB217_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB217_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB217_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_19
.LBB217_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB217_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB217_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB217_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB217_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_23
.LBB217_26:                             # %for.end328
	jmp	.LBB217_27
.LBB217_27:                             # %if.end
	jmp	.LBB217_29
.LBB217_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB217_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB217_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB217_30 Depth=1
	movl	$0, -4(%rbp)
.LBB217_32:                             # %for.cond343
                                        #   Parent Loop BB217_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB217_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB217_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-32(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB217_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB217_32 Depth=2
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB217_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB217_38
.LBB217_37:                             # %cond.false
                                        #   in Loop: Header=BB217_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB217_38
.LBB217_38:                             # %cond.end
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB217_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB217_41
.LBB217_40:                             # %cond.false415
                                        #   in Loop: Header=BB217_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB217_41
.LBB217_41:                             # %cond.end416
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB217_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB217_44
.LBB217_43:                             # %cond.false436
                                        #   in Loop: Header=BB217_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB217_44
.LBB217_44:                             # %cond.end437
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB217_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB217_47
.LBB217_46:                             # %cond.false456
                                        #   in Loop: Header=BB217_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB217_47
.LBB217_47:                             # %cond.end457
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB217_55
.LBB217_48:                             # %if.else466
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB217_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB217_51
.LBB217_50:                             # %cond.false491
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB217_51
.LBB217_51:                             # %cond.end492
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB217_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB217_54
.LBB217_53:                             # %cond.false509
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB217_54
.LBB217_54:                             # %cond.end510
                                        #   in Loop: Header=BB217_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB217_55:                             # %if.end519
                                        #   in Loop: Header=BB217_32 Depth=2
	jmp	.LBB217_56
.LBB217_56:                             # %for.inc520
                                        #   in Loop: Header=BB217_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_32
.LBB217_57:                             # %for.end522
                                        #   in Loop: Header=BB217_30 Depth=1
	jmp	.LBB217_58
.LBB217_58:                             # %for.inc523
                                        #   in Loop: Header=BB217_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB217_30
.LBB217_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB217_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB217_73
.LBB217_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB217_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB217_62 Depth=1
	movl	$0, -8(%rbp)
.LBB217_64:                             # %for.cond538
                                        #   Parent Loop BB217_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB217_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB217_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB217_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB217_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB217_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB217_68:                             # %if.end908
                                        #   in Loop: Header=BB217_64 Depth=2
	jmp	.LBB217_69
.LBB217_69:                             # %for.inc909
                                        #   in Loop: Header=BB217_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB217_64
.LBB217_70:                             # %for.end911
                                        #   in Loop: Header=BB217_62 Depth=1
	jmp	.LBB217_71
.LBB217_71:                             # %for.inc912
                                        #   in Loop: Header=BB217_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_62
.LBB217_72:                             # %for.end914
	jmp	.LBB217_73
.LBB217_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB217_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB217_74 Depth=1
	movl	$0, -8(%rbp)
.LBB217_76:                             # %for.cond923
                                        #   Parent Loop BB217_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB217_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-64(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB217_148
.LBB217_79:                             # %if.then954
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB217_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_83
.LBB217_82:                             # %cond.false991
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_83:                             # %cond.end993
                                        #   in Loop: Header=BB217_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_86
.LBB217_85:                             # %cond.false1001
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_86:                             # %cond.end1003
                                        #   in Loop: Header=BB217_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_89
.LBB217_88:                             # %cond.false1032
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_89:                             # %cond.end1034
                                        #   in Loop: Header=BB217_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_92
.LBB217_91:                             # %cond.false1042
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_92:                             # %cond.end1044
                                        #   in Loop: Header=BB217_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_95
.LBB217_94:                             # %cond.false1073
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_95:                             # %cond.end1075
                                        #   in Loop: Header=BB217_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_98
.LBB217_97:                             # %cond.false1083
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_98:                             # %cond.end1085
                                        #   in Loop: Header=BB217_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_101
.LBB217_100:                            # %cond.false1114
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_101:                            # %cond.end1116
                                        #   in Loop: Header=BB217_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_104
.LBB217_103:                            # %cond.false1124
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_104:                            # %cond.end1126
                                        #   in Loop: Header=BB217_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_107
.LBB217_106:                            # %cond.false1155
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_107:                            # %cond.end1157
                                        #   in Loop: Header=BB217_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_110
.LBB217_109:                            # %cond.false1165
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_110:                            # %cond.end1167
                                        #   in Loop: Header=BB217_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB217_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB217_125
.LBB217_112:                            # %if.else1190
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_115
.LBB217_114:                            # %cond.false1198
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_115:                            # %cond.end1200
                                        #   in Loop: Header=BB217_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_118
.LBB217_117:                            # %cond.false1208
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_118:                            # %cond.end1210
                                        #   in Loop: Header=BB217_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB217_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB217_121
.LBB217_120:                            # %cond.false1237
                                        #   in Loop: Header=BB217_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB217_121
.LBB217_121:                            # %cond.end1238
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB217_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB217_124
.LBB217_123:                            # %cond.false1254
                                        #   in Loop: Header=BB217_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB217_124
.LBB217_124:                            # %cond.end1255
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB217_125:                            # %if.end1264
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_128
.LBB217_127:                            # %cond.false1272
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_128:                            # %cond.end1274
                                        #   in Loop: Header=BB217_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_131
.LBB217_130:                            # %cond.false1282
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_131:                            # %cond.end1284
                                        #   in Loop: Header=BB217_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB217_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB217_146
.LBB217_133:                            # %if.else1307
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_136
.LBB217_135:                            # %cond.false1315
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_136:                            # %cond.end1317
                                        #   in Loop: Header=BB217_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB217_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB217_139
.LBB217_138:                            # %cond.false1325
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB217_139:                            # %cond.end1327
                                        #   in Loop: Header=BB217_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB217_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB217_142
.LBB217_141:                            # %cond.false1355
                                        #   in Loop: Header=BB217_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB217_142
.LBB217_142:                            # %cond.end1356
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB217_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB217_145
.LBB217_144:                            # %cond.false1373
                                        #   in Loop: Header=BB217_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB217_145
.LBB217_145:                            # %cond.end1374
                                        #   in Loop: Header=BB217_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB217_146:                            # %if.end1383
                                        #   in Loop: Header=BB217_76 Depth=2
	jmp	.LBB217_147
.LBB217_147:                            # %if.end1384
                                        #   in Loop: Header=BB217_76 Depth=2
	jmp	.LBB217_148
.LBB217_148:                            # %if.end1385
                                        #   in Loop: Header=BB217_76 Depth=2
	jmp	.LBB217_149
.LBB217_149:                            # %for.inc1386
                                        #   in Loop: Header=BB217_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB217_76
.LBB217_150:                            # %for.end1388
                                        #   in Loop: Header=BB217_74 Depth=1
	jmp	.LBB217_151
.LBB217_151:                            # %for.inc1389
                                        #   in Loop: Header=BB217_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_74
.LBB217_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB217_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB217_153 Depth=1
	movl	$0, -4(%rbp)
.LBB217_155:                            # %for.cond1399
                                        #   Parent Loop BB217_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB217_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB217_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_155
.LBB217_158:                            # %for.end1414
                                        #   in Loop: Header=BB217_153 Depth=1
	jmp	.LBB217_159
.LBB217_159:                            # %for.inc1415
                                        #   in Loop: Header=BB217_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB217_153
.LBB217_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB217_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB217_174
.LBB217_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB217_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB217_163 Depth=1
	movl	$0, -4(%rbp)
.LBB217_165:                            # %for.cond1431
                                        #   Parent Loop BB217_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB217_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB217_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB217_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB217_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB217_169
.LBB217_168:                            # %cond.false1462
                                        #   in Loop: Header=BB217_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB217_169
.LBB217_169:                            # %cond.end1463
                                        #   in Loop: Header=BB217_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB217_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_165
.LBB217_171:                            # %for.end1474
                                        #   in Loop: Header=BB217_163 Depth=1
	jmp	.LBB217_172
.LBB217_172:                            # %for.inc1475
                                        #   in Loop: Header=BB217_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB217_163
.LBB217_173:                            # %for.end1477
	jmp	.LBB217_174
.LBB217_174:                            # %if.end1478
	cmpl	$680556495, -68(%rbp)   # imm = 0x289077CF
	jne	.LBB217_176
.LBB217_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_175
.Lfunc_end217:
	.size	dpb_split_field.154, .Lfunc_end217-dpb_split_field.154
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.155   # -- Begin function gen_field_ref_ids.155
	.p2align	4, 0x90
	.type	gen_field_ref_ids.155,@function
gen_field_ref_ids.155:                  # @gen_field_ref_ids.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1069575792, -28(%rbp)  # imm = 0x3FC06E70
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB218_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB218_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB218_1 Depth=1
	movl	$0, -8(%rbp)
.LBB218_3:                              # %for.cond1
                                        #   Parent Loop BB218_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB218_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB218_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB218_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB218_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB218_7
.LBB218_6:                              # %cond.false
                                        #   in Loop: Header=BB218_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB218_7
.LBB218_7:                              # %cond.end
                                        #   in Loop: Header=BB218_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB218_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB218_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB218_10
.LBB218_9:                              # %cond.false32
                                        #   in Loop: Header=BB218_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB218_10
.LBB218_10:                             # %cond.end33
                                        #   in Loop: Header=BB218_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB218_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_3
.LBB218_12:                             # %for.end
                                        #   in Loop: Header=BB218_1 Depth=1
	jmp	.LBB218_13
.LBB218_13:                             # %for.inc45
                                        #   in Loop: Header=BB218_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_1
.LBB218_14:                             # %for.end47
	cmpl	$1069575792, -28(%rbp)  # imm = 0x3FC06E70
	jne	.LBB218_16
.LBB218_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_15
.Lfunc_end218:
	.size	gen_field_ref_ids.155, .Lfunc_end218-gen_field_ref_ids.155
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.156
	.type	compare_pic_by_lt_pic_num_asc.156,@function
compare_pic_by_lt_pic_num_asc.156:      # @compare_pic_by_lt_pic_num_asc.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2051354008, -16(%rbp)  # imm = 0x7A452D98
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB219_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB219_5
.LBB219_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB219_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB219_5
.LBB219_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB219_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2051354008, -16(%rbp)  # imm = 0x7A452D98
	jne	.LBB219_7
.LBB219_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB219_6
.Lfunc_end219:
	.size	compare_pic_by_lt_pic_num_asc.156, .Lfunc_end219-compare_pic_by_lt_pic_num_asc.156
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.157
	.type	get_short_term_pic.157,@function
get_short_term_pic.157:                 # @get_short_term_pic.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2083720840, -28(%rbp)  # imm = 0x7C330E88
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB220_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB220_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB220_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB220_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB220_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB220_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB220_23
.LBB220_7:                              # %if.end
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_8
.LBB220_8:                              # %if.end14
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_20
.LBB220_9:                              # %if.else
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB220_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB220_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB220_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB220_23
.LBB220_13:                             # %if.end34
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_14
.LBB220_14:                             # %if.end35
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB220_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB220_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB220_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB220_23
.LBB220_18:                             # %if.end56
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_19
.LBB220_19:                             # %if.end57
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_20
.LBB220_20:                             # %if.end58
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_21
.LBB220_21:                             # %for.inc
                                        #   in Loop: Header=BB220_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB220_1
.LBB220_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB220_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$2083720840, -28(%rbp)  # imm = 0x7C330E88
	jne	.LBB220_25
.LBB220_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_24
.Lfunc_end220:
	.size	get_short_term_pic.157, .Lfunc_end220-get_short_term_pic.157
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.158
	.type	compare_fs_by_frame_num_desc.158,@function
compare_fs_by_frame_num_desc.158:       # @compare_fs_by_frame_num_desc.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2050388639, -16(%rbp)  # imm = 0x7A36729F
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB221_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB221_5
.LBB221_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB221_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB221_5
.LBB221_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB221_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2050388639, -16(%rbp)  # imm = 0x7A36729F
	jne	.LBB221_7
.LBB221_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_6
.Lfunc_end221:
	.size	compare_fs_by_frame_num_desc.158, .Lfunc_end221-compare_fs_by_frame_num_desc.158
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.159
	.type	compare_fs_by_lt_pic_idx_asc.159,@function
compare_fs_by_lt_pic_idx_asc.159:       # @compare_fs_by_lt_pic_idx_asc.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$728649270, -16(%rbp)   # imm = 0x2B6E4E36
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB222_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB222_5
.LBB222_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB222_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB222_5
.LBB222_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB222_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$728649270, -16(%rbp)   # imm = 0x2B6E4E36
	jne	.LBB222_7
.LBB222_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_6
.Lfunc_end222:
	.size	compare_fs_by_lt_pic_idx_asc.159, .Lfunc_end222-compare_fs_by_lt_pic_idx_asc.159
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.160   # -- Begin function gen_field_ref_ids.160
	.p2align	4, 0x90
	.type	gen_field_ref_ids.160,@function
gen_field_ref_ids.160:                  # @gen_field_ref_ids.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2096250193, -28(%rbp)  # imm = 0x7CF23D51
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB223_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB223_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB223_1 Depth=1
	movl	$0, -4(%rbp)
.LBB223_3:                              # %for.cond1
                                        #   Parent Loop BB223_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB223_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB223_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB223_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB223_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB223_7
.LBB223_6:                              # %cond.false
                                        #   in Loop: Header=BB223_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB223_7
.LBB223_7:                              # %cond.end
                                        #   in Loop: Header=BB223_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB223_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB223_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB223_10
.LBB223_9:                              # %cond.false32
                                        #   in Loop: Header=BB223_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB223_10
.LBB223_10:                             # %cond.end33
                                        #   in Loop: Header=BB223_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB223_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB223_3
.LBB223_12:                             # %for.end
                                        #   in Loop: Header=BB223_1 Depth=1
	jmp	.LBB223_13
.LBB223_13:                             # %for.inc45
                                        #   in Loop: Header=BB223_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB223_1
.LBB223_14:                             # %for.end47
	cmpl	$2096250193, -28(%rbp)  # imm = 0x7CF23D51
	jne	.LBB223_16
.LBB223_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_15
.Lfunc_end223:
	.size	gen_field_ref_ids.160, .Lfunc_end223-gen_field_ref_ids.160
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.161 # -- Begin function reorder_ref_pic_list.161
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.161,@function
reorder_ref_pic_list.161:               # @reorder_ref_pic_list.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1598202013, -60(%rbp)  # imm = 0x5F42A09D
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB224_2
# %bb.1:                                # %if.then
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB224_3
.LBB224_2:                              # %if.else
	movl	-44(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB224_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB224_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB224_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB224_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB224_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB224_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB224_7:                              # %if.end9
                                        #   in Loop: Header=BB224_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB224_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB224_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB224_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB224_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB224_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB224_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB224_12
.LBB224_11:                             # %if.else28
                                        #   in Loop: Header=BB224_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB224_12:                             # %if.end33
                                        #   in Loop: Header=BB224_4 Depth=1
	jmp	.LBB224_17
.LBB224_13:                             # %if.else34
                                        #   in Loop: Header=BB224_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB224_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB224_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB224_16
.LBB224_15:                             # %if.else46
                                        #   in Loop: Header=BB224_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB224_16:                             # %if.end51
                                        #   in Loop: Header=BB224_4 Depth=1
	jmp	.LBB224_17
.LBB224_17:                             # %if.end52
                                        #   in Loop: Header=BB224_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB224_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB224_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB224_20
.LBB224_19:                             # %if.else56
                                        #   in Loop: Header=BB224_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB224_20:                             # %if.end57
                                        #   in Loop: Header=BB224_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB224_22
.LBB224_21:                             # %if.else58
                                        #   in Loop: Header=BB224_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB224_22:                             # %if.end61
                                        #   in Loop: Header=BB224_4 Depth=1
	jmp	.LBB224_23
.LBB224_23:                             # %for.inc
                                        #   in Loop: Header=BB224_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB224_4
.LBB224_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1598202013, -60(%rbp)  # imm = 0x5F42A09D
	jne	.LBB224_26
.LBB224_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_25
.Lfunc_end224:
	.size	reorder_ref_pic_list.161, .Lfunc_end224-reorder_ref_pic_list.161
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management.162
	.type	sliding_window_memory_management.162,@function
sliding_window_memory_management.162:   # @sliding_window_memory_management.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$713447962, -8(%rbp)    # imm = 0x2A865A1A
	movq	%rdi, -16(%rbp)
	movl	dpb+32, %eax
	movq	active_sps, %rcx
	movl	1132(%rcx), %ecx
	subl	dpb+36, %ecx
	cmpl	%ecx, %eax
	jne	.LBB225_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB225_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB225_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB225_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB225_6
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB225_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB225_6
# %bb.5:                                # %if.then5
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	callq	update_ref_list
	jmp	.LBB225_9
.LBB225_6:                              # %if.end
                                        #   in Loop: Header=BB225_2 Depth=1
	jmp	.LBB225_7
.LBB225_7:                              # %for.inc
                                        #   in Loop: Header=BB225_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_2
.LBB225_8:                              # %for.end.loopexit
	jmp	.LBB225_9
.LBB225_9:                              # %for.end
	jmp	.LBB225_10
.LBB225_10:                             # %if.end8
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	cmpl	$713447962, -8(%rbp)    # imm = 0x2A865A1A
	jne	.LBB225_12
.LBB225_11:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB225_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB225_11
.Lfunc_end225:
	.size	sliding_window_memory_management.162, .Lfunc_end225-sliding_window_memory_management.162
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.163
	.type	gen_pic_list_from_frame_list.163,@function
gen_pic_list_from_frame_list.163:       # @gen_pic_list_from_frame_list.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1427303422, -60(%rbp)  # imm = 0x5512EBFE
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -64(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB226_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB226_3
.LBB226_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB226_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB226_28
# %bb.4:                                # %if.then1
	jmp	.LBB226_5
.LBB226_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB226_9 Depth 2
                                        #     Child Loop BB226_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB226_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB226_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB226_7:                              # %lor.end
                                        #   in Loop: Header=BB226_5 Depth=1
	testb	$1, %al
	jne	.LBB226_8
	jmp	.LBB226_27
.LBB226_8:                              # %while.body
                                        #   in Loop: Header=BB226_5 Depth=1
	jmp	.LBB226_9
.LBB226_9:                              # %for.cond
                                        #   Parent Loop BB226_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB226_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB226_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB226_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB226_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB226_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB226_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB226_17
.LBB226_13:                             # %if.end17
                                        #   in Loop: Header=BB226_9 Depth=2
	jmp	.LBB226_14
.LBB226_14:                             # %if.end18
                                        #   in Loop: Header=BB226_9 Depth=2
	jmp	.LBB226_15
.LBB226_15:                             # %for.inc
                                        #   in Loop: Header=BB226_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB226_9
.LBB226_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB226_5 Depth=1
	jmp	.LBB226_17
.LBB226_17:                             # %for.end
                                        #   in Loop: Header=BB226_5 Depth=1
	jmp	.LBB226_18
.LBB226_18:                             # %for.cond20
                                        #   Parent Loop BB226_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB226_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB226_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB226_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB226_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB226_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB226_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB226_26
.LBB226_22:                             # %if.end41
                                        #   in Loop: Header=BB226_18 Depth=2
	jmp	.LBB226_23
.LBB226_23:                             # %if.end42
                                        #   in Loop: Header=BB226_18 Depth=2
	jmp	.LBB226_24
.LBB226_24:                             # %for.inc43
                                        #   in Loop: Header=BB226_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB226_18
.LBB226_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB226_5 Depth=1
	jmp	.LBB226_26
.LBB226_26:                             # %for.end45
                                        #   in Loop: Header=BB226_5 Depth=1
	jmp	.LBB226_5
.LBB226_27:                             # %while.end
	jmp	.LBB226_28
.LBB226_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB226_53
# %bb.29:                               # %if.then48
	jmp	.LBB226_30
.LBB226_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB226_34 Depth 2
                                        #     Child Loop BB226_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB226_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB226_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB226_32:                             # %lor.end53
                                        #   in Loop: Header=BB226_30 Depth=1
	testb	$1, %al
	jne	.LBB226_33
	jmp	.LBB226_52
.LBB226_33:                             # %while.body54
                                        #   in Loop: Header=BB226_30 Depth=1
	jmp	.LBB226_34
.LBB226_34:                             # %for.cond55
                                        #   Parent Loop BB226_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB226_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB226_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB226_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB226_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB226_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB226_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB226_42
.LBB226_38:                             # %if.end77
                                        #   in Loop: Header=BB226_34 Depth=2
	jmp	.LBB226_39
.LBB226_39:                             # %if.end78
                                        #   in Loop: Header=BB226_34 Depth=2
	jmp	.LBB226_40
.LBB226_40:                             # %for.inc79
                                        #   in Loop: Header=BB226_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB226_34
.LBB226_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB226_30 Depth=1
	jmp	.LBB226_42
.LBB226_42:                             # %for.end81
                                        #   in Loop: Header=BB226_30 Depth=1
	jmp	.LBB226_43
.LBB226_43:                             # %for.cond82
                                        #   Parent Loop BB226_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB226_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB226_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB226_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB226_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB226_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB226_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB226_51
.LBB226_47:                             # %if.end104
                                        #   in Loop: Header=BB226_43 Depth=2
	jmp	.LBB226_48
.LBB226_48:                             # %if.end105
                                        #   in Loop: Header=BB226_43 Depth=2
	jmp	.LBB226_49
.LBB226_49:                             # %for.inc106
                                        #   in Loop: Header=BB226_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB226_43
.LBB226_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB226_30 Depth=1
	jmp	.LBB226_51
.LBB226_51:                             # %for.end108
                                        #   in Loop: Header=BB226_30 Depth=1
	jmp	.LBB226_30
.LBB226_52:                             # %while.end109
	jmp	.LBB226_53
.LBB226_53:                             # %if.end110
	cmpl	$1427303422, -60(%rbp)  # imm = 0x5512EBFE
	jne	.LBB226_55
.LBB226_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB226_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB226_54
.Lfunc_end226:
	.size	gen_pic_list_from_frame_list.163, .Lfunc_end226-gen_pic_list_from_frame_list.163
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ref_pic_list_reordering_buffer.164 # -- Begin function alloc_ref_pic_list_reordering_buffer.164
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer.164,@function
alloc_ref_pic_list_reordering_buffer.164: # @alloc_ref_pic_list_reordering_buffer.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2123880003, -20(%rbp)  # imm = 0x7E97D643
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	72000(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB227_9
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$4, 24(%rax)
	je	.LBB227_9
# %bb.2:                                # %if.then
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	cmpq	$0, %rax
	jne	.LBB227_4
# %bb.3:                                # %if.then5
	movabsq	$.L.str.15, %rdi
	callq	no_mem_exit
.LBB227_4:                              # %if.end
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	cmpq	$0, %rax
	jne	.LBB227_6
# %bb.5:                                # %if.then10
	movabsq	$.L.str.16, %rdi
	callq	no_mem_exit
.LBB227_6:                              # %if.end11
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	cmpq	$0, %rax
	jne	.LBB227_8
# %bb.7:                                # %if.then16
	movabsq	$.L.str.17, %rdi
	callq	no_mem_exit
.LBB227_8:                              # %if.end17
	jmp	.LBB227_10
.LBB227_9:                              # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
.LBB227_10:                             # %if.end21
	movq	img, %rax
	movl	72004(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB227_18
# %bb.11:                               # %if.then26
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 96(%rcx)
	cmpq	$0, %rax
	jne	.LBB227_13
# %bb.12:                               # %if.then31
	movabsq	$.L.str.18, %rdi
	callq	no_mem_exit
.LBB227_13:                             # %if.end32
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 104(%rcx)
	cmpq	$0, %rax
	jne	.LBB227_15
# %bb.14:                               # %if.then37
	movabsq	$.L.str.19, %rdi
	callq	no_mem_exit
.LBB227_15:                             # %if.end38
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB227_17
# %bb.16:                               # %if.then43
	movabsq	$.L.str.20, %rdi
	callq	no_mem_exit
.LBB227_17:                             # %if.end44
	jmp	.LBB227_19
.LBB227_18:                             # %if.else45
	movq	-16(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 112(%rax)
.LBB227_19:                             # %if.end49
	cmpl	$2123880003, -20(%rbp)  # imm = 0x7E97D643
	jne	.LBB227_21
.LBB227_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB227_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB227_20
.Lfunc_end227:
	.size	alloc_ref_pic_list_reordering_buffer.164, .Lfunc_end227-alloc_ref_pic_list_reordering_buffer.164
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.165          # -- Begin function init_lists.165
	.p2align	4, 0x90
	.type	init_lists.165,@function
init_lists.165:                         # @init_lists.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$304241202, -76(%rbp)   # imm = 0x12225A32
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB228_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB228_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB228_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB228_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB228_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB228_9
.LBB228_8:                              # %if.else
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB228_9:                              # %if.end
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB228_10:                             # %if.end36
                                        #   in Loop: Header=BB228_2 Depth=1
	jmp	.LBB228_11
.LBB228_11:                             # %if.end37
                                        #   in Loop: Header=BB228_2 Depth=1
	jmp	.LBB228_12
.LBB228_12:                             # %for.inc
                                        #   in Loop: Header=BB228_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_2
.LBB228_13:                             # %for.end
	jmp	.LBB228_31
.LBB228_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB228_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB228_17
.LBB228_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB228_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB228_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB228_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB228_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB228_23
.LBB228_22:                             # %if.else63
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB228_23:                             # %if.end70
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB228_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB228_25:                             # %if.end83
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB228_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB228_27:                             # %if.end98
                                        #   in Loop: Header=BB228_18 Depth=1
	jmp	.LBB228_28
.LBB228_28:                             # %if.end99
                                        #   in Loop: Header=BB228_18 Depth=1
	jmp	.LBB228_29
.LBB228_29:                             # %for.inc100
                                        #   in Loop: Header=BB228_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_18
.LBB228_30:                             # %for.end102
	jmp	.LBB228_31
.LBB228_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB228_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB228_34
.LBB228_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB228_181
.LBB228_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB228_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB228_75
.LBB228_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB228_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB228_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB228_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB228_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB228_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB228_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB228_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB228_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_43:                             # %if.end140
                                        #   in Loop: Header=BB228_38 Depth=1
	jmp	.LBB228_44
.LBB228_44:                             # %if.end141
                                        #   in Loop: Header=BB228_38 Depth=1
	jmp	.LBB228_45
.LBB228_45:                             # %for.inc142
                                        #   in Loop: Header=BB228_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_38
.LBB228_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB228_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB228_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB228_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB228_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB228_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB228_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_51:                             # %if.end177
                                        #   in Loop: Header=BB228_47 Depth=1
	jmp	.LBB228_52
.LBB228_52:                             # %if.end178
                                        #   in Loop: Header=BB228_47 Depth=1
	jmp	.LBB228_53
.LBB228_53:                             # %for.inc179
                                        #   in Loop: Header=BB228_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_47
.LBB228_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB228_74
.LBB228_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB228_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB228_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB228_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB228_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB228_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB228_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB228_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB228_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_63:                             # %if.end212
                                        #   in Loop: Header=BB228_60 Depth=1
	jmp	.LBB228_64
.LBB228_64:                             # %for.inc213
                                        #   in Loop: Header=BB228_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_60
.LBB228_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB228_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB228_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB228_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB228_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB228_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB228_69:                             # %if.end242
                                        #   in Loop: Header=BB228_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB228_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB228_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB228_71:                             # %if.end259
                                        #   in Loop: Header=BB228_66 Depth=1
	jmp	.LBB228_72
.LBB228_72:                             # %for.inc260
                                        #   in Loop: Header=BB228_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_66
.LBB228_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB228_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB228_155
.LBB228_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB228_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB228_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB228_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB228_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB228_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB228_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB228_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB228_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB228_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB228_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_83:                             # %if.end307
                                        #   in Loop: Header=BB228_77 Depth=1
	jmp	.LBB228_84
.LBB228_84:                             # %if.end308
                                        #   in Loop: Header=BB228_77 Depth=1
	jmp	.LBB228_85
.LBB228_85:                             # %if.end309
                                        #   in Loop: Header=BB228_77 Depth=1
	jmp	.LBB228_86
.LBB228_86:                             # %for.inc310
                                        #   in Loop: Header=BB228_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_77
.LBB228_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB228_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB228_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB228_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB228_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB228_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB228_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB228_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB228_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB228_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_94:                             # %if.end354
                                        #   in Loop: Header=BB228_88 Depth=1
	jmp	.LBB228_95
.LBB228_95:                             # %if.end355
                                        #   in Loop: Header=BB228_88 Depth=1
	jmp	.LBB228_96
.LBB228_96:                             # %if.end356
                                        #   in Loop: Header=BB228_88 Depth=1
	jmp	.LBB228_97
.LBB228_97:                             # %for.inc357
                                        #   in Loop: Header=BB228_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_88
.LBB228_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB228_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB228_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB228_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB228_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_99
.LBB228_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB228_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB228_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB228_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB228_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_103
.LBB228_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB228_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB228_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB228_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB228_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB228_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB228_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_111:                            # %if.end428
                                        #   in Loop: Header=BB228_107 Depth=1
	jmp	.LBB228_112
.LBB228_112:                            # %if.end429
                                        #   in Loop: Header=BB228_107 Depth=1
	jmp	.LBB228_113
.LBB228_113:                            # %for.inc430
                                        #   in Loop: Header=BB228_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_107
.LBB228_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB228_154
.LBB228_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB228_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB228_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB228_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB228_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB228_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB228_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB228_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB228_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB228_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB228_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB228_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB228_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_126:                            # %if.end480
                                        #   in Loop: Header=BB228_122 Depth=1
	jmp	.LBB228_127
.LBB228_127:                            # %if.end481
                                        #   in Loop: Header=BB228_122 Depth=1
	jmp	.LBB228_128
.LBB228_128:                            # %for.inc482
                                        #   in Loop: Header=BB228_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_122
.LBB228_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB228_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB228_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB228_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB228_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB228_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB228_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_134:                            # %if.end507
                                        #   in Loop: Header=BB228_130 Depth=1
	jmp	.LBB228_135
.LBB228_135:                            # %if.end508
                                        #   in Loop: Header=BB228_130 Depth=1
	jmp	.LBB228_136
.LBB228_136:                            # %for.inc509
                                        #   in Loop: Header=BB228_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_130
.LBB228_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB228_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB228_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB228_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB228_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_138
.LBB228_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB228_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB228_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB228_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB228_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_142
.LBB228_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB228_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB228_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB228_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB228_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB228_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB228_149:                            # %if.end566
                                        #   in Loop: Header=BB228_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB228_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB228_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB228_151:                            # %if.end583
                                        #   in Loop: Header=BB228_146 Depth=1
	jmp	.LBB228_152
.LBB228_152:                            # %for.inc584
                                        #   in Loop: Header=BB228_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_146
.LBB228_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB228_154:                            # %if.end588
	jmp	.LBB228_155
.LBB228_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB228_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB228_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB228_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB228_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB228_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB228_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB228_158 Depth=1
	movl	$1, -72(%rbp)
.LBB228_161:                            # %if.end607
                                        #   in Loop: Header=BB228_158 Depth=1
	jmp	.LBB228_162
.LBB228_162:                            # %for.inc608
                                        #   in Loop: Header=BB228_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_158
.LBB228_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB228_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB228_165:                            # %if.end617
	jmp	.LBB228_166
.LBB228_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB228_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB228_169
.LBB228_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB228_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB228_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB228_172
.LBB228_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB228_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB228_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB228_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB228_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB228_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_173
.LBB228_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB228_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB228_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB228_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB228_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_177
.LBB228_180:                            # %for.end646.loopexit
	jmp	.LBB228_181
.LBB228_181:                            # %for.end646
	cmpl	$304241202, -76(%rbp)   # imm = 0x12225A32
	jne	.LBB228_183
.LBB228_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB228_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB228_182
.Lfunc_end228:
	.size	init_lists.165, .Lfunc_end228-init_lists.165
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.166
	.type	mm_unmark_short_term_for_reference.166,@function
mm_unmark_short_term_for_reference.166: # @mm_unmark_short_term_for_reference.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1405959565, -16(%rbp)  # imm = 0x53CD3D8D
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB229_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB229_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB229_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB229_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB229_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB229_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB229_27
.LBB229_7:                              # %if.end
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_8
.LBB229_8:                              # %if.end13
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_24
.LBB229_9:                              # %if.else
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB229_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB229_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB229_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB229_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB229_14:                             # %if.end44
	jmp	.LBB229_27
.LBB229_15:                             # %if.end45
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_16
.LBB229_16:                             # %if.end46
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB229_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB229_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB229_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB229_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB229_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB229_21:                             # %if.end81
	jmp	.LBB229_27
.LBB229_22:                             # %if.end82
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_23
.LBB229_23:                             # %if.end83
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_24
.LBB229_24:                             # %if.end84
                                        #   in Loop: Header=BB229_1 Depth=1
	jmp	.LBB229_25
.LBB229_25:                             # %for.inc
                                        #   in Loop: Header=BB229_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB229_1
.LBB229_26:                             # %for.end.loopexit
	jmp	.LBB229_27
.LBB229_27:                             # %for.end
	cmpl	$1405959565, -16(%rbp)  # imm = 0x53CD3D8D
	jne	.LBB229_29
.LBB229_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB229_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB229_28
.Lfunc_end229:
	.size	mm_unmark_short_term_for_reference.166, .Lfunc_end229-mm_unmark_short_term_for_reference.166
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ref_pic_list_reordering_buffer.167 # -- Begin function alloc_ref_pic_list_reordering_buffer.167
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer.167,@function
alloc_ref_pic_list_reordering_buffer.167: # @alloc_ref_pic_list_reordering_buffer.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$667145909, -20(%rbp)   # imm = 0x27C3D6B5
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	72000(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB230_9
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$4, 24(%rax)
	je	.LBB230_9
# %bb.2:                                # %if.then
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	cmpq	$0, %rax
	jne	.LBB230_4
# %bb.3:                                # %if.then5
	movabsq	$.L.str.15, %rdi
	callq	no_mem_exit
.LBB230_4:                              # %if.end
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	cmpq	$0, %rax
	jne	.LBB230_6
# %bb.5:                                # %if.then10
	movabsq	$.L.str.16, %rdi
	callq	no_mem_exit
.LBB230_6:                              # %if.end11
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	cmpq	$0, %rax
	jne	.LBB230_8
# %bb.7:                                # %if.then16
	movabsq	$.L.str.17, %rdi
	callq	no_mem_exit
.LBB230_8:                              # %if.end17
	jmp	.LBB230_10
.LBB230_9:                              # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
.LBB230_10:                             # %if.end21
	movq	img, %rax
	movl	72004(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB230_18
# %bb.11:                               # %if.then26
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 96(%rcx)
	cmpq	$0, %rax
	jne	.LBB230_13
# %bb.12:                               # %if.then31
	movabsq	$.L.str.18, %rdi
	callq	no_mem_exit
.LBB230_13:                             # %if.end32
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 104(%rcx)
	cmpq	$0, %rax
	jne	.LBB230_15
# %bb.14:                               # %if.then37
	movabsq	$.L.str.19, %rdi
	callq	no_mem_exit
.LBB230_15:                             # %if.end38
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB230_17
# %bb.16:                               # %if.then43
	movabsq	$.L.str.20, %rdi
	callq	no_mem_exit
.LBB230_17:                             # %if.end44
	jmp	.LBB230_19
.LBB230_18:                             # %if.else45
	movq	-16(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 112(%rax)
.LBB230_19:                             # %if.end49
	cmpl	$667145909, -20(%rbp)   # imm = 0x27C3D6B5
	jne	.LBB230_21
.LBB230_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB230_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB230_20
.Lfunc_end230:
	.size	alloc_ref_pic_list_reordering_buffer.167, .Lfunc_end230-alloc_ref_pic_list_reordering_buffer.167
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.168 # -- Begin function store_picture_in_dpb.168
	.p2align	4, 0x90
	.type	store_picture_in_dpb.168,@function
store_picture_in_dpb.168:               # @store_picture_in_dpb.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$741108388, -24(%rbp)   # imm = 0x2C2C6AA4
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB231_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB231_6
.LBB231_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB231_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB231_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB231_5:                              # %if.end
	jmp	.LBB231_6
.LBB231_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB231_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB231_23
.LBB231_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB231_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB231_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB231_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB231_14
.LBB231_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB231_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB231_20
.LBB231_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB231_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB231_18
.LBB231_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB231_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB231_19
.LBB231_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB231_50
.LBB231_19:                             # %if.end48
	jmp	.LBB231_20
.LBB231_20:                             # %if.end49
	jmp	.LBB231_21
.LBB231_21:                             # %if.end50
	jmp	.LBB231_22
.LBB231_22:                             # %if.end51
	jmp	.LBB231_23
.LBB231_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB231_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB231_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB231_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB231_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB231_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB231_29:                             # %if.end67
	jmp	.LBB231_30
.LBB231_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB231_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB231_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB231_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB231_30 Depth=1
	leaq	-16(%rbp), %rdi
	leaq	-20(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-20(%rbp), %eax
	je	.LBB231_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB231_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB231_35
.LBB231_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB231_50
.LBB231_35:                             # %if.end80
                                        #   in Loop: Header=BB231_30 Depth=1
	jmp	.LBB231_36
.LBB231_36:                             # %if.end81
                                        #   in Loop: Header=BB231_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB231_30
.LBB231_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB231_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB231_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB231_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB231_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB231_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB231_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB231_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB231_43:                             # %if.end94
                                        #   in Loop: Header=BB231_40 Depth=1
	jmp	.LBB231_44
.LBB231_44:                             # %for.inc
                                        #   in Loop: Header=BB231_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB231_40
.LBB231_45:                             # %for.end
	jmp	.LBB231_46
.LBB231_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB231_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB231_49
.LBB231_48:                             # %if.else104
	movq	$0, dpb+56
.LBB231_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB231_50:                             # %return
	cmpl	$741108388, -24(%rbp)   # imm = 0x2C2C6AA4
	jne	.LBB231_52
.LBB231_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB231_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB231_51
.Lfunc_end231:
	.size	store_picture_in_dpb.168, .Lfunc_end231-store_picture_in_dpb.168
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.169
	.type	compare_pic_by_poc_desc.169,@function
compare_pic_by_poc_desc.169:            # @compare_pic_by_poc_desc.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1147343322, -16(%rbp)  # imm = 0x446311DA
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB232_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB232_5
.LBB232_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB232_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB232_5
.LBB232_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB232_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1147343322, -16(%rbp)  # imm = 0x446311DA
	jne	.LBB232_7
.LBB232_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB232_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB232_6
.Lfunc_end232:
	.size	compare_pic_by_poc_desc.169, .Lfunc_end232-compare_pic_by_poc_desc.169
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.170   # -- Begin function compute_colocated.170
	.p2align	4, 0x90
	.type	compute_colocated.170,@function
compute_colocated.170:                  # @compute_colocated.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$217313693, -72(%rbp)   # imm = 0xCF3F19D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB233_2
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB233_11
.LBB233_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB233_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB233_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB233_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB233_7
# %bb.6:                                # %if.then14
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB233_8
.LBB233_7:                              # %if.else17
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
.LBB233_8:                              # %if.end
	jmp	.LBB233_9
.LBB233_9:                              # %if.end20
	jmp	.LBB233_10
.LBB233_10:                             # %if.end21
	jmp	.LBB233_11
.LBB233_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB233_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB233_29
.LBB233_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB233_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB233_14 Depth=1
	movl	$0, -16(%rbp)
.LBB233_16:                             # %for.cond27
                                        #   Parent Loop BB233_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB233_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB233_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB233_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB233_22
.LBB233_21:                             # %if.else160
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB233_22:                             # %if.end283
                                        #   in Loop: Header=BB233_16 Depth=2
	jmp	.LBB233_24
.LBB233_23:                             # %if.else284
                                        #   in Loop: Header=BB233_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB233_24:                             # %if.end391
                                        #   in Loop: Header=BB233_16 Depth=2
	jmp	.LBB233_25
.LBB233_25:                             # %for.inc
                                        #   in Loop: Header=BB233_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_16
.LBB233_26:                             # %for.end
                                        #   in Loop: Header=BB233_14 Depth=1
	jmp	.LBB233_27
.LBB233_27:                             # %for.inc392
                                        #   in Loop: Header=BB233_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_14
.LBB233_28:                             # %for.end394
	jmp	.LBB233_29
.LBB233_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB233_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB233_241
.LBB233_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB233_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB233_32 Depth=1
	movl	$0, -12(%rbp)
.LBB233_34:                             # %for.cond408
                                        #   Parent Loop BB233_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB233_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_39
.LBB233_38:                             # %cond.false
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_39:                             # %cond.end
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_42
.LBB233_41:                             # %cond.false427
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_42:                             # %cond.end429
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_45
.LBB233_44:                             # %cond.false447
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_45:                             # %cond.end449
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_48
.LBB233_47:                             # %cond.false457
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_48:                             # %cond.end459
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_51
.LBB233_50:                             # %cond.false477
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_51:                             # %cond.end479
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_54
.LBB233_53:                             # %cond.false487
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_54:                             # %cond.end489
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_57
.LBB233_56:                             # %cond.false507
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_57:                             # %cond.end509
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_60
.LBB233_59:                             # %cond.false517
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_60:                             # %cond.end519
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_63
.LBB233_62:                             # %cond.false537
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_63:                             # %cond.end539
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_66
.LBB233_65:                             # %cond.false547
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_66:                             # %cond.end549
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB233_81
.LBB233_68:                             # %if.else569
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_71
.LBB233_70:                             # %cond.false576
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_71:                             # %cond.end578
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_74
.LBB233_73:                             # %cond.false586
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_74:                             # %cond.end588
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_77
.LBB233_76:                             # %cond.false604
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_77:                             # %cond.end606
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_80
.LBB233_79:                             # %cond.false614
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_80:                             # %cond.end616
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB233_81:                             # %if.end626
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_84
.LBB233_83:                             # %cond.false633
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_84:                             # %cond.end635
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_87
.LBB233_86:                             # %cond.false643
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_87:                             # %cond.end645
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB233_102
.LBB233_89:                             # %if.else665
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_92
.LBB233_91:                             # %cond.false672
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_92:                             # %cond.end674
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_95
.LBB233_94:                             # %cond.false682
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_95:                             # %cond.end684
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_98
.LBB233_97:                             # %cond.false700
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_98:                             # %cond.end702
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_101
.LBB233_100:                            # %cond.false710
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_101:                            # %cond.end712
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB233_102:                            # %if.end722
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB233_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB233_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB233_112
.LBB233_107:                            # %lor.rhs
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB233_111:                            # %land.end
                                        #   in Loop: Header=BB233_34 Depth=2
.LBB233_112:                            # %lor.end
                                        #   in Loop: Header=BB233_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB233_113:                            # %if.end814
                                        #   in Loop: Header=BB233_34 Depth=2
	jmp	.LBB233_236
.LBB233_114:                            # %if.else815
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_117
.LBB233_116:                            # %cond.false822
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_117:                            # %cond.end824
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_120
.LBB233_119:                            # %cond.false832
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_120:                            # %cond.end834
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_123
.LBB233_122:                            # %cond.false851
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_123:                            # %cond.end853
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_126
.LBB233_125:                            # %cond.false861
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_126:                            # %cond.end863
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_129
.LBB233_128:                            # %cond.false881
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_129:                            # %cond.end883
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_132
.LBB233_131:                            # %cond.false891
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_132:                            # %cond.end893
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_135
.LBB233_134:                            # %cond.false911
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_135:                            # %cond.end913
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_138
.LBB233_137:                            # %cond.false921
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_138:                            # %cond.end923
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_141
.LBB233_140:                            # %cond.false941
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_141:                            # %cond.end943
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_144
.LBB233_143:                            # %cond.false951
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_144:                            # %cond.end953
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_147
.LBB233_146:                            # %cond.false968
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_147:                            # %cond.end970
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_150
.LBB233_149:                            # %cond.false978
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_150:                            # %cond.end980
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_153
.LBB233_152:                            # %cond.false996
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_153:                            # %cond.end998
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_156
.LBB233_155:                            # %cond.false1006
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_156:                            # %cond.end1008
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_159
.LBB233_158:                            # %cond.false1023
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_159:                            # %cond.end1025
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_162
.LBB233_161:                            # %cond.false1033
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_162:                            # %cond.end1035
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB233_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB233_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB233_172
.LBB233_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB233_171:                            # %land.end1133
                                        #   in Loop: Header=BB233_34 Depth=2
.LBB233_172:                            # %lor.end1134
                                        #   in Loop: Header=BB233_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB233_173:                            # %if.end1142
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_176
.LBB233_175:                            # %cond.false1149
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_176:                            # %cond.end1151
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_179
.LBB233_178:                            # %cond.false1159
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_179:                            # %cond.end1161
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_182
.LBB233_181:                            # %cond.false1178
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_182:                            # %cond.end1180
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_185
.LBB233_184:                            # %cond.false1188
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_185:                            # %cond.end1190
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_188
.LBB233_187:                            # %cond.false1208
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_188:                            # %cond.end1210
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_191
.LBB233_190:                            # %cond.false1218
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_191:                            # %cond.end1220
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_194
.LBB233_193:                            # %cond.false1238
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_194:                            # %cond.end1240
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_197
.LBB233_196:                            # %cond.false1248
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_197:                            # %cond.end1250
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_200
.LBB233_199:                            # %cond.false1268
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_200:                            # %cond.end1270
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_203
.LBB233_202:                            # %cond.false1278
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_203:                            # %cond.end1280
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_206
.LBB233_205:                            # %cond.false1295
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_206:                            # %cond.end1297
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_209
.LBB233_208:                            # %cond.false1305
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_209:                            # %cond.end1307
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_212
.LBB233_211:                            # %cond.false1323
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_212:                            # %cond.end1325
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_215
.LBB233_214:                            # %cond.false1333
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_215:                            # %cond.end1335
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_218
.LBB233_217:                            # %cond.false1350
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_218:                            # %cond.end1352
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_221
.LBB233_220:                            # %cond.false1360
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_221:                            # %cond.end1362
                                        #   in Loop: Header=BB233_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB233_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB233_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB233_231
.LBB233_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB233_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB233_230:                            # %land.end1460
                                        #   in Loop: Header=BB233_34 Depth=2
.LBB233_231:                            # %lor.end1461
                                        #   in Loop: Header=BB233_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB233_232:                            # %if.end1469
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB233_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB233_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB233_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB233_235:                            # %if.end1522
                                        #   in Loop: Header=BB233_34 Depth=2
	jmp	.LBB233_236
.LBB233_236:                            # %if.end1523
                                        #   in Loop: Header=BB233_34 Depth=2
	jmp	.LBB233_237
.LBB233_237:                            # %for.inc1524
                                        #   in Loop: Header=BB233_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_34
.LBB233_238:                            # %for.end1526
                                        #   in Loop: Header=BB233_32 Depth=1
	jmp	.LBB233_239
.LBB233_239:                            # %for.inc1527
                                        #   in Loop: Header=BB233_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_32
.LBB233_240:                            # %for.end1529
	jmp	.LBB233_241
.LBB233_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB233_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB233_259
.LBB233_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB233_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB233_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB233_245 Depth=1
	movl	$0, -16(%rbp)
.LBB233_247:                            # %for.cond1546
                                        #   Parent Loop BB233_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB233_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB233_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB233_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB233_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB233_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB233_252
.LBB233_251:                            # %if.else1699
                                        #   in Loop: Header=BB233_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB233_252:                            # %if.end1829
                                        #   in Loop: Header=BB233_247 Depth=2
	jmp	.LBB233_253
.LBB233_253:                            # %if.end1830
                                        #   in Loop: Header=BB233_247 Depth=2
	jmp	.LBB233_254
.LBB233_254:                            # %for.inc1831
                                        #   in Loop: Header=BB233_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_247
.LBB233_255:                            # %for.end1833
                                        #   in Loop: Header=BB233_245 Depth=1
	jmp	.LBB233_256
.LBB233_256:                            # %for.inc1834
                                        #   in Loop: Header=BB233_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_245
.LBB233_257:                            # %for.end1836
	jmp	.LBB233_258
.LBB233_258:                            # %if.end1837
	jmp	.LBB233_259
.LBB233_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB233_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB233_260 Depth=1
	movl	$0, -16(%rbp)
.LBB233_262:                            # %for.cond1845
                                        #   Parent Loop BB233_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB233_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB233_314
.LBB233_265:                            # %if.then1856
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_268
.LBB233_267:                            # %cond.false1863
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_268:                            # %cond.end1865
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_271
.LBB233_270:                            # %cond.false1873
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_271:                            # %cond.end1875
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_274
.LBB233_273:                            # %cond.false1893
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_274:                            # %cond.end1895
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_277
.LBB233_276:                            # %cond.false1903
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_277:                            # %cond.end1905
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_280
.LBB233_279:                            # %cond.false1923
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_280:                            # %cond.end1925
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_283
.LBB233_282:                            # %cond.false1933
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_283:                            # %cond.end1935
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_286
.LBB233_285:                            # %cond.false1953
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_286:                            # %cond.end1955
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_289
.LBB233_288:                            # %cond.false1963
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_289:                            # %cond.end1965
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_292
.LBB233_291:                            # %cond.false1983
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_292:                            # %cond.end1985
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_295
.LBB233_294:                            # %cond.false1993
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_295:                            # %cond.end1995
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_298
.LBB233_297:                            # %cond.false2011
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_298:                            # %cond.end2013
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_301
.LBB233_300:                            # %cond.false2021
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_301:                            # %cond.end2023
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_304
.LBB233_303:                            # %cond.false2039
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_304:                            # %cond.end2041
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_307
.LBB233_306:                            # %cond.false2049
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_307:                            # %cond.end2051
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_310
.LBB233_309:                            # %cond.false2067
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_310:                            # %cond.end2069
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_313
.LBB233_312:                            # %cond.false2077
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_313:                            # %cond.end2079
                                        #   in Loop: Header=BB233_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB233_315
.LBB233_314:                            # %if.else2089
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB233_315:                            # %if.end2194
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB233_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB233_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB233_325
.LBB233_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB233_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB233_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB233_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB233_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB233_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB233_324:                            # %land.end2285
                                        #   in Loop: Header=BB233_262 Depth=2
.LBB233_325:                            # %lor.end2286
                                        #   in Loop: Header=BB233_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB233_326:                            # %if.end2295
                                        #   in Loop: Header=BB233_262 Depth=2
	jmp	.LBB233_327
.LBB233_327:                            # %for.inc2296
                                        #   in Loop: Header=BB233_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_262
.LBB233_328:                            # %for.end2298
                                        #   in Loop: Header=BB233_260 Depth=1
	jmp	.LBB233_329
.LBB233_329:                            # %for.inc2299
                                        #   in Loop: Header=BB233_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_260
.LBB233_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB233_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB233_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB233_332 Depth=1
	movl	$0, -16(%rbp)
.LBB233_334:                            # %for.cond2312
                                        #   Parent Loop BB233_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB233_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB233_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB233_340
.LBB233_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB233_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB233_341
.LBB233_340:                            # %if.then2342
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB233_345
.LBB233_341:                            # %if.else2363
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB233_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB233_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB233_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB233_344:                            # %if.end2394
                                        #   in Loop: Header=BB233_334 Depth=2
	jmp	.LBB233_345
.LBB233_345:                            # %if.end2395
                                        #   in Loop: Header=BB233_334 Depth=2
	jmp	.LBB233_346
.LBB233_346:                            # %for.inc2396
                                        #   in Loop: Header=BB233_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_334
.LBB233_347:                            # %for.end2398
                                        #   in Loop: Header=BB233_332 Depth=1
	jmp	.LBB233_348
.LBB233_348:                            # %for.inc2399
                                        #   in Loop: Header=BB233_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_332
.LBB233_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB233_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB233_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB233_350 Depth=1
	movl	$0, -16(%rbp)
.LBB233_352:                            # %for.cond2409
                                        #   Parent Loop BB233_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB233_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB233_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB233_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB233_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB233_360
.LBB233_356:                            # %cond.false2429
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB233_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$127, %eax
	jmp	.LBB233_359
.LBB233_358:                            # %cond.false2441
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB233_359:                            # %cond.end2450
                                        #   in Loop: Header=BB233_352 Depth=2
.LBB233_360:                            # %cond.end2452
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB233_377
.LBB233_361:                            # %if.else2454
                                        #   in Loop: Header=BB233_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB233_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB233_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB233_368
.LBB233_364:                            # %cond.false2468
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB233_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$127, %eax
	jmp	.LBB233_367
.LBB233_366:                            # %cond.false2480
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB233_367:                            # %cond.end2489
                                        #   in Loop: Header=BB233_352 Depth=2
.LBB233_368:                            # %cond.end2491
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB233_376
.LBB233_369:                            # %if.else2493
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB233_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB233_375
.LBB233_371:                            # %cond.false2504
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB233_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$127, %eax
	jmp	.LBB233_374
.LBB233_373:                            # %cond.false2516
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB233_374:                            # %cond.end2525
                                        #   in Loop: Header=BB233_352 Depth=2
.LBB233_375:                            # %cond.end2527
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB233_376:                            # %if.end2529
                                        #   in Loop: Header=BB233_352 Depth=2
	jmp	.LBB233_377
.LBB233_377:                            # %if.end2530
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB233_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB233_383
.LBB233_379:                            # %cond.false2546
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB233_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$127, %eax
	jmp	.LBB233_382
.LBB233_381:                            # %cond.false2562
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB233_382:                            # %cond.end2575
                                        #   in Loop: Header=BB233_352 Depth=2
.LBB233_383:                            # %cond.end2577
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB233_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB233_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB233_390
.LBB233_386:                            # %cond.false2592
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB233_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB233_389
.LBB233_388:                            # %cond.false2599
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB233_389:                            # %cond.end2603
                                        #   in Loop: Header=BB233_352 Depth=2
.LBB233_390:                            # %cond.end2605
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB233_392
.LBB233_391:                            # %if.else2611
                                        #   in Loop: Header=BB233_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB233_392:                            # %if.end2617
                                        #   in Loop: Header=BB233_352 Depth=2
	jmp	.LBB233_393
.LBB233_393:                            # %for.inc2618
                                        #   in Loop: Header=BB233_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB233_352
.LBB233_394:                            # %for.end2620
                                        #   in Loop: Header=BB233_350 Depth=1
	jmp	.LBB233_395
.LBB233_395:                            # %for.inc2621
                                        #   in Loop: Header=BB233_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_350
.LBB233_396:                            # %for.end2623
	jmp	.LBB233_397
.LBB233_397:                            # %if.end2624
	cmpl	$217313693, -72(%rbp)   # imm = 0xCF3F19D
	jne	.LBB233_399
.LBB233_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB233_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB233_398
.Lfunc_end233:
	.size	compute_colocated.170, .Lfunc_end233-compute_colocated.170
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.171  # -- Begin function fill_frame_num_gap.171
	.p2align	4, 0x90
	.type	fill_frame_num_gap.171,@function
fill_frame_num_gap.171:                 # @fill_frame_num_gap.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1842785808, -40(%rbp)  # imm = 0x6DD6AE10
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB234_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB234_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB234_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB234_1
.LBB234_3:                              # %while.end
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1842785808, -40(%rbp)  # imm = 0x6DD6AE10
	jne	.LBB234_5
.LBB234_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB234_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB234_4
.Lfunc_end234:
	.size	fill_frame_num_gap.171, .Lfunc_end234-fill_frame_num_gap.171
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.172          # -- Begin function init_lists.172
	.p2align	4, 0x90
	.type	init_lists.172,@function
init_lists.172:                         # @init_lists.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$2027142574, -76(%rbp)  # imm = 0x78D3BDAE
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB235_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB235_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB235_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB235_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB235_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB235_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB235_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB235_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB235_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB235_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB235_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB235_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB235_9
.LBB235_8:                              # %if.else
                                        #   in Loop: Header=BB235_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB235_9:                              # %if.end
                                        #   in Loop: Header=BB235_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB235_10:                             # %if.end36
                                        #   in Loop: Header=BB235_2 Depth=1
	jmp	.LBB235_11
.LBB235_11:                             # %if.end37
                                        #   in Loop: Header=BB235_2 Depth=1
	jmp	.LBB235_12
.LBB235_12:                             # %for.inc
                                        #   in Loop: Header=BB235_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_2
.LBB235_13:                             # %for.end
	jmp	.LBB235_31
.LBB235_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB235_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB235_17
.LBB235_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB235_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB235_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB235_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB235_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB235_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB235_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB235_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB235_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB235_23
.LBB235_22:                             # %if.else63
                                        #   in Loop: Header=BB235_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB235_23:                             # %if.end70
                                        #   in Loop: Header=BB235_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB235_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB235_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB235_25:                             # %if.end83
                                        #   in Loop: Header=BB235_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB235_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB235_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB235_27:                             # %if.end98
                                        #   in Loop: Header=BB235_18 Depth=1
	jmp	.LBB235_28
.LBB235_28:                             # %if.end99
                                        #   in Loop: Header=BB235_18 Depth=1
	jmp	.LBB235_29
.LBB235_29:                             # %for.inc100
                                        #   in Loop: Header=BB235_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_18
.LBB235_30:                             # %for.end102
	jmp	.LBB235_31
.LBB235_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB235_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB235_34
.LBB235_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB235_181
.LBB235_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB235_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB235_75
.LBB235_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB235_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB235_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB235_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB235_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB235_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB235_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB235_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB235_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB235_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB235_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB235_43:                             # %if.end140
                                        #   in Loop: Header=BB235_38 Depth=1
	jmp	.LBB235_44
.LBB235_44:                             # %if.end141
                                        #   in Loop: Header=BB235_38 Depth=1
	jmp	.LBB235_45
.LBB235_45:                             # %for.inc142
                                        #   in Loop: Header=BB235_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_38
.LBB235_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB235_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB235_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB235_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB235_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB235_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB235_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB235_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB235_51:                             # %if.end177
                                        #   in Loop: Header=BB235_47 Depth=1
	jmp	.LBB235_52
.LBB235_52:                             # %if.end178
                                        #   in Loop: Header=BB235_47 Depth=1
	jmp	.LBB235_53
.LBB235_53:                             # %for.inc179
                                        #   in Loop: Header=BB235_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_47
.LBB235_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB235_74
.LBB235_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB235_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB235_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB235_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB235_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB235_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB235_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB235_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB235_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB235_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB235_63:                             # %if.end212
                                        #   in Loop: Header=BB235_60 Depth=1
	jmp	.LBB235_64
.LBB235_64:                             # %for.inc213
                                        #   in Loop: Header=BB235_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_60
.LBB235_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB235_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB235_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB235_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB235_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB235_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB235_69:                             # %if.end242
                                        #   in Loop: Header=BB235_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB235_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB235_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB235_71:                             # %if.end259
                                        #   in Loop: Header=BB235_66 Depth=1
	jmp	.LBB235_72
.LBB235_72:                             # %for.inc260
                                        #   in Loop: Header=BB235_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_66
.LBB235_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB235_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB235_155
.LBB235_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB235_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB235_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB235_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB235_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB235_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB235_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB235_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB235_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB235_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB235_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB235_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB235_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB235_83:                             # %if.end307
                                        #   in Loop: Header=BB235_77 Depth=1
	jmp	.LBB235_84
.LBB235_84:                             # %if.end308
                                        #   in Loop: Header=BB235_77 Depth=1
	jmp	.LBB235_85
.LBB235_85:                             # %if.end309
                                        #   in Loop: Header=BB235_77 Depth=1
	jmp	.LBB235_86
.LBB235_86:                             # %for.inc310
                                        #   in Loop: Header=BB235_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_77
.LBB235_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB235_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB235_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB235_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB235_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB235_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB235_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB235_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB235_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB235_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB235_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB235_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB235_94:                             # %if.end354
                                        #   in Loop: Header=BB235_88 Depth=1
	jmp	.LBB235_95
.LBB235_95:                             # %if.end355
                                        #   in Loop: Header=BB235_88 Depth=1
	jmp	.LBB235_96
.LBB235_96:                             # %if.end356
                                        #   in Loop: Header=BB235_88 Depth=1
	jmp	.LBB235_97
.LBB235_97:                             # %for.inc357
                                        #   in Loop: Header=BB235_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_88
.LBB235_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB235_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB235_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB235_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB235_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_99
.LBB235_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB235_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB235_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB235_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB235_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_103
.LBB235_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB235_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB235_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB235_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB235_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB235_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB235_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB235_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB235_111:                            # %if.end428
                                        #   in Loop: Header=BB235_107 Depth=1
	jmp	.LBB235_112
.LBB235_112:                            # %if.end429
                                        #   in Loop: Header=BB235_107 Depth=1
	jmp	.LBB235_113
.LBB235_113:                            # %for.inc430
                                        #   in Loop: Header=BB235_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_107
.LBB235_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB235_154
.LBB235_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB235_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB235_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB235_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB235_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB235_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB235_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB235_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB235_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB235_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB235_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB235_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB235_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB235_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB235_126:                            # %if.end480
                                        #   in Loop: Header=BB235_122 Depth=1
	jmp	.LBB235_127
.LBB235_127:                            # %if.end481
                                        #   in Loop: Header=BB235_122 Depth=1
	jmp	.LBB235_128
.LBB235_128:                            # %for.inc482
                                        #   in Loop: Header=BB235_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_122
.LBB235_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB235_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB235_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB235_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB235_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB235_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB235_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB235_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB235_134:                            # %if.end507
                                        #   in Loop: Header=BB235_130 Depth=1
	jmp	.LBB235_135
.LBB235_135:                            # %if.end508
                                        #   in Loop: Header=BB235_130 Depth=1
	jmp	.LBB235_136
.LBB235_136:                            # %for.inc509
                                        #   in Loop: Header=BB235_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_130
.LBB235_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB235_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB235_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB235_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB235_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_138
.LBB235_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB235_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB235_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB235_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB235_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_142
.LBB235_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB235_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB235_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB235_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB235_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB235_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB235_149:                            # %if.end566
                                        #   in Loop: Header=BB235_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB235_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB235_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB235_151:                            # %if.end583
                                        #   in Loop: Header=BB235_146 Depth=1
	jmp	.LBB235_152
.LBB235_152:                            # %for.inc584
                                        #   in Loop: Header=BB235_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_146
.LBB235_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB235_154:                            # %if.end588
	jmp	.LBB235_155
.LBB235_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB235_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB235_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB235_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB235_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB235_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB235_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB235_158 Depth=1
	movl	$1, -68(%rbp)
.LBB235_161:                            # %if.end607
                                        #   in Loop: Header=BB235_158 Depth=1
	jmp	.LBB235_162
.LBB235_162:                            # %for.inc608
                                        #   in Loop: Header=BB235_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_158
.LBB235_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB235_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB235_165:                            # %if.end617
	jmp	.LBB235_166
.LBB235_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB235_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB235_169
.LBB235_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB235_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB235_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB235_172
.LBB235_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB235_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB235_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB235_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB235_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB235_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_173
.LBB235_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB235_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB235_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB235_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB235_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_177
.LBB235_180:                            # %for.end646.loopexit
	jmp	.LBB235_181
.LBB235_181:                            # %for.end646
	cmpl	$2027142574, -76(%rbp)  # imm = 0x78D3BDAE
	jne	.LBB235_183
.LBB235_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB235_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB235_182
.Lfunc_end235:
	.size	init_lists.172, .Lfunc_end235-init_lists.172
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.173
	.type	compare_fs_by_poc_asc.173,@function
compare_fs_by_poc_asc.173:              # @compare_fs_by_poc_asc.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1556507388, -16(%rbp)  # imm = 0x5CC66AFC
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB236_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB236_5
.LBB236_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB236_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB236_5
.LBB236_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB236_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1556507388, -16(%rbp)  # imm = 0x5CC66AFC
	jne	.LBB236_7
.LBB236_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB236_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB236_6
.Lfunc_end236:
	.size	compare_fs_by_poc_asc.173, .Lfunc_end236-compare_fs_by_poc_asc.173
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.174
	.type	compare_pic_by_poc_desc.174,@function
compare_pic_by_poc_desc.174:            # @compare_pic_by_poc_desc.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$134442430, -16(%rbp)   # imm = 0x8036DBE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB237_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB237_5
.LBB237_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB237_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB237_5
.LBB237_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB237_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$134442430, -16(%rbp)   # imm = 0x8036DBE
	jne	.LBB237_7
.LBB237_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB237_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB237_6
.Lfunc_end237:
	.size	compare_pic_by_poc_desc.174, .Lfunc_end237-compare_pic_by_poc_desc.174
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.175 # -- Begin function alloc_storable_picture.175
	.p2align	4, 0x90
	.type	alloc_storable_picture.175,@function
alloc_storable_picture.175:             # @alloc_storable_picture.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1663394345, -40(%rbp)  # imm = 0x63256229
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB238_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB238_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB238_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB238_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB238_6
.LBB238_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB238_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB238_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB238_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB238_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB238_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1663394345, -40(%rbp)  # imm = 0x63256229
	jne	.LBB238_12
.LBB238_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB238_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB238_11
.Lfunc_end238:
	.size	alloc_storable_picture.175, .Lfunc_end238-alloc_storable_picture.175
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.176 # -- Begin function replace_top_pic_with_frame.176
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.176,@function
replace_top_pic_with_frame.176:         # @replace_top_pic_with_frame.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1822635656, -32(%rbp)  # imm = 0x6CA33688
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB239_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB239_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB239_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB239_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB239_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB239_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB239_10
.LBB239_7:                              # %if.end14
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_8
.LBB239_8:                              # %for.inc
                                        #   in Loop: Header=BB239_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB239_3
.LBB239_9:                              # %for.end.loopexit
	jmp	.LBB239_10
.LBB239_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB239_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB239_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB239_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB239_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB239_15:                             # %if.end26
	jmp	.LBB239_16
.LBB239_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1822635656, -32(%rbp)  # imm = 0x6CA33688
	jne	.LBB239_18
.LBB239_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB239_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB239_17
.Lfunc_end239:
	.size	replace_top_pic_with_frame.176, .Lfunc_end239-replace_top_pic_with_frame.176
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.177
	.type	mark_pic_long_term.177,@function
mark_pic_long_term.177:                 # @mark_pic_long_term.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$307962991, -20(%rbp)   # imm = 0x125B246F
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB240_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB240_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB240_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB240_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB240_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB240_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB240_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB240_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB240_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB240_39
.LBB240_7:                              # %if.end
                                        #   in Loop: Header=BB240_2 Depth=1
	jmp	.LBB240_8
.LBB240_8:                              # %if.end50
                                        #   in Loop: Header=BB240_2 Depth=1
	jmp	.LBB240_9
.LBB240_9:                              # %for.inc
                                        #   in Loop: Header=BB240_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB240_2
.LBB240_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB240_39
.LBB240_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB240_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB240_14
.LBB240_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -24(%rbp)
.LBB240_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB240_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB240_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB240_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB240_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB240_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB240_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB240_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB240_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB240_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB240_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB240_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB240_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB240_24:                             # %if.end123
	jmp	.LBB240_39
.LBB240_25:                             # %if.end124
                                        #   in Loop: Header=BB240_15 Depth=1
	jmp	.LBB240_26
.LBB240_26:                             # %if.end125
                                        #   in Loop: Header=BB240_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB240_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB240_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB240_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB240_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB240_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB240_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB240_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB240_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB240_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB240_34:                             # %if.end194
	jmp	.LBB240_39
.LBB240_35:                             # %if.end195
                                        #   in Loop: Header=BB240_15 Depth=1
	jmp	.LBB240_36
.LBB240_36:                             # %if.end196
                                        #   in Loop: Header=BB240_15 Depth=1
	jmp	.LBB240_37
.LBB240_37:                             # %for.inc197
                                        #   in Loop: Header=BB240_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB240_15
.LBB240_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB240_39:                             # %if.end201
	cmpl	$307962991, -20(%rbp)   # imm = 0x125B246F
	jne	.LBB240_41
.LBB240_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB240_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB240_40
.Lfunc_end240:
	.size	mark_pic_long_term.177, .Lfunc_end240-mark_pic_long_term.177
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.178   # -- Begin function dpb_combine_field.178
	.p2align	4, 0x90
	.type	dpb_combine_field.178,@function
dpb_combine_field.178:                  # @dpb_combine_field.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$509622117, -32(%rbp)   # imm = 0x1E603765
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB241_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB241_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB241_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_1
.LBB241_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB241_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB241_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB241_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB241_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_5
.LBB241_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB241_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB241_11
.LBB241_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB241_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB241_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB241_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB241_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB241_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB241_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB241_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB241_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB241_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB241_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB241_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB241_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB241_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB241_24
.LBB241_23:                             # %cond.false217
                                        #   in Loop: Header=BB241_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB241_24:                             # %cond.end226
                                        #   in Loop: Header=BB241_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB241_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_20
.LBB241_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB241_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB241_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB241_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB241_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB241_31
.LBB241_30:                             # %cond.false269
                                        #   in Loop: Header=BB241_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB241_31:                             # %cond.end278
                                        #   in Loop: Header=BB241_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB241_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_27
.LBB241_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB241_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB241_34 Depth=1
	movl	$0, -20(%rbp)
.LBB241_36:                             # %for.cond295
                                        #   Parent Loop BB241_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB241_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB241_40
.LBB241_39:                             # %cond.false445
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB241_40
.LBB241_40:                             # %cond.end446
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB241_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB241_43
.LBB241_42:                             # %cond.false462
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB241_43
.LBB241_43:                             # %cond.end463
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB241_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB241_46
.LBB241_45:                             # %cond.false479
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB241_46
.LBB241_46:                             # %cond.end480
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB241_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB241_49
.LBB241_48:                             # %cond.false501
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB241_49
.LBB241_49:                             # %cond.end502
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB241_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB241_52
.LBB241_51:                             # %cond.false647
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB241_52
.LBB241_52:                             # %cond.end648
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB241_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB241_55
.LBB241_54:                             # %cond.false665
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB241_55
.LBB241_55:                             # %cond.end666
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB241_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB241_58
.LBB241_57:                             # %cond.false683
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB241_58
.LBB241_58:                             # %cond.end684
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB241_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB241_61
.LBB241_60:                             # %cond.false706
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB241_61
.LBB241_61:                             # %cond.end707
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB241_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB241_36
.LBB241_63:                             # %for.end723
                                        #   in Loop: Header=BB241_34 Depth=1
	jmp	.LBB241_64
.LBB241_64:                             # %for.inc724
                                        #   in Loop: Header=BB241_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_34
.LBB241_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB241_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB241_76
.LBB241_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB241_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB241_68 Depth=1
	movl	$0, -20(%rbp)
.LBB241_70:                             # %for.cond737
                                        #   Parent Loop BB241_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB241_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB241_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB241_70
.LBB241_73:                             # %for.end758
                                        #   in Loop: Header=BB241_68 Depth=1
	jmp	.LBB241_74
.LBB241_74:                             # %for.inc759
                                        #   in Loop: Header=BB241_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_68
.LBB241_75:                             # %for.end761
	jmp	.LBB241_76
.LBB241_76:                             # %if.end762
	cmpl	$509622117, -32(%rbp)   # imm = 0x1E603765
	jne	.LBB241_78
.LBB241_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB241_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB241_77
.Lfunc_end241:
	.size	dpb_combine_field.178, .Lfunc_end241-dpb_combine_field.178
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.179 # -- Begin function replace_top_pic_with_frame.179
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.179,@function
replace_top_pic_with_frame.179:         # @replace_top_pic_with_frame.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1480552180, -32(%rbp)  # imm = 0x583F6EF4
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB242_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB242_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB242_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB242_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB242_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB242_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB242_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB242_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB242_10
.LBB242_7:                              # %if.end14
                                        #   in Loop: Header=BB242_3 Depth=1
	jmp	.LBB242_8
.LBB242_8:                              # %for.inc
                                        #   in Loop: Header=BB242_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB242_3
.LBB242_9:                              # %for.end.loopexit
	jmp	.LBB242_10
.LBB242_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB242_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB242_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB242_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB242_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB242_15:                             # %if.end26
	jmp	.LBB242_16
.LBB242_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1480552180, -32(%rbp)  # imm = 0x583F6EF4
	jne	.LBB242_18
.LBB242_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB242_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB242_17
.Lfunc_end242:
	.size	replace_top_pic_with_frame.179, .Lfunc_end242-replace_top_pic_with_frame.179
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.180 # -- Begin function replace_top_pic_with_frame.180
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.180,@function
replace_top_pic_with_frame.180:         # @replace_top_pic_with_frame.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$703236883, -32(%rbp)   # imm = 0x29EA8B13
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB243_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB243_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB243_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB243_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB243_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB243_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB243_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB243_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB243_10
.LBB243_7:                              # %if.end14
                                        #   in Loop: Header=BB243_3 Depth=1
	jmp	.LBB243_8
.LBB243_8:                              # %for.inc
                                        #   in Loop: Header=BB243_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB243_3
.LBB243_9:                              # %for.end.loopexit
	jmp	.LBB243_10
.LBB243_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB243_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB243_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB243_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB243_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB243_15:                             # %if.end26
	jmp	.LBB243_16
.LBB243_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$703236883, -32(%rbp)   # imm = 0x29EA8B13
	jne	.LBB243_18
.LBB243_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB243_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB243_17
.Lfunc_end243:
	.size	replace_top_pic_with_frame.180, .Lfunc_end243-replace_top_pic_with_frame.180
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.181 # -- Begin function reorder_ref_pic_list.181
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.181,@function
reorder_ref_pic_list.181:               # @reorder_ref_pic_list.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$542271004, -60(%rbp)   # imm = 0x2052661C
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB244_2
# %bb.1:                                # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB244_3
.LBB244_2:                              # %if.else
	movl	-36(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB244_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB244_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB244_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB244_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB244_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB244_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB244_7:                              # %if.end9
                                        #   in Loop: Header=BB244_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB244_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB244_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB244_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB244_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB244_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB244_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB244_12
.LBB244_11:                             # %if.else28
                                        #   in Loop: Header=BB244_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB244_12:                             # %if.end33
                                        #   in Loop: Header=BB244_4 Depth=1
	jmp	.LBB244_17
.LBB244_13:                             # %if.else34
                                        #   in Loop: Header=BB244_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB244_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB244_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB244_16
.LBB244_15:                             # %if.else46
                                        #   in Loop: Header=BB244_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB244_16:                             # %if.end51
                                        #   in Loop: Header=BB244_4 Depth=1
	jmp	.LBB244_17
.LBB244_17:                             # %if.end52
                                        #   in Loop: Header=BB244_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB244_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB244_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB244_20
.LBB244_19:                             # %if.else56
                                        #   in Loop: Header=BB244_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB244_20:                             # %if.end57
                                        #   in Loop: Header=BB244_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB244_22
.LBB244_21:                             # %if.else58
                                        #   in Loop: Header=BB244_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_long_term
.LBB244_22:                             # %if.end61
                                        #   in Loop: Header=BB244_4 Depth=1
	jmp	.LBB244_23
.LBB244_23:                             # %for.inc
                                        #   in Loop: Header=BB244_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB244_4
.LBB244_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$542271004, -60(%rbp)   # imm = 0x2052661C
	jne	.LBB244_26
.LBB244_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB244_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB244_25
.Lfunc_end244:
	.size	reorder_ref_pic_list.181, .Lfunc_end244-reorder_ref_pic_list.181
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.182
	.type	get_pic_num_x.182,@function
get_pic_num_x.182:                      # @get_pic_num_x.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2029812578, -32(%rbp)  # imm = 0x78FC7B62
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB245_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_3
.LBB245_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB245_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$2029812578, -32(%rbp)  # imm = 0x78FC7B62
	jne	.LBB245_5
.LBB245_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB245_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB245_4
.Lfunc_end245:
	.size	get_pic_num_x.182, .Lfunc_end245-get_pic_num_x.182
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb.183
	.type	output_one_frame_from_dpb.183,@function
output_one_frame_from_dpb.183:          # @output_one_frame_from_dpb.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1823778358, -12(%rbp)  # imm = 0x6CB4A636
	cmpl	$1, dpb+28
	jae	.LBB246_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.30, %rdi
	movl	$150, %esi
	callq	error
.LBB246_2:                              # %if.end
	leaq	-8(%rbp), %rdi
	leaq	-4(%rbp), %rsi
	callq	get_smallest_poc
	cmpl	$-1, -4(%rbp)
	jne	.LBB246_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.31, %rdi
	movl	$150, %esi
	callq	error
.LBB246_4:                              # %if.end3
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	p_dec, %esi
	callq	write_stored_frame
	movl	dpb+40, %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB246_6
# %bb.5:                                # %if.then5
	movabsq	$.L.str.32, %rdi
	movl	$150, %esi
	callq	error
.LBB246_6:                              # %if.end6
	movl	-8(%rbp), %eax
	movl	%eax, dpb+40
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB246_8
# %bb.7:                                # %if.then9
	movl	-4(%rbp), %edi
	callq	remove_frame_from_dpb
.LBB246_8:                              # %if.end10
	cmpl	$1823778358, -12(%rbp)  # imm = 0x6CB4A636
	jne	.LBB246_10
.LBB246_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB246_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB246_9
.Lfunc_end246:
	.size	output_one_frame_from_dpb.183, .Lfunc_end246-output_one_frame_from_dpb.183
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.184
	.type	mm_assign_long_term_frame_idx.184,@function
mm_assign_long_term_frame_idx.184:      # @mm_assign_long_term_frame_idx.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$801721829, -32(%rbp)   # imm = 0x2FC94DE5
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB247_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB247_18
.LBB247_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB247_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB247_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB247_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB247_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB247_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB247_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB247_15
.LBB247_7:                              # %if.end
                                        #   in Loop: Header=BB247_3 Depth=1
	jmp	.LBB247_8
.LBB247_8:                              # %if.end8
                                        #   in Loop: Header=BB247_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB247_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB247_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB247_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB247_15
.LBB247_11:                             # %if.end20
                                        #   in Loop: Header=BB247_3 Depth=1
	jmp	.LBB247_12
.LBB247_12:                             # %if.end21
                                        #   in Loop: Header=BB247_3 Depth=1
	jmp	.LBB247_13
.LBB247_13:                             # %for.inc
                                        #   in Loop: Header=BB247_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB247_3
.LBB247_14:                             # %for.end.loopexit
	jmp	.LBB247_15
.LBB247_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB247_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB247_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB247_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$801721829, -32(%rbp)   # imm = 0x2FC94DE5
	jne	.LBB247_20
.LBB247_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB247_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB247_19
.Lfunc_end247:
	.size	mm_assign_long_term_frame_idx.184, .Lfunc_end247-mm_assign_long_term_frame_idx.184
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.185   # -- Begin function dpb_combine_field.185
	.p2align	4, 0x90
	.type	dpb_combine_field.185,@function
dpb_combine_field.185:                  # @dpb_combine_field.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1538057046, -32(%rbp)  # imm = 0x5BACE356
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB248_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB248_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB248_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB248_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB248_1
.LBB248_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB248_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB248_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB248_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB248_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB248_5
.LBB248_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB248_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB248_11
.LBB248_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB248_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB248_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB248_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB248_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB248_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB248_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB248_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB248_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB248_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB248_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB248_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB248_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB248_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB248_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB248_24
.LBB248_23:                             # %cond.false217
                                        #   in Loop: Header=BB248_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB248_24:                             # %cond.end226
                                        #   in Loop: Header=BB248_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB248_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB248_20
.LBB248_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB248_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB248_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB248_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB248_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB248_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB248_31
.LBB248_30:                             # %cond.false269
                                        #   in Loop: Header=BB248_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB248_31:                             # %cond.end278
                                        #   in Loop: Header=BB248_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB248_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB248_27
.LBB248_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB248_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB248_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB248_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB248_34 Depth=1
	movl	$0, -20(%rbp)
.LBB248_36:                             # %for.cond295
                                        #   Parent Loop BB248_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB248_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB248_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB248_40
.LBB248_39:                             # %cond.false445
                                        #   in Loop: Header=BB248_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB248_40
.LBB248_40:                             # %cond.end446
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB248_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB248_43
.LBB248_42:                             # %cond.false462
                                        #   in Loop: Header=BB248_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB248_43
.LBB248_43:                             # %cond.end463
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB248_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB248_46
.LBB248_45:                             # %cond.false479
                                        #   in Loop: Header=BB248_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB248_46
.LBB248_46:                             # %cond.end480
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB248_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB248_49
.LBB248_48:                             # %cond.false501
                                        #   in Loop: Header=BB248_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB248_49
.LBB248_49:                             # %cond.end502
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB248_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB248_52
.LBB248_51:                             # %cond.false647
                                        #   in Loop: Header=BB248_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB248_52
.LBB248_52:                             # %cond.end648
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB248_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB248_55
.LBB248_54:                             # %cond.false665
                                        #   in Loop: Header=BB248_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB248_55
.LBB248_55:                             # %cond.end666
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB248_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB248_58
.LBB248_57:                             # %cond.false683
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB248_58
.LBB248_58:                             # %cond.end684
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB248_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB248_61
.LBB248_60:                             # %cond.false706
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB248_61
.LBB248_61:                             # %cond.end707
                                        #   in Loop: Header=BB248_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB248_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB248_36
.LBB248_63:                             # %for.end723
                                        #   in Loop: Header=BB248_34 Depth=1
	jmp	.LBB248_64
.LBB248_64:                             # %for.inc724
                                        #   in Loop: Header=BB248_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB248_34
.LBB248_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB248_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB248_76
.LBB248_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB248_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB248_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB248_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB248_68 Depth=1
	movl	$0, -20(%rbp)
.LBB248_70:                             # %for.cond737
                                        #   Parent Loop BB248_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB248_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB248_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB248_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB248_70
.LBB248_73:                             # %for.end758
                                        #   in Loop: Header=BB248_68 Depth=1
	jmp	.LBB248_74
.LBB248_74:                             # %for.inc759
                                        #   in Loop: Header=BB248_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB248_68
.LBB248_75:                             # %for.end761
	jmp	.LBB248_76
.LBB248_76:                             # %if.end762
	cmpl	$1538057046, -32(%rbp)  # imm = 0x5BACE356
	jne	.LBB248_78
.LBB248_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB248_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB248_77
.Lfunc_end248:
	.size	dpb_combine_field.185, .Lfunc_end248-dpb_combine_field.185
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.186
	.type	gen_pic_list_from_frame_list.186,@function
gen_pic_list_from_frame_list.186:       # @gen_pic_list_from_frame_list.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$507693341, -64(%rbp)   # imm = 0x1E42C91D
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB249_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB249_3
.LBB249_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB249_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB249_28
# %bb.4:                                # %if.then1
	jmp	.LBB249_5
.LBB249_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_9 Depth 2
                                        #     Child Loop BB249_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB249_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB249_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB249_7:                              # %lor.end
                                        #   in Loop: Header=BB249_5 Depth=1
	testb	$1, %al
	jne	.LBB249_8
	jmp	.LBB249_27
.LBB249_8:                              # %while.body
                                        #   in Loop: Header=BB249_5 Depth=1
	jmp	.LBB249_9
.LBB249_9:                              # %for.cond
                                        #   Parent Loop BB249_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB249_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB249_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB249_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB249_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB249_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB249_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_17
.LBB249_13:                             # %if.end17
                                        #   in Loop: Header=BB249_9 Depth=2
	jmp	.LBB249_14
.LBB249_14:                             # %if.end18
                                        #   in Loop: Header=BB249_9 Depth=2
	jmp	.LBB249_15
.LBB249_15:                             # %for.inc
                                        #   in Loop: Header=BB249_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_9
.LBB249_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB249_5 Depth=1
	jmp	.LBB249_17
.LBB249_17:                             # %for.end
                                        #   in Loop: Header=BB249_5 Depth=1
	jmp	.LBB249_18
.LBB249_18:                             # %for.cond20
                                        #   Parent Loop BB249_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB249_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB249_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB249_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB249_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB249_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB249_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_26
.LBB249_22:                             # %if.end41
                                        #   in Loop: Header=BB249_18 Depth=2
	jmp	.LBB249_23
.LBB249_23:                             # %if.end42
                                        #   in Loop: Header=BB249_18 Depth=2
	jmp	.LBB249_24
.LBB249_24:                             # %for.inc43
                                        #   in Loop: Header=BB249_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_18
.LBB249_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB249_5 Depth=1
	jmp	.LBB249_26
.LBB249_26:                             # %for.end45
                                        #   in Loop: Header=BB249_5 Depth=1
	jmp	.LBB249_5
.LBB249_27:                             # %while.end
	jmp	.LBB249_28
.LBB249_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB249_53
# %bb.29:                               # %if.then48
	jmp	.LBB249_30
.LBB249_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_34 Depth 2
                                        #     Child Loop BB249_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB249_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB249_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB249_32:                             # %lor.end53
                                        #   in Loop: Header=BB249_30 Depth=1
	testb	$1, %al
	jne	.LBB249_33
	jmp	.LBB249_52
.LBB249_33:                             # %while.body54
                                        #   in Loop: Header=BB249_30 Depth=1
	jmp	.LBB249_34
.LBB249_34:                             # %for.cond55
                                        #   Parent Loop BB249_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB249_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB249_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB249_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB249_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB249_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB249_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_42
.LBB249_38:                             # %if.end77
                                        #   in Loop: Header=BB249_34 Depth=2
	jmp	.LBB249_39
.LBB249_39:                             # %if.end78
                                        #   in Loop: Header=BB249_34 Depth=2
	jmp	.LBB249_40
.LBB249_40:                             # %for.inc79
                                        #   in Loop: Header=BB249_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_34
.LBB249_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB249_30 Depth=1
	jmp	.LBB249_42
.LBB249_42:                             # %for.end81
                                        #   in Loop: Header=BB249_30 Depth=1
	jmp	.LBB249_43
.LBB249_43:                             # %for.cond82
                                        #   Parent Loop BB249_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB249_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB249_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB249_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB249_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB249_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB249_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_51
.LBB249_47:                             # %if.end104
                                        #   in Loop: Header=BB249_43 Depth=2
	jmp	.LBB249_48
.LBB249_48:                             # %if.end105
                                        #   in Loop: Header=BB249_43 Depth=2
	jmp	.LBB249_49
.LBB249_49:                             # %for.inc106
                                        #   in Loop: Header=BB249_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_43
.LBB249_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB249_30 Depth=1
	jmp	.LBB249_51
.LBB249_51:                             # %for.end108
                                        #   in Loop: Header=BB249_30 Depth=1
	jmp	.LBB249_30
.LBB249_52:                             # %while.end109
	jmp	.LBB249_53
.LBB249_53:                             # %if.end110
	cmpl	$507693341, -64(%rbp)   # imm = 0x1E42C91D
	jne	.LBB249_55
.LBB249_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB249_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB249_54
.Lfunc_end249:
	.size	gen_pic_list_from_frame_list.186, .Lfunc_end249-gen_pic_list_from_frame_list.186
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.187 # -- Begin function store_picture_in_dpb.187
	.p2align	4, 0x90
	.type	store_picture_in_dpb.187,@function
store_picture_in_dpb.187:               # @store_picture_in_dpb.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$312234520, -16(%rbp)   # imm = 0x129C5218
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB250_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB250_6
.LBB250_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB250_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB250_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB250_5:                              # %if.end
	jmp	.LBB250_6
.LBB250_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB250_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB250_23
.LBB250_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB250_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB250_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB250_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB250_14
.LBB250_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB250_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB250_20
.LBB250_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB250_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB250_18
.LBB250_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB250_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB250_19
.LBB250_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB250_50
.LBB250_19:                             # %if.end48
	jmp	.LBB250_20
.LBB250_20:                             # %if.end49
	jmp	.LBB250_21
.LBB250_21:                             # %if.end50
	jmp	.LBB250_22
.LBB250_22:                             # %if.end51
	jmp	.LBB250_23
.LBB250_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB250_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB250_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB250_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB250_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB250_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB250_29:                             # %if.end67
	jmp	.LBB250_30
.LBB250_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB250_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB250_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB250_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB250_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-24(%rbp), %eax
	je	.LBB250_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB250_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB250_35
.LBB250_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB250_50
.LBB250_35:                             # %if.end80
                                        #   in Loop: Header=BB250_30 Depth=1
	jmp	.LBB250_36
.LBB250_36:                             # %if.end81
                                        #   in Loop: Header=BB250_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB250_30
.LBB250_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB250_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB250_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB250_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB250_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB250_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB250_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB250_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB250_43:                             # %if.end94
                                        #   in Loop: Header=BB250_40 Depth=1
	jmp	.LBB250_44
.LBB250_44:                             # %for.inc
                                        #   in Loop: Header=BB250_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB250_40
.LBB250_45:                             # %for.end
	jmp	.LBB250_46
.LBB250_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB250_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB250_49
.LBB250_48:                             # %if.else104
	movq	$0, dpb+56
.LBB250_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB250_50:                             # %return
	cmpl	$312234520, -16(%rbp)   # imm = 0x129C5218
	jne	.LBB250_52
.LBB250_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB250_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB250_51
.Lfunc_end250:
	.size	store_picture_in_dpb.187, .Lfunc_end250-store_picture_in_dpb.187
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.188     # -- Begin function dpb_split_field.188
	.p2align	4, 0x90
	.type	dpb_split_field.188,@function
dpb_split_field.188:                    # @dpb_split_field.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$512886062, -64(%rbp)   # imm = 0x1E92052E
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB251_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB251_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB251_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB251_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_2
.LBB251_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB251_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB251_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB251_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_6
.LBB251_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB251_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB251_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB251_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_10
.LBB251_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB251_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB251_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB251_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_14
.LBB251_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB251_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB251_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB251_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB251_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB251_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_19
.LBB251_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB251_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB251_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB251_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB251_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_23
.LBB251_26:                             # %for.end328
	jmp	.LBB251_27
.LBB251_27:                             # %if.end
	jmp	.LBB251_29
.LBB251_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB251_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB251_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB251_30 Depth=1
	movl	$0, -4(%rbp)
.LBB251_32:                             # %for.cond343
                                        #   Parent Loop BB251_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB251_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB251_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB251_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB251_32 Depth=2
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB251_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB251_38
.LBB251_37:                             # %cond.false
                                        #   in Loop: Header=BB251_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB251_38
.LBB251_38:                             # %cond.end
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB251_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB251_41
.LBB251_40:                             # %cond.false415
                                        #   in Loop: Header=BB251_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB251_41
.LBB251_41:                             # %cond.end416
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB251_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB251_44
.LBB251_43:                             # %cond.false436
                                        #   in Loop: Header=BB251_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB251_44
.LBB251_44:                             # %cond.end437
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB251_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB251_47
.LBB251_46:                             # %cond.false456
                                        #   in Loop: Header=BB251_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB251_47
.LBB251_47:                             # %cond.end457
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB251_55
.LBB251_48:                             # %if.else466
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB251_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB251_51
.LBB251_50:                             # %cond.false491
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB251_51
.LBB251_51:                             # %cond.end492
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB251_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB251_54
.LBB251_53:                             # %cond.false509
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB251_54
.LBB251_54:                             # %cond.end510
                                        #   in Loop: Header=BB251_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_55:                             # %if.end519
                                        #   in Loop: Header=BB251_32 Depth=2
	jmp	.LBB251_56
.LBB251_56:                             # %for.inc520
                                        #   in Loop: Header=BB251_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_32
.LBB251_57:                             # %for.end522
                                        #   in Loop: Header=BB251_30 Depth=1
	jmp	.LBB251_58
.LBB251_58:                             # %for.inc523
                                        #   in Loop: Header=BB251_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB251_30
.LBB251_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB251_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB251_73
.LBB251_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB251_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB251_62 Depth=1
	movl	$0, -8(%rbp)
.LBB251_64:                             # %for.cond538
                                        #   Parent Loop BB251_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB251_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB251_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB251_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB251_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB251_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_68:                             # %if.end908
                                        #   in Loop: Header=BB251_64 Depth=2
	jmp	.LBB251_69
.LBB251_69:                             # %for.inc909
                                        #   in Loop: Header=BB251_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB251_64
.LBB251_70:                             # %for.end911
                                        #   in Loop: Header=BB251_62 Depth=1
	jmp	.LBB251_71
.LBB251_71:                             # %for.inc912
                                        #   in Loop: Header=BB251_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_62
.LBB251_72:                             # %for.end914
	jmp	.LBB251_73
.LBB251_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB251_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB251_74 Depth=1
	movl	$0, -8(%rbp)
.LBB251_76:                             # %for.cond923
                                        #   Parent Loop BB251_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB251_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB251_148
.LBB251_79:                             # %if.then954
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB251_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_83
.LBB251_82:                             # %cond.false991
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_83:                             # %cond.end993
                                        #   in Loop: Header=BB251_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_86
.LBB251_85:                             # %cond.false1001
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_86:                             # %cond.end1003
                                        #   in Loop: Header=BB251_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_89
.LBB251_88:                             # %cond.false1032
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_89:                             # %cond.end1034
                                        #   in Loop: Header=BB251_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_92
.LBB251_91:                             # %cond.false1042
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_92:                             # %cond.end1044
                                        #   in Loop: Header=BB251_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_95
.LBB251_94:                             # %cond.false1073
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_95:                             # %cond.end1075
                                        #   in Loop: Header=BB251_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_98
.LBB251_97:                             # %cond.false1083
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_98:                             # %cond.end1085
                                        #   in Loop: Header=BB251_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_101
.LBB251_100:                            # %cond.false1114
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_101:                            # %cond.end1116
                                        #   in Loop: Header=BB251_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_104
.LBB251_103:                            # %cond.false1124
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_104:                            # %cond.end1126
                                        #   in Loop: Header=BB251_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_107
.LBB251_106:                            # %cond.false1155
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_107:                            # %cond.end1157
                                        #   in Loop: Header=BB251_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_110
.LBB251_109:                            # %cond.false1165
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_110:                            # %cond.end1167
                                        #   in Loop: Header=BB251_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB251_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB251_125
.LBB251_112:                            # %if.else1190
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_115
.LBB251_114:                            # %cond.false1198
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_115:                            # %cond.end1200
                                        #   in Loop: Header=BB251_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_118
.LBB251_117:                            # %cond.false1208
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_118:                            # %cond.end1210
                                        #   in Loop: Header=BB251_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB251_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB251_121
.LBB251_120:                            # %cond.false1237
                                        #   in Loop: Header=BB251_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB251_121
.LBB251_121:                            # %cond.end1238
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB251_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB251_124
.LBB251_123:                            # %cond.false1254
                                        #   in Loop: Header=BB251_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB251_124
.LBB251_124:                            # %cond.end1255
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_125:                            # %if.end1264
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_128
.LBB251_127:                            # %cond.false1272
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_128:                            # %cond.end1274
                                        #   in Loop: Header=BB251_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_131
.LBB251_130:                            # %cond.false1282
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_131:                            # %cond.end1284
                                        #   in Loop: Header=BB251_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB251_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB251_146
.LBB251_133:                            # %if.else1307
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_136
.LBB251_135:                            # %cond.false1315
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_136:                            # %cond.end1317
                                        #   in Loop: Header=BB251_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB251_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB251_139
.LBB251_138:                            # %cond.false1325
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB251_139:                            # %cond.end1327
                                        #   in Loop: Header=BB251_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB251_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB251_142
.LBB251_141:                            # %cond.false1355
                                        #   in Loop: Header=BB251_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB251_142
.LBB251_142:                            # %cond.end1356
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB251_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB251_145
.LBB251_144:                            # %cond.false1373
                                        #   in Loop: Header=BB251_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB251_145
.LBB251_145:                            # %cond.end1374
                                        #   in Loop: Header=BB251_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_146:                            # %if.end1383
                                        #   in Loop: Header=BB251_76 Depth=2
	jmp	.LBB251_147
.LBB251_147:                            # %if.end1384
                                        #   in Loop: Header=BB251_76 Depth=2
	jmp	.LBB251_148
.LBB251_148:                            # %if.end1385
                                        #   in Loop: Header=BB251_76 Depth=2
	jmp	.LBB251_149
.LBB251_149:                            # %for.inc1386
                                        #   in Loop: Header=BB251_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB251_76
.LBB251_150:                            # %for.end1388
                                        #   in Loop: Header=BB251_74 Depth=1
	jmp	.LBB251_151
.LBB251_151:                            # %for.inc1389
                                        #   in Loop: Header=BB251_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_74
.LBB251_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB251_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB251_153 Depth=1
	movl	$0, -4(%rbp)
.LBB251_155:                            # %for.cond1399
                                        #   Parent Loop BB251_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB251_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB251_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_155
.LBB251_158:                            # %for.end1414
                                        #   in Loop: Header=BB251_153 Depth=1
	jmp	.LBB251_159
.LBB251_159:                            # %for.inc1415
                                        #   in Loop: Header=BB251_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB251_153
.LBB251_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB251_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB251_174
.LBB251_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB251_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB251_163 Depth=1
	movl	$0, -4(%rbp)
.LBB251_165:                            # %for.cond1431
                                        #   Parent Loop BB251_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB251_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB251_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB251_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB251_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB251_169
.LBB251_168:                            # %cond.false1462
                                        #   in Loop: Header=BB251_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB251_169
.LBB251_169:                            # %cond.end1463
                                        #   in Loop: Header=BB251_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB251_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_165
.LBB251_171:                            # %for.end1474
                                        #   in Loop: Header=BB251_163 Depth=1
	jmp	.LBB251_172
.LBB251_172:                            # %for.inc1475
                                        #   in Loop: Header=BB251_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB251_163
.LBB251_173:                            # %for.end1477
	jmp	.LBB251_174
.LBB251_174:                            # %if.end1478
	cmpl	$512886062, -64(%rbp)   # imm = 0x1E92052E
	jne	.LBB251_176
.LBB251_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB251_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB251_175
.Lfunc_end251:
	.size	dpb_split_field.188, .Lfunc_end251-dpb_split_field.188
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.189   # -- Begin function dpb_combine_field.189
	.p2align	4, 0x90
	.type	dpb_combine_field.189,@function
dpb_combine_field.189:                  # @dpb_combine_field.189
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1526656548, -32(%rbp)  # imm = 0x5AFEEE24
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB252_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB252_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB252_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB252_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB252_1
.LBB252_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB252_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB252_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB252_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB252_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB252_5
.LBB252_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB252_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB252_11
.LBB252_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB252_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB252_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB252_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB252_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB252_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB252_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB252_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB252_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB252_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB252_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB252_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB252_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB252_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB252_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB252_24
.LBB252_23:                             # %cond.false217
                                        #   in Loop: Header=BB252_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB252_24:                             # %cond.end226
                                        #   in Loop: Header=BB252_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB252_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB252_20
.LBB252_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB252_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB252_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB252_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB252_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB252_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB252_31
.LBB252_30:                             # %cond.false269
                                        #   in Loop: Header=BB252_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB252_31:                             # %cond.end278
                                        #   in Loop: Header=BB252_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB252_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB252_27
.LBB252_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB252_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB252_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB252_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB252_34 Depth=1
	movl	$0, -20(%rbp)
.LBB252_36:                             # %for.cond295
                                        #   Parent Loop BB252_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB252_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB252_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB252_40
.LBB252_39:                             # %cond.false445
                                        #   in Loop: Header=BB252_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB252_40
.LBB252_40:                             # %cond.end446
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB252_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB252_43
.LBB252_42:                             # %cond.false462
                                        #   in Loop: Header=BB252_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB252_43
.LBB252_43:                             # %cond.end463
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB252_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB252_46
.LBB252_45:                             # %cond.false479
                                        #   in Loop: Header=BB252_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB252_46
.LBB252_46:                             # %cond.end480
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB252_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB252_49
.LBB252_48:                             # %cond.false501
                                        #   in Loop: Header=BB252_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB252_49
.LBB252_49:                             # %cond.end502
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB252_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB252_52
.LBB252_51:                             # %cond.false647
                                        #   in Loop: Header=BB252_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB252_52
.LBB252_52:                             # %cond.end648
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB252_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB252_55
.LBB252_54:                             # %cond.false665
                                        #   in Loop: Header=BB252_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB252_55
.LBB252_55:                             # %cond.end666
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB252_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB252_58
.LBB252_57:                             # %cond.false683
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB252_58
.LBB252_58:                             # %cond.end684
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB252_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB252_61
.LBB252_60:                             # %cond.false706
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB252_61
.LBB252_61:                             # %cond.end707
                                        #   in Loop: Header=BB252_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB252_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB252_36
.LBB252_63:                             # %for.end723
                                        #   in Loop: Header=BB252_34 Depth=1
	jmp	.LBB252_64
.LBB252_64:                             # %for.inc724
                                        #   in Loop: Header=BB252_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB252_34
.LBB252_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB252_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB252_76
.LBB252_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB252_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB252_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB252_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB252_68 Depth=1
	movl	$0, -20(%rbp)
.LBB252_70:                             # %for.cond737
                                        #   Parent Loop BB252_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB252_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB252_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB252_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB252_70
.LBB252_73:                             # %for.end758
                                        #   in Loop: Header=BB252_68 Depth=1
	jmp	.LBB252_74
.LBB252_74:                             # %for.inc759
                                        #   in Loop: Header=BB252_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB252_68
.LBB252_75:                             # %for.end761
	jmp	.LBB252_76
.LBB252_76:                             # %if.end762
	cmpl	$1526656548, -32(%rbp)  # imm = 0x5AFEEE24
	jne	.LBB252_78
.LBB252_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB252_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB252_77
.Lfunc_end252:
	.size	dpb_combine_field.189, .Lfunc_end252-dpb_combine_field.189
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.190
	.type	mm_unmark_short_term_for_reference.190,@function
mm_unmark_short_term_for_reference.190: # @mm_unmark_short_term_for_reference.190
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1996392181, -16(%rbp)  # imm = 0x76FE86F5
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB253_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB253_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB253_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB253_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB253_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB253_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB253_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB253_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB253_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB253_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB253_27
.LBB253_7:                              # %if.end
                                        #   in Loop: Header=BB253_1 Depth=1
	jmp	.LBB253_8
.LBB253_8:                              # %if.end13
                                        #   in Loop: Header=BB253_1 Depth=1
	jmp	.LBB253_24
.LBB253_9:                              # %if.else
                                        #   in Loop: Header=BB253_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB253_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB253_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB253_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB253_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB253_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB253_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB253_14:                             # %if.end44
	jmp	.LBB253_27
.LBB253_15:                             # %if.end45
                                        #   in Loop: Header=BB253_1 Depth=1
	jmp	.LBB253_16
.LBB253_16:                             # %if.end46
                                        #   in Loop: Header=BB253_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB253_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB253_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB253_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB253_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB253_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB253_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB253_21:                             # %if.end81
	jmp	.LBB253_27
.LBB253_22:                             # %if.end82
                                        #   in Loop: Header=BB253_1 Depth=1
	jmp	.LBB253_23
.LBB253_23:                             # %if.end83
                                        #   in Loop: Header=BB253_1 Depth=1
	jmp	.LBB253_24
.LBB253_24:                             # %if.end84
                                        #   in Loop: Header=BB253_1 Depth=1
	jmp	.LBB253_25
.LBB253_25:                             # %for.inc
                                        #   in Loop: Header=BB253_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_1
.LBB253_26:                             # %for.end.loopexit
	jmp	.LBB253_27
.LBB253_27:                             # %for.end
	cmpl	$1996392181, -16(%rbp)  # imm = 0x76FE86F5
	jne	.LBB253_29
.LBB253_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB253_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB253_28
.Lfunc_end253:
	.size	mm_unmark_short_term_for_reference.190, .Lfunc_end253-mm_unmark_short_term_for_reference.190
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.191
	.type	reorder_long_term.191,@function
reorder_long_term.191:                  # @reorder_long_term.191
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$671844900, -44(%rbp)   # imm = 0x280B8A24
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB254_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB254_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB254_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB254_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB254_1
.LBB254_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB254_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB254_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB254_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB254_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB254_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB254_9
.LBB254_8:                              # %if.then
                                        #   in Loop: Header=BB254_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB254_9:                              # %if.end
                                        #   in Loop: Header=BB254_5 Depth=1
	jmp	.LBB254_10
.LBB254_10:                             # %for.inc19
                                        #   in Loop: Header=BB254_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB254_5
.LBB254_11:                             # %for.end21
	cmpl	$671844900, -44(%rbp)   # imm = 0x280B8A24
	jne	.LBB254_13
.LBB254_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB254_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB254_12
.Lfunc_end254:
	.size	reorder_long_term.191, .Lfunc_end254-reorder_long_term.191
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.192
	.type	get_short_term_pic.192,@function
get_short_term_pic.192:                 # @get_short_term_pic.192
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1994446261, -28(%rbp)  # imm = 0x76E0D5B5
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB255_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB255_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB255_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB255_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB255_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB255_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB255_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB255_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB255_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB255_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB255_23
.LBB255_7:                              # %if.end
                                        #   in Loop: Header=BB255_1 Depth=1
	jmp	.LBB255_8
.LBB255_8:                              # %if.end14
                                        #   in Loop: Header=BB255_1 Depth=1
	jmp	.LBB255_20
.LBB255_9:                              # %if.else
                                        #   in Loop: Header=BB255_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB255_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB255_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB255_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB255_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB255_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB255_23
.LBB255_13:                             # %if.end34
                                        #   in Loop: Header=BB255_1 Depth=1
	jmp	.LBB255_14
.LBB255_14:                             # %if.end35
                                        #   in Loop: Header=BB255_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB255_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB255_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB255_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB255_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB255_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB255_23
.LBB255_18:                             # %if.end56
                                        #   in Loop: Header=BB255_1 Depth=1
	jmp	.LBB255_19
.LBB255_19:                             # %if.end57
                                        #   in Loop: Header=BB255_1 Depth=1
	jmp	.LBB255_20
.LBB255_20:                             # %if.end58
                                        #   in Loop: Header=BB255_1 Depth=1
	jmp	.LBB255_21
.LBB255_21:                             # %for.inc
                                        #   in Loop: Header=BB255_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB255_1
.LBB255_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB255_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1994446261, -28(%rbp)  # imm = 0x76E0D5B5
	jne	.LBB255_25
.LBB255_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB255_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB255_24
.Lfunc_end255:
	.size	get_short_term_pic.192, .Lfunc_end255-get_short_term_pic.192
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.193   # -- Begin function compute_colocated.193
	.p2align	4, 0x90
	.type	compute_colocated.193,@function
compute_colocated.193:                  # @compute_colocated.193
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1935265669, -72(%rbp)  # imm = 0x7359CF85
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB256_2
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB256_11
.LBB256_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB256_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB256_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB256_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB256_7
# %bb.6:                                # %if.then14
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	jmp	.LBB256_8
.LBB256_7:                              # %if.else17
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
.LBB256_8:                              # %if.end
	jmp	.LBB256_9
.LBB256_9:                              # %if.end20
	jmp	.LBB256_10
.LBB256_10:                             # %if.end21
	jmp	.LBB256_11
.LBB256_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB256_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB256_29
.LBB256_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB256_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB256_14 Depth=1
	movl	$0, -16(%rbp)
.LBB256_16:                             # %for.cond27
                                        #   Parent Loop BB256_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB256_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB256_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB256_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB256_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB256_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB256_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB256_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB256_22
.LBB256_21:                             # %if.else160
                                        #   in Loop: Header=BB256_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB256_22:                             # %if.end283
                                        #   in Loop: Header=BB256_16 Depth=2
	jmp	.LBB256_24
.LBB256_23:                             # %if.else284
                                        #   in Loop: Header=BB256_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB256_24:                             # %if.end391
                                        #   in Loop: Header=BB256_16 Depth=2
	jmp	.LBB256_25
.LBB256_25:                             # %for.inc
                                        #   in Loop: Header=BB256_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_16
.LBB256_26:                             # %for.end
                                        #   in Loop: Header=BB256_14 Depth=1
	jmp	.LBB256_27
.LBB256_27:                             # %for.inc392
                                        #   in Loop: Header=BB256_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_14
.LBB256_28:                             # %for.end394
	jmp	.LBB256_29
.LBB256_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB256_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB256_241
.LBB256_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB256_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB256_32 Depth=1
	movl	$0, -12(%rbp)
.LBB256_34:                             # %for.cond408
                                        #   Parent Loop BB256_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB256_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_39
.LBB256_38:                             # %cond.false
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_39:                             # %cond.end
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_42
.LBB256_41:                             # %cond.false427
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_42:                             # %cond.end429
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_45
.LBB256_44:                             # %cond.false447
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_45:                             # %cond.end449
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_48
.LBB256_47:                             # %cond.false457
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_48:                             # %cond.end459
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_51
.LBB256_50:                             # %cond.false477
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_51:                             # %cond.end479
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_54
.LBB256_53:                             # %cond.false487
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_54:                             # %cond.end489
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_57
.LBB256_56:                             # %cond.false507
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_57:                             # %cond.end509
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_60
.LBB256_59:                             # %cond.false517
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_60:                             # %cond.end519
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_63
.LBB256_62:                             # %cond.false537
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_63:                             # %cond.end539
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_66
.LBB256_65:                             # %cond.false547
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_66:                             # %cond.end549
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB256_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB256_81
.LBB256_68:                             # %if.else569
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_71
.LBB256_70:                             # %cond.false576
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_71:                             # %cond.end578
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_74
.LBB256_73:                             # %cond.false586
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_74:                             # %cond.end588
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_77
.LBB256_76:                             # %cond.false604
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_77:                             # %cond.end606
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_80
.LBB256_79:                             # %cond.false614
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_80:                             # %cond.end616
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB256_81:                             # %if.end626
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_84
.LBB256_83:                             # %cond.false633
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_84:                             # %cond.end635
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_87
.LBB256_86:                             # %cond.false643
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_87:                             # %cond.end645
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB256_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB256_102
.LBB256_89:                             # %if.else665
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_92
.LBB256_91:                             # %cond.false672
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_92:                             # %cond.end674
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_95
.LBB256_94:                             # %cond.false682
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_95:                             # %cond.end684
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_98
.LBB256_97:                             # %cond.false700
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_98:                             # %cond.end702
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_101
.LBB256_100:                            # %cond.false710
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_101:                            # %cond.end712
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB256_102:                            # %if.end722
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB256_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB256_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB256_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB256_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB256_112
.LBB256_107:                            # %lor.rhs
                                        #   in Loop: Header=BB256_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB256_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB256_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB256_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB256_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB256_111:                            # %land.end
                                        #   in Loop: Header=BB256_34 Depth=2
.LBB256_112:                            # %lor.end
                                        #   in Loop: Header=BB256_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB256_113:                            # %if.end814
                                        #   in Loop: Header=BB256_34 Depth=2
	jmp	.LBB256_236
.LBB256_114:                            # %if.else815
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_117
.LBB256_116:                            # %cond.false822
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_117:                            # %cond.end824
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_120
.LBB256_119:                            # %cond.false832
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_120:                            # %cond.end834
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_123
.LBB256_122:                            # %cond.false851
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_123:                            # %cond.end853
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_126
.LBB256_125:                            # %cond.false861
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_126:                            # %cond.end863
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_129
.LBB256_128:                            # %cond.false881
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_129:                            # %cond.end883
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_132
.LBB256_131:                            # %cond.false891
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_132:                            # %cond.end893
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_135
.LBB256_134:                            # %cond.false911
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_135:                            # %cond.end913
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_138
.LBB256_137:                            # %cond.false921
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_138:                            # %cond.end923
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_141
.LBB256_140:                            # %cond.false941
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_141:                            # %cond.end943
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_144
.LBB256_143:                            # %cond.false951
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_144:                            # %cond.end953
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_147
.LBB256_146:                            # %cond.false968
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_147:                            # %cond.end970
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_150
.LBB256_149:                            # %cond.false978
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_150:                            # %cond.end980
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_153
.LBB256_152:                            # %cond.false996
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_153:                            # %cond.end998
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_156
.LBB256_155:                            # %cond.false1006
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_156:                            # %cond.end1008
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_159
.LBB256_158:                            # %cond.false1023
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_159:                            # %cond.end1025
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_162
.LBB256_161:                            # %cond.false1033
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_162:                            # %cond.end1035
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB256_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB256_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB256_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB256_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB256_172
.LBB256_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB256_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB256_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB256_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB256_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB256_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB256_171:                            # %land.end1133
                                        #   in Loop: Header=BB256_34 Depth=2
.LBB256_172:                            # %lor.end1134
                                        #   in Loop: Header=BB256_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB256_173:                            # %if.end1142
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_176
.LBB256_175:                            # %cond.false1149
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_176:                            # %cond.end1151
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_179
.LBB256_178:                            # %cond.false1159
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_179:                            # %cond.end1161
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_182
.LBB256_181:                            # %cond.false1178
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_182:                            # %cond.end1180
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_185
.LBB256_184:                            # %cond.false1188
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_185:                            # %cond.end1190
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_188
.LBB256_187:                            # %cond.false1208
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_188:                            # %cond.end1210
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_191
.LBB256_190:                            # %cond.false1218
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_191:                            # %cond.end1220
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_194
.LBB256_193:                            # %cond.false1238
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_194:                            # %cond.end1240
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_197
.LBB256_196:                            # %cond.false1248
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_197:                            # %cond.end1250
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_200
.LBB256_199:                            # %cond.false1268
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_200:                            # %cond.end1270
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_203
.LBB256_202:                            # %cond.false1278
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_203:                            # %cond.end1280
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_206
.LBB256_205:                            # %cond.false1295
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_206:                            # %cond.end1297
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_209
.LBB256_208:                            # %cond.false1305
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_209:                            # %cond.end1307
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_212
.LBB256_211:                            # %cond.false1323
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_212:                            # %cond.end1325
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_215
.LBB256_214:                            # %cond.false1333
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_215:                            # %cond.end1335
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_218
.LBB256_217:                            # %cond.false1350
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_218:                            # %cond.end1352
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_221
.LBB256_220:                            # %cond.false1360
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_221:                            # %cond.end1362
                                        #   in Loop: Header=BB256_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB256_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB256_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB256_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB256_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB256_231
.LBB256_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB256_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB256_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB256_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB256_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB256_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB256_230:                            # %land.end1460
                                        #   in Loop: Header=BB256_34 Depth=2
.LBB256_231:                            # %lor.end1461
                                        #   in Loop: Header=BB256_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB256_232:                            # %if.end1469
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB256_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB256_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB256_235:                            # %if.end1522
                                        #   in Loop: Header=BB256_34 Depth=2
	jmp	.LBB256_236
.LBB256_236:                            # %if.end1523
                                        #   in Loop: Header=BB256_34 Depth=2
	jmp	.LBB256_237
.LBB256_237:                            # %for.inc1524
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_34
.LBB256_238:                            # %for.end1526
                                        #   in Loop: Header=BB256_32 Depth=1
	jmp	.LBB256_239
.LBB256_239:                            # %for.inc1527
                                        #   in Loop: Header=BB256_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_32
.LBB256_240:                            # %for.end1529
	jmp	.LBB256_241
.LBB256_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB256_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB256_259
.LBB256_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB256_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB256_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB256_245 Depth=1
	movl	$0, -16(%rbp)
.LBB256_247:                            # %for.cond1546
                                        #   Parent Loop BB256_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB256_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB256_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB256_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB256_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB256_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB256_252
.LBB256_251:                            # %if.else1699
                                        #   in Loop: Header=BB256_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB256_252:                            # %if.end1829
                                        #   in Loop: Header=BB256_247 Depth=2
	jmp	.LBB256_253
.LBB256_253:                            # %if.end1830
                                        #   in Loop: Header=BB256_247 Depth=2
	jmp	.LBB256_254
.LBB256_254:                            # %for.inc1831
                                        #   in Loop: Header=BB256_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_247
.LBB256_255:                            # %for.end1833
                                        #   in Loop: Header=BB256_245 Depth=1
	jmp	.LBB256_256
.LBB256_256:                            # %for.inc1834
                                        #   in Loop: Header=BB256_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_245
.LBB256_257:                            # %for.end1836
	jmp	.LBB256_258
.LBB256_258:                            # %if.end1837
	jmp	.LBB256_259
.LBB256_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB256_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB256_260 Depth=1
	movl	$0, -16(%rbp)
.LBB256_262:                            # %for.cond1845
                                        #   Parent Loop BB256_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB256_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB256_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB256_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB256_314
.LBB256_265:                            # %if.then1856
                                        #   in Loop: Header=BB256_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_268
.LBB256_267:                            # %cond.false1863
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_268:                            # %cond.end1865
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_271
.LBB256_270:                            # %cond.false1873
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_271:                            # %cond.end1875
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_274
.LBB256_273:                            # %cond.false1893
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_274:                            # %cond.end1895
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_277
.LBB256_276:                            # %cond.false1903
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_277:                            # %cond.end1905
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_280
.LBB256_279:                            # %cond.false1923
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_280:                            # %cond.end1925
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_283
.LBB256_282:                            # %cond.false1933
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_283:                            # %cond.end1935
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_286
.LBB256_285:                            # %cond.false1953
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_286:                            # %cond.end1955
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_289
.LBB256_288:                            # %cond.false1963
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_289:                            # %cond.end1965
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_292
.LBB256_291:                            # %cond.false1983
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_292:                            # %cond.end1985
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_295
.LBB256_294:                            # %cond.false1993
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_295:                            # %cond.end1995
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_298
.LBB256_297:                            # %cond.false2011
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_298:                            # %cond.end2013
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_301
.LBB256_300:                            # %cond.false2021
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_301:                            # %cond.end2023
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_304
.LBB256_303:                            # %cond.false2039
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_304:                            # %cond.end2041
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_307
.LBB256_306:                            # %cond.false2049
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_307:                            # %cond.end2051
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_310
.LBB256_309:                            # %cond.false2067
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_310:                            # %cond.end2069
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB256_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB256_313
.LBB256_312:                            # %cond.false2077
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB256_313:                            # %cond.end2079
                                        #   in Loop: Header=BB256_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB256_315
.LBB256_314:                            # %if.else2089
                                        #   in Loop: Header=BB256_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB256_315:                            # %if.end2194
                                        #   in Loop: Header=BB256_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB256_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB256_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB256_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB256_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB256_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB256_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB256_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB256_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB256_325
.LBB256_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB256_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB256_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB256_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB256_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB256_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB256_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB256_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB256_324:                            # %land.end2285
                                        #   in Loop: Header=BB256_262 Depth=2
.LBB256_325:                            # %lor.end2286
                                        #   in Loop: Header=BB256_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB256_326:                            # %if.end2295
                                        #   in Loop: Header=BB256_262 Depth=2
	jmp	.LBB256_327
.LBB256_327:                            # %for.inc2296
                                        #   in Loop: Header=BB256_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_262
.LBB256_328:                            # %for.end2298
                                        #   in Loop: Header=BB256_260 Depth=1
	jmp	.LBB256_329
.LBB256_329:                            # %for.inc2299
                                        #   in Loop: Header=BB256_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_260
.LBB256_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB256_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB256_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB256_332 Depth=1
	movl	$0, -16(%rbp)
.LBB256_334:                            # %for.cond2312
                                        #   Parent Loop BB256_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB256_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB256_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB256_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB256_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB256_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB256_340
.LBB256_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB256_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB256_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB256_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB256_341
.LBB256_340:                            # %if.then2342
                                        #   in Loop: Header=BB256_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB256_345
.LBB256_341:                            # %if.else2363
                                        #   in Loop: Header=BB256_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB256_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB256_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB256_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB256_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB256_344:                            # %if.end2394
                                        #   in Loop: Header=BB256_334 Depth=2
	jmp	.LBB256_345
.LBB256_345:                            # %if.end2395
                                        #   in Loop: Header=BB256_334 Depth=2
	jmp	.LBB256_346
.LBB256_346:                            # %for.inc2396
                                        #   in Loop: Header=BB256_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_334
.LBB256_347:                            # %for.end2398
                                        #   in Loop: Header=BB256_332 Depth=1
	jmp	.LBB256_348
.LBB256_348:                            # %for.inc2399
                                        #   in Loop: Header=BB256_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_332
.LBB256_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB256_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB256_350 Depth=1
	movl	$0, -16(%rbp)
.LBB256_352:                            # %for.cond2409
                                        #   Parent Loop BB256_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB256_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB256_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB256_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB256_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB256_360
.LBB256_356:                            # %cond.false2429
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB256_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	$127, %eax
	jmp	.LBB256_359
.LBB256_358:                            # %cond.false2441
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB256_359:                            # %cond.end2450
                                        #   in Loop: Header=BB256_352 Depth=2
.LBB256_360:                            # %cond.end2452
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB256_377
.LBB256_361:                            # %if.else2454
                                        #   in Loop: Header=BB256_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB256_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB256_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB256_368
.LBB256_364:                            # %cond.false2468
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB256_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	$127, %eax
	jmp	.LBB256_367
.LBB256_366:                            # %cond.false2480
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB256_367:                            # %cond.end2489
                                        #   in Loop: Header=BB256_352 Depth=2
.LBB256_368:                            # %cond.end2491
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB256_376
.LBB256_369:                            # %if.else2493
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB256_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB256_375
.LBB256_371:                            # %cond.false2504
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB256_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	$127, %eax
	jmp	.LBB256_374
.LBB256_373:                            # %cond.false2516
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB256_374:                            # %cond.end2525
                                        #   in Loop: Header=BB256_352 Depth=2
.LBB256_375:                            # %cond.end2527
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB256_376:                            # %if.end2529
                                        #   in Loop: Header=BB256_352 Depth=2
	jmp	.LBB256_377
.LBB256_377:                            # %if.end2530
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB256_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB256_383
.LBB256_379:                            # %cond.false2546
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB256_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	$127, %eax
	jmp	.LBB256_382
.LBB256_381:                            # %cond.false2562
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB256_382:                            # %cond.end2575
                                        #   in Loop: Header=BB256_352 Depth=2
.LBB256_383:                            # %cond.end2577
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB256_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB256_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB256_390
.LBB256_386:                            # %cond.false2592
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB256_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB256_389
.LBB256_388:                            # %cond.false2599
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB256_389:                            # %cond.end2603
                                        #   in Loop: Header=BB256_352 Depth=2
.LBB256_390:                            # %cond.end2605
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB256_392
.LBB256_391:                            # %if.else2611
                                        #   in Loop: Header=BB256_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB256_392:                            # %if.end2617
                                        #   in Loop: Header=BB256_352 Depth=2
	jmp	.LBB256_393
.LBB256_393:                            # %for.inc2618
                                        #   in Loop: Header=BB256_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_352
.LBB256_394:                            # %for.end2620
                                        #   in Loop: Header=BB256_350 Depth=1
	jmp	.LBB256_395
.LBB256_395:                            # %for.inc2621
                                        #   in Loop: Header=BB256_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_350
.LBB256_396:                            # %for.end2623
	jmp	.LBB256_397
.LBB256_397:                            # %if.end2624
	cmpl	$1935265669, -72(%rbp)  # imm = 0x7359CF85
	jne	.LBB256_399
.LBB256_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB256_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB256_398
.Lfunc_end256:
	.size	compute_colocated.193, .Lfunc_end256-compute_colocated.193
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.194 # -- Begin function replace_top_pic_with_frame.194
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.194,@function
replace_top_pic_with_frame.194:         # @replace_top_pic_with_frame.194
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1853339243, -32(%rbp)  # imm = 0x6E77B66B
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB257_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB257_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB257_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB257_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB257_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB257_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB257_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB257_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB257_10
.LBB257_7:                              # %if.end14
                                        #   in Loop: Header=BB257_3 Depth=1
	jmp	.LBB257_8
.LBB257_8:                              # %for.inc
                                        #   in Loop: Header=BB257_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB257_3
.LBB257_9:                              # %for.end.loopexit
	jmp	.LBB257_10
.LBB257_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB257_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB257_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB257_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB257_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB257_15:                             # %if.end26
	jmp	.LBB257_16
.LBB257_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1853339243, -32(%rbp)  # imm = 0x6E77B66B
	jne	.LBB257_18
.LBB257_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB257_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB257_17
.Lfunc_end257:
	.size	replace_top_pic_with_frame.194, .Lfunc_end257-replace_top_pic_with_frame.194
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.195 # -- Begin function reorder_ref_pic_list.195
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.195,@function
reorder_ref_pic_list.195:               # @reorder_ref_pic_list.195
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$313696885, -60(%rbp)   # imm = 0x12B2A275
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB258_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB258_3
.LBB258_2:                              # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB258_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB258_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB258_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB258_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB258_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB258_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB258_7:                              # %if.end9
                                        #   in Loop: Header=BB258_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB258_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB258_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB258_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB258_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB258_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB258_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB258_12
.LBB258_11:                             # %if.else28
                                        #   in Loop: Header=BB258_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB258_12:                             # %if.end33
                                        #   in Loop: Header=BB258_4 Depth=1
	jmp	.LBB258_17
.LBB258_13:                             # %if.else34
                                        #   in Loop: Header=BB258_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB258_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB258_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB258_16
.LBB258_15:                             # %if.else46
                                        #   in Loop: Header=BB258_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB258_16:                             # %if.end51
                                        #   in Loop: Header=BB258_4 Depth=1
	jmp	.LBB258_17
.LBB258_17:                             # %if.end52
                                        #   in Loop: Header=BB258_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB258_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB258_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB258_20
.LBB258_19:                             # %if.else56
                                        #   in Loop: Header=BB258_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB258_20:                             # %if.end57
                                        #   in Loop: Header=BB258_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB258_22
.LBB258_21:                             # %if.else58
                                        #   in Loop: Header=BB258_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_long_term
.LBB258_22:                             # %if.end61
                                        #   in Loop: Header=BB258_4 Depth=1
	jmp	.LBB258_23
.LBB258_23:                             # %for.inc
                                        #   in Loop: Header=BB258_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB258_4
.LBB258_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$313696885, -60(%rbp)   # imm = 0x12B2A275
	jne	.LBB258_26
.LBB258_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB258_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB258_25
.Lfunc_end258:
	.size	reorder_ref_pic_list.195, .Lfunc_end258-reorder_ref_pic_list.195
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.196  # -- Begin function fill_frame_num_gap.196
	.p2align	4, 0x90
	.type	fill_frame_num_gap.196,@function
fill_frame_num_gap.196:                 # @fill_frame_num_gap.196
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$840126428, -40(%rbp)   # imm = 0x32134FDC
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB259_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB259_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB259_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB259_1
.LBB259_3:                              # %while.end
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$840126428, -40(%rbp)   # imm = 0x32134FDC
	jne	.LBB259_5
.LBB259_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB259_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB259_4
.Lfunc_end259:
	.size	fill_frame_num_gap.196, .Lfunc_end259-fill_frame_num_gap.196
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.197
	.type	mm_assign_long_term_frame_idx.197,@function
mm_assign_long_term_frame_idx.197:      # @mm_assign_long_term_frame_idx.197
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$566859244, -32(%rbp)   # imm = 0x21C995EC
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB260_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB260_18
.LBB260_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB260_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB260_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB260_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB260_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB260_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB260_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB260_15
.LBB260_7:                              # %if.end
                                        #   in Loop: Header=BB260_3 Depth=1
	jmp	.LBB260_8
.LBB260_8:                              # %if.end8
                                        #   in Loop: Header=BB260_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB260_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB260_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB260_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB260_15
.LBB260_11:                             # %if.end20
                                        #   in Loop: Header=BB260_3 Depth=1
	jmp	.LBB260_12
.LBB260_12:                             # %if.end21
                                        #   in Loop: Header=BB260_3 Depth=1
	jmp	.LBB260_13
.LBB260_13:                             # %for.inc
                                        #   in Loop: Header=BB260_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB260_3
.LBB260_14:                             # %for.end.loopexit
	jmp	.LBB260_15
.LBB260_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB260_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB260_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB260_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$566859244, -32(%rbp)   # imm = 0x21C995EC
	jne	.LBB260_20
.LBB260_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB260_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB260_19
.Lfunc_end260:
	.size	mm_assign_long_term_frame_idx.197, .Lfunc_end260-mm_assign_long_term_frame_idx.197
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.198
	.type	get_long_term_pic.198,@function
get_long_term_pic.198:                  # @get_long_term_pic.198
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$562745955, -28(%rbp)   # imm = 0x218AD263
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB261_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB261_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB261_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB261_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB261_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB261_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB261_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB261_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB261_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB261_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB261_23
.LBB261_7:                              # %if.end
                                        #   in Loop: Header=BB261_1 Depth=1
	jmp	.LBB261_8
.LBB261_8:                              # %if.end14
                                        #   in Loop: Header=BB261_1 Depth=1
	jmp	.LBB261_20
.LBB261_9:                              # %if.else
                                        #   in Loop: Header=BB261_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB261_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB261_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB261_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB261_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB261_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB261_23
.LBB261_13:                             # %if.end34
                                        #   in Loop: Header=BB261_1 Depth=1
	jmp	.LBB261_14
.LBB261_14:                             # %if.end35
                                        #   in Loop: Header=BB261_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB261_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB261_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB261_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB261_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB261_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB261_23
.LBB261_18:                             # %if.end56
                                        #   in Loop: Header=BB261_1 Depth=1
	jmp	.LBB261_19
.LBB261_19:                             # %if.end57
                                        #   in Loop: Header=BB261_1 Depth=1
	jmp	.LBB261_20
.LBB261_20:                             # %if.end58
                                        #   in Loop: Header=BB261_1 Depth=1
	jmp	.LBB261_21
.LBB261_21:                             # %for.inc
                                        #   in Loop: Header=BB261_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB261_1
.LBB261_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB261_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$562745955, -28(%rbp)   # imm = 0x218AD263
	jne	.LBB261_25
.LBB261_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB261_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB261_24
.Lfunc_end261:
	.size	get_long_term_pic.198, .Lfunc_end261-get_long_term_pic.198
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.199
	.type	compare_fs_by_poc_asc.199,@function
compare_fs_by_poc_asc.199:              # @compare_fs_by_poc_asc.199
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$953847939, -16(%rbp)   # imm = 0x38DA9083
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB262_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB262_5
.LBB262_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB262_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB262_5
.LBB262_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB262_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$953847939, -16(%rbp)   # imm = 0x38DA9083
	jne	.LBB262_7
.LBB262_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB262_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB262_6
.Lfunc_end262:
	.size	compare_fs_by_poc_asc.199, .Lfunc_end262-compare_fs_by_poc_asc.199
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.200 # -- Begin function store_picture_in_dpb.200
	.p2align	4, 0x90
	.type	store_picture_in_dpb.200,@function
store_picture_in_dpb.200:               # @store_picture_in_dpb.200
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1418674264, -24(%rbp)  # imm = 0x548F4058
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB263_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB263_6
.LBB263_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB263_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB263_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB263_5:                              # %if.end
	jmp	.LBB263_6
.LBB263_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB263_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB263_23
.LBB263_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB263_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB263_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB263_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB263_14
.LBB263_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB263_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB263_20
.LBB263_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB263_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB263_18
.LBB263_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB263_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB263_19
.LBB263_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB263_50
.LBB263_19:                             # %if.end48
	jmp	.LBB263_20
.LBB263_20:                             # %if.end49
	jmp	.LBB263_21
.LBB263_21:                             # %if.end50
	jmp	.LBB263_22
.LBB263_22:                             # %if.end51
	jmp	.LBB263_23
.LBB263_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB263_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB263_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB263_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB263_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB263_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB263_29:                             # %if.end67
	jmp	.LBB263_30
.LBB263_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB263_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB263_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB263_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB263_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB263_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB263_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB263_35
.LBB263_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB263_50
.LBB263_35:                             # %if.end80
                                        #   in Loop: Header=BB263_30 Depth=1
	jmp	.LBB263_36
.LBB263_36:                             # %if.end81
                                        #   in Loop: Header=BB263_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB263_30
.LBB263_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB263_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB263_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB263_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB263_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB263_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB263_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB263_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB263_43:                             # %if.end94
                                        #   in Loop: Header=BB263_40 Depth=1
	jmp	.LBB263_44
.LBB263_44:                             # %for.inc
                                        #   in Loop: Header=BB263_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB263_40
.LBB263_45:                             # %for.end
	jmp	.LBB263_46
.LBB263_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB263_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB263_49
.LBB263_48:                             # %if.else104
	movq	$0, dpb+56
.LBB263_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB263_50:                             # %return
	cmpl	$1418674264, -24(%rbp)  # imm = 0x548F4058
	jne	.LBB263_52
.LBB263_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB263_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB263_51
.Lfunc_end263:
	.size	store_picture_in_dpb.200, .Lfunc_end263-store_picture_in_dpb.200
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.201
	.type	unmark_long_term_field_for_reference_by_frame_idx.201,@function
unmark_long_term_field_for_reference_by_frame_idx.201: # @unmark_long_term_field_for_reference_by_frame_idx.201
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$233290706, -24(%rbp)   # imm = 0xDE7BBD2
	movl	%edi, -12(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB264_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB264_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB264_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB264_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB264_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB264_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB264_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB264_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB264_23
.LBB264_8:                              # %if.else
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB264_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB264_22
.LBB264_10:                             # %if.else21
                                        #   in Loop: Header=BB264_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB264_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB264_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB264_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB264_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB264_15
.LBB264_14:                             # %if.then29
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB264_15:                             # %if.end32
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_17
.LBB264_16:                             # %if.else33
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB264_17:                             # %if.end36
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_21
.LBB264_18:                             # %if.else37
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB264_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB264_20:                             # %if.end45
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_21
.LBB264_21:                             # %if.end46
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_22
.LBB264_22:                             # %if.end47
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_23
.LBB264_23:                             # %if.end48
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_24
.LBB264_24:                             # %if.end49
                                        #   in Loop: Header=BB264_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB264_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB264_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB264_42
.LBB264_27:                             # %if.else59
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB264_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB264_41
.LBB264_29:                             # %if.else67
                                        #   in Loop: Header=BB264_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB264_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB264_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB264_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB264_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB264_34
.LBB264_33:                             # %if.then78
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB264_34:                             # %if.end81
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_36
.LBB264_35:                             # %if.else82
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB264_36:                             # %if.end85
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_40
.LBB264_37:                             # %if.else86
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB264_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB264_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB264_39:                             # %if.end95
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_40
.LBB264_40:                             # %if.end96
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_41
.LBB264_41:                             # %if.end97
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_42
.LBB264_42:                             # %if.end98
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_43
.LBB264_43:                             # %if.end99
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_44
.LBB264_44:                             # %if.end100
                                        #   in Loop: Header=BB264_3 Depth=1
	jmp	.LBB264_45
.LBB264_45:                             # %for.inc
                                        #   in Loop: Header=BB264_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB264_3
.LBB264_46:                             # %for.end
	cmpl	$233290706, -24(%rbp)   # imm = 0xDE7BBD2
	jne	.LBB264_48
.LBB264_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB264_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB264_47
.Lfunc_end264:
	.size	unmark_long_term_field_for_reference_by_frame_idx.201, .Lfunc_end264-unmark_long_term_field_for_reference_by_frame_idx.201
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.202 # -- Begin function store_picture_in_dpb.202
	.p2align	4, 0x90
	.type	store_picture_in_dpb.202,@function
store_picture_in_dpb.202:               # @store_picture_in_dpb.202
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$701577415, -20(%rbp)   # imm = 0x29D138C7
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB265_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB265_6
.LBB265_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB265_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB265_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB265_5:                              # %if.end
	jmp	.LBB265_6
.LBB265_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB265_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB265_23
.LBB265_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB265_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB265_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB265_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB265_14
.LBB265_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB265_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB265_20
.LBB265_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB265_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB265_18
.LBB265_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB265_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB265_19
.LBB265_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB265_50
.LBB265_19:                             # %if.end48
	jmp	.LBB265_20
.LBB265_20:                             # %if.end49
	jmp	.LBB265_21
.LBB265_21:                             # %if.end50
	jmp	.LBB265_22
.LBB265_22:                             # %if.end51
	jmp	.LBB265_23
.LBB265_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB265_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB265_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB265_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB265_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB265_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB265_29:                             # %if.end67
	jmp	.LBB265_30
.LBB265_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB265_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB265_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB265_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB265_30 Depth=1
	leaq	-16(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-24(%rbp), %eax
	je	.LBB265_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB265_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB265_35
.LBB265_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB265_50
.LBB265_35:                             # %if.end80
                                        #   in Loop: Header=BB265_30 Depth=1
	jmp	.LBB265_36
.LBB265_36:                             # %if.end81
                                        #   in Loop: Header=BB265_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB265_30
.LBB265_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB265_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB265_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB265_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB265_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB265_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB265_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB265_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB265_43:                             # %if.end94
                                        #   in Loop: Header=BB265_40 Depth=1
	jmp	.LBB265_44
.LBB265_44:                             # %for.inc
                                        #   in Loop: Header=BB265_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB265_40
.LBB265_45:                             # %for.end
	jmp	.LBB265_46
.LBB265_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB265_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB265_49
.LBB265_48:                             # %if.else104
	movq	$0, dpb+56
.LBB265_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB265_50:                             # %return
	cmpl	$701577415, -20(%rbp)   # imm = 0x29D138C7
	jne	.LBB265_52
.LBB265_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB265_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB265_51
.Lfunc_end265:
	.size	store_picture_in_dpb.202, .Lfunc_end265-store_picture_in_dpb.202
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.203
	.type	remove_frame_from_dpb.203,@function
remove_frame_from_dpb.203:              # @remove_frame_from_dpb.203
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1726575173, -20(%rbp)  # imm = 0x66E97245
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB266_6
# %bb.1:                                # %entry
	movq	.LJTI266_0(,%rax,8), %rax
	jmpq	*%rax
.LBB266_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB266_7
.LBB266_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB266_7
.LBB266_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB266_7
.LBB266_5:                              # %sw.bb10
	jmp	.LBB266_7
.LBB266_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB266_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB266_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB266_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB266_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB266_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB266_8
.LBB266_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1726575173, -20(%rbp)  # imm = 0x66E97245
	jne	.LBB266_13
.LBB266_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB266_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB266_12
.Lfunc_end266:
	.size	remove_frame_from_dpb.203, .Lfunc_end266-remove_frame_from_dpb.203
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI266_0:
	.quad	.LBB266_5
	.quad	.LBB266_4
	.quad	.LBB266_3
	.quad	.LBB266_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.204
	.type	compare_pic_by_lt_pic_num_asc.204,@function
compare_pic_by_lt_pic_num_asc.204:      # @compare_pic_by_lt_pic_num_asc.204
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1686760903, -16(%rbp)  # imm = 0x6489EDC7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB267_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB267_5
.LBB267_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB267_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB267_5
.LBB267_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB267_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1686760903, -16(%rbp)  # imm = 0x6489EDC7
	jne	.LBB267_7
.LBB267_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB267_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB267_6
.Lfunc_end267:
	.size	compare_pic_by_lt_pic_num_asc.204, .Lfunc_end267-compare_pic_by_lt_pic_num_asc.204
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.205
	.type	compare_pic_by_lt_pic_num_asc.205,@function
compare_pic_by_lt_pic_num_asc.205:      # @compare_pic_by_lt_pic_num_asc.205
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1276886189, -16(%rbp)  # imm = 0x4C1BBCAD
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB268_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB268_5
.LBB268_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB268_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB268_5
.LBB268_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB268_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1276886189, -16(%rbp)  # imm = 0x4C1BBCAD
	jne	.LBB268_7
.LBB268_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB268_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB268_6
.Lfunc_end268:
	.size	compare_pic_by_lt_pic_num_asc.205, .Lfunc_end268-compare_pic_by_lt_pic_num_asc.205
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.206
	.type	get_short_term_pic.206,@function
get_short_term_pic.206:                 # @get_short_term_pic.206
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$516495077, -28(%rbp)   # imm = 0x1EC916E5
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB269_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB269_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB269_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB269_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB269_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB269_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB269_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB269_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB269_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB269_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB269_23
.LBB269_7:                              # %if.end
                                        #   in Loop: Header=BB269_1 Depth=1
	jmp	.LBB269_8
.LBB269_8:                              # %if.end14
                                        #   in Loop: Header=BB269_1 Depth=1
	jmp	.LBB269_20
.LBB269_9:                              # %if.else
                                        #   in Loop: Header=BB269_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB269_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB269_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB269_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB269_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB269_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB269_23
.LBB269_13:                             # %if.end34
                                        #   in Loop: Header=BB269_1 Depth=1
	jmp	.LBB269_14
.LBB269_14:                             # %if.end35
                                        #   in Loop: Header=BB269_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB269_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB269_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB269_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB269_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB269_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB269_23
.LBB269_18:                             # %if.end56
                                        #   in Loop: Header=BB269_1 Depth=1
	jmp	.LBB269_19
.LBB269_19:                             # %if.end57
                                        #   in Loop: Header=BB269_1 Depth=1
	jmp	.LBB269_20
.LBB269_20:                             # %if.end58
                                        #   in Loop: Header=BB269_1 Depth=1
	jmp	.LBB269_21
.LBB269_21:                             # %for.inc
                                        #   in Loop: Header=BB269_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB269_1
.LBB269_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB269_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$516495077, -28(%rbp)   # imm = 0x1EC916E5
	jne	.LBB269_25
.LBB269_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB269_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB269_24
.Lfunc_end269:
	.size	get_short_term_pic.206, .Lfunc_end269-get_short_term_pic.206
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.207
	.type	compare_pic_by_poc_desc.207,@function
compare_pic_by_poc_desc.207:            # @compare_pic_by_poc_desc.207
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1696283681, -16(%rbp)  # imm = 0x651B3C21
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB270_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB270_5
.LBB270_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB270_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB270_5
.LBB270_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB270_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1696283681, -16(%rbp)  # imm = 0x651B3C21
	jne	.LBB270_7
.LBB270_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB270_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB270_6
.Lfunc_end270:
	.size	compare_pic_by_poc_desc.207, .Lfunc_end270-compare_pic_by_poc_desc.207
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.208
	.type	mark_pic_long_term.208,@function
mark_pic_long_term.208:                 # @mark_pic_long_term.208
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1466059965, -24(%rbp)  # imm = 0x57624CBD
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB271_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB271_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB271_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB271_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB271_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB271_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB271_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB271_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB271_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB271_39
.LBB271_7:                              # %if.end
                                        #   in Loop: Header=BB271_2 Depth=1
	jmp	.LBB271_8
.LBB271_8:                              # %if.end50
                                        #   in Loop: Header=BB271_2 Depth=1
	jmp	.LBB271_9
.LBB271_9:                              # %for.inc
                                        #   in Loop: Header=BB271_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB271_2
.LBB271_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB271_39
.LBB271_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB271_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB271_14
.LBB271_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -20(%rbp)
.LBB271_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB271_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB271_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB271_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB271_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB271_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB271_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB271_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB271_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB271_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB271_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB271_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB271_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB271_24:                             # %if.end123
	jmp	.LBB271_39
.LBB271_25:                             # %if.end124
                                        #   in Loop: Header=BB271_15 Depth=1
	jmp	.LBB271_26
.LBB271_26:                             # %if.end125
                                        #   in Loop: Header=BB271_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB271_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB271_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB271_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB271_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB271_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB271_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB271_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB271_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB271_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB271_34:                             # %if.end194
	jmp	.LBB271_39
.LBB271_35:                             # %if.end195
                                        #   in Loop: Header=BB271_15 Depth=1
	jmp	.LBB271_36
.LBB271_36:                             # %if.end196
                                        #   in Loop: Header=BB271_15 Depth=1
	jmp	.LBB271_37
.LBB271_37:                             # %for.inc197
                                        #   in Loop: Header=BB271_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB271_15
.LBB271_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB271_39:                             # %if.end201
	cmpl	$1466059965, -24(%rbp)  # imm = 0x57624CBD
	jne	.LBB271_41
.LBB271_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB271_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB271_40
.Lfunc_end271:
	.size	mark_pic_long_term.208, .Lfunc_end271-mark_pic_long_term.208
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.209
	.type	compare_pic_by_lt_pic_num_asc.209,@function
compare_pic_by_lt_pic_num_asc.209:      # @compare_pic_by_lt_pic_num_asc.209
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$128430005, -16(%rbp)   # imm = 0x7A7AFB5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB272_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB272_5
.LBB272_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB272_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB272_5
.LBB272_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB272_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$128430005, -16(%rbp)   # imm = 0x7A7AFB5
	jne	.LBB272_7
.LBB272_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB272_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB272_6
.Lfunc_end272:
	.size	compare_pic_by_lt_pic_num_asc.209, .Lfunc_end272-compare_pic_by_lt_pic_num_asc.209
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.210
	.type	compare_fs_by_poc_desc.210,@function
compare_fs_by_poc_desc.210:             # @compare_fs_by_poc_desc.210
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$894094935, -16(%rbp)   # imm = 0x354ACE57
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB273_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB273_5
.LBB273_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB273_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB273_5
.LBB273_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB273_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$894094935, -16(%rbp)   # imm = 0x354ACE57
	jne	.LBB273_7
.LBB273_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB273_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB273_6
.Lfunc_end273:
	.size	compare_fs_by_poc_desc.210, .Lfunc_end273-compare_fs_by_poc_desc.210
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.211
	.type	mm_unmark_long_term_for_reference.211,@function
mm_unmark_long_term_for_reference.211:  # @mm_unmark_long_term_for_reference.211
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1134943329, -12(%rbp)  # imm = 0x43A5DC61
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB274_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB274_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB274_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB274_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB274_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB274_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB274_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB274_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB274_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB274_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB274_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB274_7:                              # %if.end
                                        #   in Loop: Header=BB274_1 Depth=1
	jmp	.LBB274_8
.LBB274_8:                              # %if.end14
                                        #   in Loop: Header=BB274_1 Depth=1
	jmp	.LBB274_24
.LBB274_9:                              # %if.else
                                        #   in Loop: Header=BB274_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB274_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB274_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB274_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB274_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB274_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB274_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB274_14:                             # %if.end57
	jmp	.LBB274_27
.LBB274_15:                             # %if.end58
                                        #   in Loop: Header=BB274_1 Depth=1
	jmp	.LBB274_16
.LBB274_16:                             # %if.end59
                                        #   in Loop: Header=BB274_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB274_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB274_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB274_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB274_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB274_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB274_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB274_21:                             # %if.end106
	jmp	.LBB274_27
.LBB274_22:                             # %if.end107
                                        #   in Loop: Header=BB274_1 Depth=1
	jmp	.LBB274_23
.LBB274_23:                             # %if.end108
                                        #   in Loop: Header=BB274_1 Depth=1
	jmp	.LBB274_24
.LBB274_24:                             # %if.end109
                                        #   in Loop: Header=BB274_1 Depth=1
	jmp	.LBB274_25
.LBB274_25:                             # %for.inc
                                        #   in Loop: Header=BB274_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB274_1
.LBB274_26:                             # %for.end.loopexit
	jmp	.LBB274_27
.LBB274_27:                             # %for.end
	cmpl	$1134943329, -12(%rbp)  # imm = 0x43A5DC61
	jne	.LBB274_29
.LBB274_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB274_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB274_28
.Lfunc_end274:
	.size	mm_unmark_long_term_for_reference.211, .Lfunc_end274-mm_unmark_long_term_for_reference.211
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.212
	.type	mm_unmark_long_term_for_reference.212,@function
mm_unmark_long_term_for_reference.212:  # @mm_unmark_long_term_for_reference.212
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$420451510, -12(%rbp)   # imm = 0x190F94B6
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB275_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB275_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB275_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB275_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB275_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB275_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB275_7:                              # %if.end
                                        #   in Loop: Header=BB275_1 Depth=1
	jmp	.LBB275_8
.LBB275_8:                              # %if.end14
                                        #   in Loop: Header=BB275_1 Depth=1
	jmp	.LBB275_24
.LBB275_9:                              # %if.else
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB275_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB275_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB275_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB275_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB275_14:                             # %if.end57
	jmp	.LBB275_27
.LBB275_15:                             # %if.end58
                                        #   in Loop: Header=BB275_1 Depth=1
	jmp	.LBB275_16
.LBB275_16:                             # %if.end59
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB275_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB275_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB275_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB275_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB275_21:                             # %if.end106
	jmp	.LBB275_27
.LBB275_22:                             # %if.end107
                                        #   in Loop: Header=BB275_1 Depth=1
	jmp	.LBB275_23
.LBB275_23:                             # %if.end108
                                        #   in Loop: Header=BB275_1 Depth=1
	jmp	.LBB275_24
.LBB275_24:                             # %if.end109
                                        #   in Loop: Header=BB275_1 Depth=1
	jmp	.LBB275_25
.LBB275_25:                             # %for.inc
                                        #   in Loop: Header=BB275_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB275_1
.LBB275_26:                             # %for.end.loopexit
	jmp	.LBB275_27
.LBB275_27:                             # %for.end
	cmpl	$420451510, -12(%rbp)   # imm = 0x190F94B6
	jne	.LBB275_29
.LBB275_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB275_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB275_28
.Lfunc_end275:
	.size	mm_unmark_long_term_for_reference.212, .Lfunc_end275-mm_unmark_long_term_for_reference.212
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.213   # -- Begin function compute_colocated.213
	.p2align	4, 0x90
	.type	compute_colocated.213,@function
compute_colocated.213:                  # @compute_colocated.213
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$777858845, -72(%rbp)   # imm = 0x2E5D2F1D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB276_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB276_11
.LBB276_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB276_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB276_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB276_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB276_7
# %bb.6:                                # %if.then14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB276_8
.LBB276_7:                              # %if.else17
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
.LBB276_8:                              # %if.end
	jmp	.LBB276_9
.LBB276_9:                              # %if.end20
	jmp	.LBB276_10
.LBB276_10:                             # %if.end21
	jmp	.LBB276_11
.LBB276_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB276_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB276_29
.LBB276_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB276_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB276_14 Depth=1
	movl	$0, -16(%rbp)
.LBB276_16:                             # %for.cond27
                                        #   Parent Loop BB276_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB276_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB276_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB276_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB276_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB276_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB276_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB276_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB276_22
.LBB276_21:                             # %if.else160
                                        #   in Loop: Header=BB276_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB276_22:                             # %if.end283
                                        #   in Loop: Header=BB276_16 Depth=2
	jmp	.LBB276_24
.LBB276_23:                             # %if.else284
                                        #   in Loop: Header=BB276_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB276_24:                             # %if.end391
                                        #   in Loop: Header=BB276_16 Depth=2
	jmp	.LBB276_25
.LBB276_25:                             # %for.inc
                                        #   in Loop: Header=BB276_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB276_16
.LBB276_26:                             # %for.end
                                        #   in Loop: Header=BB276_14 Depth=1
	jmp	.LBB276_27
.LBB276_27:                             # %for.inc392
                                        #   in Loop: Header=BB276_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB276_14
.LBB276_28:                             # %for.end394
	jmp	.LBB276_29
.LBB276_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB276_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB276_241
.LBB276_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB276_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB276_32 Depth=1
	movl	$0, -12(%rbp)
.LBB276_34:                             # %for.cond408
                                        #   Parent Loop BB276_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB276_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_39
.LBB276_38:                             # %cond.false
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_39:                             # %cond.end
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_42
.LBB276_41:                             # %cond.false427
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_42:                             # %cond.end429
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_45
.LBB276_44:                             # %cond.false447
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_45:                             # %cond.end449
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_48
.LBB276_47:                             # %cond.false457
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_48:                             # %cond.end459
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_51
.LBB276_50:                             # %cond.false477
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_51:                             # %cond.end479
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_54
.LBB276_53:                             # %cond.false487
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_54:                             # %cond.end489
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_57
.LBB276_56:                             # %cond.false507
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_57:                             # %cond.end509
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_60
.LBB276_59:                             # %cond.false517
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_60:                             # %cond.end519
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_63
.LBB276_62:                             # %cond.false537
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_63:                             # %cond.end539
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_66
.LBB276_65:                             # %cond.false547
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_66:                             # %cond.end549
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB276_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB276_81
.LBB276_68:                             # %if.else569
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_71
.LBB276_70:                             # %cond.false576
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_71:                             # %cond.end578
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_74
.LBB276_73:                             # %cond.false586
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_74:                             # %cond.end588
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_77
.LBB276_76:                             # %cond.false604
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_77:                             # %cond.end606
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_80
.LBB276_79:                             # %cond.false614
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_80:                             # %cond.end616
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB276_81:                             # %if.end626
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_84
.LBB276_83:                             # %cond.false633
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_84:                             # %cond.end635
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_87
.LBB276_86:                             # %cond.false643
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_87:                             # %cond.end645
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB276_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB276_102
.LBB276_89:                             # %if.else665
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_92
.LBB276_91:                             # %cond.false672
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_92:                             # %cond.end674
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_95
.LBB276_94:                             # %cond.false682
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_95:                             # %cond.end684
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_98
.LBB276_97:                             # %cond.false700
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_98:                             # %cond.end702
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_101
.LBB276_100:                            # %cond.false710
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_101:                            # %cond.end712
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB276_102:                            # %if.end722
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB276_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB276_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB276_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB276_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB276_112
.LBB276_107:                            # %lor.rhs
                                        #   in Loop: Header=BB276_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB276_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB276_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB276_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB276_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB276_111:                            # %land.end
                                        #   in Loop: Header=BB276_34 Depth=2
.LBB276_112:                            # %lor.end
                                        #   in Loop: Header=BB276_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB276_113:                            # %if.end814
                                        #   in Loop: Header=BB276_34 Depth=2
	jmp	.LBB276_236
.LBB276_114:                            # %if.else815
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_117
.LBB276_116:                            # %cond.false822
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_117:                            # %cond.end824
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_120
.LBB276_119:                            # %cond.false832
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_120:                            # %cond.end834
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_123
.LBB276_122:                            # %cond.false851
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_123:                            # %cond.end853
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_126
.LBB276_125:                            # %cond.false861
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_126:                            # %cond.end863
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_129
.LBB276_128:                            # %cond.false881
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_129:                            # %cond.end883
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_132
.LBB276_131:                            # %cond.false891
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_132:                            # %cond.end893
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_135
.LBB276_134:                            # %cond.false911
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_135:                            # %cond.end913
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_138
.LBB276_137:                            # %cond.false921
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_138:                            # %cond.end923
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_141
.LBB276_140:                            # %cond.false941
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_141:                            # %cond.end943
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_144
.LBB276_143:                            # %cond.false951
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_144:                            # %cond.end953
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_147
.LBB276_146:                            # %cond.false968
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_147:                            # %cond.end970
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_150
.LBB276_149:                            # %cond.false978
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_150:                            # %cond.end980
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_153
.LBB276_152:                            # %cond.false996
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_153:                            # %cond.end998
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_156
.LBB276_155:                            # %cond.false1006
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_156:                            # %cond.end1008
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_159
.LBB276_158:                            # %cond.false1023
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_159:                            # %cond.end1025
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_162
.LBB276_161:                            # %cond.false1033
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_162:                            # %cond.end1035
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB276_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB276_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB276_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB276_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB276_172
.LBB276_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB276_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB276_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB276_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB276_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB276_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB276_171:                            # %land.end1133
                                        #   in Loop: Header=BB276_34 Depth=2
.LBB276_172:                            # %lor.end1134
                                        #   in Loop: Header=BB276_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB276_173:                            # %if.end1142
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_176
.LBB276_175:                            # %cond.false1149
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_176:                            # %cond.end1151
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_179
.LBB276_178:                            # %cond.false1159
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_179:                            # %cond.end1161
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_182
.LBB276_181:                            # %cond.false1178
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_182:                            # %cond.end1180
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_185
.LBB276_184:                            # %cond.false1188
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_185:                            # %cond.end1190
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_188
.LBB276_187:                            # %cond.false1208
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_188:                            # %cond.end1210
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_191
.LBB276_190:                            # %cond.false1218
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_191:                            # %cond.end1220
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_194
.LBB276_193:                            # %cond.false1238
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_194:                            # %cond.end1240
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_197
.LBB276_196:                            # %cond.false1248
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_197:                            # %cond.end1250
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_200
.LBB276_199:                            # %cond.false1268
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_200:                            # %cond.end1270
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_203
.LBB276_202:                            # %cond.false1278
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_203:                            # %cond.end1280
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_206
.LBB276_205:                            # %cond.false1295
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_206:                            # %cond.end1297
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_209
.LBB276_208:                            # %cond.false1305
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_209:                            # %cond.end1307
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_212
.LBB276_211:                            # %cond.false1323
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_212:                            # %cond.end1325
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_215
.LBB276_214:                            # %cond.false1333
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_215:                            # %cond.end1335
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_218
.LBB276_217:                            # %cond.false1350
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_218:                            # %cond.end1352
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_221
.LBB276_220:                            # %cond.false1360
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_221:                            # %cond.end1362
                                        #   in Loop: Header=BB276_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB276_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB276_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB276_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB276_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB276_231
.LBB276_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB276_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB276_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB276_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB276_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB276_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB276_230:                            # %land.end1460
                                        #   in Loop: Header=BB276_34 Depth=2
.LBB276_231:                            # %lor.end1461
                                        #   in Loop: Header=BB276_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB276_232:                            # %if.end1469
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB276_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB276_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB276_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB276_235:                            # %if.end1522
                                        #   in Loop: Header=BB276_34 Depth=2
	jmp	.LBB276_236
.LBB276_236:                            # %if.end1523
                                        #   in Loop: Header=BB276_34 Depth=2
	jmp	.LBB276_237
.LBB276_237:                            # %for.inc1524
                                        #   in Loop: Header=BB276_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB276_34
.LBB276_238:                            # %for.end1526
                                        #   in Loop: Header=BB276_32 Depth=1
	jmp	.LBB276_239
.LBB276_239:                            # %for.inc1527
                                        #   in Loop: Header=BB276_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB276_32
.LBB276_240:                            # %for.end1529
	jmp	.LBB276_241
.LBB276_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB276_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB276_259
.LBB276_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB276_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB276_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB276_245 Depth=1
	movl	$0, -16(%rbp)
.LBB276_247:                            # %for.cond1546
                                        #   Parent Loop BB276_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB276_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB276_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB276_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB276_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB276_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB276_252
.LBB276_251:                            # %if.else1699
                                        #   in Loop: Header=BB276_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB276_252:                            # %if.end1829
                                        #   in Loop: Header=BB276_247 Depth=2
	jmp	.LBB276_253
.LBB276_253:                            # %if.end1830
                                        #   in Loop: Header=BB276_247 Depth=2
	jmp	.LBB276_254
.LBB276_254:                            # %for.inc1831
                                        #   in Loop: Header=BB276_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB276_247
.LBB276_255:                            # %for.end1833
                                        #   in Loop: Header=BB276_245 Depth=1
	jmp	.LBB276_256
.LBB276_256:                            # %for.inc1834
                                        #   in Loop: Header=BB276_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB276_245
.LBB276_257:                            # %for.end1836
	jmp	.LBB276_258
.LBB276_258:                            # %if.end1837
	jmp	.LBB276_259
.LBB276_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB276_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB276_260 Depth=1
	movl	$0, -16(%rbp)
.LBB276_262:                            # %for.cond1845
                                        #   Parent Loop BB276_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB276_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB276_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB276_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB276_314
.LBB276_265:                            # %if.then1856
                                        #   in Loop: Header=BB276_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_268
.LBB276_267:                            # %cond.false1863
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_268:                            # %cond.end1865
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_271
.LBB276_270:                            # %cond.false1873
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_271:                            # %cond.end1875
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_274
.LBB276_273:                            # %cond.false1893
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_274:                            # %cond.end1895
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_277
.LBB276_276:                            # %cond.false1903
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_277:                            # %cond.end1905
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_280
.LBB276_279:                            # %cond.false1923
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_280:                            # %cond.end1925
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_283
.LBB276_282:                            # %cond.false1933
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_283:                            # %cond.end1935
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_286
.LBB276_285:                            # %cond.false1953
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_286:                            # %cond.end1955
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_289
.LBB276_288:                            # %cond.false1963
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_289:                            # %cond.end1965
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_292
.LBB276_291:                            # %cond.false1983
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_292:                            # %cond.end1985
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_295
.LBB276_294:                            # %cond.false1993
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_295:                            # %cond.end1995
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_298
.LBB276_297:                            # %cond.false2011
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_298:                            # %cond.end2013
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_301
.LBB276_300:                            # %cond.false2021
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_301:                            # %cond.end2023
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_304
.LBB276_303:                            # %cond.false2039
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_304:                            # %cond.end2041
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_307
.LBB276_306:                            # %cond.false2049
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_307:                            # %cond.end2051
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_310
.LBB276_309:                            # %cond.false2067
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_310:                            # %cond.end2069
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB276_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB276_313
.LBB276_312:                            # %cond.false2077
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB276_313:                            # %cond.end2079
                                        #   in Loop: Header=BB276_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB276_315
.LBB276_314:                            # %if.else2089
                                        #   in Loop: Header=BB276_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB276_315:                            # %if.end2194
                                        #   in Loop: Header=BB276_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB276_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB276_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB276_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB276_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB276_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB276_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB276_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB276_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB276_325
.LBB276_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB276_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB276_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB276_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB276_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB276_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB276_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB276_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB276_324:                            # %land.end2285
                                        #   in Loop: Header=BB276_262 Depth=2
.LBB276_325:                            # %lor.end2286
                                        #   in Loop: Header=BB276_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB276_326:                            # %if.end2295
                                        #   in Loop: Header=BB276_262 Depth=2
	jmp	.LBB276_327
.LBB276_327:                            # %for.inc2296
                                        #   in Loop: Header=BB276_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB276_262
.LBB276_328:                            # %for.end2298
                                        #   in Loop: Header=BB276_260 Depth=1
	jmp	.LBB276_329
.LBB276_329:                            # %for.inc2299
                                        #   in Loop: Header=BB276_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB276_260
.LBB276_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB276_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB276_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB276_332 Depth=1
	movl	$0, -16(%rbp)
.LBB276_334:                            # %for.cond2312
                                        #   Parent Loop BB276_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB276_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB276_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB276_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB276_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB276_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB276_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB276_340
.LBB276_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB276_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB276_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB276_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB276_341
.LBB276_340:                            # %if.then2342
                                        #   in Loop: Header=BB276_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB276_345
.LBB276_341:                            # %if.else2363
                                        #   in Loop: Header=BB276_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB276_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB276_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB276_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB276_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB276_344:                            # %if.end2394
                                        #   in Loop: Header=BB276_334 Depth=2
	jmp	.LBB276_345
.LBB276_345:                            # %if.end2395
                                        #   in Loop: Header=BB276_334 Depth=2
	jmp	.LBB276_346
.LBB276_346:                            # %for.inc2396
                                        #   in Loop: Header=BB276_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB276_334
.LBB276_347:                            # %for.end2398
                                        #   in Loop: Header=BB276_332 Depth=1
	jmp	.LBB276_348
.LBB276_348:                            # %for.inc2399
                                        #   in Loop: Header=BB276_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB276_332
.LBB276_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB276_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB276_350 Depth=1
	movl	$0, -16(%rbp)
.LBB276_352:                            # %for.cond2409
                                        #   Parent Loop BB276_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB276_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB276_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB276_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB276_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB276_360
.LBB276_356:                            # %cond.false2429
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB276_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	$127, %eax
	jmp	.LBB276_359
.LBB276_358:                            # %cond.false2441
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB276_359:                            # %cond.end2450
                                        #   in Loop: Header=BB276_352 Depth=2
.LBB276_360:                            # %cond.end2452
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB276_377
.LBB276_361:                            # %if.else2454
                                        #   in Loop: Header=BB276_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB276_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB276_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB276_368
.LBB276_364:                            # %cond.false2468
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB276_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	$127, %eax
	jmp	.LBB276_367
.LBB276_366:                            # %cond.false2480
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB276_367:                            # %cond.end2489
                                        #   in Loop: Header=BB276_352 Depth=2
.LBB276_368:                            # %cond.end2491
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB276_376
.LBB276_369:                            # %if.else2493
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB276_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB276_375
.LBB276_371:                            # %cond.false2504
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB276_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	$127, %eax
	jmp	.LBB276_374
.LBB276_373:                            # %cond.false2516
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB276_374:                            # %cond.end2525
                                        #   in Loop: Header=BB276_352 Depth=2
.LBB276_375:                            # %cond.end2527
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB276_376:                            # %if.end2529
                                        #   in Loop: Header=BB276_352 Depth=2
	jmp	.LBB276_377
.LBB276_377:                            # %if.end2530
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB276_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB276_383
.LBB276_379:                            # %cond.false2546
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB276_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	$127, %eax
	jmp	.LBB276_382
.LBB276_381:                            # %cond.false2562
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB276_382:                            # %cond.end2575
                                        #   in Loop: Header=BB276_352 Depth=2
.LBB276_383:                            # %cond.end2577
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB276_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB276_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB276_390
.LBB276_386:                            # %cond.false2592
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB276_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB276_389
.LBB276_388:                            # %cond.false2599
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB276_389:                            # %cond.end2603
                                        #   in Loop: Header=BB276_352 Depth=2
.LBB276_390:                            # %cond.end2605
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB276_392
.LBB276_391:                            # %if.else2611
                                        #   in Loop: Header=BB276_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB276_392:                            # %if.end2617
                                        #   in Loop: Header=BB276_352 Depth=2
	jmp	.LBB276_393
.LBB276_393:                            # %for.inc2618
                                        #   in Loop: Header=BB276_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB276_352
.LBB276_394:                            # %for.end2620
                                        #   in Loop: Header=BB276_350 Depth=1
	jmp	.LBB276_395
.LBB276_395:                            # %for.inc2621
                                        #   in Loop: Header=BB276_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB276_350
.LBB276_396:                            # %for.end2623
	jmp	.LBB276_397
.LBB276_397:                            # %if.end2624
	cmpl	$777858845, -72(%rbp)   # imm = 0x2E5D2F1D
	jne	.LBB276_399
.LBB276_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB276_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB276_398
.Lfunc_end276:
	.size	compute_colocated.213, .Lfunc_end276-compute_colocated.213
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.214
	.type	mark_pic_long_term.214,@function
mark_pic_long_term.214:                 # @mark_pic_long_term.214
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$945373235, -20(%rbp)   # imm = 0x38594033
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB277_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB277_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB277_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB277_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB277_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB277_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB277_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB277_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB277_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB277_39
.LBB277_7:                              # %if.end
                                        #   in Loop: Header=BB277_2 Depth=1
	jmp	.LBB277_8
.LBB277_8:                              # %if.end50
                                        #   in Loop: Header=BB277_2 Depth=1
	jmp	.LBB277_9
.LBB277_9:                              # %for.inc
                                        #   in Loop: Header=BB277_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB277_2
.LBB277_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB277_39
.LBB277_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB277_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB277_14
.LBB277_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -24(%rbp)
.LBB277_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB277_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB277_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB277_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB277_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB277_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB277_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB277_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB277_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB277_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB277_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB277_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB277_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB277_24:                             # %if.end123
	jmp	.LBB277_39
.LBB277_25:                             # %if.end124
                                        #   in Loop: Header=BB277_15 Depth=1
	jmp	.LBB277_26
.LBB277_26:                             # %if.end125
                                        #   in Loop: Header=BB277_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB277_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB277_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB277_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB277_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB277_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB277_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB277_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB277_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB277_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB277_34:                             # %if.end194
	jmp	.LBB277_39
.LBB277_35:                             # %if.end195
                                        #   in Loop: Header=BB277_15 Depth=1
	jmp	.LBB277_36
.LBB277_36:                             # %if.end196
                                        #   in Loop: Header=BB277_15 Depth=1
	jmp	.LBB277_37
.LBB277_37:                             # %for.inc197
                                        #   in Loop: Header=BB277_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB277_15
.LBB277_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB277_39:                             # %if.end201
	cmpl	$945373235, -20(%rbp)   # imm = 0x38594033
	jne	.LBB277_41
.LBB277_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB277_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB277_40
.Lfunc_end277:
	.size	mark_pic_long_term.214, .Lfunc_end277-mark_pic_long_term.214
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.215
	.type	get_pic_num_x.215,@function
get_pic_num_x.215:                      # @get_pic_num_x.215
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1321780798, -32(%rbp)  # imm = 0x4EC8C63E
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB278_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_3
.LBB278_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB278_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1321780798, -32(%rbp)  # imm = 0x4EC8C63E
	jne	.LBB278_5
.LBB278_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB278_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB278_4
.Lfunc_end278:
	.size	get_pic_num_x.215, .Lfunc_end278-get_pic_num_x.215
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.216
	.type	mm_assign_long_term_frame_idx.216,@function
mm_assign_long_term_frame_idx.216:      # @mm_assign_long_term_frame_idx.216
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$98615604, -28(%rbp)    # imm = 0x5E0C134
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB279_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB279_18
.LBB279_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB279_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB279_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB279_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB279_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB279_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB279_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB279_15
.LBB279_7:                              # %if.end
                                        #   in Loop: Header=BB279_3 Depth=1
	jmp	.LBB279_8
.LBB279_8:                              # %if.end8
                                        #   in Loop: Header=BB279_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB279_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB279_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB279_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB279_15
.LBB279_11:                             # %if.end20
                                        #   in Loop: Header=BB279_3 Depth=1
	jmp	.LBB279_12
.LBB279_12:                             # %if.end21
                                        #   in Loop: Header=BB279_3 Depth=1
	jmp	.LBB279_13
.LBB279_13:                             # %for.inc
                                        #   in Loop: Header=BB279_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB279_3
.LBB279_14:                             # %for.end.loopexit
	jmp	.LBB279_15
.LBB279_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB279_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB279_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB279_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$98615604, -28(%rbp)    # imm = 0x5E0C134
	jne	.LBB279_20
.LBB279_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB279_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB279_19
.Lfunc_end279:
	.size	mm_assign_long_term_frame_idx.216, .Lfunc_end279-mm_assign_long_term_frame_idx.216
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.217 # -- Begin function reorder_ref_pic_list.217
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.217,@function
reorder_ref_pic_list.217:               # @reorder_ref_pic_list.217
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1297238279, -60(%rbp)  # imm = 0x4D524907
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB280_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB280_3
.LBB280_2:                              # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB280_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB280_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB280_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB280_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB280_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB280_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB280_7:                              # %if.end9
                                        #   in Loop: Header=BB280_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB280_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB280_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB280_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB280_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB280_12
.LBB280_11:                             # %if.else28
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB280_12:                             # %if.end33
                                        #   in Loop: Header=BB280_4 Depth=1
	jmp	.LBB280_17
.LBB280_13:                             # %if.else34
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB280_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB280_16
.LBB280_15:                             # %if.else46
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB280_16:                             # %if.end51
                                        #   in Loop: Header=BB280_4 Depth=1
	jmp	.LBB280_17
.LBB280_17:                             # %if.end52
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB280_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB280_20
.LBB280_19:                             # %if.else56
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB280_20:                             # %if.end57
                                        #   in Loop: Header=BB280_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB280_22
.LBB280_21:                             # %if.else58
                                        #   in Loop: Header=BB280_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB280_22:                             # %if.end61
                                        #   in Loop: Header=BB280_4 Depth=1
	jmp	.LBB280_23
.LBB280_23:                             # %for.inc
                                        #   in Loop: Header=BB280_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB280_4
.LBB280_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1297238279, -60(%rbp)  # imm = 0x4D524907
	jne	.LBB280_26
.LBB280_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB280_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB280_25
.Lfunc_end280:
	.size	reorder_ref_pic_list.217, .Lfunc_end280-reorder_ref_pic_list.217
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.218   # -- Begin function dpb_combine_field.218
	.p2align	4, 0x90
	.type	dpb_combine_field.218,@function
dpb_combine_field.218:                  # @dpb_combine_field.218
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$542917765, -32(%rbp)   # imm = 0x205C4485
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB281_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB281_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB281_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB281_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_1
.LBB281_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB281_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB281_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB281_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB281_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_5
.LBB281_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB281_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB281_11
.LBB281_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB281_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB281_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB281_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB281_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB281_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB281_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB281_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB281_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB281_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB281_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB281_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB281_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB281_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB281_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB281_24
.LBB281_23:                             # %cond.false217
                                        #   in Loop: Header=BB281_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB281_24:                             # %cond.end226
                                        #   in Loop: Header=BB281_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB281_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_20
.LBB281_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB281_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB281_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB281_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB281_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB281_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB281_31
.LBB281_30:                             # %cond.false269
                                        #   in Loop: Header=BB281_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB281_31:                             # %cond.end278
                                        #   in Loop: Header=BB281_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB281_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_27
.LBB281_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB281_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB281_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB281_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB281_34 Depth=1
	movl	$0, -20(%rbp)
.LBB281_36:                             # %for.cond295
                                        #   Parent Loop BB281_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB281_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB281_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB281_40
.LBB281_39:                             # %cond.false445
                                        #   in Loop: Header=BB281_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB281_40
.LBB281_40:                             # %cond.end446
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB281_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB281_43
.LBB281_42:                             # %cond.false462
                                        #   in Loop: Header=BB281_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB281_43
.LBB281_43:                             # %cond.end463
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB281_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB281_46
.LBB281_45:                             # %cond.false479
                                        #   in Loop: Header=BB281_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB281_46
.LBB281_46:                             # %cond.end480
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB281_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB281_49
.LBB281_48:                             # %cond.false501
                                        #   in Loop: Header=BB281_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB281_49
.LBB281_49:                             # %cond.end502
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB281_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB281_52
.LBB281_51:                             # %cond.false647
                                        #   in Loop: Header=BB281_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB281_52
.LBB281_52:                             # %cond.end648
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB281_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB281_55
.LBB281_54:                             # %cond.false665
                                        #   in Loop: Header=BB281_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB281_55
.LBB281_55:                             # %cond.end666
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB281_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB281_58
.LBB281_57:                             # %cond.false683
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB281_58
.LBB281_58:                             # %cond.end684
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB281_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB281_61
.LBB281_60:                             # %cond.false706
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB281_61
.LBB281_61:                             # %cond.end707
                                        #   in Loop: Header=BB281_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB281_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB281_36
.LBB281_63:                             # %for.end723
                                        #   in Loop: Header=BB281_34 Depth=1
	jmp	.LBB281_64
.LBB281_64:                             # %for.inc724
                                        #   in Loop: Header=BB281_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_34
.LBB281_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB281_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB281_76
.LBB281_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB281_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB281_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB281_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB281_68 Depth=1
	movl	$0, -20(%rbp)
.LBB281_70:                             # %for.cond737
                                        #   Parent Loop BB281_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB281_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB281_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB281_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB281_70
.LBB281_73:                             # %for.end758
                                        #   in Loop: Header=BB281_68 Depth=1
	jmp	.LBB281_74
.LBB281_74:                             # %for.inc759
                                        #   in Loop: Header=BB281_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_68
.LBB281_75:                             # %for.end761
	jmp	.LBB281_76
.LBB281_76:                             # %if.end762
	cmpl	$542917765, -32(%rbp)   # imm = 0x205C4485
	jne	.LBB281_78
.LBB281_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB281_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB281_77
.Lfunc_end281:
	.size	dpb_combine_field.218, .Lfunc_end281-dpb_combine_field.218
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.219     # -- Begin function alloc_colocated.219
	.p2align	4, 0x90
	.type	alloc_colocated.219,@function
alloc_colocated.219:                    # @alloc_colocated.219
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1811701407, -32(%rbp)  # imm = 0x6BFC5E9F
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB282_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB282_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB282_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB282_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1811701407, -32(%rbp)  # imm = 0x6BFC5E9F
	jne	.LBB282_6
.LBB282_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB282_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB282_5
.Lfunc_end282:
	.size	alloc_colocated.219, .Lfunc_end282-alloc_colocated.219
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.220     # -- Begin function dpb_split_field.220
	.p2align	4, 0x90
	.type	dpb_split_field.220,@function
dpb_split_field.220:                    # @dpb_split_field.220
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1264381160, -80(%rbp)  # imm = 0x4B5CECE8
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB283_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB283_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB283_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB283_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_2
.LBB283_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB283_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB283_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB283_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_6
.LBB283_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB283_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB283_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB283_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_10
.LBB283_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB283_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB283_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB283_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_14
.LBB283_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB283_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB283_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB283_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB283_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB283_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_19
.LBB283_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB283_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB283_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB283_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB283_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_23
.LBB283_26:                             # %for.end328
	jmp	.LBB283_27
.LBB283_27:                             # %if.end
	jmp	.LBB283_29
.LBB283_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB283_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB283_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB283_30 Depth=1
	movl	$0, -4(%rbp)
.LBB283_32:                             # %for.cond343
                                        #   Parent Loop BB283_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB283_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB283_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB283_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB283_32 Depth=2
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB283_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB283_38
.LBB283_37:                             # %cond.false
                                        #   in Loop: Header=BB283_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_38
.LBB283_38:                             # %cond.end
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB283_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB283_41
.LBB283_40:                             # %cond.false415
                                        #   in Loop: Header=BB283_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_41
.LBB283_41:                             # %cond.end416
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB283_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB283_44
.LBB283_43:                             # %cond.false436
                                        #   in Loop: Header=BB283_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_44
.LBB283_44:                             # %cond.end437
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB283_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB283_47
.LBB283_46:                             # %cond.false456
                                        #   in Loop: Header=BB283_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_47
.LBB283_47:                             # %cond.end457
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB283_55
.LBB283_48:                             # %if.else466
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB283_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB283_51
.LBB283_50:                             # %cond.false491
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB283_51
.LBB283_51:                             # %cond.end492
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB283_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB283_54
.LBB283_53:                             # %cond.false509
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB283_54
.LBB283_54:                             # %cond.end510
                                        #   in Loop: Header=BB283_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB283_55:                             # %if.end519
                                        #   in Loop: Header=BB283_32 Depth=2
	jmp	.LBB283_56
.LBB283_56:                             # %for.inc520
                                        #   in Loop: Header=BB283_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_32
.LBB283_57:                             # %for.end522
                                        #   in Loop: Header=BB283_30 Depth=1
	jmp	.LBB283_58
.LBB283_58:                             # %for.inc523
                                        #   in Loop: Header=BB283_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB283_30
.LBB283_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB283_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB283_73
.LBB283_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB283_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB283_62 Depth=1
	movl	$0, -8(%rbp)
.LBB283_64:                             # %for.cond538
                                        #   Parent Loop BB283_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB283_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB283_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB283_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB283_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB283_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB283_68:                             # %if.end908
                                        #   in Loop: Header=BB283_64 Depth=2
	jmp	.LBB283_69
.LBB283_69:                             # %for.inc909
                                        #   in Loop: Header=BB283_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB283_64
.LBB283_70:                             # %for.end911
                                        #   in Loop: Header=BB283_62 Depth=1
	jmp	.LBB283_71
.LBB283_71:                             # %for.inc912
                                        #   in Loop: Header=BB283_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_62
.LBB283_72:                             # %for.end914
	jmp	.LBB283_73
.LBB283_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB283_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB283_74 Depth=1
	movl	$0, -8(%rbp)
.LBB283_76:                             # %for.cond923
                                        #   Parent Loop BB283_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB283_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB283_148
.LBB283_79:                             # %if.then954
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB283_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_83
.LBB283_82:                             # %cond.false991
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_83:                             # %cond.end993
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_86
.LBB283_85:                             # %cond.false1001
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_86:                             # %cond.end1003
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_89
.LBB283_88:                             # %cond.false1032
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_89:                             # %cond.end1034
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_92
.LBB283_91:                             # %cond.false1042
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_92:                             # %cond.end1044
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_95
.LBB283_94:                             # %cond.false1073
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_95:                             # %cond.end1075
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_98
.LBB283_97:                             # %cond.false1083
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_98:                             # %cond.end1085
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_101
.LBB283_100:                            # %cond.false1114
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_101:                            # %cond.end1116
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_104
.LBB283_103:                            # %cond.false1124
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_104:                            # %cond.end1126
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_107
.LBB283_106:                            # %cond.false1155
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_107:                            # %cond.end1157
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_110
.LBB283_109:                            # %cond.false1165
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_110:                            # %cond.end1167
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB283_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB283_125
.LBB283_112:                            # %if.else1190
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_115
.LBB283_114:                            # %cond.false1198
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_115:                            # %cond.end1200
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_118
.LBB283_117:                            # %cond.false1208
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_118:                            # %cond.end1210
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB283_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB283_121
.LBB283_120:                            # %cond.false1237
                                        #   in Loop: Header=BB283_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_121
.LBB283_121:                            # %cond.end1238
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB283_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB283_124
.LBB283_123:                            # %cond.false1254
                                        #   in Loop: Header=BB283_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_124
.LBB283_124:                            # %cond.end1255
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB283_125:                            # %if.end1264
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_128
.LBB283_127:                            # %cond.false1272
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_128:                            # %cond.end1274
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_131
.LBB283_130:                            # %cond.false1282
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_131:                            # %cond.end1284
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB283_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB283_146
.LBB283_133:                            # %if.else1307
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_136
.LBB283_135:                            # %cond.false1315
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_136:                            # %cond.end1317
                                        #   in Loop: Header=BB283_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB283_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB283_139
.LBB283_138:                            # %cond.false1325
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB283_139:                            # %cond.end1327
                                        #   in Loop: Header=BB283_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB283_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB283_142
.LBB283_141:                            # %cond.false1355
                                        #   in Loop: Header=BB283_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_142
.LBB283_142:                            # %cond.end1356
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB283_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB283_145
.LBB283_144:                            # %cond.false1373
                                        #   in Loop: Header=BB283_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_145
.LBB283_145:                            # %cond.end1374
                                        #   in Loop: Header=BB283_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB283_146:                            # %if.end1383
                                        #   in Loop: Header=BB283_76 Depth=2
	jmp	.LBB283_147
.LBB283_147:                            # %if.end1384
                                        #   in Loop: Header=BB283_76 Depth=2
	jmp	.LBB283_148
.LBB283_148:                            # %if.end1385
                                        #   in Loop: Header=BB283_76 Depth=2
	jmp	.LBB283_149
.LBB283_149:                            # %for.inc1386
                                        #   in Loop: Header=BB283_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB283_76
.LBB283_150:                            # %for.end1388
                                        #   in Loop: Header=BB283_74 Depth=1
	jmp	.LBB283_151
.LBB283_151:                            # %for.inc1389
                                        #   in Loop: Header=BB283_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_74
.LBB283_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB283_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB283_153 Depth=1
	movl	$0, -4(%rbp)
.LBB283_155:                            # %for.cond1399
                                        #   Parent Loop BB283_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB283_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB283_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_155
.LBB283_158:                            # %for.end1414
                                        #   in Loop: Header=BB283_153 Depth=1
	jmp	.LBB283_159
.LBB283_159:                            # %for.inc1415
                                        #   in Loop: Header=BB283_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB283_153
.LBB283_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB283_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB283_174
.LBB283_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB283_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB283_163 Depth=1
	movl	$0, -4(%rbp)
.LBB283_165:                            # %for.cond1431
                                        #   Parent Loop BB283_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB283_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB283_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB283_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB283_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB283_169
.LBB283_168:                            # %cond.false1462
                                        #   in Loop: Header=BB283_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB283_169
.LBB283_169:                            # %cond.end1463
                                        #   in Loop: Header=BB283_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB283_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_165
.LBB283_171:                            # %for.end1474
                                        #   in Loop: Header=BB283_163 Depth=1
	jmp	.LBB283_172
.LBB283_172:                            # %for.inc1475
                                        #   in Loop: Header=BB283_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB283_163
.LBB283_173:                            # %for.end1477
	jmp	.LBB283_174
.LBB283_174:                            # %if.end1478
	cmpl	$1264381160, -80(%rbp)  # imm = 0x4B5CECE8
	jne	.LBB283_176
.LBB283_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB283_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB283_175
.Lfunc_end283:
	.size	dpb_split_field.220, .Lfunc_end283-dpb_split_field.220
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.221   # -- Begin function gen_field_ref_ids.221
	.p2align	4, 0x90
	.type	gen_field_ref_ids.221,@function
gen_field_ref_ids.221:                  # @gen_field_ref_ids.221
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$337580379, -28(%rbp)   # imm = 0x141F115B
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB284_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB284_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB284_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB284_1 Depth=1
	movl	$0, -4(%rbp)
.LBB284_3:                              # %for.cond1
                                        #   Parent Loop BB284_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB284_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB284_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB284_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB284_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB284_7
.LBB284_6:                              # %cond.false
                                        #   in Loop: Header=BB284_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB284_7
.LBB284_7:                              # %cond.end
                                        #   in Loop: Header=BB284_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB284_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB284_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB284_10
.LBB284_9:                              # %cond.false32
                                        #   in Loop: Header=BB284_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB284_10
.LBB284_10:                             # %cond.end33
                                        #   in Loop: Header=BB284_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB284_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_3
.LBB284_12:                             # %for.end
                                        #   in Loop: Header=BB284_1 Depth=1
	jmp	.LBB284_13
.LBB284_13:                             # %for.inc45
                                        #   in Loop: Header=BB284_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB284_1
.LBB284_14:                             # %for.end47
	cmpl	$337580379, -28(%rbp)   # imm = 0x141F115B
	jne	.LBB284_16
.LBB284_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB284_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB284_15
.Lfunc_end284:
	.size	gen_field_ref_ids.221, .Lfunc_end284-gen_field_ref_ids.221
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.222
	.type	mm_unmark_long_term_for_reference.222,@function
mm_unmark_long_term_for_reference.222:  # @mm_unmark_long_term_for_reference.222
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1980344793, -12(%rbp)  # imm = 0x7609A9D9
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB285_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB285_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB285_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB285_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB285_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB285_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB285_7:                              # %if.end
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_8
.LBB285_8:                              # %if.end14
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_24
.LBB285_9:                              # %if.else
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB285_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB285_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB285_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB285_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB285_14:                             # %if.end57
	jmp	.LBB285_27
.LBB285_15:                             # %if.end58
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_16
.LBB285_16:                             # %if.end59
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB285_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB285_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB285_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB285_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB285_21:                             # %if.end106
	jmp	.LBB285_27
.LBB285_22:                             # %if.end107
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_23
.LBB285_23:                             # %if.end108
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_24
.LBB285_24:                             # %if.end109
                                        #   in Loop: Header=BB285_1 Depth=1
	jmp	.LBB285_25
.LBB285_25:                             # %for.inc
                                        #   in Loop: Header=BB285_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB285_1
.LBB285_26:                             # %for.end.loopexit
	jmp	.LBB285_27
.LBB285_27:                             # %for.end
	cmpl	$1980344793, -12(%rbp)  # imm = 0x7609A9D9
	jne	.LBB285_29
.LBB285_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB285_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB285_28
.Lfunc_end285:
	.size	mm_unmark_long_term_for_reference.222, .Lfunc_end285-mm_unmark_long_term_for_reference.222
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.223
	.type	reorder_short_term.223,@function
reorder_short_term.223:                 # @reorder_short_term.223
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1418826287, -44(%rbp)  # imm = 0x5491922F
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB286_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB286_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB286_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB286_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB286_1
.LBB286_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB286_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB286_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB286_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB286_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB286_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB286_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB286_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB286_10
.LBB286_9:                              # %if.then17
                                        #   in Loop: Header=BB286_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB286_10:                             # %if.end
                                        #   in Loop: Header=BB286_5 Depth=1
	jmp	.LBB286_11
.LBB286_11:                             # %if.end23
                                        #   in Loop: Header=BB286_5 Depth=1
	jmp	.LBB286_12
.LBB286_12:                             # %for.inc24
                                        #   in Loop: Header=BB286_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB286_5
.LBB286_13:                             # %for.end26
	cmpl	$1418826287, -44(%rbp)  # imm = 0x5491922F
	jne	.LBB286_15
.LBB286_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB286_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB286_14
.Lfunc_end286:
	.size	reorder_short_term.223, .Lfunc_end286-reorder_short_term.223
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.224   # -- Begin function dpb_combine_field.224
	.p2align	4, 0x90
	.type	dpb_combine_field.224,@function
dpb_combine_field.224:                  # @dpb_combine_field.224
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$250154067, -32(%rbp)   # imm = 0xEE90C53
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB287_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB287_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB287_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB287_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB287_1
.LBB287_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB287_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB287_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB287_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB287_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB287_5
.LBB287_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB287_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB287_11
.LBB287_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB287_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB287_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB287_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB287_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB287_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB287_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB287_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB287_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB287_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB287_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB287_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB287_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB287_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB287_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB287_24
.LBB287_23:                             # %cond.false217
                                        #   in Loop: Header=BB287_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB287_24:                             # %cond.end226
                                        #   in Loop: Header=BB287_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB287_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB287_20
.LBB287_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB287_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB287_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB287_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB287_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB287_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB287_31
.LBB287_30:                             # %cond.false269
                                        #   in Loop: Header=BB287_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB287_31:                             # %cond.end278
                                        #   in Loop: Header=BB287_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB287_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB287_27
.LBB287_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB287_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB287_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB287_34 Depth=1
	movl	$0, -20(%rbp)
.LBB287_36:                             # %for.cond295
                                        #   Parent Loop BB287_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB287_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB287_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB287_40
.LBB287_39:                             # %cond.false445
                                        #   in Loop: Header=BB287_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB287_40
.LBB287_40:                             # %cond.end446
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB287_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB287_43
.LBB287_42:                             # %cond.false462
                                        #   in Loop: Header=BB287_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB287_43
.LBB287_43:                             # %cond.end463
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB287_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB287_46
.LBB287_45:                             # %cond.false479
                                        #   in Loop: Header=BB287_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB287_46
.LBB287_46:                             # %cond.end480
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB287_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB287_49
.LBB287_48:                             # %cond.false501
                                        #   in Loop: Header=BB287_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB287_49
.LBB287_49:                             # %cond.end502
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB287_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB287_52
.LBB287_51:                             # %cond.false647
                                        #   in Loop: Header=BB287_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB287_52
.LBB287_52:                             # %cond.end648
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB287_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB287_55
.LBB287_54:                             # %cond.false665
                                        #   in Loop: Header=BB287_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB287_55
.LBB287_55:                             # %cond.end666
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB287_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB287_58
.LBB287_57:                             # %cond.false683
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB287_58
.LBB287_58:                             # %cond.end684
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB287_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB287_61
.LBB287_60:                             # %cond.false706
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB287_61
.LBB287_61:                             # %cond.end707
                                        #   in Loop: Header=BB287_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB287_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB287_36
.LBB287_63:                             # %for.end723
                                        #   in Loop: Header=BB287_34 Depth=1
	jmp	.LBB287_64
.LBB287_64:                             # %for.inc724
                                        #   in Loop: Header=BB287_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB287_34
.LBB287_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB287_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB287_76
.LBB287_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB287_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB287_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB287_68 Depth=1
	movl	$0, -20(%rbp)
.LBB287_70:                             # %for.cond737
                                        #   Parent Loop BB287_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB287_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB287_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB287_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB287_70
.LBB287_73:                             # %for.end758
                                        #   in Loop: Header=BB287_68 Depth=1
	jmp	.LBB287_74
.LBB287_74:                             # %for.inc759
                                        #   in Loop: Header=BB287_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB287_68
.LBB287_75:                             # %for.end761
	jmp	.LBB287_76
.LBB287_76:                             # %if.end762
	cmpl	$250154067, -32(%rbp)   # imm = 0xEE90C53
	jne	.LBB287_78
.LBB287_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB287_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB287_77
.Lfunc_end287:
	.size	dpb_combine_field.224, .Lfunc_end287-dpb_combine_field.224
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.225
	.type	mm_assign_long_term_frame_idx.225,@function
mm_assign_long_term_frame_idx.225:      # @mm_assign_long_term_frame_idx.225
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1778348177, -32(%rbp)  # imm = 0x69FF7091
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB288_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB288_18
.LBB288_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB288_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB288_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB288_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB288_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB288_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB288_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB288_15
.LBB288_7:                              # %if.end
                                        #   in Loop: Header=BB288_3 Depth=1
	jmp	.LBB288_8
.LBB288_8:                              # %if.end8
                                        #   in Loop: Header=BB288_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB288_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB288_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB288_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB288_15
.LBB288_11:                             # %if.end20
                                        #   in Loop: Header=BB288_3 Depth=1
	jmp	.LBB288_12
.LBB288_12:                             # %if.end21
                                        #   in Loop: Header=BB288_3 Depth=1
	jmp	.LBB288_13
.LBB288_13:                             # %for.inc
                                        #   in Loop: Header=BB288_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB288_3
.LBB288_14:                             # %for.end.loopexit
	jmp	.LBB288_15
.LBB288_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB288_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB288_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB288_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1778348177, -32(%rbp)  # imm = 0x69FF7091
	jne	.LBB288_20
.LBB288_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB288_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB288_19
.Lfunc_end288:
	.size	mm_assign_long_term_frame_idx.225, .Lfunc_end288-mm_assign_long_term_frame_idx.225
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.226
	.type	compare_pic_by_pic_num_desc.226,@function
compare_pic_by_pic_num_desc.226:        # @compare_pic_by_pic_num_desc.226
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1326580506, -16(%rbp)  # imm = 0x4F12031A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB289_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB289_5
.LBB289_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB289_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB289_5
.LBB289_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB289_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1326580506, -16(%rbp)  # imm = 0x4F12031A
	jne	.LBB289_7
.LBB289_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB289_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB289_6
.Lfunc_end289:
	.size	compare_pic_by_pic_num_desc.226, .Lfunc_end289-compare_pic_by_pic_num_desc.226
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.227
	.type	mm_assign_long_term_frame_idx.227,@function
mm_assign_long_term_frame_idx.227:      # @mm_assign_long_term_frame_idx.227
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1767884708, -28(%rbp)  # imm = 0x695FC7A4
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB290_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB290_18
.LBB290_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB290_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB290_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB290_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB290_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB290_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB290_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB290_15
.LBB290_7:                              # %if.end
                                        #   in Loop: Header=BB290_3 Depth=1
	jmp	.LBB290_8
.LBB290_8:                              # %if.end8
                                        #   in Loop: Header=BB290_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB290_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB290_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB290_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB290_15
.LBB290_11:                             # %if.end20
                                        #   in Loop: Header=BB290_3 Depth=1
	jmp	.LBB290_12
.LBB290_12:                             # %if.end21
                                        #   in Loop: Header=BB290_3 Depth=1
	jmp	.LBB290_13
.LBB290_13:                             # %for.inc
                                        #   in Loop: Header=BB290_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB290_3
.LBB290_14:                             # %for.end.loopexit
	jmp	.LBB290_15
.LBB290_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB290_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB290_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB290_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1767884708, -28(%rbp)  # imm = 0x695FC7A4
	jne	.LBB290_20
.LBB290_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB290_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB290_19
.Lfunc_end290:
	.size	mm_assign_long_term_frame_idx.227, .Lfunc_end290-mm_assign_long_term_frame_idx.227
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.228
	.type	compare_pic_by_lt_pic_num_asc.228,@function
compare_pic_by_lt_pic_num_asc.228:      # @compare_pic_by_lt_pic_num_asc.228
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2040488942, -16(%rbp)  # imm = 0x799F63EE
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB291_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB291_5
.LBB291_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB291_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB291_5
.LBB291_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB291_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2040488942, -16(%rbp)  # imm = 0x799F63EE
	jne	.LBB291_7
.LBB291_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB291_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB291_6
.Lfunc_end291:
	.size	compare_pic_by_lt_pic_num_asc.228, .Lfunc_end291-compare_pic_by_lt_pic_num_asc.228
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.229
	.type	reorder_short_term.229,@function
reorder_short_term.229:                 # @reorder_short_term.229
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1356939504, -44(%rbp)  # imm = 0x50E140F0
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB292_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB292_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB292_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_1
.LBB292_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB292_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB292_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB292_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB292_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB292_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB292_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB292_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB292_10
.LBB292_9:                              # %if.then17
                                        #   in Loop: Header=BB292_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB292_10:                             # %if.end
                                        #   in Loop: Header=BB292_5 Depth=1
	jmp	.LBB292_11
.LBB292_11:                             # %if.end23
                                        #   in Loop: Header=BB292_5 Depth=1
	jmp	.LBB292_12
.LBB292_12:                             # %for.inc24
                                        #   in Loop: Header=BB292_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_5
.LBB292_13:                             # %for.end26
	cmpl	$1356939504, -44(%rbp)  # imm = 0x50E140F0
	jne	.LBB292_15
.LBB292_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB292_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB292_14
.Lfunc_end292:
	.size	reorder_short_term.229, .Lfunc_end292-reorder_short_term.229
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.230     # -- Begin function dpb_split_field.230
	.p2align	4, 0x90
	.type	dpb_split_field.230,@function
dpb_split_field.230:                    # @dpb_split_field.230
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$593282132, -76(%rbp)   # imm = 0x235CC454
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB293_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB293_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB293_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB293_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_2
.LBB293_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB293_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB293_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB293_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_6
.LBB293_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB293_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB293_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB293_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_10
.LBB293_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB293_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB293_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB293_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_14
.LBB293_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB293_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB293_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB293_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB293_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB293_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_19
.LBB293_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB293_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB293_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB293_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB293_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_23
.LBB293_26:                             # %for.end328
	jmp	.LBB293_27
.LBB293_27:                             # %if.end
	jmp	.LBB293_29
.LBB293_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB293_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB293_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB293_30 Depth=1
	movl	$0, -4(%rbp)
.LBB293_32:                             # %for.cond343
                                        #   Parent Loop BB293_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB293_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB293_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB293_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB293_32 Depth=2
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB293_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB293_38
.LBB293_37:                             # %cond.false
                                        #   in Loop: Header=BB293_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_38
.LBB293_38:                             # %cond.end
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB293_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB293_41
.LBB293_40:                             # %cond.false415
                                        #   in Loop: Header=BB293_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_41
.LBB293_41:                             # %cond.end416
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB293_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB293_44
.LBB293_43:                             # %cond.false436
                                        #   in Loop: Header=BB293_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_44
.LBB293_44:                             # %cond.end437
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB293_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB293_47
.LBB293_46:                             # %cond.false456
                                        #   in Loop: Header=BB293_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_47
.LBB293_47:                             # %cond.end457
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB293_55
.LBB293_48:                             # %if.else466
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB293_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB293_51
.LBB293_50:                             # %cond.false491
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB293_51
.LBB293_51:                             # %cond.end492
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB293_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB293_54
.LBB293_53:                             # %cond.false509
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB293_54
.LBB293_54:                             # %cond.end510
                                        #   in Loop: Header=BB293_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_55:                             # %if.end519
                                        #   in Loop: Header=BB293_32 Depth=2
	jmp	.LBB293_56
.LBB293_56:                             # %for.inc520
                                        #   in Loop: Header=BB293_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_32
.LBB293_57:                             # %for.end522
                                        #   in Loop: Header=BB293_30 Depth=1
	jmp	.LBB293_58
.LBB293_58:                             # %for.inc523
                                        #   in Loop: Header=BB293_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_30
.LBB293_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB293_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB293_73
.LBB293_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB293_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB293_62 Depth=1
	movl	$0, -8(%rbp)
.LBB293_64:                             # %for.cond538
                                        #   Parent Loop BB293_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB293_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB293_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB293_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB293_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB293_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_68:                             # %if.end908
                                        #   in Loop: Header=BB293_64 Depth=2
	jmp	.LBB293_69
.LBB293_69:                             # %for.inc909
                                        #   in Loop: Header=BB293_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_64
.LBB293_70:                             # %for.end911
                                        #   in Loop: Header=BB293_62 Depth=1
	jmp	.LBB293_71
.LBB293_71:                             # %for.inc912
                                        #   in Loop: Header=BB293_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_62
.LBB293_72:                             # %for.end914
	jmp	.LBB293_73
.LBB293_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB293_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB293_74 Depth=1
	movl	$0, -8(%rbp)
.LBB293_76:                             # %for.cond923
                                        #   Parent Loop BB293_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB293_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB293_148
.LBB293_79:                             # %if.then954
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB293_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_83
.LBB293_82:                             # %cond.false991
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_83:                             # %cond.end993
                                        #   in Loop: Header=BB293_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_86
.LBB293_85:                             # %cond.false1001
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_86:                             # %cond.end1003
                                        #   in Loop: Header=BB293_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_89
.LBB293_88:                             # %cond.false1032
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_89:                             # %cond.end1034
                                        #   in Loop: Header=BB293_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_92
.LBB293_91:                             # %cond.false1042
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_92:                             # %cond.end1044
                                        #   in Loop: Header=BB293_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_95
.LBB293_94:                             # %cond.false1073
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_95:                             # %cond.end1075
                                        #   in Loop: Header=BB293_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_98
.LBB293_97:                             # %cond.false1083
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_98:                             # %cond.end1085
                                        #   in Loop: Header=BB293_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_101
.LBB293_100:                            # %cond.false1114
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_101:                            # %cond.end1116
                                        #   in Loop: Header=BB293_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_104
.LBB293_103:                            # %cond.false1124
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_104:                            # %cond.end1126
                                        #   in Loop: Header=BB293_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_107
.LBB293_106:                            # %cond.false1155
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_107:                            # %cond.end1157
                                        #   in Loop: Header=BB293_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_110
.LBB293_109:                            # %cond.false1165
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_110:                            # %cond.end1167
                                        #   in Loop: Header=BB293_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB293_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB293_125
.LBB293_112:                            # %if.else1190
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_115
.LBB293_114:                            # %cond.false1198
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_115:                            # %cond.end1200
                                        #   in Loop: Header=BB293_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_118
.LBB293_117:                            # %cond.false1208
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_118:                            # %cond.end1210
                                        #   in Loop: Header=BB293_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB293_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB293_121
.LBB293_120:                            # %cond.false1237
                                        #   in Loop: Header=BB293_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_121
.LBB293_121:                            # %cond.end1238
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB293_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB293_124
.LBB293_123:                            # %cond.false1254
                                        #   in Loop: Header=BB293_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_124
.LBB293_124:                            # %cond.end1255
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_125:                            # %if.end1264
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_128
.LBB293_127:                            # %cond.false1272
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_128:                            # %cond.end1274
                                        #   in Loop: Header=BB293_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_131
.LBB293_130:                            # %cond.false1282
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_131:                            # %cond.end1284
                                        #   in Loop: Header=BB293_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB293_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB293_146
.LBB293_133:                            # %if.else1307
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_136
.LBB293_135:                            # %cond.false1315
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_136:                            # %cond.end1317
                                        #   in Loop: Header=BB293_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB293_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB293_139
.LBB293_138:                            # %cond.false1325
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB293_139:                            # %cond.end1327
                                        #   in Loop: Header=BB293_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB293_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB293_142
.LBB293_141:                            # %cond.false1355
                                        #   in Loop: Header=BB293_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_142
.LBB293_142:                            # %cond.end1356
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB293_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB293_145
.LBB293_144:                            # %cond.false1373
                                        #   in Loop: Header=BB293_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_145
.LBB293_145:                            # %cond.end1374
                                        #   in Loop: Header=BB293_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB293_146:                            # %if.end1383
                                        #   in Loop: Header=BB293_76 Depth=2
	jmp	.LBB293_147
.LBB293_147:                            # %if.end1384
                                        #   in Loop: Header=BB293_76 Depth=2
	jmp	.LBB293_148
.LBB293_148:                            # %if.end1385
                                        #   in Loop: Header=BB293_76 Depth=2
	jmp	.LBB293_149
.LBB293_149:                            # %for.inc1386
                                        #   in Loop: Header=BB293_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_76
.LBB293_150:                            # %for.end1388
                                        #   in Loop: Header=BB293_74 Depth=1
	jmp	.LBB293_151
.LBB293_151:                            # %for.inc1389
                                        #   in Loop: Header=BB293_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_74
.LBB293_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB293_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB293_153 Depth=1
	movl	$0, -4(%rbp)
.LBB293_155:                            # %for.cond1399
                                        #   Parent Loop BB293_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB293_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB293_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_155
.LBB293_158:                            # %for.end1414
                                        #   in Loop: Header=BB293_153 Depth=1
	jmp	.LBB293_159
.LBB293_159:                            # %for.inc1415
                                        #   in Loop: Header=BB293_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_153
.LBB293_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB293_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB293_174
.LBB293_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB293_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB293_163 Depth=1
	movl	$0, -4(%rbp)
.LBB293_165:                            # %for.cond1431
                                        #   Parent Loop BB293_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB293_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB293_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB293_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB293_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-80(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB293_169
.LBB293_168:                            # %cond.false1462
                                        #   in Loop: Header=BB293_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_169
.LBB293_169:                            # %cond.end1463
                                        #   in Loop: Header=BB293_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB293_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_165
.LBB293_171:                            # %for.end1474
                                        #   in Loop: Header=BB293_163 Depth=1
	jmp	.LBB293_172
.LBB293_172:                            # %for.inc1475
                                        #   in Loop: Header=BB293_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_163
.LBB293_173:                            # %for.end1477
	jmp	.LBB293_174
.LBB293_174:                            # %if.end1478
	cmpl	$593282132, -76(%rbp)   # imm = 0x235CC454
	jne	.LBB293_176
.LBB293_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB293_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB293_175
.Lfunc_end293:
	.size	dpb_split_field.230, .Lfunc_end293-dpb_split_field.230
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.231
	.type	mm_unmark_short_term_for_reference.231,@function
mm_unmark_short_term_for_reference.231: # @mm_unmark_short_term_for_reference.231
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$168304464, -16(%rbp)   # imm = 0xA081F50
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB294_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB294_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB294_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB294_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB294_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB294_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB294_27
.LBB294_7:                              # %if.end
                                        #   in Loop: Header=BB294_1 Depth=1
	jmp	.LBB294_8
.LBB294_8:                              # %if.end13
                                        #   in Loop: Header=BB294_1 Depth=1
	jmp	.LBB294_24
.LBB294_9:                              # %if.else
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB294_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB294_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB294_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB294_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB294_14:                             # %if.end44
	jmp	.LBB294_27
.LBB294_15:                             # %if.end45
                                        #   in Loop: Header=BB294_1 Depth=1
	jmp	.LBB294_16
.LBB294_16:                             # %if.end46
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB294_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB294_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB294_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB294_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB294_21:                             # %if.end81
	jmp	.LBB294_27
.LBB294_22:                             # %if.end82
                                        #   in Loop: Header=BB294_1 Depth=1
	jmp	.LBB294_23
.LBB294_23:                             # %if.end83
                                        #   in Loop: Header=BB294_1 Depth=1
	jmp	.LBB294_24
.LBB294_24:                             # %if.end84
                                        #   in Loop: Header=BB294_1 Depth=1
	jmp	.LBB294_25
.LBB294_25:                             # %for.inc
                                        #   in Loop: Header=BB294_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_1
.LBB294_26:                             # %for.end.loopexit
	jmp	.LBB294_27
.LBB294_27:                             # %for.end
	cmpl	$168304464, -16(%rbp)   # imm = 0xA081F50
	jne	.LBB294_29
.LBB294_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB294_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB294_28
.Lfunc_end294:
	.size	mm_unmark_short_term_for_reference.231, .Lfunc_end294-mm_unmark_short_term_for_reference.231
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.232
	.type	mm_unmark_short_term_for_reference.232,@function
mm_unmark_short_term_for_reference.232: # @mm_unmark_short_term_for_reference.232
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1395132367, -12(%rbp)  # imm = 0x532807CF
	movq	%rdi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB295_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB295_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB295_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB295_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB295_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB295_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB295_27
.LBB295_7:                              # %if.end
                                        #   in Loop: Header=BB295_1 Depth=1
	jmp	.LBB295_8
.LBB295_8:                              # %if.end13
                                        #   in Loop: Header=BB295_1 Depth=1
	jmp	.LBB295_24
.LBB295_9:                              # %if.else
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB295_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB295_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB295_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB295_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB295_14:                             # %if.end44
	jmp	.LBB295_27
.LBB295_15:                             # %if.end45
                                        #   in Loop: Header=BB295_1 Depth=1
	jmp	.LBB295_16
.LBB295_16:                             # %if.end46
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB295_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB295_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB295_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB295_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB295_21:                             # %if.end81
	jmp	.LBB295_27
.LBB295_22:                             # %if.end82
                                        #   in Loop: Header=BB295_1 Depth=1
	jmp	.LBB295_23
.LBB295_23:                             # %if.end83
                                        #   in Loop: Header=BB295_1 Depth=1
	jmp	.LBB295_24
.LBB295_24:                             # %if.end84
                                        #   in Loop: Header=BB295_1 Depth=1
	jmp	.LBB295_25
.LBB295_25:                             # %for.inc
                                        #   in Loop: Header=BB295_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_1
.LBB295_26:                             # %for.end.loopexit
	jmp	.LBB295_27
.LBB295_27:                             # %for.end
	cmpl	$1395132367, -12(%rbp)  # imm = 0x532807CF
	jne	.LBB295_29
.LBB295_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB295_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB295_28
.Lfunc_end295:
	.size	mm_unmark_short_term_for_reference.232, .Lfunc_end295-mm_unmark_short_term_for_reference.232
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.233
	.type	compare_pic_by_pic_num_desc.233,@function
compare_pic_by_pic_num_desc.233:        # @compare_pic_by_pic_num_desc.233
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$870315954, -16(%rbp)   # imm = 0x33DFF7B2
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB296_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB296_5
.LBB296_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB296_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB296_5
.LBB296_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB296_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$870315954, -16(%rbp)   # imm = 0x33DFF7B2
	jne	.LBB296_7
.LBB296_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB296_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB296_6
.Lfunc_end296:
	.size	compare_pic_by_pic_num_desc.233, .Lfunc_end296-compare_pic_by_pic_num_desc.233
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.234
	.type	compare_pic_by_pic_num_desc.234,@function
compare_pic_by_pic_num_desc.234:        # @compare_pic_by_pic_num_desc.234
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1633462438, -16(%rbp)  # imm = 0x615CA8A6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB297_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB297_5
.LBB297_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB297_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB297_5
.LBB297_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB297_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1633462438, -16(%rbp)  # imm = 0x615CA8A6
	jne	.LBB297_7
.LBB297_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB297_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB297_6
.Lfunc_end297:
	.size	compare_pic_by_pic_num_desc.234, .Lfunc_end297-compare_pic_by_pic_num_desc.234
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.235
	.type	gen_pic_list_from_frame_list.235,@function
gen_pic_list_from_frame_list.235:       # @gen_pic_list_from_frame_list.235
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1976480761, -60(%rbp)  # imm = 0x75CEB3F9
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -64(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB298_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB298_3
.LBB298_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB298_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB298_28
# %bb.4:                                # %if.then1
	jmp	.LBB298_5
.LBB298_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB298_9 Depth 2
                                        #     Child Loop BB298_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB298_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB298_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB298_7:                              # %lor.end
                                        #   in Loop: Header=BB298_5 Depth=1
	testb	$1, %al
	jne	.LBB298_8
	jmp	.LBB298_27
.LBB298_8:                              # %while.body
                                        #   in Loop: Header=BB298_5 Depth=1
	jmp	.LBB298_9
.LBB298_9:                              # %for.cond
                                        #   Parent Loop BB298_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB298_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB298_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB298_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB298_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB298_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB298_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB298_17
.LBB298_13:                             # %if.end17
                                        #   in Loop: Header=BB298_9 Depth=2
	jmp	.LBB298_14
.LBB298_14:                             # %if.end18
                                        #   in Loop: Header=BB298_9 Depth=2
	jmp	.LBB298_15
.LBB298_15:                             # %for.inc
                                        #   in Loop: Header=BB298_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB298_9
.LBB298_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB298_5 Depth=1
	jmp	.LBB298_17
.LBB298_17:                             # %for.end
                                        #   in Loop: Header=BB298_5 Depth=1
	jmp	.LBB298_18
.LBB298_18:                             # %for.cond20
                                        #   Parent Loop BB298_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB298_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB298_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB298_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB298_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB298_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB298_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_26
.LBB298_22:                             # %if.end41
                                        #   in Loop: Header=BB298_18 Depth=2
	jmp	.LBB298_23
.LBB298_23:                             # %if.end42
                                        #   in Loop: Header=BB298_18 Depth=2
	jmp	.LBB298_24
.LBB298_24:                             # %for.inc43
                                        #   in Loop: Header=BB298_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_18
.LBB298_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB298_5 Depth=1
	jmp	.LBB298_26
.LBB298_26:                             # %for.end45
                                        #   in Loop: Header=BB298_5 Depth=1
	jmp	.LBB298_5
.LBB298_27:                             # %while.end
	jmp	.LBB298_28
.LBB298_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB298_53
# %bb.29:                               # %if.then48
	jmp	.LBB298_30
.LBB298_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB298_34 Depth 2
                                        #     Child Loop BB298_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB298_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB298_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB298_32:                             # %lor.end53
                                        #   in Loop: Header=BB298_30 Depth=1
	testb	$1, %al
	jne	.LBB298_33
	jmp	.LBB298_52
.LBB298_33:                             # %while.body54
                                        #   in Loop: Header=BB298_30 Depth=1
	jmp	.LBB298_34
.LBB298_34:                             # %for.cond55
                                        #   Parent Loop BB298_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB298_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB298_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB298_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB298_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB298_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB298_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_42
.LBB298_38:                             # %if.end77
                                        #   in Loop: Header=BB298_34 Depth=2
	jmp	.LBB298_39
.LBB298_39:                             # %if.end78
                                        #   in Loop: Header=BB298_34 Depth=2
	jmp	.LBB298_40
.LBB298_40:                             # %for.inc79
                                        #   in Loop: Header=BB298_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_34
.LBB298_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB298_30 Depth=1
	jmp	.LBB298_42
.LBB298_42:                             # %for.end81
                                        #   in Loop: Header=BB298_30 Depth=1
	jmp	.LBB298_43
.LBB298_43:                             # %for.cond82
                                        #   Parent Loop BB298_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB298_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB298_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB298_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB298_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB298_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB298_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB298_51
.LBB298_47:                             # %if.end104
                                        #   in Loop: Header=BB298_43 Depth=2
	jmp	.LBB298_48
.LBB298_48:                             # %if.end105
                                        #   in Loop: Header=BB298_43 Depth=2
	jmp	.LBB298_49
.LBB298_49:                             # %for.inc106
                                        #   in Loop: Header=BB298_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB298_43
.LBB298_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB298_30 Depth=1
	jmp	.LBB298_51
.LBB298_51:                             # %for.end108
                                        #   in Loop: Header=BB298_30 Depth=1
	jmp	.LBB298_30
.LBB298_52:                             # %while.end109
	jmp	.LBB298_53
.LBB298_53:                             # %if.end110
	cmpl	$1976480761, -60(%rbp)  # imm = 0x75CEB3F9
	jne	.LBB298_55
.LBB298_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB298_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB298_54
.Lfunc_end298:
	.size	gen_pic_list_from_frame_list.235, .Lfunc_end298-gen_pic_list_from_frame_list.235
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.236
	.type	compare_pic_by_poc_desc.236,@function
compare_pic_by_poc_desc.236:            # @compare_pic_by_poc_desc.236
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$371592857, -16(%rbp)   # imm = 0x16260E99
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB299_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB299_5
.LBB299_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB299_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB299_5
.LBB299_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB299_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$371592857, -16(%rbp)   # imm = 0x16260E99
	jne	.LBB299_7
.LBB299_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB299_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB299_6
.Lfunc_end299:
	.size	compare_pic_by_poc_desc.236, .Lfunc_end299-compare_pic_by_poc_desc.236
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.237     # -- Begin function alloc_colocated.237
	.p2align	4, 0x90
	.type	alloc_colocated.237,@function
alloc_colocated.237:                    # @alloc_colocated.237
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$771934521, -32(%rbp)   # imm = 0x2E02C939
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB300_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB300_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB300_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB300_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$771934521, -32(%rbp)   # imm = 0x2E02C939
	jne	.LBB300_6
.LBB300_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB300_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB300_5
.Lfunc_end300:
	.size	alloc_colocated.237, .Lfunc_end300-alloc_colocated.237
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.238
	.type	remove_frame_from_dpb.238,@function
remove_frame_from_dpb.238:              # @remove_frame_from_dpb.238
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1642920041, -20(%rbp)  # imm = 0x61ECF869
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB301_6
# %bb.1:                                # %entry
	movq	.LJTI301_0(,%rax,8), %rax
	jmpq	*%rax
.LBB301_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB301_7
.LBB301_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB301_7
.LBB301_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB301_7
.LBB301_5:                              # %sw.bb10
	jmp	.LBB301_7
.LBB301_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB301_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB301_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB301_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB301_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB301_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB301_8
.LBB301_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1642920041, -20(%rbp)  # imm = 0x61ECF869
	jne	.LBB301_13
.LBB301_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB301_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB301_12
.Lfunc_end301:
	.size	remove_frame_from_dpb.238, .Lfunc_end301-remove_frame_from_dpb.238
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI301_0:
	.quad	.LBB301_5
	.quad	.LBB301_4
	.quad	.LBB301_3
	.quad	.LBB301_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.239
	.type	mm_unmark_short_term_for_reference.239,@function
mm_unmark_short_term_for_reference.239: # @mm_unmark_short_term_for_reference.239
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$848612382, -16(%rbp)   # imm = 0x3294CC1E
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB302_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB302_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB302_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB302_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB302_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB302_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB302_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB302_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB302_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB302_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB302_27
.LBB302_7:                              # %if.end
                                        #   in Loop: Header=BB302_1 Depth=1
	jmp	.LBB302_8
.LBB302_8:                              # %if.end13
                                        #   in Loop: Header=BB302_1 Depth=1
	jmp	.LBB302_24
.LBB302_9:                              # %if.else
                                        #   in Loop: Header=BB302_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB302_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB302_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB302_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB302_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB302_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB302_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB302_14:                             # %if.end44
	jmp	.LBB302_27
.LBB302_15:                             # %if.end45
                                        #   in Loop: Header=BB302_1 Depth=1
	jmp	.LBB302_16
.LBB302_16:                             # %if.end46
                                        #   in Loop: Header=BB302_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB302_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB302_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB302_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB302_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB302_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB302_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB302_21:                             # %if.end81
	jmp	.LBB302_27
.LBB302_22:                             # %if.end82
                                        #   in Loop: Header=BB302_1 Depth=1
	jmp	.LBB302_23
.LBB302_23:                             # %if.end83
                                        #   in Loop: Header=BB302_1 Depth=1
	jmp	.LBB302_24
.LBB302_24:                             # %if.end84
                                        #   in Loop: Header=BB302_1 Depth=1
	jmp	.LBB302_25
.LBB302_25:                             # %for.inc
                                        #   in Loop: Header=BB302_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB302_1
.LBB302_26:                             # %for.end.loopexit
	jmp	.LBB302_27
.LBB302_27:                             # %for.end
	cmpl	$848612382, -16(%rbp)   # imm = 0x3294CC1E
	jne	.LBB302_29
.LBB302_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB302_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB302_28
.Lfunc_end302:
	.size	mm_unmark_short_term_for_reference.239, .Lfunc_end302-mm_unmark_short_term_for_reference.239
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.240     # -- Begin function dpb_split_field.240
	.p2align	4, 0x90
	.type	dpb_split_field.240,@function
dpb_split_field.240:                    # @dpb_split_field.240
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1670171290, -52(%rbp)  # imm = 0x638CCA9A
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB303_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB303_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB303_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB303_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_2
.LBB303_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB303_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB303_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB303_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_6
.LBB303_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB303_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB303_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB303_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_10
.LBB303_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB303_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB303_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB303_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_14
.LBB303_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB303_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB303_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB303_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB303_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB303_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_19
.LBB303_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB303_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB303_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB303_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB303_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_23
.LBB303_26:                             # %for.end328
	jmp	.LBB303_27
.LBB303_27:                             # %if.end
	jmp	.LBB303_29
.LBB303_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB303_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB303_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB303_30 Depth=1
	movl	$0, -4(%rbp)
.LBB303_32:                             # %for.cond343
                                        #   Parent Loop BB303_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB303_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB303_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB303_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB303_32 Depth=2
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB303_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB303_38
.LBB303_37:                             # %cond.false
                                        #   in Loop: Header=BB303_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_38
.LBB303_38:                             # %cond.end
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB303_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB303_41
.LBB303_40:                             # %cond.false415
                                        #   in Loop: Header=BB303_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_41
.LBB303_41:                             # %cond.end416
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB303_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB303_44
.LBB303_43:                             # %cond.false436
                                        #   in Loop: Header=BB303_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_44
.LBB303_44:                             # %cond.end437
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB303_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB303_47
.LBB303_46:                             # %cond.false456
                                        #   in Loop: Header=BB303_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_47
.LBB303_47:                             # %cond.end457
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB303_55
.LBB303_48:                             # %if.else466
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB303_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB303_51
.LBB303_50:                             # %cond.false491
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB303_51
.LBB303_51:                             # %cond.end492
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB303_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB303_54
.LBB303_53:                             # %cond.false509
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB303_54
.LBB303_54:                             # %cond.end510
                                        #   in Loop: Header=BB303_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB303_55:                             # %if.end519
                                        #   in Loop: Header=BB303_32 Depth=2
	jmp	.LBB303_56
.LBB303_56:                             # %for.inc520
                                        #   in Loop: Header=BB303_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_32
.LBB303_57:                             # %for.end522
                                        #   in Loop: Header=BB303_30 Depth=1
	jmp	.LBB303_58
.LBB303_58:                             # %for.inc523
                                        #   in Loop: Header=BB303_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_30
.LBB303_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB303_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB303_73
.LBB303_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB303_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB303_62 Depth=1
	movl	$0, -8(%rbp)
.LBB303_64:                             # %for.cond538
                                        #   Parent Loop BB303_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB303_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB303_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB303_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB303_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB303_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB303_68:                             # %if.end908
                                        #   in Loop: Header=BB303_64 Depth=2
	jmp	.LBB303_69
.LBB303_69:                             # %for.inc909
                                        #   in Loop: Header=BB303_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_64
.LBB303_70:                             # %for.end911
                                        #   in Loop: Header=BB303_62 Depth=1
	jmp	.LBB303_71
.LBB303_71:                             # %for.inc912
                                        #   in Loop: Header=BB303_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_62
.LBB303_72:                             # %for.end914
	jmp	.LBB303_73
.LBB303_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB303_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB303_74 Depth=1
	movl	$0, -8(%rbp)
.LBB303_76:                             # %for.cond923
                                        #   Parent Loop BB303_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB303_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB303_148
.LBB303_79:                             # %if.then954
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB303_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_83
.LBB303_82:                             # %cond.false991
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_83:                             # %cond.end993
                                        #   in Loop: Header=BB303_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_86
.LBB303_85:                             # %cond.false1001
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_86:                             # %cond.end1003
                                        #   in Loop: Header=BB303_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_89
.LBB303_88:                             # %cond.false1032
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_89:                             # %cond.end1034
                                        #   in Loop: Header=BB303_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_92
.LBB303_91:                             # %cond.false1042
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_92:                             # %cond.end1044
                                        #   in Loop: Header=BB303_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_95
.LBB303_94:                             # %cond.false1073
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_95:                             # %cond.end1075
                                        #   in Loop: Header=BB303_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_98
.LBB303_97:                             # %cond.false1083
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_98:                             # %cond.end1085
                                        #   in Loop: Header=BB303_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_101
.LBB303_100:                            # %cond.false1114
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_101:                            # %cond.end1116
                                        #   in Loop: Header=BB303_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_104
.LBB303_103:                            # %cond.false1124
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_104:                            # %cond.end1126
                                        #   in Loop: Header=BB303_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_107
.LBB303_106:                            # %cond.false1155
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_107:                            # %cond.end1157
                                        #   in Loop: Header=BB303_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_110
.LBB303_109:                            # %cond.false1165
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_110:                            # %cond.end1167
                                        #   in Loop: Header=BB303_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB303_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB303_125
.LBB303_112:                            # %if.else1190
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_115
.LBB303_114:                            # %cond.false1198
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_115:                            # %cond.end1200
                                        #   in Loop: Header=BB303_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_118
.LBB303_117:                            # %cond.false1208
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_118:                            # %cond.end1210
                                        #   in Loop: Header=BB303_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB303_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB303_121
.LBB303_120:                            # %cond.false1237
                                        #   in Loop: Header=BB303_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_121
.LBB303_121:                            # %cond.end1238
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB303_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB303_124
.LBB303_123:                            # %cond.false1254
                                        #   in Loop: Header=BB303_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_124
.LBB303_124:                            # %cond.end1255
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB303_125:                            # %if.end1264
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_128
.LBB303_127:                            # %cond.false1272
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_128:                            # %cond.end1274
                                        #   in Loop: Header=BB303_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_131
.LBB303_130:                            # %cond.false1282
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_131:                            # %cond.end1284
                                        #   in Loop: Header=BB303_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB303_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB303_146
.LBB303_133:                            # %if.else1307
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_136
.LBB303_135:                            # %cond.false1315
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_136:                            # %cond.end1317
                                        #   in Loop: Header=BB303_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_139
.LBB303_138:                            # %cond.false1325
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_139:                            # %cond.end1327
                                        #   in Loop: Header=BB303_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB303_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB303_142
.LBB303_141:                            # %cond.false1355
                                        #   in Loop: Header=BB303_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_142
.LBB303_142:                            # %cond.end1356
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB303_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB303_145
.LBB303_144:                            # %cond.false1373
                                        #   in Loop: Header=BB303_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_145
.LBB303_145:                            # %cond.end1374
                                        #   in Loop: Header=BB303_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB303_146:                            # %if.end1383
                                        #   in Loop: Header=BB303_76 Depth=2
	jmp	.LBB303_147
.LBB303_147:                            # %if.end1384
                                        #   in Loop: Header=BB303_76 Depth=2
	jmp	.LBB303_148
.LBB303_148:                            # %if.end1385
                                        #   in Loop: Header=BB303_76 Depth=2
	jmp	.LBB303_149
.LBB303_149:                            # %for.inc1386
                                        #   in Loop: Header=BB303_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_76
.LBB303_150:                            # %for.end1388
                                        #   in Loop: Header=BB303_74 Depth=1
	jmp	.LBB303_151
.LBB303_151:                            # %for.inc1389
                                        #   in Loop: Header=BB303_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_74
.LBB303_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB303_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB303_153 Depth=1
	movl	$0, -4(%rbp)
.LBB303_155:                            # %for.cond1399
                                        #   Parent Loop BB303_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB303_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB303_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_155
.LBB303_158:                            # %for.end1414
                                        #   in Loop: Header=BB303_153 Depth=1
	jmp	.LBB303_159
.LBB303_159:                            # %for.inc1415
                                        #   in Loop: Header=BB303_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_153
.LBB303_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB303_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB303_174
.LBB303_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB303_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB303_163 Depth=1
	movl	$0, -4(%rbp)
.LBB303_165:                            # %for.cond1431
                                        #   Parent Loop BB303_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB303_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB303_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB303_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB303_169
.LBB303_168:                            # %cond.false1462
                                        #   in Loop: Header=BB303_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_169
.LBB303_169:                            # %cond.end1463
                                        #   in Loop: Header=BB303_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB303_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_165
.LBB303_171:                            # %for.end1474
                                        #   in Loop: Header=BB303_163 Depth=1
	jmp	.LBB303_172
.LBB303_172:                            # %for.inc1475
                                        #   in Loop: Header=BB303_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_163
.LBB303_173:                            # %for.end1477
	jmp	.LBB303_174
.LBB303_174:                            # %if.end1478
	cmpl	$1670171290, -52(%rbp)  # imm = 0x638CCA9A
	jne	.LBB303_176
.LBB303_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB303_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB303_175
.Lfunc_end303:
	.size	dpb_split_field.240, .Lfunc_end303-dpb_split_field.240
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.241   # -- Begin function compute_colocated.241
	.p2align	4, 0x90
	.type	compute_colocated.241,@function
compute_colocated.241:                  # @compute_colocated.241
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1770006958, -72(%rbp)  # imm = 0x698029AE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB304_2
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB304_11
.LBB304_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB304_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB304_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB304_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB304_7
# %bb.6:                                # %if.then14
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB304_8
.LBB304_7:                              # %if.else17
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -48(%rbp)
.LBB304_8:                              # %if.end
	jmp	.LBB304_9
.LBB304_9:                              # %if.end20
	jmp	.LBB304_10
.LBB304_10:                             # %if.end21
	jmp	.LBB304_11
.LBB304_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB304_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB304_29
.LBB304_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB304_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB304_14 Depth=1
	movl	$0, -16(%rbp)
.LBB304_16:                             # %for.cond27
                                        #   Parent Loop BB304_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB304_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB304_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB304_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB304_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB304_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB304_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB304_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB304_22
.LBB304_21:                             # %if.else160
                                        #   in Loop: Header=BB304_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB304_22:                             # %if.end283
                                        #   in Loop: Header=BB304_16 Depth=2
	jmp	.LBB304_24
.LBB304_23:                             # %if.else284
                                        #   in Loop: Header=BB304_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB304_24:                             # %if.end391
                                        #   in Loop: Header=BB304_16 Depth=2
	jmp	.LBB304_25
.LBB304_25:                             # %for.inc
                                        #   in Loop: Header=BB304_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB304_16
.LBB304_26:                             # %for.end
                                        #   in Loop: Header=BB304_14 Depth=1
	jmp	.LBB304_27
.LBB304_27:                             # %for.inc392
                                        #   in Loop: Header=BB304_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB304_14
.LBB304_28:                             # %for.end394
	jmp	.LBB304_29
.LBB304_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB304_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB304_241
.LBB304_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB304_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB304_32 Depth=1
	movl	$0, -12(%rbp)
.LBB304_34:                             # %for.cond408
                                        #   Parent Loop BB304_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB304_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_39
.LBB304_38:                             # %cond.false
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_39:                             # %cond.end
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_42
.LBB304_41:                             # %cond.false427
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_42:                             # %cond.end429
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_45
.LBB304_44:                             # %cond.false447
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_45:                             # %cond.end449
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_48
.LBB304_47:                             # %cond.false457
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_48:                             # %cond.end459
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_51
.LBB304_50:                             # %cond.false477
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_51:                             # %cond.end479
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_54
.LBB304_53:                             # %cond.false487
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_54:                             # %cond.end489
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_57
.LBB304_56:                             # %cond.false507
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_57:                             # %cond.end509
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_60
.LBB304_59:                             # %cond.false517
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_60:                             # %cond.end519
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_63
.LBB304_62:                             # %cond.false537
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_63:                             # %cond.end539
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_66
.LBB304_65:                             # %cond.false547
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_66:                             # %cond.end549
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB304_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB304_81
.LBB304_68:                             # %if.else569
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_71
.LBB304_70:                             # %cond.false576
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_71:                             # %cond.end578
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_74
.LBB304_73:                             # %cond.false586
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_74:                             # %cond.end588
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_77
.LBB304_76:                             # %cond.false604
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_77:                             # %cond.end606
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_80
.LBB304_79:                             # %cond.false614
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_80:                             # %cond.end616
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB304_81:                             # %if.end626
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_84
.LBB304_83:                             # %cond.false633
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_84:                             # %cond.end635
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_87
.LBB304_86:                             # %cond.false643
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_87:                             # %cond.end645
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB304_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB304_102
.LBB304_89:                             # %if.else665
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_92
.LBB304_91:                             # %cond.false672
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_92:                             # %cond.end674
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_95
.LBB304_94:                             # %cond.false682
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_95:                             # %cond.end684
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_98
.LBB304_97:                             # %cond.false700
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_98:                             # %cond.end702
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_101
.LBB304_100:                            # %cond.false710
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_101:                            # %cond.end712
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB304_102:                            # %if.end722
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB304_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB304_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB304_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB304_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB304_112
.LBB304_107:                            # %lor.rhs
                                        #   in Loop: Header=BB304_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB304_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB304_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB304_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB304_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB304_111:                            # %land.end
                                        #   in Loop: Header=BB304_34 Depth=2
.LBB304_112:                            # %lor.end
                                        #   in Loop: Header=BB304_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB304_113:                            # %if.end814
                                        #   in Loop: Header=BB304_34 Depth=2
	jmp	.LBB304_236
.LBB304_114:                            # %if.else815
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_117
.LBB304_116:                            # %cond.false822
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_117:                            # %cond.end824
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_120
.LBB304_119:                            # %cond.false832
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_120:                            # %cond.end834
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_123
.LBB304_122:                            # %cond.false851
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_123:                            # %cond.end853
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_126
.LBB304_125:                            # %cond.false861
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_126:                            # %cond.end863
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_129
.LBB304_128:                            # %cond.false881
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_129:                            # %cond.end883
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_132
.LBB304_131:                            # %cond.false891
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_132:                            # %cond.end893
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_135
.LBB304_134:                            # %cond.false911
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_135:                            # %cond.end913
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_138
.LBB304_137:                            # %cond.false921
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_138:                            # %cond.end923
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_141
.LBB304_140:                            # %cond.false941
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_141:                            # %cond.end943
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_144
.LBB304_143:                            # %cond.false951
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_144:                            # %cond.end953
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_147
.LBB304_146:                            # %cond.false968
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_147:                            # %cond.end970
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_150
.LBB304_149:                            # %cond.false978
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_150:                            # %cond.end980
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_153
.LBB304_152:                            # %cond.false996
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_153:                            # %cond.end998
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_156
.LBB304_155:                            # %cond.false1006
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_156:                            # %cond.end1008
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_159
.LBB304_158:                            # %cond.false1023
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_159:                            # %cond.end1025
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_162
.LBB304_161:                            # %cond.false1033
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_162:                            # %cond.end1035
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB304_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB304_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB304_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB304_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB304_172
.LBB304_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB304_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB304_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB304_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB304_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB304_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB304_171:                            # %land.end1133
                                        #   in Loop: Header=BB304_34 Depth=2
.LBB304_172:                            # %lor.end1134
                                        #   in Loop: Header=BB304_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB304_173:                            # %if.end1142
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_176
.LBB304_175:                            # %cond.false1149
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_176:                            # %cond.end1151
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_179
.LBB304_178:                            # %cond.false1159
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_179:                            # %cond.end1161
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_182
.LBB304_181:                            # %cond.false1178
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_182:                            # %cond.end1180
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_185
.LBB304_184:                            # %cond.false1188
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_185:                            # %cond.end1190
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_188
.LBB304_187:                            # %cond.false1208
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_188:                            # %cond.end1210
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_191
.LBB304_190:                            # %cond.false1218
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_191:                            # %cond.end1220
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_194
.LBB304_193:                            # %cond.false1238
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_194:                            # %cond.end1240
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_197
.LBB304_196:                            # %cond.false1248
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_197:                            # %cond.end1250
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_200
.LBB304_199:                            # %cond.false1268
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_200:                            # %cond.end1270
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_203
.LBB304_202:                            # %cond.false1278
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_203:                            # %cond.end1280
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_206
.LBB304_205:                            # %cond.false1295
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_206:                            # %cond.end1297
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_209
.LBB304_208:                            # %cond.false1305
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_209:                            # %cond.end1307
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_212
.LBB304_211:                            # %cond.false1323
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_212:                            # %cond.end1325
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_215
.LBB304_214:                            # %cond.false1333
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_215:                            # %cond.end1335
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_218
.LBB304_217:                            # %cond.false1350
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_218:                            # %cond.end1352
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_221
.LBB304_220:                            # %cond.false1360
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_221:                            # %cond.end1362
                                        #   in Loop: Header=BB304_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB304_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB304_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB304_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB304_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB304_231
.LBB304_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB304_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB304_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB304_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB304_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB304_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB304_230:                            # %land.end1460
                                        #   in Loop: Header=BB304_34 Depth=2
.LBB304_231:                            # %lor.end1461
                                        #   in Loop: Header=BB304_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB304_232:                            # %if.end1469
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB304_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB304_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB304_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB304_235:                            # %if.end1522
                                        #   in Loop: Header=BB304_34 Depth=2
	jmp	.LBB304_236
.LBB304_236:                            # %if.end1523
                                        #   in Loop: Header=BB304_34 Depth=2
	jmp	.LBB304_237
.LBB304_237:                            # %for.inc1524
                                        #   in Loop: Header=BB304_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB304_34
.LBB304_238:                            # %for.end1526
                                        #   in Loop: Header=BB304_32 Depth=1
	jmp	.LBB304_239
.LBB304_239:                            # %for.inc1527
                                        #   in Loop: Header=BB304_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB304_32
.LBB304_240:                            # %for.end1529
	jmp	.LBB304_241
.LBB304_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB304_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB304_259
.LBB304_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB304_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB304_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB304_245 Depth=1
	movl	$0, -16(%rbp)
.LBB304_247:                            # %for.cond1546
                                        #   Parent Loop BB304_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB304_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB304_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB304_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB304_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB304_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB304_252
.LBB304_251:                            # %if.else1699
                                        #   in Loop: Header=BB304_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB304_252:                            # %if.end1829
                                        #   in Loop: Header=BB304_247 Depth=2
	jmp	.LBB304_253
.LBB304_253:                            # %if.end1830
                                        #   in Loop: Header=BB304_247 Depth=2
	jmp	.LBB304_254
.LBB304_254:                            # %for.inc1831
                                        #   in Loop: Header=BB304_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB304_247
.LBB304_255:                            # %for.end1833
                                        #   in Loop: Header=BB304_245 Depth=1
	jmp	.LBB304_256
.LBB304_256:                            # %for.inc1834
                                        #   in Loop: Header=BB304_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB304_245
.LBB304_257:                            # %for.end1836
	jmp	.LBB304_258
.LBB304_258:                            # %if.end1837
	jmp	.LBB304_259
.LBB304_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB304_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB304_260 Depth=1
	movl	$0, -16(%rbp)
.LBB304_262:                            # %for.cond1845
                                        #   Parent Loop BB304_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB304_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB304_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB304_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB304_314
.LBB304_265:                            # %if.then1856
                                        #   in Loop: Header=BB304_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_268
.LBB304_267:                            # %cond.false1863
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_268:                            # %cond.end1865
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_271
.LBB304_270:                            # %cond.false1873
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_271:                            # %cond.end1875
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_274
.LBB304_273:                            # %cond.false1893
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_274:                            # %cond.end1895
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_277
.LBB304_276:                            # %cond.false1903
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_277:                            # %cond.end1905
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_280
.LBB304_279:                            # %cond.false1923
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_280:                            # %cond.end1925
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_283
.LBB304_282:                            # %cond.false1933
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_283:                            # %cond.end1935
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_286
.LBB304_285:                            # %cond.false1953
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_286:                            # %cond.end1955
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_289
.LBB304_288:                            # %cond.false1963
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_289:                            # %cond.end1965
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_292
.LBB304_291:                            # %cond.false1983
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_292:                            # %cond.end1985
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_295
.LBB304_294:                            # %cond.false1993
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_295:                            # %cond.end1995
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_298
.LBB304_297:                            # %cond.false2011
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_298:                            # %cond.end2013
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_301
.LBB304_300:                            # %cond.false2021
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_301:                            # %cond.end2023
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_304
.LBB304_303:                            # %cond.false2039
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_304:                            # %cond.end2041
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_307
.LBB304_306:                            # %cond.false2049
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_307:                            # %cond.end2051
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_310
.LBB304_309:                            # %cond.false2067
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_310:                            # %cond.end2069
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB304_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB304_313
.LBB304_312:                            # %cond.false2077
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB304_313:                            # %cond.end2079
                                        #   in Loop: Header=BB304_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB304_315
.LBB304_314:                            # %if.else2089
                                        #   in Loop: Header=BB304_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB304_315:                            # %if.end2194
                                        #   in Loop: Header=BB304_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB304_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB304_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB304_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB304_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB304_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB304_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB304_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB304_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB304_325
.LBB304_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB304_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB304_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB304_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB304_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB304_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB304_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB304_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB304_324:                            # %land.end2285
                                        #   in Loop: Header=BB304_262 Depth=2
.LBB304_325:                            # %lor.end2286
                                        #   in Loop: Header=BB304_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB304_326:                            # %if.end2295
                                        #   in Loop: Header=BB304_262 Depth=2
	jmp	.LBB304_327
.LBB304_327:                            # %for.inc2296
                                        #   in Loop: Header=BB304_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB304_262
.LBB304_328:                            # %for.end2298
                                        #   in Loop: Header=BB304_260 Depth=1
	jmp	.LBB304_329
.LBB304_329:                            # %for.inc2299
                                        #   in Loop: Header=BB304_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB304_260
.LBB304_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB304_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB304_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB304_332 Depth=1
	movl	$0, -16(%rbp)
.LBB304_334:                            # %for.cond2312
                                        #   Parent Loop BB304_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB304_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB304_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB304_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB304_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB304_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB304_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB304_340
.LBB304_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB304_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB304_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB304_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB304_341
.LBB304_340:                            # %if.then2342
                                        #   in Loop: Header=BB304_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB304_345
.LBB304_341:                            # %if.else2363
                                        #   in Loop: Header=BB304_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB304_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB304_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB304_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB304_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB304_344:                            # %if.end2394
                                        #   in Loop: Header=BB304_334 Depth=2
	jmp	.LBB304_345
.LBB304_345:                            # %if.end2395
                                        #   in Loop: Header=BB304_334 Depth=2
	jmp	.LBB304_346
.LBB304_346:                            # %for.inc2396
                                        #   in Loop: Header=BB304_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB304_334
.LBB304_347:                            # %for.end2398
                                        #   in Loop: Header=BB304_332 Depth=1
	jmp	.LBB304_348
.LBB304_348:                            # %for.inc2399
                                        #   in Loop: Header=BB304_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB304_332
.LBB304_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB304_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB304_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB304_350 Depth=1
	movl	$0, -16(%rbp)
.LBB304_352:                            # %for.cond2409
                                        #   Parent Loop BB304_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB304_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB304_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB304_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB304_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB304_360
.LBB304_356:                            # %cond.false2429
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB304_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	$127, %eax
	jmp	.LBB304_359
.LBB304_358:                            # %cond.false2441
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB304_359:                            # %cond.end2450
                                        #   in Loop: Header=BB304_352 Depth=2
.LBB304_360:                            # %cond.end2452
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB304_377
.LBB304_361:                            # %if.else2454
                                        #   in Loop: Header=BB304_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB304_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB304_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB304_368
.LBB304_364:                            # %cond.false2468
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB304_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	$127, %eax
	jmp	.LBB304_367
.LBB304_366:                            # %cond.false2480
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB304_367:                            # %cond.end2489
                                        #   in Loop: Header=BB304_352 Depth=2
.LBB304_368:                            # %cond.end2491
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB304_376
.LBB304_369:                            # %if.else2493
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB304_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB304_375
.LBB304_371:                            # %cond.false2504
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB304_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	$127, %eax
	jmp	.LBB304_374
.LBB304_373:                            # %cond.false2516
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB304_374:                            # %cond.end2525
                                        #   in Loop: Header=BB304_352 Depth=2
.LBB304_375:                            # %cond.end2527
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB304_376:                            # %if.end2529
                                        #   in Loop: Header=BB304_352 Depth=2
	jmp	.LBB304_377
.LBB304_377:                            # %if.end2530
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB304_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB304_383
.LBB304_379:                            # %cond.false2546
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB304_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	$127, %eax
	jmp	.LBB304_382
.LBB304_381:                            # %cond.false2562
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB304_382:                            # %cond.end2575
                                        #   in Loop: Header=BB304_352 Depth=2
.LBB304_383:                            # %cond.end2577
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB304_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB304_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB304_390
.LBB304_386:                            # %cond.false2592
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB304_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB304_389
.LBB304_388:                            # %cond.false2599
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB304_389:                            # %cond.end2603
                                        #   in Loop: Header=BB304_352 Depth=2
.LBB304_390:                            # %cond.end2605
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB304_392
.LBB304_391:                            # %if.else2611
                                        #   in Loop: Header=BB304_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB304_392:                            # %if.end2617
                                        #   in Loop: Header=BB304_352 Depth=2
	jmp	.LBB304_393
.LBB304_393:                            # %for.inc2618
                                        #   in Loop: Header=BB304_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB304_352
.LBB304_394:                            # %for.end2620
                                        #   in Loop: Header=BB304_350 Depth=1
	jmp	.LBB304_395
.LBB304_395:                            # %for.inc2621
                                        #   in Loop: Header=BB304_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB304_350
.LBB304_396:                            # %for.end2623
	jmp	.LBB304_397
.LBB304_397:                            # %if.end2624
	cmpl	$1770006958, -72(%rbp)  # imm = 0x698029AE
	jne	.LBB304_399
.LBB304_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB304_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB304_398
.Lfunc_end304:
	.size	compute_colocated.241, .Lfunc_end304-compute_colocated.241
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.242     # -- Begin function alloc_colocated.242
	.p2align	4, 0x90
	.type	alloc_colocated.242,@function
alloc_colocated.242:                    # @alloc_colocated.242
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$513983142, -32(%rbp)   # imm = 0x1EA2C2A6
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB305_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB305_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB305_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB305_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$513983142, -32(%rbp)   # imm = 0x1EA2C2A6
	jne	.LBB305_6
.LBB305_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB305_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB305_5
.Lfunc_end305:
	.size	alloc_colocated.242, .Lfunc_end305-alloc_colocated.242
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.243
	.type	compare_fs_by_poc_desc.243,@function
compare_fs_by_poc_desc.243:             # @compare_fs_by_poc_desc.243
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$494495886, -16(%rbp)   # imm = 0x1D79688E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB306_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB306_5
.LBB306_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB306_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB306_5
.LBB306_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB306_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$494495886, -16(%rbp)   # imm = 0x1D79688E
	jne	.LBB306_7
.LBB306_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB306_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB306_6
.Lfunc_end306:
	.size	compare_fs_by_poc_desc.243, .Lfunc_end306-compare_fs_by_poc_desc.243
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.244     # -- Begin function alloc_colocated.244
	.p2align	4, 0x90
	.type	alloc_colocated.244,@function
alloc_colocated.244:                    # @alloc_colocated.244
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$441262176, -32(%rbp)   # imm = 0x1A4D2060
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB307_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB307_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB307_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB307_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$441262176, -32(%rbp)   # imm = 0x1A4D2060
	jne	.LBB307_6
.LBB307_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB307_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB307_5
.Lfunc_end307:
	.size	alloc_colocated.244, .Lfunc_end307-alloc_colocated.244
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.245
	.type	mm_unmark_short_term_for_reference.245,@function
mm_unmark_short_term_for_reference.245: # @mm_unmark_short_term_for_reference.245
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2102119238, -16(%rbp)  # imm = 0x7D4BCB46
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB308_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB308_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB308_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB308_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB308_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB308_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB308_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB308_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB308_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB308_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB308_27
.LBB308_7:                              # %if.end
                                        #   in Loop: Header=BB308_1 Depth=1
	jmp	.LBB308_8
.LBB308_8:                              # %if.end13
                                        #   in Loop: Header=BB308_1 Depth=1
	jmp	.LBB308_24
.LBB308_9:                              # %if.else
                                        #   in Loop: Header=BB308_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB308_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB308_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB308_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB308_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB308_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB308_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB308_14:                             # %if.end44
	jmp	.LBB308_27
.LBB308_15:                             # %if.end45
                                        #   in Loop: Header=BB308_1 Depth=1
	jmp	.LBB308_16
.LBB308_16:                             # %if.end46
                                        #   in Loop: Header=BB308_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB308_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB308_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB308_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB308_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB308_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB308_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB308_21:                             # %if.end81
	jmp	.LBB308_27
.LBB308_22:                             # %if.end82
                                        #   in Loop: Header=BB308_1 Depth=1
	jmp	.LBB308_23
.LBB308_23:                             # %if.end83
                                        #   in Loop: Header=BB308_1 Depth=1
	jmp	.LBB308_24
.LBB308_24:                             # %if.end84
                                        #   in Loop: Header=BB308_1 Depth=1
	jmp	.LBB308_25
.LBB308_25:                             # %for.inc
                                        #   in Loop: Header=BB308_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB308_1
.LBB308_26:                             # %for.end.loopexit
	jmp	.LBB308_27
.LBB308_27:                             # %for.end
	cmpl	$2102119238, -16(%rbp)  # imm = 0x7D4BCB46
	jne	.LBB308_29
.LBB308_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB308_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB308_28
.Lfunc_end308:
	.size	mm_unmark_short_term_for_reference.245, .Lfunc_end308-mm_unmark_short_term_for_reference.245
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.246
	.type	compare_fs_by_poc_asc.246,@function
compare_fs_by_poc_asc.246:              # @compare_fs_by_poc_asc.246
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1770102997, -16(%rbp)  # imm = 0x6981A0D5
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB309_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB309_5
.LBB309_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB309_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB309_5
.LBB309_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB309_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1770102997, -16(%rbp)  # imm = 0x6981A0D5
	jne	.LBB309_7
.LBB309_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB309_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB309_6
.Lfunc_end309:
	.size	compare_fs_by_poc_asc.246, .Lfunc_end309-compare_fs_by_poc_asc.246
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.247
	.type	compare_pic_by_pic_num_desc.247,@function
compare_pic_by_pic_num_desc.247:        # @compare_pic_by_pic_num_desc.247
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$849069043, -16(%rbp)   # imm = 0x329BC3F3
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB310_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB310_5
.LBB310_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB310_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB310_5
.LBB310_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB310_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$849069043, -16(%rbp)   # imm = 0x329BC3F3
	jne	.LBB310_7
.LBB310_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB310_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB310_6
.Lfunc_end310:
	.size	compare_pic_by_pic_num_desc.247, .Lfunc_end310-compare_pic_by_pic_num_desc.247
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.248
	.type	gen_pic_list_from_frame_list.248,@function
gen_pic_list_from_frame_list.248:       # @gen_pic_list_from_frame_list.248
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$128253346, -64(%rbp)   # imm = 0x7A4FDA2
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB311_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB311_3
.LBB311_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB311_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB311_28
# %bb.4:                                # %if.then1
	jmp	.LBB311_5
.LBB311_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB311_9 Depth 2
                                        #     Child Loop BB311_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB311_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB311_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB311_7:                              # %lor.end
                                        #   in Loop: Header=BB311_5 Depth=1
	testb	$1, %al
	jne	.LBB311_8
	jmp	.LBB311_27
.LBB311_8:                              # %while.body
                                        #   in Loop: Header=BB311_5 Depth=1
	jmp	.LBB311_9
.LBB311_9:                              # %for.cond
                                        #   Parent Loop BB311_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB311_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB311_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB311_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB311_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB311_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB311_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB311_17
.LBB311_13:                             # %if.end17
                                        #   in Loop: Header=BB311_9 Depth=2
	jmp	.LBB311_14
.LBB311_14:                             # %if.end18
                                        #   in Loop: Header=BB311_9 Depth=2
	jmp	.LBB311_15
.LBB311_15:                             # %for.inc
                                        #   in Loop: Header=BB311_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB311_9
.LBB311_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB311_5 Depth=1
	jmp	.LBB311_17
.LBB311_17:                             # %for.end
                                        #   in Loop: Header=BB311_5 Depth=1
	jmp	.LBB311_18
.LBB311_18:                             # %for.cond20
                                        #   Parent Loop BB311_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB311_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB311_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB311_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB311_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB311_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB311_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB311_26
.LBB311_22:                             # %if.end41
                                        #   in Loop: Header=BB311_18 Depth=2
	jmp	.LBB311_23
.LBB311_23:                             # %if.end42
                                        #   in Loop: Header=BB311_18 Depth=2
	jmp	.LBB311_24
.LBB311_24:                             # %for.inc43
                                        #   in Loop: Header=BB311_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB311_18
.LBB311_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB311_5 Depth=1
	jmp	.LBB311_26
.LBB311_26:                             # %for.end45
                                        #   in Loop: Header=BB311_5 Depth=1
	jmp	.LBB311_5
.LBB311_27:                             # %while.end
	jmp	.LBB311_28
.LBB311_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB311_53
# %bb.29:                               # %if.then48
	jmp	.LBB311_30
.LBB311_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB311_34 Depth 2
                                        #     Child Loop BB311_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB311_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB311_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB311_32:                             # %lor.end53
                                        #   in Loop: Header=BB311_30 Depth=1
	testb	$1, %al
	jne	.LBB311_33
	jmp	.LBB311_52
.LBB311_33:                             # %while.body54
                                        #   in Loop: Header=BB311_30 Depth=1
	jmp	.LBB311_34
.LBB311_34:                             # %for.cond55
                                        #   Parent Loop BB311_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB311_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB311_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB311_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB311_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB311_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB311_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB311_42
.LBB311_38:                             # %if.end77
                                        #   in Loop: Header=BB311_34 Depth=2
	jmp	.LBB311_39
.LBB311_39:                             # %if.end78
                                        #   in Loop: Header=BB311_34 Depth=2
	jmp	.LBB311_40
.LBB311_40:                             # %for.inc79
                                        #   in Loop: Header=BB311_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB311_34
.LBB311_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB311_30 Depth=1
	jmp	.LBB311_42
.LBB311_42:                             # %for.end81
                                        #   in Loop: Header=BB311_30 Depth=1
	jmp	.LBB311_43
.LBB311_43:                             # %for.cond82
                                        #   Parent Loop BB311_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB311_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB311_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB311_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB311_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB311_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB311_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB311_51
.LBB311_47:                             # %if.end104
                                        #   in Loop: Header=BB311_43 Depth=2
	jmp	.LBB311_48
.LBB311_48:                             # %if.end105
                                        #   in Loop: Header=BB311_43 Depth=2
	jmp	.LBB311_49
.LBB311_49:                             # %for.inc106
                                        #   in Loop: Header=BB311_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB311_43
.LBB311_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB311_30 Depth=1
	jmp	.LBB311_51
.LBB311_51:                             # %for.end108
                                        #   in Loop: Header=BB311_30 Depth=1
	jmp	.LBB311_30
.LBB311_52:                             # %while.end109
	jmp	.LBB311_53
.LBB311_53:                             # %if.end110
	cmpl	$128253346, -64(%rbp)   # imm = 0x7A4FDA2
	jne	.LBB311_55
.LBB311_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB311_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB311_54
.Lfunc_end311:
	.size	gen_pic_list_from_frame_list.248, .Lfunc_end311-gen_pic_list_from_frame_list.248
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.249     # -- Begin function alloc_colocated.249
	.p2align	4, 0x90
	.type	alloc_colocated.249,@function
alloc_colocated.249:                    # @alloc_colocated.249
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1278378675, -32(%rbp)  # imm = 0x4C3282B3
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB312_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB312_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB312_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB312_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1278378675, -32(%rbp)  # imm = 0x4C3282B3
	jne	.LBB312_6
.LBB312_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB312_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB312_5
.Lfunc_end312:
	.size	alloc_colocated.249, .Lfunc_end312-alloc_colocated.249
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.250
	.type	mm_assign_long_term_frame_idx.250,@function
mm_assign_long_term_frame_idx.250:      # @mm_assign_long_term_frame_idx.250
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2122183624, -28(%rbp)  # imm = 0x7E7DF3C8
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB313_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB313_18
.LBB313_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB313_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB313_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB313_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB313_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB313_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB313_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB313_15
.LBB313_7:                              # %if.end
                                        #   in Loop: Header=BB313_3 Depth=1
	jmp	.LBB313_8
.LBB313_8:                              # %if.end8
                                        #   in Loop: Header=BB313_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB313_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB313_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB313_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB313_15
.LBB313_11:                             # %if.end20
                                        #   in Loop: Header=BB313_3 Depth=1
	jmp	.LBB313_12
.LBB313_12:                             # %if.end21
                                        #   in Loop: Header=BB313_3 Depth=1
	jmp	.LBB313_13
.LBB313_13:                             # %for.inc
                                        #   in Loop: Header=BB313_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB313_3
.LBB313_14:                             # %for.end.loopexit
	jmp	.LBB313_15
.LBB313_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB313_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB313_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB313_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$2122183624, -28(%rbp)  # imm = 0x7E7DF3C8
	jne	.LBB313_20
.LBB313_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB313_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB313_19
.Lfunc_end313:
	.size	mm_assign_long_term_frame_idx.250, .Lfunc_end313-mm_assign_long_term_frame_idx.250
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.251
	.type	reorder_long_term.251,@function
reorder_long_term.251:                  # @reorder_long_term.251
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$193150159, -44(%rbp)   # imm = 0xB833CCF
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB314_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB314_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB314_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB314_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_1
.LBB314_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB314_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB314_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB314_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB314_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB314_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB314_9
.LBB314_8:                              # %if.then
                                        #   in Loop: Header=BB314_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB314_9:                              # %if.end
                                        #   in Loop: Header=BB314_5 Depth=1
	jmp	.LBB314_10
.LBB314_10:                             # %for.inc19
                                        #   in Loop: Header=BB314_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_5
.LBB314_11:                             # %for.end21
	cmpl	$193150159, -44(%rbp)   # imm = 0xB833CCF
	jne	.LBB314_13
.LBB314_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB314_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB314_12
.Lfunc_end314:
	.size	reorder_long_term.251, .Lfunc_end314-reorder_long_term.251
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.252  # -- Begin function fill_frame_num_gap.252
	.p2align	4, 0x90
	.type	fill_frame_num_gap.252,@function
fill_frame_num_gap.252:                 # @fill_frame_num_gap.252
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$309306901, -40(%rbp)   # imm = 0x126FA615
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -36(%rbp)
.LBB315_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB315_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB315_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB315_1
.LBB315_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$309306901, -40(%rbp)   # imm = 0x126FA615
	jne	.LBB315_5
.LBB315_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB315_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB315_4
.Lfunc_end315:
	.size	fill_frame_num_gap.252, .Lfunc_end315-fill_frame_num_gap.252
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.253
	.type	mm_assign_long_term_frame_idx.253,@function
mm_assign_long_term_frame_idx.253:      # @mm_assign_long_term_frame_idx.253
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$288378858, -28(%rbp)   # imm = 0x11304FEA
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB316_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB316_18
.LBB316_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB316_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB316_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB316_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB316_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB316_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB316_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB316_15
.LBB316_7:                              # %if.end
                                        #   in Loop: Header=BB316_3 Depth=1
	jmp	.LBB316_8
.LBB316_8:                              # %if.end8
                                        #   in Loop: Header=BB316_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB316_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB316_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB316_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB316_15
.LBB316_11:                             # %if.end20
                                        #   in Loop: Header=BB316_3 Depth=1
	jmp	.LBB316_12
.LBB316_12:                             # %if.end21
                                        #   in Loop: Header=BB316_3 Depth=1
	jmp	.LBB316_13
.LBB316_13:                             # %for.inc
                                        #   in Loop: Header=BB316_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB316_3
.LBB316_14:                             # %for.end.loopexit
	jmp	.LBB316_15
.LBB316_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB316_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB316_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB316_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$288378858, -28(%rbp)   # imm = 0x11304FEA
	jne	.LBB316_20
.LBB316_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB316_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB316_19
.Lfunc_end316:
	.size	mm_assign_long_term_frame_idx.253, .Lfunc_end316-mm_assign_long_term_frame_idx.253
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.254
	.type	unmark_long_term_field_for_reference_by_frame_idx.254,@function
unmark_long_term_field_for_reference_by_frame_idx.254: # @unmark_long_term_field_for_reference_by_frame_idx.254
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1978461581, -24(%rbp)  # imm = 0x75ECED8D
	movl	%edi, -12(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB317_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB317_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB317_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB317_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB317_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB317_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB317_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB317_23
.LBB317_8:                              # %if.else
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB317_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB317_22
.LBB317_10:                             # %if.else21
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB317_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB317_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB317_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB317_15
.LBB317_14:                             # %if.then29
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_15:                             # %if.end32
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_17
.LBB317_16:                             # %if.else33
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_17:                             # %if.end36
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_21
.LBB317_18:                             # %if.else37
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB317_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_20:                             # %if.end45
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_21
.LBB317_21:                             # %if.end46
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_22
.LBB317_22:                             # %if.end47
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_23
.LBB317_23:                             # %if.end48
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_24
.LBB317_24:                             # %if.end49
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB317_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB317_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB317_42
.LBB317_27:                             # %if.else59
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB317_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB317_41
.LBB317_29:                             # %if.else67
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB317_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB317_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB317_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB317_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB317_34
.LBB317_33:                             # %if.then78
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_34:                             # %if.end81
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_36
.LBB317_35:                             # %if.else82
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_36:                             # %if.end85
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_40
.LBB317_37:                             # %if.else86
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB317_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB317_39:                             # %if.end95
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_40
.LBB317_40:                             # %if.end96
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_41
.LBB317_41:                             # %if.end97
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_42
.LBB317_42:                             # %if.end98
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_43
.LBB317_43:                             # %if.end99
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_44
.LBB317_44:                             # %if.end100
                                        #   in Loop: Header=BB317_3 Depth=1
	jmp	.LBB317_45
.LBB317_45:                             # %for.inc
                                        #   in Loop: Header=BB317_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_3
.LBB317_46:                             # %for.end
	cmpl	$1978461581, -24(%rbp)  # imm = 0x75ECED8D
	jne	.LBB317_48
.LBB317_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB317_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB317_47
.Lfunc_end317:
	.size	unmark_long_term_field_for_reference_by_frame_idx.254, .Lfunc_end317-unmark_long_term_field_for_reference_by_frame_idx.254
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.255
	.type	reorder_long_term.255,@function
reorder_long_term.255:                  # @reorder_long_term.255
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$216599287, -44(%rbp)   # imm = 0xCE90AF7
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB318_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB318_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB318_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB318_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB318_1
.LBB318_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB318_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB318_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB318_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB318_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB318_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB318_9
.LBB318_8:                              # %if.then
                                        #   in Loop: Header=BB318_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB318_9:                              # %if.end
                                        #   in Loop: Header=BB318_5 Depth=1
	jmp	.LBB318_10
.LBB318_10:                             # %for.inc19
                                        #   in Loop: Header=BB318_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB318_5
.LBB318_11:                             # %for.end21
	cmpl	$216599287, -44(%rbp)   # imm = 0xCE90AF7
	jne	.LBB318_13
.LBB318_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB318_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB318_12
.Lfunc_end318:
	.size	reorder_long_term.255, .Lfunc_end318-reorder_long_term.255
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.256
	.type	unmark_long_term_field_for_reference_by_frame_idx.256,@function
unmark_long_term_field_for_reference_by_frame_idx.256: # @unmark_long_term_field_for_reference_by_frame_idx.256
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$884642608, -28(%rbp)   # imm = 0x34BA9330
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB319_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB319_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB319_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB319_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB319_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB319_3 Depth=1
	cmpl	$1, -20(%rbp)
	jne	.LBB319_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB319_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB319_23
.LBB319_8:                              # %if.else
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB319_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB319_22
.LBB319_10:                             # %if.else21
                                        #   in Loop: Header=BB319_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB319_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB319_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB319_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB319_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB319_15
.LBB319_14:                             # %if.then29
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB319_15:                             # %if.end32
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_17
.LBB319_16:                             # %if.else33
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB319_17:                             # %if.end36
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_21
.LBB319_18:                             # %if.else37
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB319_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB319_20:                             # %if.end45
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_21
.LBB319_21:                             # %if.end46
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_22
.LBB319_22:                             # %if.end47
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_23
.LBB319_23:                             # %if.end48
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_24
.LBB319_24:                             # %if.end49
                                        #   in Loop: Header=BB319_3 Depth=1
	cmpl	$2, -20(%rbp)
	jne	.LBB319_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB319_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB319_42
.LBB319_27:                             # %if.else59
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB319_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB319_41
.LBB319_29:                             # %if.else67
                                        #   in Loop: Header=BB319_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB319_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB319_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB319_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB319_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB319_34
.LBB319_33:                             # %if.then78
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB319_34:                             # %if.end81
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_36
.LBB319_35:                             # %if.else82
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB319_36:                             # %if.end85
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_40
.LBB319_37:                             # %if.else86
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB319_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB319_39:                             # %if.end95
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_40
.LBB319_40:                             # %if.end96
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_41
.LBB319_41:                             # %if.end97
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_42
.LBB319_42:                             # %if.end98
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_43
.LBB319_43:                             # %if.end99
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_44
.LBB319_44:                             # %if.end100
                                        #   in Loop: Header=BB319_3 Depth=1
	jmp	.LBB319_45
.LBB319_45:                             # %for.inc
                                        #   in Loop: Header=BB319_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_3
.LBB319_46:                             # %for.end
	cmpl	$884642608, -28(%rbp)   # imm = 0x34BA9330
	jne	.LBB319_48
.LBB319_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB319_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB319_47
.Lfunc_end319:
	.size	unmark_long_term_field_for_reference_by_frame_idx.256, .Lfunc_end319-unmark_long_term_field_for_reference_by_frame_idx.256
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.257
	.type	reorder_long_term.257,@function
reorder_long_term.257:                  # @reorder_long_term.257
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2083720093, -44(%rbp)  # imm = 0x7C330B9D
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB320_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB320_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB320_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB320_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_1
.LBB320_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB320_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB320_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB320_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB320_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB320_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB320_9
.LBB320_8:                              # %if.then
                                        #   in Loop: Header=BB320_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB320_9:                              # %if.end
                                        #   in Loop: Header=BB320_5 Depth=1
	jmp	.LBB320_10
.LBB320_10:                             # %for.inc19
                                        #   in Loop: Header=BB320_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_5
.LBB320_11:                             # %for.end21
	cmpl	$2083720093, -44(%rbp)  # imm = 0x7C330B9D
	jne	.LBB320_13
.LBB320_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB320_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB320_12
.Lfunc_end320:
	.size	reorder_long_term.257, .Lfunc_end320-reorder_long_term.257
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.258
	.type	remove_frame_from_dpb.258,@function
remove_frame_from_dpb.258:              # @remove_frame_from_dpb.258
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$83408371, -20(%rbp)    # imm = 0x4F8B5F3
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB321_6
# %bb.1:                                # %entry
	movq	.LJTI321_0(,%rax,8), %rax
	jmpq	*%rax
.LBB321_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB321_7
.LBB321_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB321_7
.LBB321_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB321_7
.LBB321_5:                              # %sw.bb10
	jmp	.LBB321_7
.LBB321_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB321_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB321_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB321_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB321_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB321_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB321_8
.LBB321_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$83408371, -20(%rbp)    # imm = 0x4F8B5F3
	jne	.LBB321_13
.LBB321_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB321_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB321_12
.Lfunc_end321:
	.size	remove_frame_from_dpb.258, .Lfunc_end321-remove_frame_from_dpb.258
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI321_0:
	.quad	.LBB321_5
	.quad	.LBB321_4
	.quad	.LBB321_3
	.quad	.LBB321_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.259
	.type	remove_frame_from_dpb.259,@function
remove_frame_from_dpb.259:              # @remove_frame_from_dpb.259
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1269950862, -20(%rbp)  # imm = 0x4BB1E98E
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB322_6
# %bb.1:                                # %entry
	movq	.LJTI322_0(,%rax,8), %rax
	jmpq	*%rax
.LBB322_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB322_7
.LBB322_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB322_7
.LBB322_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB322_7
.LBB322_5:                              # %sw.bb10
	jmp	.LBB322_7
.LBB322_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB322_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB322_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB322_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB322_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB322_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB322_8
.LBB322_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1269950862, -20(%rbp)  # imm = 0x4BB1E98E
	jne	.LBB322_13
.LBB322_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB322_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB322_12
.Lfunc_end322:
	.size	remove_frame_from_dpb.259, .Lfunc_end322-remove_frame_from_dpb.259
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI322_0:
	.quad	.LBB322_5
	.quad	.LBB322_4
	.quad	.LBB322_3
	.quad	.LBB322_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.260
	.type	unmark_long_term_field_for_reference_by_frame_idx.260,@function
unmark_long_term_field_for_reference_by_frame_idx.260: # @unmark_long_term_field_for_reference_by_frame_idx.260
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$786464157, -28(%rbp)   # imm = 0x2EE07D9D
	movl	%edi, -12(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB323_2
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB323_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB323_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB323_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB323_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB323_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB323_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB323_23
.LBB323_8:                              # %if.else
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB323_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB323_22
.LBB323_10:                             # %if.else21
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB323_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB323_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB323_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB323_15
.LBB323_14:                             # %if.then29
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_15:                             # %if.end32
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_17
.LBB323_16:                             # %if.else33
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_17:                             # %if.end36
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_21
.LBB323_18:                             # %if.else37
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB323_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_20:                             # %if.end45
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_21
.LBB323_21:                             # %if.end46
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_22
.LBB323_22:                             # %if.end47
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_23
.LBB323_23:                             # %if.end48
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_24
.LBB323_24:                             # %if.end49
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB323_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB323_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB323_42
.LBB323_27:                             # %if.else59
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB323_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB323_41
.LBB323_29:                             # %if.else67
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB323_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB323_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB323_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB323_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB323_34
.LBB323_33:                             # %if.then78
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_34:                             # %if.end81
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_36
.LBB323_35:                             # %if.else82
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_36:                             # %if.end85
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_40
.LBB323_37:                             # %if.else86
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB323_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB323_39:                             # %if.end95
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_40
.LBB323_40:                             # %if.end96
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_41
.LBB323_41:                             # %if.end97
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_42
.LBB323_42:                             # %if.end98
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_43
.LBB323_43:                             # %if.end99
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_44
.LBB323_44:                             # %if.end100
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_45
.LBB323_45:                             # %for.inc
                                        #   in Loop: Header=BB323_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_3
.LBB323_46:                             # %for.end
	cmpl	$786464157, -28(%rbp)   # imm = 0x2EE07D9D
	jne	.LBB323_48
.LBB323_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB323_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB323_47
.Lfunc_end323:
	.size	unmark_long_term_field_for_reference_by_frame_idx.260, .Lfunc_end323-unmark_long_term_field_for_reference_by_frame_idx.260
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.261  # -- Begin function fill_frame_num_gap.261
	.p2align	4, 0x90
	.type	fill_frame_num_gap.261,@function
fill_frame_num_gap.261:                 # @fill_frame_num_gap.261
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1814676893, -36(%rbp)  # imm = 0x6C29C59D
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB324_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB324_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB324_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB324_1
.LBB324_3:                              # %while.end
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1814676893, -36(%rbp)  # imm = 0x6C29C59D
	jne	.LBB324_5
.LBB324_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB324_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB324_4
.Lfunc_end324:
	.size	fill_frame_num_gap.261, .Lfunc_end324-fill_frame_num_gap.261
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.262
	.type	mm_assign_long_term_frame_idx.262,@function
mm_assign_long_term_frame_idx.262:      # @mm_assign_long_term_frame_idx.262
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1315542906, -28(%rbp)  # imm = 0x4E69977A
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB325_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB325_18
.LBB325_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB325_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB325_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB325_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB325_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB325_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB325_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB325_15
.LBB325_7:                              # %if.end
                                        #   in Loop: Header=BB325_3 Depth=1
	jmp	.LBB325_8
.LBB325_8:                              # %if.end8
                                        #   in Loop: Header=BB325_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB325_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB325_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB325_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB325_15
.LBB325_11:                             # %if.end20
                                        #   in Loop: Header=BB325_3 Depth=1
	jmp	.LBB325_12
.LBB325_12:                             # %if.end21
                                        #   in Loop: Header=BB325_3 Depth=1
	jmp	.LBB325_13
.LBB325_13:                             # %for.inc
                                        #   in Loop: Header=BB325_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_3
.LBB325_14:                             # %for.end.loopexit
	jmp	.LBB325_15
.LBB325_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB325_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB325_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB325_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1315542906, -28(%rbp)  # imm = 0x4E69977A
	jne	.LBB325_20
.LBB325_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB325_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB325_19
.Lfunc_end325:
	.size	mm_assign_long_term_frame_idx.262, .Lfunc_end325-mm_assign_long_term_frame_idx.262
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.263
	.type	unmark_long_term_field_for_reference_by_frame_idx.263,@function
unmark_long_term_field_for_reference_by_frame_idx.263: # @unmark_long_term_field_for_reference_by_frame_idx.263
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$734364135, -28(%rbp)   # imm = 0x2BC581E7
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB326_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB326_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB326_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB326_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB326_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB326_3 Depth=1
	cmpl	$1, -16(%rbp)
	jne	.LBB326_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB326_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB326_23
.LBB326_8:                              # %if.else
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB326_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB326_22
.LBB326_10:                             # %if.else21
                                        #   in Loop: Header=BB326_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB326_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB326_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB326_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB326_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB326_15
.LBB326_14:                             # %if.then29
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB326_15:                             # %if.end32
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_17
.LBB326_16:                             # %if.else33
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB326_17:                             # %if.end36
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_21
.LBB326_18:                             # %if.else37
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB326_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB326_20:                             # %if.end45
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_21
.LBB326_21:                             # %if.end46
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_22
.LBB326_22:                             # %if.end47
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_23
.LBB326_23:                             # %if.end48
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_24
.LBB326_24:                             # %if.end49
                                        #   in Loop: Header=BB326_3 Depth=1
	cmpl	$2, -16(%rbp)
	jne	.LBB326_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB326_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB326_42
.LBB326_27:                             # %if.else59
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB326_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB326_41
.LBB326_29:                             # %if.else67
                                        #   in Loop: Header=BB326_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB326_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB326_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB326_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB326_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB326_34
.LBB326_33:                             # %if.then78
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB326_34:                             # %if.end81
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_36
.LBB326_35:                             # %if.else82
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB326_36:                             # %if.end85
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_40
.LBB326_37:                             # %if.else86
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB326_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB326_39:                             # %if.end95
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_40
.LBB326_40:                             # %if.end96
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_41
.LBB326_41:                             # %if.end97
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_42
.LBB326_42:                             # %if.end98
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_43
.LBB326_43:                             # %if.end99
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_44
.LBB326_44:                             # %if.end100
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_45
.LBB326_45:                             # %for.inc
                                        #   in Loop: Header=BB326_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_3
.LBB326_46:                             # %for.end
	cmpl	$734364135, -28(%rbp)   # imm = 0x2BC581E7
	jne	.LBB326_48
.LBB326_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB326_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB326_47
.Lfunc_end326:
	.size	unmark_long_term_field_for_reference_by_frame_idx.263, .Lfunc_end326-unmark_long_term_field_for_reference_by_frame_idx.263
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.264
	.type	compare_pic_by_poc_desc.264,@function
compare_pic_by_poc_desc.264:            # @compare_pic_by_poc_desc.264
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$385392470, -16(%rbp)   # imm = 0x16F89F56
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB327_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB327_5
.LBB327_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB327_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB327_5
.LBB327_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB327_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$385392470, -16(%rbp)   # imm = 0x16F89F56
	jne	.LBB327_7
.LBB327_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB327_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB327_6
.Lfunc_end327:
	.size	compare_pic_by_poc_desc.264, .Lfunc_end327-compare_pic_by_poc_desc.264
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.265
	.type	remove_frame_from_dpb.265,@function
remove_frame_from_dpb.265:              # @remove_frame_from_dpb.265
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1919389819, -20(%rbp)  # imm = 0x7267907B
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB328_6
# %bb.1:                                # %entry
	movq	.LJTI328_0(,%rax,8), %rax
	jmpq	*%rax
.LBB328_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB328_7
.LBB328_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB328_7
.LBB328_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB328_7
.LBB328_5:                              # %sw.bb10
	jmp	.LBB328_7
.LBB328_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB328_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB328_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB328_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB328_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB328_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB328_8
.LBB328_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1919389819, -20(%rbp)  # imm = 0x7267907B
	jne	.LBB328_13
.LBB328_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB328_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB328_12
.Lfunc_end328:
	.size	remove_frame_from_dpb.265, .Lfunc_end328-remove_frame_from_dpb.265
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI328_0:
	.quad	.LBB328_5
	.quad	.LBB328_4
	.quad	.LBB328_3
	.quad	.LBB328_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.266
	.type	unmark_long_term_field_for_reference_by_frame_idx.266,@function
unmark_long_term_field_for_reference_by_frame_idx.266: # @unmark_long_term_field_for_reference_by_frame_idx.266
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2056819626, -28(%rbp)  # imm = 0x7A9893AA
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB329_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB329_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB329_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB329_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB329_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB329_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB329_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB329_23
.LBB329_8:                              # %if.else
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB329_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB329_22
.LBB329_10:                             # %if.else21
                                        #   in Loop: Header=BB329_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB329_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB329_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB329_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB329_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB329_15
.LBB329_14:                             # %if.then29
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB329_15:                             # %if.end32
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_17
.LBB329_16:                             # %if.else33
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB329_17:                             # %if.end36
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_21
.LBB329_18:                             # %if.else37
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB329_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB329_20:                             # %if.end45
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_21
.LBB329_21:                             # %if.end46
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_22
.LBB329_22:                             # %if.end47
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_23
.LBB329_23:                             # %if.end48
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_24
.LBB329_24:                             # %if.end49
                                        #   in Loop: Header=BB329_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB329_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB329_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB329_42
.LBB329_27:                             # %if.else59
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB329_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB329_41
.LBB329_29:                             # %if.else67
                                        #   in Loop: Header=BB329_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB329_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB329_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB329_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB329_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB329_34
.LBB329_33:                             # %if.then78
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB329_34:                             # %if.end81
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_36
.LBB329_35:                             # %if.else82
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB329_36:                             # %if.end85
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_40
.LBB329_37:                             # %if.else86
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB329_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB329_39:                             # %if.end95
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_40
.LBB329_40:                             # %if.end96
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_41
.LBB329_41:                             # %if.end97
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_42
.LBB329_42:                             # %if.end98
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_43
.LBB329_43:                             # %if.end99
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_44
.LBB329_44:                             # %if.end100
                                        #   in Loop: Header=BB329_3 Depth=1
	jmp	.LBB329_45
.LBB329_45:                             # %for.inc
                                        #   in Loop: Header=BB329_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_3
.LBB329_46:                             # %for.end
	cmpl	$2056819626, -28(%rbp)  # imm = 0x7A9893AA
	jne	.LBB329_48
.LBB329_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB329_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB329_47
.Lfunc_end329:
	.size	unmark_long_term_field_for_reference_by_frame_idx.266, .Lfunc_end329-unmark_long_term_field_for_reference_by_frame_idx.266
	.cfi_endproc
                                        # -- End function
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"undefined level"
	.size	.L.str, 16

	.type	dpb,@object             # @dpb
	.comm	dpb,64,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"DPB size at specified level is smaller than the specified number of reference frames. This is not allowed.\n"
	.size	.L.str.1, 108

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"init_dpb: dpb->fs"
	.size	.L.str.2, 18

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"init_dpb: dpb->fs_ref"
	.size	.L.str.3, 22

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"init_dpb: dpb->fs_ltref"
	.size	.L.str.4, 24

	.type	listX,@object           # @listX
	.comm	listX,48,16
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"init_dpb: listX[i]"
	.size	.L.str.5, 19

	.type	listXsize,@object       # @listXsize
	.comm	listXsize,24,16
	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"alloc_frame_store: f"
	.size	.L.str.6, 21

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"alloc_storable_picture: s"
	.size	.L.str.7, 26

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"alloc_storable_picture: s->mb_field"
	.size	.L.str.8, 36

	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"init_lists: fs_list0"
	.size	.L.str.9, 21

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"init_lists: fs_listlt"
	.size	.L.str.10, 22

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"init_lists: fs_list1"
	.size	.L.str.11, 21

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"Invalid remapping_of_pic_nums_idc command"
	.size	.L.str.12, 42

	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"duplicate frame_num im short-term reference picture buffer"
	.size	.L.str.13, 59

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"replace_top_pic_with_frame: error storing reference frame (top field not found)"
	.size	.L.str.14, 80

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"alloc_ref_pic_list_reordering_buffer: remapping_of_pic_nums_idc_l0"
	.size	.L.str.15, 67

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"alloc_ref_pic_list_reordering_buffer: abs_diff_pic_num_minus1_l0"
	.size	.L.str.16, 65

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"alloc_ref_pic_list_reordering_buffer: long_term_pic_idx_l0"
	.size	.L.str.17, 59

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"alloc_ref_pic_list_reordering_buffer: remapping_of_pic_nums_idc_l1"
	.size	.L.str.18, 67

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"alloc_ref_pic_list_reordering_buffer: abs_diff_pic_num_minus1_l1"
	.size	.L.str.19, 65

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"alloc_ref_pic_list_reordering_buffer: long_term_pic_idx_l1"
	.size	.L.str.20, 59

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"alloc_colocated: s"
	.size	.L.str.21, 19

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	Co_located,@object      # @Co_located
	.bss
	.globl	Co_located
	.p2align	3
Co_located:
	.quad	0
	.size	Co_located, 8

	.type	.L.str.22,@object       # @.str.22
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.22:
	.asciz	"memory_management_control_operation = 0 not last operation in buffer"
	.size	.L.str.22, 69

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"invalid memory_management_control_operation in buffer"
	.size	.L.str.23, 54

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"field for long term marking not found"
	.size	.L.str.24, 38

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"Warning: reference frame for long term marking not found\n"
	.size	.L.str.25, 58

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"Warning: assigning long_term_frame_idx different from other field\n"
	.size	.L.str.26, 67

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"Warning: reference field for long term marking not found\n"
	.size	.L.str.27, 58

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"Cannot determine smallest POC, DPB empty."
	.size	.L.str.28, 42

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"invalid frame store type"
	.size	.L.str.29, 25

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"Cannot output frame, DPB empty."
	.size	.L.str.30, 32

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	"no frames for output available"
	.size	.L.str.31, 31

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"output POC must be in ascending order"
	.size	.L.str.32, 38


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
